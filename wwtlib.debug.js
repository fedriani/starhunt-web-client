//! wwtlib.debug.js
//

(function() {

////////////////////////////////////////////////////////////////////////////////
// DAY_OF_WEEK

window.DAY_OF_WEEK = function() { 
    /// <field name="SUNDAY" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="MONDAY" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="TUESDAY" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="WEDNESDAY" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="THURSDAY" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="FRIDAY" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="SATURDAY" type="Number" integer="true" static="true">
    /// </field>
};
DAY_OF_WEEK.prototype = {
    SUNDAY: 0, 
    MONDAY: 1, 
    TUESDAY: 2, 
    WEDNESDAY: 3, 
    THURSDAY: 4, 
    FRIDAY: 5, 
    SATURDAY: 6
}
DAY_OF_WEEK.registerEnum('DAY_OF_WEEK', false);


////////////////////////////////////////////////////////////////////////////////
// EO

window.EO = function() { 
    /// <field name="SUN" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="MERCURY" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="VENUS" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="MARS" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="JUPITER" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="SATURN" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="URANUS" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="NEPTUNE" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="PLUTO" type="Number" integer="true" static="true">
    /// </field>
};
EO.prototype = {
    SUN: 0, 
    MERCURY: 1, 
    VENUS: 2, 
    MARS: 3, 
    JUPITER: 4, 
    SATURN: 5, 
    URANUS: 6, 
    NEPTUNE: 7, 
    PLUTO: 8
}
EO.registerEnum('EO', false);


////////////////////////////////////////////////////////////////////////////////
// GFX

window.GFX = function GFX() {
    /// <field name="g_ACft" type="Array" elementType="ACFT" static="true">
    /// </field>
    /// <field name="deltaTTable" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="g_L0EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L5EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B0EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R0EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R1EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R2EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R3EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R4EarthCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1EarthCoefficientsJ2000" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2EarthCoefficientsJ2000" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3EarthCoefficientsJ2000" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4EarthCoefficientsJ2000" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1EarthCoefficientsJ2000" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2EarthCoefficientsJ2000" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3EarthCoefficientsJ2000" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4EarthCoefficientsJ2000" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L0JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L5JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B0JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B5JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R0JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R1JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R2JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R3JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R4JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R5JupiterCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L0MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L5MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B0MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R0MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R1MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R2MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R3MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R4MarsCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L0MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L5MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B0MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R0MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R1MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R2MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R3MercuryCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_MoonCoefficients1" type="Array" elementType="MoonCoefficient1" static="true">
    /// </field>
    /// <field name="g_MoonCoefficients2" type="Array" elementType="MoonCoefficient2" static="true">
    /// </field>
    /// <field name="g_MoonCoefficients3" type="Array" elementType="MoonCoefficient1" static="true">
    /// </field>
    /// <field name="g_MoonCoefficients4" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="g_MoonPerigeeApogeeCoefficients1" type="Array" elementType="MPAC" static="true">
    /// </field>
    /// <field name="g_MoonPerigeeApogeeCoefficients2" type="Array" elementType="MPAC" static="true">
    /// </field>
    /// <field name="g_MoonPerigeeApogeeCoefficients3" type="Array" elementType="MPAC" static="true">
    /// </field>
    /// <field name="g_MoonPerigeeApogeeCoefficients4" type="Array" elementType="MPAC" static="true">
    /// </field>
    /// <field name="g_L0NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B0NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R0NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R1NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R2NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R3NC" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_NuC" type="Array" elementType="NUC" static="true">
    /// </field>
    /// <field name="g_AAParallax_C1" type="Number" static="true">
    /// </field>
    /// <field name="g_PlutoArgumentCoefficients" type="Array" elementType="PlutoCoefficient1" static="true">
    /// </field>
    /// <field name="g_PlutoLongitudeCoefficients" type="Array" elementType="PlutoCoefficient2" static="true">
    /// </field>
    /// <field name="g_PlutoLatitudeCoefficients" type="Array" elementType="PlutoCoefficient2" static="true">
    /// </field>
    /// <field name="g_PlutoRadiusCoefficients" type="Array" elementType="PlutoCoefficient2" static="true">
    /// </field>
    /// <field name="g_L0SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L5SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B0SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B5SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R0SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R1SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R2SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R3SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R4SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R5SaturnCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L0UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B0UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R0UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R1UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R2UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R3UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R4UranusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L0VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L1VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L2VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L3VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L4VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_L5VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B0VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B1VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B2VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B3VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_B4VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R0VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R1VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R2VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R3VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
    /// <field name="g_R4VenusCoefficients" type="Array" elementType="VSC" static="true">
    /// </field>
}


////////////////////////////////////////////////////////////////////////////////
// ABR

window.ABR = function ABR() {
}
ABR.earthVelocity = function ABR$earthVelocity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="C3D"></returns>
    var T = (JD - 2451545) / 36525;
    var L2 = 3.1761467 + 1021.3285546 * T;
    var L3 = 1.7534703 + 628.3075849 * T;
    var L4 = 6.2034809 + 334.0612431 * T;
    var L5 = 0.5995465 + 52.9690965 * T;
    var L6 = 0.8740168 + 21.3299095 * T;
    var L7 = 5.4812939 + 7.4781599 * T;
    var L8 = 5.3118863 + 3.8133036 * T;
    var Ldash = 3.8103444 + 8399.6847337 * T;
    var D = 5.1984667 + 7771.3771486 * T;
    var Mdash = 2.3555559 + 8328.6914289 * T;
    var F = 1.6279052 + 8433.4661601 * T;
    var velocity = new C3D();
    var nAberrationCoefficients = GFX.g_ACft.length;
    for (var i = 0; i < nAberrationCoefficients; i++) {
        var Argument = GFX.g_ACft[i].l2 * L2 + GFX.g_ACft[i].l3 * L3 + GFX.g_ACft[i].l4 * L4 + GFX.g_ACft[i].l5 * L5 + GFX.g_ACft[i].l6 * L6 + GFX.g_ACft[i].l7 * L7 + GFX.g_ACft[i].l8 * L8 + GFX.g_ACft[i].ldash * Ldash + GFX.g_ACft[i].d * D + GFX.g_ACft[i].mdash * Mdash + GFX.g_ACft[i].f * F;
        velocity.x += (GFX.g_ACft[i].xsin + GFX.g_ACft[i].xsint * T) * Math.sin(Argument);
        velocity.x += (GFX.g_ACft[i].xcos + GFX.g_ACft[i].xcost * T) * Math.cos(Argument);
        velocity.y += (GFX.g_ACft[i].ysin + GFX.g_ACft[i].ysint * T) * Math.sin(Argument);
        velocity.y += (GFX.g_ACft[i].ycos + GFX.g_ACft[i].ycost * T) * Math.cos(Argument);
        velocity.z += (GFX.g_ACft[i].zsin + GFX.g_ACft[i].zsint * T) * Math.sin(Argument);
        velocity.z += (GFX.g_ACft[i].zcos + GFX.g_ACft[i].zcost * T) * Math.cos(Argument);
    }
    return velocity;
}
ABR.eclipticAberration = function ABR$eclipticAberration(Lambda, Beta, JD) {
    /// <param name="Lambda" type="Number">
    /// </param>
    /// <param name="Beta" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    var aberration = new COR();
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var e = 0.016708634 - 4.2037E-05 * T - 1.267E-07 * Tsquared;
    var pi = 102.93735 + 1.71946 * T + 0.00046 * Tsquared;
    var k = 20.49552;
    var SunLongitude = CAASun.geometricEclipticLongitude(JD);
    pi = CT.d2R(pi);
    Lambda = CT.d2R(Lambda);
    Beta = CT.d2R(Beta);
    SunLongitude = CT.d2R(SunLongitude);
    aberration.x = (-k * Math.cos(SunLongitude - Lambda) + e * k * Math.cos(pi - Lambda)) / Math.cos(Beta) / 3600;
    aberration.y = -k * Math.sin(Beta) * (Math.sin(SunLongitude - Lambda) - e * Math.sin(pi - Lambda)) / 3600;
    return aberration;
}
ABR.equatorialAberration = function ABR$equatorialAberration(Alpha, Delta, JD) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    Alpha = CT.d2R(Alpha * 15);
    Delta = CT.d2R(Delta);
    var cosAlpha = Math.cos(Alpha);
    var sinAlpha = Math.sin(Alpha);
    var cosDelta = Math.cos(Delta);
    var sinDelta = Math.sin(Delta);
    var velocity = ABR.earthVelocity(JD);
    var aberration = new COR();
    aberration.x = CT.r2H((velocity.y * cosAlpha - velocity.x * sinAlpha) / (17314463350 * cosDelta));
    aberration.y = CT.r2D(-(((velocity.x * cosAlpha + velocity.y * sinAlpha) * sinDelta - velocity.z * cosDelta) / 17314463350));
    return aberration;
}


////////////////////////////////////////////////////////////////////////////////
// ACFT

window.ACFT = function ACFT(L2, L3, L4, L5, L6, L7, L8, Ldash, D, Mdash, F, xsin, xsint, xcos, xcost, ysin, ysint, ycos, ycost, zsin, zsint, zcos, zcost) {
    /// <param name="L2" type="Number" integer="true">
    /// </param>
    /// <param name="L3" type="Number" integer="true">
    /// </param>
    /// <param name="L4" type="Number" integer="true">
    /// </param>
    /// <param name="L5" type="Number" integer="true">
    /// </param>
    /// <param name="L6" type="Number" integer="true">
    /// </param>
    /// <param name="L7" type="Number" integer="true">
    /// </param>
    /// <param name="L8" type="Number" integer="true">
    /// </param>
    /// <param name="Ldash" type="Number" integer="true">
    /// </param>
    /// <param name="D" type="Number" integer="true">
    /// </param>
    /// <param name="Mdash" type="Number" integer="true">
    /// </param>
    /// <param name="F" type="Number" integer="true">
    /// </param>
    /// <param name="xsin" type="Number" integer="true">
    /// </param>
    /// <param name="xsint" type="Number" integer="true">
    /// </param>
    /// <param name="xcos" type="Number" integer="true">
    /// </param>
    /// <param name="xcost" type="Number" integer="true">
    /// </param>
    /// <param name="ysin" type="Number" integer="true">
    /// </param>
    /// <param name="ysint" type="Number" integer="true">
    /// </param>
    /// <param name="ycos" type="Number" integer="true">
    /// </param>
    /// <param name="ycost" type="Number" integer="true">
    /// </param>
    /// <param name="zsin" type="Number" integer="true">
    /// </param>
    /// <param name="zsint" type="Number" integer="true">
    /// </param>
    /// <param name="zcos" type="Number" integer="true">
    /// </param>
    /// <param name="zcost" type="Number" integer="true">
    /// </param>
    /// <field name="l2" type="Number" integer="true">
    /// </field>
    /// <field name="l3" type="Number" integer="true">
    /// </field>
    /// <field name="l4" type="Number" integer="true">
    /// </field>
    /// <field name="l5" type="Number" integer="true">
    /// </field>
    /// <field name="l6" type="Number" integer="true">
    /// </field>
    /// <field name="l7" type="Number" integer="true">
    /// </field>
    /// <field name="l8" type="Number" integer="true">
    /// </field>
    /// <field name="ldash" type="Number" integer="true">
    /// </field>
    /// <field name="d" type="Number" integer="true">
    /// </field>
    /// <field name="mdash" type="Number" integer="true">
    /// </field>
    /// <field name="f" type="Number" integer="true">
    /// </field>
    /// <field name="xsin" type="Number" integer="true">
    /// </field>
    /// <field name="xsint" type="Number" integer="true">
    /// </field>
    /// <field name="xcos" type="Number" integer="true">
    /// </field>
    /// <field name="xcost" type="Number" integer="true">
    /// </field>
    /// <field name="ysin" type="Number" integer="true">
    /// </field>
    /// <field name="ysint" type="Number" integer="true">
    /// </field>
    /// <field name="ycos" type="Number" integer="true">
    /// </field>
    /// <field name="ycost" type="Number" integer="true">
    /// </field>
    /// <field name="zsin" type="Number" integer="true">
    /// </field>
    /// <field name="zsint" type="Number" integer="true">
    /// </field>
    /// <field name="zcos" type="Number" integer="true">
    /// </field>
    /// <field name="zcost" type="Number" integer="true">
    /// </field>
    this.l2 = L2;
    this.l3 = L3;
    this.l4 = L4;
    this.l5 = L5;
    this.l6 = L6;
    this.l7 = L7;
    this.l8 = L8;
    this.ldash = Ldash;
    this.d = D;
    this.mdash = Mdash;
    this.f = F;
    this.xsin = xsin;
    this.xsint = xsint;
    this.xcos = xcos;
    this.xcost = xcost;
    this.ysin = ysin;
    this.ysint = ysint;
    this.ycos = ycos;
    this.ycost = ycost;
    this.zsin = zsin;
    this.zsint = zsint;
    this.zcos = zcos;
    this.zcost = zcost;
}
ACFT.prototype = {
    l2: 0,
    l3: 0,
    l4: 0,
    l5: 0,
    l6: 0,
    l7: 0,
    l8: 0,
    ldash: 0,
    d: 0,
    mdash: 0,
    f: 0,
    xsin: 0,
    xsint: 0,
    xcos: 0,
    xcost: 0,
    ysin: 0,
    ysint: 0,
    ycos: 0,
    ycost: 0,
    zsin: 0,
    zsint: 0,
    zcos: 0,
    zcost: 0
}


////////////////////////////////////////////////////////////////////////////////
// ASEP

window.ASEP = function ASEP() {
}
ASEP.separation = function ASEP$separation(Alpha1, Delta1, Alpha2, Delta2) {
    /// <param name="Alpha1" type="Number">
    /// </param>
    /// <param name="Delta1" type="Number">
    /// </param>
    /// <param name="Alpha2" type="Number">
    /// </param>
    /// <param name="Delta2" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    Delta1 = CT.d2R(Delta1);
    Delta2 = CT.d2R(Delta2);
    Alpha1 = CT.h2R(Alpha1);
    Alpha2 = CT.h2R(Alpha2);
    var x = Math.cos(Delta1) * Math.sin(Delta2) - Math.sin(Delta1) * Math.cos(Delta2) * Math.cos(Alpha2 - Alpha1);
    var y = Math.cos(Delta2) * Math.sin(Alpha2 - Alpha1);
    var z = Math.sin(Delta1) * Math.sin(Delta2) + Math.cos(Delta1) * Math.cos(Delta2) * Math.cos(Alpha2 - Alpha1);
    var vvalue = Math.atan2(Math.sqrt(x * x + y * y), z);
    vvalue = CT.r2D(vvalue);
    if (vvalue < 0) {
        vvalue += 180;
    }
    return vvalue;
}
ASEP.positionAngle = function ASEP$positionAngle(alpha1, delta1, alpha2, delta2) {
    /// <param name="alpha1" type="Number">
    /// </param>
    /// <param name="delta1" type="Number">
    /// </param>
    /// <param name="alpha2" type="Number">
    /// </param>
    /// <param name="delta2" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Alpha1;
    var Delta1;
    var Alpha2;
    var Delta2;
    Delta1 = CT.d2R(delta1);
    Delta2 = CT.d2R(delta2);
    Alpha1 = CT.h2R(alpha1);
    Alpha2 = CT.h2R(alpha2);
    var DeltaAlpha = Alpha1 - Alpha2;
    var demoninator = Math.cos(Delta2) * Math.tan(Delta1) - Math.sin(Delta2) * Math.cos(DeltaAlpha);
    var numerator = Math.sin(DeltaAlpha);
    var vvalue = Math.atan2(numerator, demoninator);
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
ASEP.distanceFromGreatArc = function ASEP$distanceFromGreatArc(Alpha1, Delta1, Alpha2, Delta2, Alpha3, Delta3) {
    /// <param name="Alpha1" type="Number">
    /// </param>
    /// <param name="Delta1" type="Number">
    /// </param>
    /// <param name="Alpha2" type="Number">
    /// </param>
    /// <param name="Delta2" type="Number">
    /// </param>
    /// <param name="Alpha3" type="Number">
    /// </param>
    /// <param name="Delta3" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    Delta1 = CT.d2R(Delta1);
    Delta2 = CT.d2R(Delta2);
    Delta3 = CT.d2R(Delta3);
    Alpha1 = CT.h2R(Alpha1);
    Alpha2 = CT.h2R(Alpha2);
    Alpha3 = CT.h2R(Alpha3);
    var X1 = Math.cos(Delta1) * Math.cos(Alpha1);
    var X2 = Math.cos(Delta2) * Math.cos(Alpha2);
    var Y1 = Math.cos(Delta1) * Math.sin(Alpha1);
    var Y2 = Math.cos(Delta2) * Math.sin(Alpha2);
    var Z1 = Math.sin(Delta1);
    var Z2 = Math.sin(Delta2);
    var A = Y1 * Z2 - Z1 * Y2;
    var B = Z1 * X2 - X1 * Z2;
    var C = X1 * Y2 - Y1 * X2;
    var m = Math.tan(Alpha3);
    var n = Math.tan(Delta3) / Math.cos(Alpha3);
    var vvalue = Math.asin((A + B * m + C * n) / (Math.sqrt(A * A + B * B + C * C) * Math.sqrt(1 + m * m + n * n)));
    vvalue = CT.r2D(vvalue);
    if (vvalue < 0) {
        vvalue = Math.abs(vvalue);
    }
    return vvalue;
}


////////////////////////////////////////////////////////////////////////////////
// COR

window.COR = function COR() {
    /// <field name="x" type="Number">
    /// </field>
    /// <field name="y" type="Number">
    /// </field>
    this.x = 0;
    this.y = 0;
}
COR.create = function COR$create(x, y) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    var item = new COR();
    item.x = x;
    item.y = y;
    return item;
}
COR.prototype = {
    x: 0,
    y: 0
}


////////////////////////////////////////////////////////////////////////////////
// C3D

window.C3D = function C3D() {
    /// <field name="x" type="Number">
    /// </field>
    /// <field name="y" type="Number">
    /// </field>
    /// <field name="z" type="Number">
    /// </field>
    this.x = 0;
    this.y = 0;
    this.z = 0;
}
C3D.create = function C3D$create(x, y, z) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <param name="z" type="Number">
    /// </param>
    /// <returns type="C3D"></returns>
    var item = new C3D();
    item.x = x;
    item.y = y;
    item.z = z;
    return item;
}
C3D.prototype = {
    x: 0,
    y: 0,
    z: 0
}


////////////////////////////////////////////////////////////////////////////////
// CT

window.CT = function CT() {
}
CT.eq2Ec = function CT$eq2Ec(Alpha, Delta, Epsilon) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="Epsilon" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    Epsilon = CT.d2R(Epsilon);
    var Ecliptic = new COR();
    Ecliptic.x = CT.r2D(Math.atan2(Math.sin(Alpha) * Math.cos(Epsilon) + Math.tan(Delta) * Math.sin(Epsilon), Math.cos(Alpha)));
    if (Ecliptic.x < 0) {
        Ecliptic.x += 360;
    }
    Ecliptic.y = CT.r2D(Math.asin(Math.sin(Delta) * Math.cos(Epsilon) - Math.cos(Delta) * Math.sin(Epsilon) * Math.sin(Alpha)));
    return Ecliptic;
}
CT.ec2Eq = function CT$ec2Eq(Lambda, Beta, Epsilon) {
    /// <param name="Lambda" type="Number">
    /// </param>
    /// <param name="Beta" type="Number">
    /// </param>
    /// <param name="Epsilon" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    Lambda = CT.d2R(Lambda);
    Beta = CT.d2R(Beta);
    Epsilon = CT.d2R(Epsilon);
    var Equatorial = new COR();
    Equatorial.x = CT.r2H(Math.atan2(Math.sin(Lambda) * Math.cos(Epsilon) - Math.tan(Beta) * Math.sin(Epsilon), Math.cos(Lambda)));
    if (Equatorial.x < 0) {
        Equatorial.x += 24;
    }
    Equatorial.y = CT.r2D(Math.asin(Math.sin(Beta) * Math.cos(Epsilon) + Math.cos(Beta) * Math.sin(Epsilon) * Math.sin(Lambda)));
    return Equatorial;
}
CT.eq2H = function CT$eq2H(LocalHourAngle, Delta, Latitude) {
    /// <param name="LocalHourAngle" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="Latitude" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    LocalHourAngle = CT.h2R(LocalHourAngle);
    Delta = CT.d2R(Delta);
    Latitude = CT.d2R(Latitude);
    var Horizontal = new COR();
    Horizontal.x = CT.r2D(Math.atan2(Math.sin(LocalHourAngle), Math.cos(LocalHourAngle) * Math.sin(Latitude) - Math.tan(Delta) * Math.cos(Latitude)));
    if (Horizontal.x < 0) {
        Horizontal.x += 360;
    }
    Horizontal.y = CT.r2D(Math.asin(Math.sin(Latitude) * Math.sin(Delta) + Math.cos(Latitude) * Math.cos(Delta) * Math.cos(LocalHourAngle)));
    return Horizontal;
}
CT.h2Eq = function CT$h2Eq(Azimuth, Altitude, Latitude) {
    /// <param name="Azimuth" type="Number">
    /// </param>
    /// <param name="Altitude" type="Number">
    /// </param>
    /// <param name="Latitude" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    Azimuth = CT.d2R(Azimuth);
    Altitude = CT.d2R(Altitude);
    Latitude = CT.d2R(Latitude);
    var Equatorial = new COR();
    Equatorial.x = CT.r2H(Math.atan2(Math.sin(Azimuth), Math.cos(Azimuth) * Math.sin(Latitude) + Math.tan(Altitude) * Math.cos(Latitude)));
    if (Equatorial.x < 0) {
        Equatorial.x += 24;
    }
    Equatorial.y = CT.r2D(Math.asin(Math.sin(Latitude) * Math.sin(Altitude) - Math.cos(Latitude) * Math.cos(Altitude) * Math.cos(Azimuth)));
    return Equatorial;
}
CT.eq2G = function CT$eq2G(Alpha, Delta) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    Alpha = 192.25 - CT.h2D(Alpha);
    Alpha = CT.d2R(Alpha);
    Delta = CT.d2R(Delta);
    var Galactic = new COR();
    Galactic.x = CT.r2D(Math.atan2(Math.sin(Alpha), Math.cos(Alpha) * Math.sin(CT.d2R(27.4)) - Math.tan(Delta) * Math.cos(CT.d2R(27.4))));
    Galactic.x = 303 - Galactic.x;
    if (Galactic.x >= 360) {
        Galactic.x -= 360;
    }
    Galactic.y = CT.r2D(Math.asin(Math.sin(Delta) * Math.sin(CT.d2R(27.4)) + Math.cos(Delta) * Math.cos(CT.d2R(27.4)) * Math.cos(Alpha)));
    return Galactic;
}
CT.g2Eq = function CT$g2Eq(l, b) {
    /// <param name="l" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    l -= 123;
    l = CT.d2R(l);
    b = CT.d2R(b);
    var Equatorial = new COR();
    Equatorial.x = CT.r2D(Math.atan2(Math.sin(l), Math.cos(l) * Math.sin(CT.d2R(27.4)) - Math.tan(b) * Math.cos(CT.d2R(27.4))));
    Equatorial.x += 12.25;
    if (Equatorial.x < 0) {
        Equatorial.x += 360;
    }
    Equatorial.x = CT.d2H(Equatorial.x);
    Equatorial.y = CT.r2D(Math.asin(Math.sin(b) * Math.sin(CT.d2R(27.4)) + Math.cos(b) * Math.cos(CT.d2R(27.4)) * Math.cos(l)));
    return Equatorial;
}
CT.d2R = function CT$d2R(Degrees) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Degrees * 0.0174532925199433;
}
CT.r2D = function CT$r2D(Radians) {
    /// <param name="Radians" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Radians * 57.2957795130823;
}
CT.r2H = function CT$r2H(Radians) {
    /// <param name="Radians" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Radians * 3.81971863420549;
}
CT.h2R = function CT$h2R(Hours) {
    /// <param name="Hours" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Hours * 0.261799387799149;
}
CT.h2D = function CT$h2D(Hours) {
    /// <param name="Hours" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Hours * 15;
}
CT.d2H = function CT$d2H(Degrees) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Degrees / 15;
}
CT.PI = function CT$PI() {
    /// <returns type="Number"></returns>
    return 3.14159265358979;
}
CT.m360 = function CT$m360(Degrees) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Degrees - Math.floor(Degrees / 360) * 360;
}
CT.m24 = function CT$m24(HourAngle) {
    /// <param name="HourAngle" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return HourAngle - Math.floor(HourAngle / 24) * 24;
}
CT.dmS2D = function CT$dmS2D(Degrees, Minutes, Seconds) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <param name="Minutes" type="Number">
    /// </param>
    /// <param name="Seconds" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CT.dmS2Dp(Degrees, Minutes, Seconds, true);
}
CT.dmS2Dp = function CT$dmS2Dp(Degrees, Minutes, Seconds, bPositive) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <param name="Minutes" type="Number">
    /// </param>
    /// <param name="Seconds" type="Number">
    /// </param>
    /// <param name="bPositive" type="Boolean">
    /// </param>
    /// <returns type="Number"></returns>
    if (!bPositive) {
    }
    if (bPositive) {
        return Degrees + Minutes / 60 + Seconds / 3600;
    }
    else {
        return -Degrees - Minutes / 60 - Seconds / 3600;
    }
}


////////////////////////////////////////////////////////////////////////////////
// CalD

window.CalD = function CalD() {
    /// <field name="year" type="Number" integer="true">
    /// </field>
    /// <field name="month" type="Number" integer="true">
    /// </field>
    /// <field name="day" type="Number" integer="true">
    /// </field>
    this.year = 0;
    this.month = 0;
    this.day = 0;
}
CalD.create = function CalD$create(year, month, day) {
    /// <param name="year" type="Number" integer="true">
    /// </param>
    /// <param name="month" type="Number" integer="true">
    /// </param>
    /// <param name="day" type="Number" integer="true">
    /// </param>
    /// <returns type="CalD"></returns>
    var item = new CalD();
    item.year = year;
    item.month = month;
    item.day = day;
    return item;
}
CalD.prototype = {
    year: 0,
    month: 0,
    day: 0
}


////////////////////////////////////////////////////////////////////////////////
// DT

window.DT = function DT() {
    /// <field name="m_dblJulian" type="Number">
    /// </field>
    /// <field name="m_bGregorianCalendar" type="Boolean">
    /// </field>
    this.m_dblJulian = 0;
    this.m_bGregorianCalendar = false;
}
DT.create = function DT$create(Year, Month, Day, bGregorianCalendar) {
    /// <param name="Year" type="Number" integer="true">
    /// </param>
    /// <param name="Month" type="Number" integer="true">
    /// </param>
    /// <param name="Day" type="Number">
    /// </param>
    /// <param name="bGregorianCalendar" type="Boolean">
    /// </param>
    /// <returns type="DT"></returns>
    var item = new DT();
    item.set(Year, Month, Day, 0, 0, 0, bGregorianCalendar);
    return item;
}
DT.createHMS = function DT$createHMS(Year, Month, Day, Hour, Minute, Second, bGregorianCalendar) {
    /// <param name="Year" type="Number" integer="true">
    /// </param>
    /// <param name="Month" type="Number" integer="true">
    /// </param>
    /// <param name="Day" type="Number">
    /// </param>
    /// <param name="Hour" type="Number">
    /// </param>
    /// <param name="Minute" type="Number">
    /// </param>
    /// <param name="Second" type="Number">
    /// </param>
    /// <param name="bGregorianCalendar" type="Boolean">
    /// </param>
    /// <returns type="DT"></returns>
    var item = new DT();
    item.set(Year, Month, Day, Hour, Minute, Second, bGregorianCalendar);
    return item;
}
DT.createJD = function DT$createJD(JD, bGregorianCalendar) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <param name="bGregorianCalendar" type="Boolean">
    /// </param>
    /// <returns type="DT"></returns>
    var item = new DT();
    item.setJD(JD, bGregorianCalendar);
    return item;
}
DT.dateToJD = function DT$dateToJD(Year, Month, Day, bGregorianCalendar) {
    /// <param name="Year" type="Number" integer="true">
    /// </param>
    /// <param name="Month" type="Number" integer="true">
    /// </param>
    /// <param name="Day" type="Number">
    /// </param>
    /// <param name="bGregorianCalendar" type="Boolean">
    /// </param>
    /// <returns type="Number"></returns>
    var Y = Year;
    var M = Month;
    if (M < 3) {
        Y = Y - 1;
        M = M + 12;
    }
    var A = 0;
    var B = 0;
    if (bGregorianCalendar) {
        A = parseInt((Y / 100));
        B = 2 - A + parseInt((A / 4));
    }
    return parseInt((365.25 * (Y + 4716))) + parseInt((30.6001 * (M + 1))) + Day + B - 1524.5;
}
DT.isLeap = function DT$isLeap(Year, bGregorianCalendar) {
    /// <param name="Year" type="Number" integer="true">
    /// </param>
    /// <param name="bGregorianCalendar" type="Boolean">
    /// </param>
    /// <returns type="Boolean"></returns>
    if (bGregorianCalendar) {
        if (!(Year % 100)) {
            return (!(Year % 400)) ? true : false;
        }
        else {
            return (!(Year % 4)) ? true : false;
        }
    }
    else {
        return (!(Year % 4)) ? true : false;
    }
}
DT.afterPapalReform = function DT$afterPapalReform(Year, Month, Day) {
    /// <param name="Year" type="Number" integer="true">
    /// </param>
    /// <param name="Month" type="Number" integer="true">
    /// </param>
    /// <param name="Day" type="Number">
    /// </param>
    /// <returns type="Boolean"></returns>
    return ((Year > 1582) || ((Year === 1582) && (Month > 10)) || ((Year === 1582) && (Month === 10) && (Day >= 15)));
}
DT.afterPapalReformJD = function DT$afterPapalReformJD(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Boolean"></returns>
    return (JD >= 2299160.5);
}
DT.dayOfYearJD = function DT$dayOfYearJD(JD, Year, bGregorianCalendar) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <param name="Year" type="Number" integer="true">
    /// </param>
    /// <param name="bGregorianCalendar" type="Boolean">
    /// </param>
    /// <returns type="Number"></returns>
    return JD - DT.dateToJD(Year, 1, 1, bGregorianCalendar) + 1;
}
DT.daysInMonthForMonth = function DT$daysInMonthForMonth(Month, bLeap) {
    /// <param name="Month" type="Number" integer="true">
    /// </param>
    /// <param name="bLeap" type="Boolean">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var MonthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 0 ];
    if (bLeap) {
        MonthLength[1]++;
    }
    return MonthLength[Month - 1];
}
DT.INT = function DT$INT(vvalue) {
    /// <param name="vvalue" type="Number">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    if (vvalue >= 0) {
        return parseInt(vvalue);
    }
    else {
        return parseInt((vvalue - 1));
    }
}
DT.prototype = {
    
    julian: function DT$julian() {
        /// <returns type="Number"></returns>
        return this.m_dblJulian;
    },
    
    day: function DT$day() {
        /// <returns type="Number" integer="true"></returns>
        var D = this.get();
        return parseInt(D[2]);
    },
    
    month: function DT$month() {
        /// <returns type="Number" integer="true"></returns>
        var D = this.get();
        return parseInt(D[1]);
    },
    
    year: function DT$year() {
        /// <returns type="Number" integer="true"></returns>
        var D = this.get();
        return parseInt(D[0]);
    },
    
    hour: function DT$hour() {
        /// <returns type="Number" integer="true"></returns>
        var D = this.get();
        return parseInt(D[3]);
    },
    
    minute: function DT$minute() {
        /// <returns type="Number" integer="true"></returns>
        var D = this.get();
        return parseInt(D[4]);
    },
    
    second: function DT$second() {
        /// <returns type="Number"></returns>
        var D = this.get();
        return parseInt(D[5]);
    },
    
    set: function DT$set(Year, Month, Day, Hour, Minute, Second, bGregorianCalendar) {
        /// <param name="Year" type="Number" integer="true">
        /// </param>
        /// <param name="Month" type="Number" integer="true">
        /// </param>
        /// <param name="Day" type="Number">
        /// </param>
        /// <param name="Hour" type="Number">
        /// </param>
        /// <param name="Minute" type="Number">
        /// </param>
        /// <param name="Second" type="Number">
        /// </param>
        /// <param name="bGregorianCalendar" type="Boolean">
        /// </param>
        var dblDay = Day + (Hour / 24) + (Minute / 1440) + (Second / 86400);
        this.setJD(DT.dateToJD(Year, Month, dblDay, bGregorianCalendar), bGregorianCalendar);
    },
    
    setJD: function DT$setJD(JD, bGregorianCalendar) {
        /// <param name="JD" type="Number">
        /// </param>
        /// <param name="bGregorianCalendar" type="Boolean">
        /// </param>
        this.m_dblJulian = JD;
        this.setInGregorianCalendar(bGregorianCalendar);
    },
    
    setInGregorianCalendar: function DT$setInGregorianCalendar(bGregorianCalendar) {
        /// <param name="bGregorianCalendar" type="Boolean">
        /// </param>
        var bAfterPapalReform = (this.m_dblJulian >= 2299160.5);
        this.m_bGregorianCalendar = bGregorianCalendar && bAfterPapalReform;
    },
    
    get: function DT$get() {
        /// <returns type="Array" elementType="Number"></returns>
        var Year;
        var Month;
        var Day;
        var Hour;
        var Minute;
        var Second;
        var JD = this.m_dblJulian + 0.5;
        var tempZ = Math.floor(JD);
        var F = JD - tempZ;
        var Z = parseInt(tempZ);
        var A;
        if (this.m_bGregorianCalendar) {
            var alpha = parseInt(((Z - 1867216.25) / 36524.25));
            A = Z + 1 + alpha - parseInt((alpha / 4));
        }
        else {
            A = Z;
        }
        var B = A + 1524;
        var C = parseInt(((B - 122.1) / 365.25));
        var D = parseInt((365.25 * C));
        var E = parseInt(((B - D) / 30.6001));
        var dblDay = B - D - parseInt((30.6001 * E)) + F;
        Day = parseInt(dblDay);
        if (E < 14) {
            Month = E - 1;
        }
        else {
            Month = E - 13;
        }
        if (Month > 2) {
            Year = C - 4716;
        }
        else {
            Year = C - 4715;
        }
        tempZ = Math.floor(dblDay);
        F = dblDay - tempZ;
        Hour = parseInt((F * 24));
        Minute = parseInt(((F - Hour / 24) * 1440));
        Second = (F - (Hour / 24) - (Minute / 1440)) * 86400;
        return [ Year, Month, Day, Hour, Minute, Second ];
    },
    
    dayOfWeek: function DT$dayOfWeek() {
        /// <returns type="DAY_OF_WEEK"></returns>
        return (parseInt((this.m_dblJulian + 1.5)) % 7);
    },
    
    dayOfYear: function DT$dayOfYear() {
        /// <returns type="Number"></returns>
        var year = parseInt(this.get()[0]);
        return DT.dayOfYearJD(this.m_dblJulian, year, DT.afterPapalReform(year, 1, 1));
    },
    
    daysInMonth: function DT$daysInMonth() {
        /// <returns type="Number" integer="true"></returns>
        var D = this.get();
        var Year = parseInt(D[0]);
        var Month = parseInt(D[1]);
        return DT.daysInMonthForMonth(Month, DT.isLeap(Year, this.m_bGregorianCalendar));
    },
    
    daysInYear: function DT$daysInYear() {
        /// <returns type="Number" integer="true"></returns>
        var D = this.get();
        var Year = parseInt(D[0]);
        if (DT.isLeap(Year, this.m_bGregorianCalendar)) {
            return 366;
        }
        else {
            return 365;
        }
    },
    
    leap: function DT$leap() {
        /// <returns type="Boolean"></returns>
        return DT.isLeap(this.year(), this.m_bGregorianCalendar);
    },
    
    inGregorianCalendar: function DT$inGregorianCalendar() {
        /// <returns type="Boolean"></returns>
        return this.m_bGregorianCalendar;
    },
    
    fractionalYear: function DT$fractionalYear() {
        /// <returns type="Number"></returns>
        var D = this.get();
        var Year = parseInt(D[0]);
        var Month = parseInt(D[1]);
        var Day = parseInt(D[2]);
        var Hour = parseInt(D[3]);
        var Minute = parseInt(D[4]);
        var Second = D[5];
        var DaysInYear;
        if (DT.isLeap(Year, this.m_bGregorianCalendar)) {
            DaysInYear = 366;
        }
        else {
            DaysInYear = 365;
        }
        return Year + ((this.m_dblJulian - DT.dateToJD(Year, 1, 1, DT.afterPapalReform(Year, 1, 1))) / DaysInYear);
    },
    
    m_dblJulian: 0,
    m_bGregorianCalendar: false
}


////////////////////////////////////////////////////////////////////////////////
// DYT

window.DYT = function DYT() {
}
DYT.deltaT = function DYT$deltaT(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var date = DT.createJD(JD, DT.afterPapalReformJD(JD));
    var y = date.fractionalYear();
    var T = (y - 2000) / 100;
    var Delta;
    if (y < 948) {
        Delta = 2177 + (497 * T) + (44.1 * T * T);
    }
    else if (y < 1620) {
        Delta = 102 + (102 * T) + (25.3 * T * T);
    }
    else if (y < 1998) {
        var Index = parseInt(((y - 1620) / 2));
        y = y / 2 - Index - 810;
        Delta = (GFX.deltaTTable[Index] + (GFX.deltaTTable[Index + 1] - GFX.deltaTTable[Index]) * y);
    }
    else if (y <= 2000) {
        var nLookupSize = GFX.deltaTTable.length;
        Delta = GFX.deltaTTable[nLookupSize - 1];
    }
    else if (y < 2100) {
        Delta = 102 + (102 * T) + (25.3 * T * T) + 0.37 * (y - 2100);
    }
    else {
        Delta = 102 + (102 * T) + (25.3 * T * T);
    }
    return Delta;
}


////////////////////////////////////////////////////////////////////////////////
// CAAEarth

window.CAAEarth = function CAAEarth() {
}
CAAEarth.eclipticLongitude = function CAAEarth$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0EarthCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0EarthCoefficients[i].a * Math.cos(GFX.g_L0EarthCoefficients[i].b + GFX.g_L0EarthCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1EarthCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1EarthCoefficients[i].a * Math.cos(GFX.g_L1EarthCoefficients[i].b + GFX.g_L1EarthCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2EarthCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2EarthCoefficients[i].a * Math.cos(GFX.g_L2EarthCoefficients[i].b + GFX.g_L2EarthCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3EarthCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3EarthCoefficients[i].a * Math.cos(GFX.g_L3EarthCoefficients[i].b + GFX.g_L3EarthCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4EarthCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4EarthCoefficients[i].a * Math.cos(GFX.g_L4EarthCoefficients[i].b + GFX.g_L4EarthCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5EarthCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
        L5 += GFX.g_L5EarthCoefficients[i].a * Math.cos(GFX.g_L5EarthCoefficients[i].b + GFX.g_L5EarthCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAAEarth.eclipticLatitude = function CAAEarth$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0EarthCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0EarthCoefficients[i].a * Math.cos(GFX.g_B0EarthCoefficients[i].b + GFX.g_B0EarthCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1EarthCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1EarthCoefficients[i].a * Math.cos(GFX.g_B1EarthCoefficients[i].b + GFX.g_B1EarthCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2EarthCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2EarthCoefficients[i].a * Math.cos(GFX.g_B2EarthCoefficients[i].b + GFX.g_B2EarthCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3EarthCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3EarthCoefficients[i].a * Math.cos(GFX.g_B3EarthCoefficients[i].b + GFX.g_B3EarthCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4EarthCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4EarthCoefficients[i].a * Math.cos(GFX.g_B4EarthCoefficients[i].b + GFX.g_B4EarthCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
CAAEarth.radiusVector = function CAAEarth$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nR0Coefficients = GFX.g_R0EarthCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
        R0 += GFX.g_R0EarthCoefficients[i].a * Math.cos(GFX.g_R0EarthCoefficients[i].b + GFX.g_R0EarthCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1EarthCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
        R1 += GFX.g_R1EarthCoefficients[i].a * Math.cos(GFX.g_R1EarthCoefficients[i].b + GFX.g_R1EarthCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2EarthCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
        R2 += GFX.g_R2EarthCoefficients[i].a * Math.cos(GFX.g_R2EarthCoefficients[i].b + GFX.g_R2EarthCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3EarthCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
        R3 += GFX.g_R3EarthCoefficients[i].a * Math.cos(GFX.g_R3EarthCoefficients[i].b + GFX.g_R3EarthCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4EarthCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
        R4 += GFX.g_R4EarthCoefficients[i].a * Math.cos(GFX.g_R4EarthCoefficients[i].b + GFX.g_R4EarthCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4) / 100000000;
}
CAAEarth.sunMeanAnomaly = function CAAEarth$sunMeanAnomaly(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(357.5291092 + 35999.0502909 * T - 0.0001536 * Tsquared + Tcubed / 24490000);
}
CAAEarth.eccentricity = function CAAEarth$eccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return 1 - 0.002516 * T - 7.4E-06 * Tsquared;
}
CAAEarth.eclipticLongitudeJ2000 = function CAAEarth$eclipticLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nL0Coefficients = GFX.g_L0EarthCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0EarthCoefficients[i].a * Math.cos(GFX.g_L0EarthCoefficients[i].b + GFX.g_L0EarthCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1EarthCoefficientsJ2000.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_L1EarthCoefficientsJ2000[i].b + GFX.g_L1EarthCoefficientsJ2000[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2EarthCoefficientsJ2000.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_L2EarthCoefficientsJ2000[i].b + GFX.g_L2EarthCoefficientsJ2000[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3EarthCoefficientsJ2000.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_L3EarthCoefficientsJ2000[i].b + GFX.g_L3EarthCoefficientsJ2000[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4EarthCoefficientsJ2000.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_L4EarthCoefficientsJ2000[i].b + GFX.g_L4EarthCoefficientsJ2000[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAAEarth.eclipticLatitudeJ2000 = function CAAEarth$eclipticLatitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0EarthCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0EarthCoefficients[i].a * Math.cos(GFX.g_B0EarthCoefficients[i].b + GFX.g_B0EarthCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1EarthCoefficientsJ2000.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_B1EarthCoefficientsJ2000[i].b + GFX.g_B1EarthCoefficientsJ2000[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2EarthCoefficientsJ2000.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_B2EarthCoefficientsJ2000[i].b + GFX.g_B2EarthCoefficientsJ2000[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3EarthCoefficientsJ2000.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_B3EarthCoefficientsJ2000[i].b + GFX.g_B3EarthCoefficientsJ2000[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4EarthCoefficientsJ2000.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_B4EarthCoefficientsJ2000[i].b + GFX.g_B4EarthCoefficientsJ2000[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}


////////////////////////////////////////////////////////////////////////////////
// VSC

window.VSC = function VSC(a, b, c) {
    /// <param name="a" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <param name="c" type="Number">
    /// </param>
    /// <field name="a" type="Number">
    /// </field>
    /// <field name="b" type="Number">
    /// </field>
    /// <field name="c" type="Number">
    /// </field>
    this.a = a;
    this.b = b;
    this.c = c;
}
VSC.prototype = {
    a: 0,
    b: 0,
    c: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAAEclipticalElementDetails

window.CAAEclipticalElementDetails = function CAAEclipticalElementDetails() {
    /// <field name="i" type="Number">
    /// </field>
    /// <field name="w" type="Number">
    /// </field>
    /// <field name="omega" type="Number">
    /// </field>
    this.i = 0;
    this.w = 0;
    this.omega = 0;
}
CAAEclipticalElementDetails.prototype = {
    i: 0,
    w: 0,
    omega: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAAEclipticalElements

window.CAAEclipticalElements = function CAAEclipticalElements() {
}
CAAEclipticalElements.calculate = function CAAEclipticalElements$calculate(i0, w0, omega0, JD0, JD) {
    /// <param name="i0" type="Number">
    /// </param>
    /// <param name="w0" type="Number">
    /// </param>
    /// <param name="omega0" type="Number">
    /// </param>
    /// <param name="JD0" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="CAAEclipticalElementDetails"></returns>
    var T = (JD0 - 2451545) / 36525;
    var Tsquared = T * T;
    var t = (JD - JD0) / 36525;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    var i0rad = CT.d2R(i0);
    var omega0rad = CT.d2R(omega0);
    var eta = (47.0029 - 0.06603 * T + 0.000598 * Tsquared) * t + (-0.03302 + 0.000598 * T) * tsquared + 6E-05 * tcubed;
    eta = CT.d2R(CT.dmS2D(0, 0, eta));
    var pi = 174.876384 * 3600 + 3289.4789 * T + 0.60622 * Tsquared - (869.8089 + 0.50491 * T) * t + 0.03536 * tsquared;
    pi = CT.d2R(CT.dmS2D(0, 0, pi));
    var p = (5029.0966 + 2.22226 * T - 4.2E-05 * Tsquared) * t + (1.11113 - 4.2E-05 * T) * tsquared - 6E-06 * tcubed;
    p = CT.d2R(CT.dmS2D(0, 0, p));
    var sini0rad = Math.sin(i0rad);
    var cosi0rad = Math.cos(i0rad);
    var sinomega0rad_pi = Math.sin(omega0rad - pi);
    var cosomega0rad_pi = Math.cos(omega0rad - pi);
    var sineta = Math.sin(eta);
    var coseta = Math.cos(eta);
    var A = sini0rad * sinomega0rad_pi;
    var B = -sineta * cosi0rad + coseta * sini0rad * cosomega0rad_pi;
    var irad = Math.asin(Math.sqrt(A * A + B * B));
    var details = new CAAEclipticalElementDetails();
    details.i = CT.r2D(irad);
    var cosi = cosi0rad * coseta + sini0rad * sineta * cosomega0rad_pi;
    if (cosi < 0) {
        details.i = 180 - details.i;
    }
    var phi = pi + p;
    details.omega = CT.m360(CT.r2D(Math.atan2(A, B) + phi));
    A = -sineta * sinomega0rad_pi;
    B = sini0rad * coseta - cosi0rad * sineta * cosomega0rad_pi;
    var deltaw = CT.r2D(Math.atan2(A, B));
    details.w = CT.m360(w0 + deltaw);
    return details;
}
CAAEclipticalElements.fK4B1950ToFK5J2000 = function CAAEclipticalElements$fK4B1950ToFK5J2000(i0, w0, omega0) {
    /// <param name="i0" type="Number">
    /// </param>
    /// <param name="w0" type="Number">
    /// </param>
    /// <param name="omega0" type="Number">
    /// </param>
    /// <returns type="CAAEclipticalElementDetails"></returns>
    var L = CT.d2R(5.19856209);
    var J = CT.d2R(0.00651966);
    var i0rad = CT.d2R(i0);
    var omega0rad = CT.d2R(omega0);
    var sini0rad = Math.sin(i0rad);
    var cosi0rad = Math.cos(i0rad);
    var cosJ = Math.cos(J);
    var sinJ = Math.sin(J);
    var W = L + omega0rad;
    var cosW = Math.cos(W);
    var sinW = Math.sin(W);
    var A = sinJ * sinW;
    var B = sini0rad * cosJ + cosi0rad * sinJ * cosW;
    var details = new CAAEclipticalElementDetails();
    details.i = CT.r2D(Math.asin(Math.sqrt(A * A + B * B)));
    var cosi = cosi0rad * cosJ - sini0rad * sinJ * cosW;
    if (cosi < 0) {
        details.i = 180 - details.i;
    }
    details.w = CT.m360(w0 + CT.r2D(Math.atan2(A, B)));
    details.omega = CT.m360(CT.r2D(Math.atan2(sini0rad * sinW, cosi0rad * sinJ + sini0rad * cosJ * cosW)) - 4.50001688);
    return details;
}


////////////////////////////////////////////////////////////////////////////////
// EPO

window.EPO = function EPO() {
}
EPO.mercuryMeanLongitude = function EPO$mercuryMeanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(252.250906 + 149474.0722491 * T + 0.0003035 * Tsquared + 1.8E-08 * Tcubed);
}
EPO.mercurySemimajorAxis = function EPO$mercurySemimajorAxis(UnnamedParameter1) {
    /// <param name="UnnamedParameter1" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 0.38709831;
}
EPO.mercuryEccentricity = function EPO$mercuryEccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.20563175 + 2.0407E-05 * T - 2.83E-08 * Tsquared - 1.8E-10 * Tcubed;
}
EPO.mercuryInclination = function EPO$mercuryInclination(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(7.004986 + 0.0018215 * T - 1.81E-05 * Tsquared + 5.6E-08 * Tcubed);
}
EPO.mercuryLongitudeAscendingNode = function EPO$mercuryLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(48.330893 + 1.1861883 * T + 0.00017542 * Tsquared + 2.15E-07 * Tcubed);
}
EPO.mercuryLongitudePerihelion = function EPO$mercuryLongitudePerihelion(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(77.456119 + 1.5564776 * T + 0.00029544 * Tsquared + 9E-09 * Tcubed);
}
EPO.venusMeanLongitude = function EPO$venusMeanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(181.979801 + 58519.2130302 * T + 0.00031014 * Tsquared + 1.5E-08 * Tcubed);
}
EPO.venusSemimajorAxis = function EPO$venusSemimajorAxis(UnnamedParameter1) {
    /// <param name="UnnamedParameter1" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 0.72332982;
}
EPO.venusEccentricity = function EPO$venusEccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.00677192 - 4.7765E-05 * T + 9.81E-08 * Tsquared + 4.6E-10 * Tcubed;
}
EPO.venusInclination = function EPO$venusInclination(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(3.394662 + 0.0010037 * T - 8.8E-07 * Tsquared - 7E-09 * Tcubed);
}
EPO.venusLongitudeAscendingNode = function EPO$venusLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(76.67992 + 0.9011206 * T + 0.00040618 * Tsquared - 9.3E-08 * Tcubed);
}
EPO.venusLongitudePerihelion = function EPO$venusLongitudePerihelion(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(131.563703 + 1.4022288 * T - 0.00107618 * Tsquared - 5.678E-06 * Tcubed);
}
EPO.earthMeanLongitude = function EPO$earthMeanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(100.466457 + 36000.7698278 * T + 0.00030322 * Tsquared + 2E-08 * Tcubed);
}
EPO.earthSemimajorAxis = function EPO$earthSemimajorAxis(UnnamedParameter1) {
    /// <param name="UnnamedParameter1" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 1.000001018;
}
EPO.earthEccentricity = function EPO$earthEccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.01670863 - 4.2037E-05 * T - 1.267E-07 * Tsquared + 1.4E-10 * Tcubed;
}
EPO.earthInclination = function EPO$earthInclination(UnnamedParameter1) {
    /// <param name="UnnamedParameter1" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 0;
}
EPO.earthLongitudePerihelion = function EPO$earthLongitudePerihelion(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(102.937348 + 1.17195366 * T + 0.00045688 * Tsquared - 1.8E-08 * Tcubed);
}
EPO.marsMeanLongitude = function EPO$marsMeanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(355.433 + 19141.6964471 * T + 0.00031052 * Tsquared + 1.6E-08 * Tcubed);
}
EPO.marsSemimajorAxis = function EPO$marsSemimajorAxis(UnnamedParameter1) {
    /// <param name="UnnamedParameter1" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 1.523679342;
}
EPO.marsEccentricity = function EPO$marsEccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.09340065 + 9.0484E-05 * T - 8.06E-08 * Tsquared - 2.5E-10 * Tcubed;
}
EPO.marsInclination = function EPO$marsInclination(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.849726 - 0.0006011 * T + 1.276E-05 * Tsquared - 7E-09 * Tcubed);
}
EPO.marsLongitudeAscendingNode = function EPO$marsLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(49.588093 + 0.7720959 * T + 1.557E-05 * Tsquared + 2.267E-06 * Tcubed);
}
EPO.marsLongitudePerihelion = function EPO$marsLongitudePerihelion(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(336.060234 + 1.8410449 * T + 0.00013477 * Tsquared + 5.36E-07 * Tcubed);
}
EPO.jupiterMeanLongitude = function EPO$jupiterMeanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(34.351519 + 3036.3027748 * T + 0.0002233 * Tsquared + 3.7E-08 * Tcubed);
}
EPO.jupiterSemimajorAxis = function EPO$jupiterSemimajorAxis(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    return 5.202603209 + 1.913E-07 * T;
}
EPO.jupiterEccentricity = function EPO$jupiterEccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.04849793 + 0.000163225 * T - 4.714E-07 * Tsquared - 2.01E-09 * Tcubed;
}
EPO.jupiterInclination = function EPO$jupiterInclination(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.303267 - 0.0054965 * T + 4.66E-06 * Tsquared - 2E-09 * Tcubed);
}
EPO.jupiterLongitudeAscendingNode = function EPO$jupiterLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(100.464407 + 1.0209774 * T + 0.00040315 * Tsquared + 4.04E-07 * Tcubed);
}
EPO.jupiterLongitudePerihelion = function EPO$jupiterLongitudePerihelion(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(14.331207 + 1.6126352 * T + 0.00103042 * Tsquared - 4.464E-06 * Tcubed);
}
EPO.saturnMeanLongitude = function EPO$saturnMeanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(50.077444 + 1223.5110686 * T + 0.00051908 * Tsquared - 3E-08 * Tcubed);
}
EPO.saturnSemimajorAxis = function EPO$saturnSemimajorAxis(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return 9.554909192 - 2.139E-06 * T + 4E-09 * Tsquared;
}
EPO.saturnEccentricity = function EPO$saturnEccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.05554814 - 0.0003446641 * T - 6.436E-07 * Tsquared + 3.4E-09 * Tcubed;
}
EPO.saturnInclination = function EPO$saturnInclination(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(2.488879 - 0.0037362 * T - 1.519E-05 * Tsquared + 8.7E-08 * Tcubed);
}
EPO.saturnLongitudeAscendingNode = function EPO$saturnLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(113.665503 + 0.877088 * T - 0.00012176 * Tsquared - 2.249E-06 * Tcubed);
}
EPO.saturnLongitudePerihelion = function EPO$saturnLongitudePerihelion(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(93.057237 + 1.19637613 * T + 0.00083753 * Tsquared + 4.928E-06 * Tcubed);
}
EPO.uranusMeanLongitude = function EPO$uranusMeanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(314.055005 + 429.8640561 * T + 0.0003039 * Tsquared + 2.6E-08 * Tcubed);
}
EPO.uranusSemimajorAxis = function EPO$uranusSemimajorAxis(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return 19.218446062 - 3.72E-08 * T + 9.8E-10 * Tsquared;
}
EPO.uranusEccentricity = function EPO$uranusEccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.04638122 - 2.7293E-05 * T + 7.89E-08 * Tsquared + 2.4E-10 * Tcubed;
}
EPO.uranusInclination = function EPO$uranusInclination(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(0.773197 + 0.0007744 * T + 3.749E-05 * Tsquared - 9.2E-08 * Tcubed);
}
EPO.uranusLongitudeAscendingNode = function EPO$uranusLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(74.005957 + 0.5211278 * T + 0.00133947 * Tsquared + 1.8484E-05 * Tcubed);
}
EPO.uranusLongitudePerihelion = function EPO$uranusLongitudePerihelion(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(173.005291 + 1.486379 * T + 0.00021406 * Tsquared + 4.34E-07 * Tcubed);
}
EPO.neptuneMeanLongitude = function EPO$neptuneMeanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(304.348665 + 219.8833092 * T + 0.00030882 * Tsquared + 1.8E-08 * Tcubed);
}
EPO.neptuneSemimajorAxis = function EPO$neptuneSemimajorAxis(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return 30.110386869 - 1.663E-07 * T + 6.9E-10 * Tsquared;
}
EPO.neptuneEccentricity = function EPO$neptuneEccentricity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tcubed = T * T * T;
    return 0.00945575 + 6.033E-06 * T - 5E-11 * Tcubed;
}
EPO.neptuneInclination = function EPO$neptuneInclination(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.769953 - 0.0093082 * T - 7.08E-06 * Tsquared + 2.7E-08 * Tcubed);
}
EPO.neptuneLongitudeAscendingNode = function EPO$neptuneLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(131.784057 + 1.1022039 * T + 0.00025952 * Tsquared - 6.37E-07 * Tcubed);
}
EPO.neptuneLongitudePerihelion = function EPO$neptuneLongitudePerihelion(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(48.120276 + 1.4262957 * T + 0.00038434 * Tsquared + 2E-08 * Tcubed);
}
EPO.mercuryMeanLongitudeJ2000 = function EPO$mercuryMeanLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(252.250906 + 149472.6746358 * T - 5.36E-06 * Tsquared + 2E-09 * Tcubed);
}
EPO.mercuryInclinationJ2000 = function EPO$mercuryInclinationJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(7.004986 - 0.0059516 * T + 8E-07 * Tsquared + 4.3E-08 * Tcubed);
}
EPO.mercuryLongitudeAscendingNodeJ2000 = function EPO$mercuryLongitudeAscendingNodeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(48.330893 - 0.1254227 * T - 8.833E-05 * Tsquared - 2E-07 * Tcubed);
}
EPO.mercuryLongitudePerihelionJ2000 = function EPO$mercuryLongitudePerihelionJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(77.456119 + 0.1588643 * T - 1.342E-05 * Tsquared - 7E-09 * Tcubed);
}
EPO.venusMeanLongitudeJ2000 = function EPO$venusMeanLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(181.979801 + 58517.815676 * T + 1.65E-06 * Tsquared - 2E-09 * Tcubed);
}
EPO.venusInclinationJ2000 = function EPO$venusInclinationJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(3.394662 - 0.0008568 * T - 3.244E-05 * Tsquared + 9E-09 * Tcubed);
}
EPO.venusLongitudeAscendingNodeJ2000 = function EPO$venusLongitudeAscendingNodeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(76.67992 - 0.2780134 * T - 0.00014257 * Tsquared - 1.64E-07 * Tcubed);
}
EPO.venusLongitudePerihelionJ2000 = function EPO$venusLongitudePerihelionJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(131.563703 + 0.0048746 * T - 0.00138467 * Tsquared - 5.695E-06 * Tcubed);
}
EPO.earthMeanLongitudeJ2000 = function EPO$earthMeanLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(100.466457 + 35999.3728565 * T - 5.68E-06 * Tsquared - 1E-09 * Tcubed);
}
EPO.earthInclinationJ2000 = function EPO$earthInclinationJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.0130548 * T - 9.31E-06 * Tsquared - 3.4E-08 * Tcubed;
}
EPO.earthLongitudeAscendingNodeJ2000 = function EPO$earthLongitudeAscendingNodeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(174.873176 - 0.241098 * T + 4.262E-05 * Tsquared + 1E-09 * Tcubed);
}
EPO.earthLongitudePerihelionJ2000 = function EPO$earthLongitudePerihelionJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(102.937348 + 0.3225654 * T + 0.00014799 * Tsquared - 3.9E-08 * Tcubed);
}
EPO.marsMeanLongitudeJ2000 = function EPO$marsMeanLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(355.433 + 19140.2993039 * T + 2.62E-06 * Tsquared - 3E-09 * Tcubed);
}
EPO.marsInclinationJ2000 = function EPO$marsInclinationJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.849726 - 0.0081477 * T - 2.255E-05 * Tsquared - 2.9E-08 * Tcubed);
}
EPO.marsLongitudeAscendingNodeJ2000 = function EPO$marsLongitudeAscendingNodeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(49.588093 - 0.295025 * T - 0.00064048 * Tsquared - 1.964E-06 * Tcubed);
}
EPO.marsLongitudePerihelionJ2000 = function EPO$marsLongitudePerihelionJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(336.060234 + 0.4439016 * T - 0.00017313 * Tsquared + 5.18E-07 * Tcubed);
}
EPO.jupiterMeanLongitudeJ2000 = function EPO$jupiterMeanLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(34.351519 + 3034.9056606 * T - 8.501E-05 * Tsquared + 1.6E-08 * Tcubed);
}
EPO.jupiterInclinationJ2000 = function EPO$jupiterInclinationJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.303267 - 0.0019877 * T + 3.32E-05 * Tsquared + 9.7E-08 * Tcubed);
}
EPO.jupiterLongitudeAscendingNodeJ2000 = function EPO$jupiterLongitudeAscendingNodeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(100.464407 + 0.1767232 * T + 0.000907 * Tsquared - 7.272E-06 * Tcubed);
}
EPO.jupiterLongitudePerihelionJ2000 = function EPO$jupiterLongitudePerihelionJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(14.331207 + 0.2155209 * T + 0.00072211 * Tsquared - 4.485E-06 * Tcubed);
}
EPO.saturnMeanLongitudeJ2000 = function EPO$saturnMeanLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(50.077444 + 1222.1138488 * T + 0.00021004 * Tsquared - 4.6E-08 * Tcubed);
}
EPO.saturnInclinationJ2000 = function EPO$saturnInclinationJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(2.488879 + 0.0025514 * T - 4.906E-05 * Tsquared + 1.7E-08 * Tcubed);
}
EPO.saturnLongitudeAscendingNodeJ2000 = function EPO$saturnLongitudeAscendingNodeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(113.665503 - 0.2566722 * T - 0.00018399 * Tsquared + 4.8E-07 * Tcubed);
}
EPO.saturnLongitudePerihelionJ2000 = function EPO$saturnLongitudePerihelionJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(93.057237 + 0.5665415 * T + 0.0005285 * Tsquared + 4.912E-06 * Tcubed);
}
EPO.uranusMeanLongitudeJ2000 = function EPO$uranusMeanLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(314.055005 + 428.4669983 * T - 4.86E-06 * Tsquared + 6E-09 * Tcubed);
}
EPO.uranusInclinationJ2000 = function EPO$uranusInclinationJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(0.773197 - 0.0016869 * T + 3.49E-06 * Tsquared + 1.6E-08 * Tcubed);
}
EPO.uranusLongitudeAscendingNodeJ2000 = function EPO$uranusLongitudeAscendingNodeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(74.005957 + 0.0741431 * T + 0.00040539 * Tsquared + 1.19E-07 * Tcubed);
}
EPO.uranusLongitudePerihelionJ2000 = function EPO$uranusLongitudePerihelionJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(173.005291 + 0.0893212 * T - 9.47E-05 * Tsquared + 4.14E-07 * Tcubed);
}
EPO.neptuneMeanLongitudeJ2000 = function EPO$neptuneMeanLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(304.348665 + 218.4862002 * T + 5.9E-07 * Tsquared - 2E-09 * Tcubed);
}
EPO.neptuneInclinationJ2000 = function EPO$neptuneInclinationJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return CT.m360(1.769953 + 0.0002256 * T + 2.3E-07 * Tsquared);
}
EPO.neptuneLongitudeAscendingNodeJ2000 = function EPO$neptuneLongitudeAscendingNodeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(131.784057 - 0.0061651 * T - 2.19E-06 * Tsquared - 7.8E-08 * Tcubed);
}
EPO.neptuneLongitudePerihelionJ2000 = function EPO$neptuneLongitudePerihelionJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return CT.m360(48.120276 + 0.0291866 * T + 7.61E-05 * Tsquared);
}


////////////////////////////////////////////////////////////////////////////////
// EOE

window.EOE = function EOE() {
    /// <field name="a" type="Number">
    /// </field>
    /// <field name="e" type="Number">
    /// </field>
    /// <field name="i" type="Number">
    /// </field>
    /// <field name="w" type="Number">
    /// </field>
    /// <field name="omega" type="Number">
    /// </field>
    /// <field name="jdEquinox" type="Number">
    /// </field>
    /// <field name="t" type="Number">
    /// </field>
    /// <field name="n" type="Number">
    /// </field>
    /// <field name="meanAnnomolyOut" type="Number">
    /// </field>
    this.a = 0;
    this.e = 0;
    this.i = 0;
    this.w = 0;
    this.omega = 0;
    this.jdEquinox = 0;
    this.t = 0;
}
EOE.prototype = {
    a: 0,
    e: 0,
    i: 0,
    w: 0,
    omega: 0,
    jdEquinox: 0,
    t: 0,
    n: 0,
    meanAnnomolyOut: 0
}


////////////////////////////////////////////////////////////////////////////////
// EPD

window.EPD = function EPD() {
    /// <field name="apparentGeocentricLongitude" type="Number">
    /// </field>
    /// <field name="apparentGeocentricLatitude" type="Number">
    /// </field>
    /// <field name="apparentGeocentricDistance" type="Number">
    /// </field>
    /// <field name="apparentLightTime" type="Number">
    /// </field>
    /// <field name="apparentGeocentricRA" type="Number">
    /// </field>
    /// <field name="apparentGeocentricDeclination" type="Number">
    /// </field>
    this.apparentGeocentricLongitude = 0;
    this.apparentGeocentricLatitude = 0;
    this.apparentGeocentricDistance = 0;
    this.apparentLightTime = 0;
    this.apparentGeocentricRA = 0;
    this.apparentGeocentricDeclination = 0;
}
EPD.prototype = {
    apparentGeocentricLongitude: 0,
    apparentGeocentricLatitude: 0,
    apparentGeocentricDistance: 0,
    apparentLightTime: 0,
    apparentGeocentricRA: 0,
    apparentGeocentricDeclination: 0
}


////////////////////////////////////////////////////////////////////////////////
// EOD

window.EOD = function EOD() {
    /// <field name="heliocentricRectangularEquatorial" type="C3D">
    /// </field>
    /// <field name="heliocentricRectangularEcliptical" type="C3D">
    /// </field>
    /// <field name="heliocentricEclipticLongitude" type="Number">
    /// </field>
    /// <field name="heliocentricEclipticLatitude" type="Number">
    /// </field>
    /// <field name="trueGeocentricRA" type="Number">
    /// </field>
    /// <field name="trueGeocentricDeclination" type="Number">
    /// </field>
    /// <field name="trueGeocentricDistance" type="Number">
    /// </field>
    /// <field name="trueGeocentricLightTime" type="Number">
    /// </field>
    /// <field name="astrometricGeocenticRA" type="Number">
    /// </field>
    /// <field name="astrometricGeocentricDeclination" type="Number">
    /// </field>
    /// <field name="astrometricGeocentricDistance" type="Number">
    /// </field>
    /// <field name="astrometricGeocentricLightTime" type="Number">
    /// </field>
    /// <field name="elongation" type="Number">
    /// </field>
    /// <field name="phaseAngle" type="Number">
    /// </field>
    this.heliocentricRectangularEquatorial = new C3D();
    this.heliocentricRectangularEcliptical = new C3D();
    this.heliocentricEclipticLongitude = 0;
    this.heliocentricEclipticLatitude = 0;
    this.trueGeocentricRA = 0;
    this.trueGeocentricDeclination = 0;
    this.trueGeocentricDistance = 0;
    this.trueGeocentricLightTime = 0;
    this.astrometricGeocenticRA = 0;
    this.astrometricGeocentricDeclination = 0;
    this.astrometricGeocentricDistance = 0;
    this.astrometricGeocentricLightTime = 0;
    this.elongation = 0;
    this.phaseAngle = 0;
}
EOD.prototype = {
    heliocentricEclipticLongitude: 0,
    heliocentricEclipticLatitude: 0,
    trueGeocentricRA: 0,
    trueGeocentricDeclination: 0,
    trueGeocentricDistance: 0,
    trueGeocentricLightTime: 0,
    astrometricGeocenticRA: 0,
    astrometricGeocentricDeclination: 0,
    astrometricGeocentricDistance: 0,
    astrometricGeocentricLightTime: 0,
    elongation: 0,
    phaseAngle: 0
}


////////////////////////////////////////////////////////////////////////////////
// ELL

window.ELL = function ELL() {
}
ELL.distanceToLightTime = function ELL$distanceToLightTime(Distance) {
    /// <param name="Distance" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Distance * 0.0057755183;
}
ELL.calculate = function ELL$calculate(JD, oobject) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <param name="oobject" type="EO">
    /// </param>
    /// <returns type="EPD"></returns>
    var details = new EPD();
    var JD0 = JD;
    var L0 = 0;
    var B0 = 0;
    var R0 = 0;
    var cosB0 = 0;
    if (!!oobject) {
        L0 = CAAEarth.eclipticLongitude(JD0);
        B0 = CAAEarth.eclipticLatitude(JD0);
        R0 = CAAEarth.radiusVector(JD0);
        L0 = CT.d2R(L0);
        B0 = CT.d2R(B0);
        cosB0 = Math.cos(B0);
    }
    var L = 0;
    var B = 0;
    var R = 0;
    var Lrad;
    var Brad;
    var cosB;
    var cosL;
    var x;
    var y;
    var z;
    var bRecalc = true;
    var bFirstRecalc = true;
    var LPrevious = 0;
    var BPrevious = 0;
    var RPrevious = 0;
    while (bRecalc) {
        switch (oobject) {
            case 0:
                L = CAASun.geometricEclipticLongitude(JD0);
                B = CAASun.geometricEclipticLatitude(JD0);
                R = CAAEarth.radiusVector(JD0);
                break;
            case 1:
                L = CAAMercury.eclipticLongitude(JD0);
                B = CAAMercury.eclipticLatitude(JD0);
                R = CAAMercury.radiusVector(JD0);
                break;
            case 2:
                L = CAAVenus.eclipticLongitude(JD0);
                B = CAAVenus.eclipticLatitude(JD0);
                R = CAAVenus.radiusVector(JD0);
                break;
            case 3:
                L = CAAMars.eclipticLongitude(JD0);
                B = CAAMars.eclipticLatitude(JD0);
                R = CAAMars.radiusVector(JD0);
                break;
            case 4:
                L = CAAJupiter.eclipticLongitude(JD0);
                B = CAAJupiter.eclipticLatitude(JD0);
                R = CAAJupiter.radiusVector(JD0);
                break;
            case 5:
                L = CAASaturn.eclipticLongitude(JD0);
                B = CAASaturn.eclipticLatitude(JD0);
                R = CAASaturn.radiusVector(JD0);
                break;
            case 6:
                L = CAAUranus.eclipticLongitude(JD0);
                B = CAAUranus.eclipticLatitude(JD0);
                R = CAAUranus.radiusVector(JD0);
                break;
            case 7:
                L = CAANeptune.eclipticLongitude(JD0);
                B = CAANeptune.eclipticLatitude(JD0);
                R = CAANeptune.radiusVector(JD0);
                break;
            case 8:
                L = CAAPluto.eclipticLongitude(JD0);
                B = CAAPluto.eclipticLatitude(JD0);
                R = CAAPluto.radiusVector(JD0);
                break;
            default:
                break;
        }
        if (!bFirstRecalc) {
            bRecalc = ((Math.abs(L - LPrevious) > 1E-05) || (Math.abs(B - BPrevious) > 1E-05) || (Math.abs(R - RPrevious) > 1E-06));
            LPrevious = L;
            BPrevious = B;
            RPrevious = R;
        }
        else {
            bFirstRecalc = false;
        }
        if (bRecalc) {
            var distance = 0;
            if (!!oobject) {
                Lrad = CT.d2R(L);
                Brad = CT.d2R(B);
                cosB = Math.cos(Brad);
                cosL = Math.cos(Lrad);
                x = R * cosB * cosL - R0 * cosB0 * Math.cos(L0);
                y = R * cosB * Math.sin(Lrad) - R0 * cosB0 * Math.sin(L0);
                z = R * Math.sin(Brad) - R0 * Math.sin(B0);
                distance = Math.sqrt(x * x + y * y + z * z);
            }
            else {
                distance = R;
            }
            JD0 = JD - ELL.distanceToLightTime(distance);
        }
    }
    Lrad = CT.d2R(L);
    Brad = CT.d2R(B);
    cosB = Math.cos(Brad);
    cosL = Math.cos(Lrad);
    x = R * cosB * cosL - R0 * cosB0 * Math.cos(L0);
    y = R * cosB * Math.sin(Lrad) - R0 * cosB0 * Math.sin(L0);
    z = R * Math.sin(Brad) - R0 * Math.sin(B0);
    var x2 = x * x;
    var y2 = y * y;
    details.apparentGeocentricLatitude = CT.r2D(Math.atan2(z, Math.sqrt(x2 + y2)));
    details.apparentGeocentricDistance = Math.sqrt(x2 + y2 + z * z);
    details.apparentGeocentricLongitude = CT.m360(CT.r2D(Math.atan2(y, x)));
    details.apparentLightTime = ELL.distanceToLightTime(details.apparentGeocentricDistance);
    var Aberration = ABR.eclipticAberration(details.apparentGeocentricLongitude, details.apparentGeocentricLatitude, JD);
    details.apparentGeocentricLongitude += Aberration.x;
    details.apparentGeocentricLatitude += Aberration.y;
    var DeltaLong = CAAFK5.correctionInLongitude(details.apparentGeocentricLongitude, details.apparentGeocentricLatitude, JD);
    details.apparentGeocentricLatitude += CAAFK5.correctionInLatitude(details.apparentGeocentricLongitude, JD);
    details.apparentGeocentricLongitude += DeltaLong;
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var Epsilon = CAANutation.trueObliquityOfEcliptic(JD);
    details.apparentGeocentricLongitude += CT.dmS2D(0, 0, NutationInLongitude);
    var ApparentEqu = CT.ec2Eq(details.apparentGeocentricLongitude, details.apparentGeocentricLatitude, Epsilon);
    details.apparentGeocentricRA = ApparentEqu.x;
    details.apparentGeocentricDeclination = ApparentEqu.y;
    return details;
}
ELL.semiMajorAxisFromPerihelionDistance = function ELL$semiMajorAxisFromPerihelionDistance(q, e) {
    /// <param name="q" type="Number">
    /// </param>
    /// <param name="e" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return q / (1 - e);
}
ELL.meanMotionFromSemiMajorAxis = function ELL$meanMotionFromSemiMajorAxis(a) {
    /// <param name="a" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 0.9856076686 / (a * Math.sqrt(a));
}
ELL.calculateRectangularJD = function ELL$calculateRectangularJD(JD, elements) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <param name="elements" type="EOE">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var JD0 = JD;
    var omega = CT.d2R(elements.omega);
    var w = CT.d2R(elements.w);
    var i = CT.d2R(elements.i);
    var sinEpsilon = 0;
    var cosEpsilon = 1;
    var sinOmega = Math.sin(omega);
    var cosOmega = Math.cos(omega);
    var cosi = Math.cos(i);
    var sini = Math.sin(i);
    var F = cosOmega;
    var G = sinOmega * cosEpsilon;
    var H = sinOmega * sinEpsilon;
    var P = -sinOmega * cosi;
    var Q = cosOmega * cosi * cosEpsilon - sini * sinEpsilon;
    var R = cosOmega * cosi * sinEpsilon + sini * cosEpsilon;
    var a = Math.sqrt(F * F + P * P);
    var b = Math.sqrt(G * G + Q * Q);
    var c = Math.sqrt(H * H + R * R);
    var A = Math.atan2(F, P);
    var B = Math.atan2(G, Q);
    var C = Math.atan2(H, R);
    var M = elements.n * (JD0 - elements.t);
    elements.meanAnnomolyOut = M;
    var E = CAAKepler.calculate(M, elements.e);
    E = CT.d2R(E);
    var v = 2 * Math.atan(Math.sqrt((1 + elements.e) / (1 - elements.e)) * Math.tan(E / 2));
    var r = elements.a * (1 - elements.e * Math.cos(E));
    var x = r * a * Math.sin(A + w + v);
    var y = r * b * Math.sin(B + w + v);
    var z = r * c * Math.sin(C + w + v);
    return wwtlib.Vector3d.create(x, y, z);
}
ELL.calculateRectangular = function ELL$calculateRectangular(elements, meanAnomoly) {
    /// <param name="elements" type="EOE">
    /// </param>
    /// <param name="meanAnomoly" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var omega = CT.d2R(elements.omega);
    var w = CT.d2R(elements.w);
    var i = CT.d2R(elements.i);
    var sinEpsilon = 0;
    var cosEpsilon = 1;
    var sinOmega = Math.sin(omega);
    var cosOmega = Math.cos(omega);
    var cosi = Math.cos(i);
    var sini = Math.sin(i);
    var F = cosOmega;
    var G = sinOmega * cosEpsilon;
    var H = sinOmega * sinEpsilon;
    var P = -sinOmega * cosi;
    var Q = cosOmega * cosi * cosEpsilon - sini * sinEpsilon;
    var R = cosOmega * cosi * sinEpsilon + sini * cosEpsilon;
    var a = Math.sqrt(F * F + P * P);
    var b = Math.sqrt(G * G + Q * Q);
    var c = Math.sqrt(H * H + R * R);
    var A = Math.atan2(F, P);
    var B = Math.atan2(G, Q);
    var C = Math.atan2(H, R);
    var n = elements.n;
    var M = meanAnomoly;
    var E = CAAKepler.calculate(M, elements.e);
    E = CT.d2R(E);
    var v = 2 * Math.atan(Math.sqrt((1 + elements.e) / (1 - elements.e)) * Math.tan(E / 2));
    var r = elements.a * (1 - elements.e * Math.cos(E));
    var x = r * a * Math.sin(A + w + v);
    var y = r * b * Math.sin(B + w + v);
    var z = r * c * Math.sin(C + w + v);
    return wwtlib.Vector3d.create(x, y, z);
}
ELL.calculateElements = function ELL$calculateElements(JD, elements) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <param name="elements" type="EOE">
    /// </param>
    /// <returns type="EOD"></returns>
    var Epsilon = CAANutation.meanObliquityOfEcliptic(elements.jdEquinox);
    var JD0 = JD;
    var details = new EOD();
    Epsilon = CT.d2R(Epsilon);
    var omega = CT.d2R(elements.omega);
    var w = CT.d2R(elements.w);
    var i = CT.d2R(elements.i);
    var sinEpsilon = Math.sin(Epsilon);
    var cosEpsilon = Math.cos(Epsilon);
    var sinOmega = Math.sin(omega);
    var cosOmega = Math.cos(omega);
    var cosi = Math.cos(i);
    var sini = Math.sin(i);
    var F = cosOmega;
    var G = sinOmega * cosEpsilon;
    var H = sinOmega * sinEpsilon;
    var P = -sinOmega * cosi;
    var Q = cosOmega * cosi * cosEpsilon - sini * sinEpsilon;
    var R = cosOmega * cosi * sinEpsilon + sini * cosEpsilon;
    var a = Math.sqrt(F * F + P * P);
    var b = Math.sqrt(G * G + Q * Q);
    var c = Math.sqrt(H * H + R * R);
    var A = Math.atan2(F, P);
    var B = Math.atan2(G, Q);
    var C = Math.atan2(H, R);
    var n = ELL.meanMotionFromSemiMajorAxis(elements.a);
    var SunCoord = CAASun.equatorialRectangularCoordinatesAnyEquinox(JD, elements.jdEquinox);
    for (var j = 0; j < 2; j++) {
        var M = n * (JD0 - elements.t);
        var E = CAAKepler.calculate(M, elements.e);
        E = CT.d2R(E);
        var v = 2 * Math.atan(Math.sqrt((1 + elements.e) / (1 - elements.e)) * Math.tan(E / 2));
        var r = elements.a * (1 - elements.e * Math.cos(E));
        var x = r * a * Math.sin(A + w + v);
        var y = r * b * Math.sin(B + w + v);
        var z = r * c * Math.sin(C + w + v);
        if (!j) {
            details.heliocentricRectangularEquatorial.x = x;
            details.heliocentricRectangularEquatorial.y = y;
            details.heliocentricRectangularEquatorial.z = z;
            var u = omega + v;
            var cosu = Math.cos(u);
            var sinu = Math.sin(u);
            details.heliocentricRectangularEcliptical.x = r * (cosOmega * cosu - sinOmega * sinu * cosi);
            details.heliocentricRectangularEcliptical.y = r * (sinOmega * cosu + cosOmega * sinu * cosi);
            details.heliocentricRectangularEcliptical.z = r * sini * sinu;
            details.heliocentricEclipticLongitude = Math.atan2(y, x);
            details.heliocentricEclipticLongitude = CT.m24(CT.r2D(details.heliocentricEclipticLongitude) / 15);
            details.heliocentricEclipticLatitude = Math.asin(z / r);
            details.heliocentricEclipticLatitude = CT.r2D(details.heliocentricEclipticLatitude);
        }
        var psi = SunCoord.x + x;
        var nu = SunCoord.y + y;
        var sigma = SunCoord.z + z;
        var Alpha = Math.atan2(nu, psi);
        Alpha = CT.r2D(Alpha);
        var Delta = Math.atan2(sigma, Math.sqrt(psi * psi + nu * nu));
        Delta = CT.r2D(Delta);
        var Distance = Math.sqrt(psi * psi + nu * nu + sigma * sigma);
        if (!j) {
            details.trueGeocentricRA = CT.m24(Alpha / 15);
            details.trueGeocentricDeclination = Delta;
            details.trueGeocentricDistance = Distance;
            details.trueGeocentricLightTime = ELL.distanceToLightTime(Distance);
        }
        else {
            details.astrometricGeocenticRA = CT.m24(Alpha / 15);
            details.astrometricGeocentricDeclination = Delta;
            details.astrometricGeocentricDistance = Distance;
            details.astrometricGeocentricLightTime = ELL.distanceToLightTime(Distance);
            var RES = Math.sqrt(SunCoord.x * SunCoord.x + SunCoord.y * SunCoord.y + SunCoord.z * SunCoord.z);
            details.elongation = Math.acos((RES * RES + Distance * Distance - r * r) / (2 * RES * Distance));
            details.elongation = CT.r2D(details.elongation);
            details.phaseAngle = Math.acos((r * r + Distance * Distance - RES * RES) / (2 * r * Distance));
            details.phaseAngle = CT.r2D(details.phaseAngle);
        }
        if (!j) {
            JD0 = JD - details.trueGeocentricLightTime;
        }
    }
    return details;
}
ELL.instantaneousVelocity = function ELL$instantaneousVelocity(r, a) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="a" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 42.1219 * Math.sqrt((1 / r) - (1 / (2 * a)));
}
ELL.velocityAtPerihelion = function ELL$velocityAtPerihelion(e, a) {
    /// <param name="e" type="Number">
    /// </param>
    /// <param name="a" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 29.7847 / Math.sqrt(a) * Math.sqrt((1 + e) / (1 - e));
}
ELL.velocityAtAphelion = function ELL$velocityAtAphelion(e, a) {
    /// <param name="e" type="Number">
    /// </param>
    /// <param name="a" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 29.7847 / Math.sqrt(a) * Math.sqrt((1 - e) / (1 + e));
}
ELL.lengthOfEllipse = function ELL$lengthOfEllipse(e, a) {
    /// <param name="e" type="Number">
    /// </param>
    /// <param name="a" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var b = a * Math.sqrt(1 - e * e);
    return CT.PI() * (3 * (a + b) - Math.sqrt((a + 3 * b) * (3 * a + b)));
}
ELL.cometMagnitude = function ELL$cometMagnitude(g, delta, k, r) {
    /// <param name="g" type="Number">
    /// </param>
    /// <param name="delta" type="Number">
    /// </param>
    /// <param name="k" type="Number">
    /// </param>
    /// <param name="r" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return g + 5 * wwtlib._util.log10(delta) + k * wwtlib._util.log10(r);
}
ELL.minorPlanetMagnitude = function ELL$minorPlanetMagnitude(H, delta, G, r, PhaseAngle) {
    /// <param name="H" type="Number">
    /// </param>
    /// <param name="delta" type="Number">
    /// </param>
    /// <param name="G" type="Number">
    /// </param>
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="PhaseAngle" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    PhaseAngle = CT.d2R(PhaseAngle);
    var phi1 = Math.exp(-3.33 * Math.pow(Math.tan(PhaseAngle / 2), 0.63));
    var phi2 = Math.exp(-1.87 * Math.pow(Math.tan(PhaseAngle / 2), 1.22));
    return H + 5 * wwtlib._util.log10(r * delta) - 2.5 * wwtlib._util.log10((1 - G) * phi1 + G * phi2);
}


////////////////////////////////////////////////////////////////////////////////
// EOT

window.EOT = function EOT() {
}
EOT.calculate = function EOT$calculate(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var L0 = CT.m360(280.4664567 + 360007.6982779 * rho + 0.03032028 * rhosquared + rhocubed / 49931 - rho4 / 15300 - rho5 / 2000000);
    var SunLong = CAASun.apparentEclipticLongitude(JD);
    var SunLat = CAASun.apparentEclipticLatitude(JD);
    var epsilon = CAANutation.trueObliquityOfEcliptic(JD);
    var Equatorial = CT.ec2Eq(SunLong, SunLat, epsilon);
    epsilon = CT.d2R(epsilon);
    var E = L0 - 0.0057183 - Equatorial.x * 15 + CT.dmS2D(0, 0, CAANutation.nutationInLongitude(JD)) * Math.cos(epsilon);
    if (E > 180) {
        E = -(360 - E);
    }
    E *= 4;
    return E;
}


////////////////////////////////////////////////////////////////////////////////
// CAAFK5

window.CAAFK5 = function CAAFK5() {
}
CAAFK5.correctionInLongitude = function CAAFK5$correctionInLongitude(Longitude, Latitude, JD) {
    /// <param name="Longitude" type="Number">
    /// </param>
    /// <param name="Latitude" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Ldash = Longitude - 1.397 * T - 0.00031 * T * T;
    Ldash = CT.d2R(Ldash);
    Longitude = CT.d2R(Longitude);
    Latitude = CT.d2R(Latitude);
    var vvalue = -0.09033 + 0.03916 * (Math.cos(Ldash) + Math.sin(Ldash)) * Math.tan(Latitude);
    return CT.dmS2D(0, 0, vvalue);
}
CAAFK5.correctionInLatitude = function CAAFK5$correctionInLatitude(Longitude, JD) {
    /// <param name="Longitude" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Ldash = Longitude - 1.397 * T - 0.00031 * T * T;
    Ldash = CT.d2R(Ldash);
    Longitude = CT.d2R(Longitude);
    var vvalue = 0.03916 * (Math.cos(Ldash) - Math.sin(Ldash));
    return CT.dmS2D(0, 0, vvalue);
}
CAAFK5.convertVSOPToFK5J2000 = function CAAFK5$convertVSOPToFK5J2000(vvalue) {
    /// <param name="vvalue" type="C3D">
    /// </param>
    /// <returns type="C3D"></returns>
    var result = new C3D();
    result.x = vvalue.x + 4.4036E-07 * vvalue.y - 1.90919E-07 * vvalue.z;
    result.y = -4.79966E-07 * vvalue.x + 0.917482137087 * vvalue.y - 0.397776982902 * vvalue.z;
    result.z = 0.397776982902 * vvalue.y + 0.917482137087 * vvalue.z;
    return result;
}
CAAFK5.convertVSOPToFK5B1950 = function CAAFK5$convertVSOPToFK5B1950(vvalue) {
    /// <param name="vvalue" type="C3D">
    /// </param>
    /// <returns type="C3D"></returns>
    var result = new C3D();
    result.x = 0.999925702634 * vvalue.x + 0.012189716217 * vvalue.y + 1.1134016E-05 * vvalue.z;
    result.y = -0.011179418036 * vvalue.x + 0.917413998946 * vvalue.y - 0.397777041885 * vvalue.z;
    result.z = -0.004859003787 * vvalue.x + 0.397747363646 * vvalue.y + 0.917482111428 * vvalue.z;
    return result;
}
CAAFK5.convertVSOPToFK5AnyEquinox = function CAAFK5$convertVSOPToFK5AnyEquinox(vvalue, JDEquinox) {
    /// <param name="vvalue" type="C3D">
    /// </param>
    /// <param name="JDEquinox" type="Number">
    /// </param>
    /// <returns type="C3D"></returns>
    var t = (JDEquinox - 2451545) / 36525;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    var sigma = 2306.2181 * t + 0.30188 * tsquared + 0.017988 * tcubed;
    sigma = CT.d2R(CT.dmS2D(0, 0, sigma));
    var zeta = 2306.2181 * t + 1.09468 * tsquared + 0.018203 * tcubed;
    zeta = CT.d2R(CT.dmS2D(0, 0, zeta));
    var phi = 2004.3109 * t - 0.42665 * tsquared - 0.041833 * tcubed;
    phi = CT.d2R(CT.dmS2D(0, 0, phi));
    var cossigma = Math.cos(sigma);
    var coszeta = Math.cos(zeta);
    var cosphi = Math.cos(phi);
    var sinsigma = Math.sin(sigma);
    var sinzeta = Math.sin(zeta);
    var sinphi = Math.sin(phi);
    var xx = cossigma * coszeta * cosphi - sinsigma * sinzeta;
    var xy = sinsigma * coszeta + cossigma * sinzeta * cosphi;
    var xz = cossigma * sinphi;
    var yx = -cossigma * sinzeta - sinsigma * coszeta * cosphi;
    var yy = cossigma * coszeta - sinsigma * sinzeta * cosphi;
    var yz = -sinsigma * sinphi;
    var zx = -coszeta * sinphi;
    var zy = -sinzeta * sinphi;
    var zz = cosphi;
    var result = new C3D();
    result.x = xx * vvalue.x + yx * vvalue.y + zx * vvalue.z;
    result.y = xy * vvalue.x + yy * vvalue.y + zy * vvalue.z;
    result.z = xz * vvalue.x + yz * vvalue.y + zz * vvalue.z;
    return result;
}


////////////////////////////////////////////////////////////////////////////////
// GMD

window.GMD = function GMD() {
    /// <field name="meanLongitude" type="Number">
    /// </field>
    /// <field name="trueLongitude" type="Number">
    /// </field>
    /// <field name="tropicalLongitude" type="Number">
    /// </field>
    /// <field name="equatorialLatitude" type="Number">
    /// </field>
    /// <field name="r" type="Number">
    /// </field>
    /// <field name="eclipticRectangularCoordinates" type="C3D">
    /// </field>
    /// <field name="trueRectangularCoordinates" type="C3D">
    /// </field>
    /// <field name="apparentRectangularCoordinates" type="C3D">
    /// </field>
    /// <field name="bInTransit" type="Boolean">
    /// </field>
    /// <field name="bInOccultation" type="Boolean">
    /// </field>
    /// <field name="bInEclipse" type="Boolean">
    /// </field>
    /// <field name="bInShadowTransit" type="Boolean">
    /// </field>
    /// <field name="apparentShadowRectangularCoordinates" type="C3D">
    /// </field>
    this.eclipticRectangularCoordinates = new C3D();
    this.trueRectangularCoordinates = new C3D();
    this.apparentRectangularCoordinates = new C3D();
    this.apparentShadowRectangularCoordinates = new C3D();
    this.meanLongitude = 0;
    this.trueLongitude = 0;
    this.tropicalLongitude = 0;
    this.equatorialLatitude = 0;
    this.r = 0;
    this.bInTransit = false;
    this.bInOccultation = false;
    this.bInEclipse = false;
    this.bInShadowTransit = false;
}
GMD.prototype = {
    meanLongitude: 0,
    trueLongitude: 0,
    tropicalLongitude: 0,
    equatorialLatitude: 0,
    r: 0,
    bInTransit: false,
    bInOccultation: false,
    bInEclipse: false,
    bInShadowTransit: false
}


////////////////////////////////////////////////////////////////////////////////
// GMDS

window.GMDS = function GMDS() {
    /// <field name="satellite1" type="GMD">
    /// </field>
    /// <field name="satellite2" type="GMD">
    /// </field>
    /// <field name="satellite3" type="GMD">
    /// </field>
    /// <field name="satellite4" type="GMD">
    /// </field>
    this.satellite1 = new GMD();
    this.satellite2 = new GMD();
    this.satellite3 = new GMD();
    this.satellite4 = new GMD();
}


////////////////////////////////////////////////////////////////////////////////
// GM

window.GM = function GM() {
}
GM.calculate = function GM$calculate(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="GMDS"></returns>
    var sunlong = CAASun.geometricEclipticLongitude(JD);
    var sunlongrad = CT.d2R(sunlong);
    var beta = CAASun.geometricEclipticLatitude(JD);
    var betarad = CT.d2R(beta);
    var R = CAAEarth.radiusVector(JD);
    var DELTA = 5;
    var PreviousEarthLightTravelTime = 0;
    var EarthLightTravelTime = ELL.distanceToLightTime(DELTA);
    var JD1 = JD - EarthLightTravelTime;
    var bIterate = true;
    var x = 0;
    var y = 0;
    var z = 0;
    var l = 0;
    var lrad = 0;
    var b = 0;
    var brad = 0;
    var r = 0;
    while (bIterate) {
        l = CAAJupiter.eclipticLongitude(JD1);
        lrad = CT.d2R(l);
        b = CAAJupiter.eclipticLatitude(JD1);
        brad = CT.d2R(b);
        r = CAAJupiter.radiusVector(JD1);
        x = r * Math.cos(brad) * Math.cos(lrad) + R * Math.cos(sunlongrad);
        y = r * Math.cos(brad) * Math.sin(lrad) + R * Math.sin(sunlongrad);
        z = r * Math.sin(brad) + R * Math.sin(betarad);
        DELTA = Math.sqrt(x * x + y * y + z * z);
        EarthLightTravelTime = ELL.distanceToLightTime(DELTA);
        bIterate = (Math.abs(EarthLightTravelTime - PreviousEarthLightTravelTime) > 2E-06);
        if (bIterate) {
            JD1 = JD - EarthLightTravelTime;
            PreviousEarthLightTravelTime = EarthLightTravelTime;
        }
    }
    var details1 = GM.calculateHelper(JD, sunlongrad, betarad, R);
    GM.fillInPhenomenaDetails(details1.satellite1);
    GM.fillInPhenomenaDetails(details1.satellite2);
    GM.fillInPhenomenaDetails(details1.satellite3);
    GM.fillInPhenomenaDetails(details1.satellite4);
    JD1 = JD - EarthLightTravelTime;
    l = CAAJupiter.eclipticLongitude(JD1);
    lrad = CT.d2R(l);
    b = CAAJupiter.eclipticLatitude(JD1);
    brad = CT.d2R(b);
    r = CAAJupiter.radiusVector(JD1);
    x = r * Math.cos(brad) * Math.cos(lrad);
    y = r * Math.cos(brad) * Math.sin(lrad);
    z = r * Math.sin(brad);
    DELTA = Math.sqrt(x * x + y * y + z * z);
    var SunLightTravelTime = ELL.distanceToLightTime(DELTA);
    var details2 = GM.calculateHelper(JD + SunLightTravelTime - EarthLightTravelTime, sunlongrad, betarad, 0);
    GM.fillInPhenomenaDetails(details2.satellite1);
    GM.fillInPhenomenaDetails(details2.satellite2);
    GM.fillInPhenomenaDetails(details2.satellite3);
    GM.fillInPhenomenaDetails(details2.satellite4);
    details1.satellite1.bInEclipse = details2.satellite1.bInOccultation;
    details1.satellite2.bInEclipse = details2.satellite2.bInOccultation;
    details1.satellite3.bInEclipse = details2.satellite3.bInOccultation;
    details1.satellite4.bInEclipse = details2.satellite4.bInOccultation;
    details1.satellite1.bInShadowTransit = details2.satellite1.bInTransit;
    details1.satellite2.bInShadowTransit = details2.satellite2.bInTransit;
    details1.satellite3.bInShadowTransit = details2.satellite3.bInTransit;
    details1.satellite4.bInShadowTransit = details2.satellite4.bInTransit;
    details1.satellite1.apparentShadowRectangularCoordinates = details2.satellite1.apparentRectangularCoordinates;
    details1.satellite2.apparentShadowRectangularCoordinates = details2.satellite2.apparentRectangularCoordinates;
    details1.satellite3.apparentShadowRectangularCoordinates = details2.satellite3.apparentRectangularCoordinates;
    details1.satellite4.apparentShadowRectangularCoordinates = details2.satellite4.apparentRectangularCoordinates;
    return details1;
}
GM.calculateHelper = function GM$calculateHelper(JD, sunlongrad, betarad, R) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <param name="sunlongrad" type="Number">
    /// </param>
    /// <param name="betarad" type="Number">
    /// </param>
    /// <param name="R" type="Number">
    /// </param>
    /// <returns type="GMDS"></returns>
    var details = new GMDS();
    var DELTA = 5;
    var PreviousLightTravelTime = 0;
    var LightTravelTime = ELL.distanceToLightTime(DELTA);
    var x = 0;
    var y = 0;
    var z = 0;
    var l = 0;
    var lrad = 0;
    var b = 0;
    var brad = 0;
    var r = 0;
    var JD1 = JD - LightTravelTime;
    var bIterate = true;
    while (bIterate) {
        l = CAAJupiter.eclipticLongitude(JD1);
        lrad = CT.d2R(l);
        b = CAAJupiter.eclipticLatitude(JD1);
        brad = CT.d2R(b);
        r = CAAJupiter.radiusVector(JD1);
        x = r * Math.cos(brad) * Math.cos(lrad) + R * Math.cos(sunlongrad);
        y = r * Math.cos(brad) * Math.sin(lrad) + R * Math.sin(sunlongrad);
        z = r * Math.sin(brad) + R * Math.sin(betarad);
        DELTA = Math.sqrt(x * x + y * y + z * z);
        LightTravelTime = ELL.distanceToLightTime(DELTA);
        bIterate = (Math.abs(LightTravelTime - PreviousLightTravelTime) > 2E-06);
        if (bIterate) {
            JD1 = JD - LightTravelTime;
            PreviousLightTravelTime = LightTravelTime;
        }
    }
    var lambda0 = Math.atan2(y, x);
    var beta0 = Math.atan(z / Math.sqrt(x * x + y * y));
    var t = JD - 2443000.5 - LightTravelTime;
    var l1 = 106.07719 + 203.48895579 * t;
    var l1rad = CT.d2R(l1);
    var l2 = 175.73161 + 101.374724735 * t;
    var l2rad = CT.d2R(l2);
    var l3 = 120.55883 + 50.317609207 * t;
    var l3rad = CT.d2R(l3);
    var l4 = 84.44459 + 21.571071177 * t;
    var l4rad = CT.d2R(l4);
    var pi1 = CT.d2R(CT.m360(97.0881 + 0.16138586 * t));
    var pi2 = CT.d2R(CT.m360(154.8663 + 0.04726307 * t));
    var pi3 = CT.d2R(CT.m360(188.184 + 0.00712734 * t));
    var pi4 = CT.d2R(CT.m360(335.2868 + 0.00184 * t));
    var w1 = 312.3346 - 0.13279386 * t;
    var w1rad = CT.d2R(w1);
    var w2 = 100.4411 - 0.03263064 * t;
    var w2rad = CT.d2R(w2);
    var w3 = 119.1942 - 0.00717703 * t;
    var w3rad = CT.d2R(w3);
    var w4 = 322.6186 - 0.00175934 * t;
    var w4rad = CT.d2R(w4);
    var GAMMA = 0.33033 * Math.sin(CT.d2R(163.679 + 0.0010512 * t)) + 0.03439 * Math.sin(CT.d2R(34.486 - 0.0161731 * t));
    var philambda = CT.d2R(199.6766 + 0.1737919 * t);
    var psi = CT.d2R(316.5182 - 2.08E-06 * t);
    var G = CT.d2R(30.23756 + 0.0830925701 * t + GAMMA);
    var Gdash = CT.d2R(31.97853 + 0.0334597339 * t);
    var PI = CT.d2R(13.469942);
    var Sigma1 = 0.47259 * Math.sin(2 * (l1rad - l2rad)) + -0.03478 * Math.sin(pi3 - pi4) + 0.01081 * Math.sin(l2rad - 2 * l3rad + pi3) + 0.00738 * Math.sin(philambda) + 0.00713 * Math.sin(l2rad - 2 * l3rad + pi2) + -0.00674 * Math.sin(pi1 + pi3 - 2 * PI - 2 * G) + 0.00666 * Math.sin(l2rad - 2 * l3rad + pi4) + 0.00445 * Math.sin(l1rad - pi3) + -0.00354 * Math.sin(l1rad - l2rad) + -0.00317 * Math.sin(2 * psi - 2 * PI) + 0.00265 * Math.sin(l1rad - pi4) + -0.00186 * Math.sin(G) + 0.00162 * Math.sin(pi2 - pi3) + 0.00158 * Math.sin(4 * (l1rad - l2rad)) + -0.00155 * Math.sin(l1rad - l3rad) + -0.00138 * Math.sin(psi + w3rad - 2 * PI - 2 * G) + -0.00115 * Math.sin(2 * (l1rad - 2 * l2rad + w2rad)) + 0.00089 * Math.sin(pi2 - pi4) + 0.00085 * Math.sin(l1rad + pi3 - 2 * PI - 2 * G) + 0.00083 * Math.sin(w2rad - w3rad) + 0.00053 * Math.sin(psi - w2rad);
    var Sigma2 = 1.06476 * Math.sin(2 * (l2rad - l3rad)) + 0.04256 * Math.sin(l1rad - 2 * l2rad + pi3) + 0.03581 * Math.sin(l2rad - pi3) + 0.02395 * Math.sin(l1rad - 2 * l2rad + pi4) + 0.01984 * Math.sin(l2rad - pi4) + -0.01778 * Math.sin(philambda) + 0.01654 * Math.sin(l2rad - pi2) + 0.01334 * Math.sin(l2rad - 2 * l3rad + pi2) + 0.01294 * Math.sin(pi3 - pi4) + -0.01142 * Math.sin(l2rad - l3rad) + -0.01057 * Math.sin(G) + -0.00775 * Math.sin(2 * (psi - PI)) + 0.00524 * Math.sin(2 * (l1rad - l2rad)) + -0.0046 * Math.sin(l1rad - l3rad) + 0.00316 * Math.sin(psi - 2 * G + w3rad - 2 * PI) + -0.00203 * Math.sin(pi1 + pi3 - 2 * PI - 2 * G) + 0.00146 * Math.sin(psi - w3rad) + -0.00145 * Math.sin(2 * G) + 0.00125 * Math.sin(psi - w4rad) + -0.00115 * Math.sin(l1rad - 2 * l3rad + pi3) + -0.00094 * Math.sin(2 * (l2rad - w2rad)) + 0.00086 * Math.sin(2 * (l1rad - 2 * l2rad + w2rad)) + -0.00086 * Math.sin(5 * Gdash - 2 * G + CT.d2R(52.225)) + -0.00078 * Math.sin(l2rad - l4rad) + -0.00064 * Math.sin(3 * l3rad - 7 * l4rad + 4 * pi4) + 0.00064 * Math.sin(pi1 - pi4) + -0.00063 * Math.sin(l1rad - 2 * l3rad + pi4) + 0.00058 * Math.sin(w3rad - w4rad) + 0.00056 * Math.sin(2 * (psi - PI - G)) + 0.00056 * Math.sin(2 * (l2rad - l4rad)) + 0.00055 * Math.sin(2 * (l1rad - l3rad)) + 0.00052 * Math.sin(3 * l3rad - 7 * l4rad + pi3 + 3 * pi4) + -0.00043 * Math.sin(l1rad - pi3) + 0.00041 * Math.sin(5 * (l2rad - l3rad)) + 0.00041 * Math.sin(pi4 - PI) + 0.00032 * Math.sin(w2rad - w3rad) + 0.00032 * Math.sin(2 * (l3rad - G - PI));
    var Sigma3 = 0.1649 * Math.sin(l3rad - pi3) + 0.09081 * Math.sin(l3rad - pi4) + -0.06907 * Math.sin(l2rad - l3rad) + 0.03784 * Math.sin(pi3 - pi4) + 0.01846 * Math.sin(2 * (l3rad - l4rad)) + -0.0134 * Math.sin(G) + -0.01014 * Math.sin(2 * (psi - PI)) + 0.00704 * Math.sin(l2rad - 2 * l3rad + pi3) + -0.0062 * Math.sin(l2rad - 2 * l3rad + pi2) + -0.00541 * Math.sin(l3rad - l4rad) + 0.00381 * Math.sin(l2rad - 2 * l3rad + pi4) + 0.00235 * Math.sin(psi - w3rad) + 0.00198 * Math.sin(psi - w4rad) + 0.00176 * Math.sin(philambda) + 0.0013 * Math.sin(3 * (l3rad - l4rad)) + 0.00125 * Math.sin(l1rad - l3rad) + -0.00119 * Math.sin(5 * Gdash - 2 * G + CT.d2R(52.225)) + 0.00109 * Math.sin(l1rad - l2rad) + -0.001 * Math.sin(3 * l3rad - 7 * l4rad + 4 * pi4) + 0.00091 * Math.sin(w3rad - w4rad) + 0.0008 * Math.sin(3 * l3rad - 7 * l4rad + pi3 + 3 * pi4) + -0.00075 * Math.sin(2 * l2rad - 3 * l3rad + pi3) + 0.00072 * Math.sin(pi1 + pi3 - 2 * PI - 2 * G) + 0.00069 * Math.sin(pi4 - PI) + -0.00058 * Math.sin(2 * l3rad - 3 * l4rad + pi4) + -0.00057 * Math.sin(l3rad - 2 * l4rad + pi4) + 0.00056 * Math.sin(l3rad + pi3 - 2 * PI - 2 * G) + -0.00052 * Math.sin(l2rad - 2 * l3rad + pi1) + -0.0005 * Math.sin(pi2 - pi3) + 0.00048 * Math.sin(l3rad - 2 * l4rad + pi3) + -0.00045 * Math.sin(2 * l2rad - 3 * l3rad + pi4) + -0.00041 * Math.sin(pi2 - pi4) + -0.00038 * Math.sin(2 * G) + -0.00037 * Math.sin(pi3 - pi4 + w3rad - w4rad) + -0.00032 * Math.sin(3 * l3rad - 7 * l4rad + 2 * pi3 + 2 * pi4) + 0.0003 * Math.sin(4 * (l3rad - l4rad)) + 0.00029 * Math.sin(l3rad + pi4 - 2 * PI - 2 * G) + -0.00028 * Math.sin(w3rad + psi - 2 * PI - 2 * G) + 0.00026 * Math.sin(l3rad - PI - G) + 0.00024 * Math.sin(l2rad - 3 * l3rad + 2 * l4rad) + 0.00021 * Math.sin(l3rad - PI - G) + -0.00021 * Math.sin(l3rad - pi2) + 0.00017 * Math.sin(2 * (l3rad - pi3));
    var Sigma4 = 0.84287 * Math.sin(l4rad - pi4) + 0.03431 * Math.sin(pi4 - pi3) + -0.03305 * Math.sin(2 * (psi - PI)) + -0.03211 * Math.sin(G) + -0.01862 * Math.sin(l4rad - pi3) + 0.01186 * Math.sin(psi - w4rad) + 0.00623 * Math.sin(l4rad + pi4 - 2 * G - 2 * PI) + 0.00387 * Math.sin(2 * (l4rad - pi4)) + -0.00284 * Math.sin(5 * Gdash - 2 * G + CT.d2R(52.225)) + -0.00234 * Math.sin(2 * (psi - pi4)) + -0.00223 * Math.sin(l3rad - l4rad) + -0.00208 * Math.sin(l4rad - PI) + 0.00178 * Math.sin(psi + w4rad - 2 * pi4) + 0.00134 * Math.sin(pi4 - PI) + 0.00125 * Math.sin(2 * (l4rad - G - PI)) + -0.00117 * Math.sin(2 * G) + -0.00112 * Math.sin(2 * (l3rad - l4rad)) + 0.00107 * Math.sin(3 * l3rad - 7 * l4rad + 4 * pi4) + 0.00102 * Math.sin(l4rad - G - PI) + 0.00096 * Math.sin(2 * l4rad - psi - w4rad) + 0.00087 * Math.sin(2 * (psi - w4rad)) + -0.00085 * Math.sin(3 * l3rad - 7 * l4rad + pi3 + 3 * pi4) + 0.00085 * Math.sin(l3rad - 2 * l4rad + pi4) + -0.00081 * Math.sin(2 * (l4rad - psi)) + 0.00071 * Math.sin(l4rad + pi4 - 2 * PI - 3 * G) + 0.00061 * Math.sin(l1rad - l4rad) + -0.00056 * Math.sin(psi - w3rad) + -0.00054 * Math.sin(l3rad - 2 * l4rad + pi3) + 0.00051 * Math.sin(l2rad - l4rad) + 0.00042 * Math.sin(2 * (psi - G - PI)) + 0.00039 * Math.sin(2 * (pi4 - w4rad)) + 0.00036 * Math.sin(psi + PI - pi4 - w4rad) + 0.00035 * Math.sin(2 * Gdash - G + CT.d2R(188.37)) + -0.00035 * Math.sin(l4rad - pi4 + 2 * PI - 2 * psi) + -0.00032 * Math.sin(l4rad + pi4 - 2 * PI - G) + 0.0003 * Math.sin(2 * Gdash - 2 * G + CT.d2R(149.15)) + 0.00029 * Math.sin(3 * l3rad - 7 * l4rad + 2 * pi3 + 2 * pi4) + 0.00028 * Math.sin(l4rad - pi4 + 2 * psi - 2 * PI) + -0.00028 * Math.sin(2 * (l4rad - w4rad)) + -0.00027 * Math.sin(pi3 - pi4 + w3rad - w4rad) + -0.00026 * Math.sin(5 * Gdash - 3 * G + CT.d2R(188.37)) + 0.00025 * Math.sin(w4rad - w3rad) + -0.00025 * Math.sin(l2rad - 3 * l3rad + 2 * l4rad) + -0.00023 * Math.sin(3 * (l3rad - l4rad)) + 0.00021 * Math.sin(2 * l4rad - 2 * PI - 3 * G) + -0.00021 * Math.sin(2 * l3rad - 3 * l4rad + pi4) + 0.00019 * Math.sin(l4rad - pi4 - G) + -0.00019 * Math.sin(2 * l4rad - pi3 - pi4) + -0.00018 * Math.sin(l4rad - pi4 + G) + -0.00016 * Math.sin(l4rad + pi3 - 2 * PI - 2 * G);
    details.satellite1.meanLongitude = CT.m360(l1);
    details.satellite1.trueLongitude = CT.m360(l1 + Sigma1);
    var L1 = CT.d2R(details.satellite1.trueLongitude);
    details.satellite2.meanLongitude = CT.m360(l2);
    details.satellite2.trueLongitude = CT.m360(l2 + Sigma2);
    var L2 = CT.d2R(details.satellite2.trueLongitude);
    details.satellite3.meanLongitude = CT.m360(l3);
    details.satellite3.trueLongitude = CT.m360(l3 + Sigma3);
    var L3 = CT.d2R(details.satellite3.trueLongitude);
    details.satellite4.meanLongitude = CT.m360(l4);
    details.satellite4.trueLongitude = CT.m360(l4 + Sigma4);
    var L4 = CT.d2R(details.satellite4.trueLongitude);
    var B1 = Math.atan(0.0006393 * Math.sin(L1 - w1rad) + 0.0001825 * Math.sin(L1 - w2rad) + 3.29E-05 * Math.sin(L1 - w3rad) + -3.11E-05 * Math.sin(L1 - psi) + 9.3E-06 * Math.sin(L1 - w4rad) + 7.5E-06 * Math.sin(3 * L1 - 4 * l2rad - 1.9927 * Sigma1 + w2rad) + 4.6E-06 * Math.sin(L1 + psi - 2 * PI - 2 * G));
    details.satellite1.equatorialLatitude = CT.r2D(B1);
    var B2 = Math.atan(0.0081004 * Math.sin(L2 - w2rad) + 0.0004512 * Math.sin(L2 - w3rad) + -0.0003284 * Math.sin(L2 - psi) + 0.000116 * Math.sin(L2 - w4rad) + 2.72E-05 * Math.sin(l1rad - 2 * l3rad + 1.0146 * Sigma2 + w2rad) + -1.44E-05 * Math.sin(L2 - w1rad) + 1.43E-05 * Math.sin(L2 + psi - 2 * PI - 2 * G) + 3.5E-06 * Math.sin(L2 - psi + G) + -2.8E-06 * Math.sin(l1rad - 2 * l3rad + 1.0146 * Sigma2 + w3rad));
    details.satellite2.equatorialLatitude = CT.r2D(B2);
    var B3 = Math.atan(0.0032402 * Math.sin(L3 - w3rad) + -0.0016911 * Math.sin(L3 - psi) + 0.0006847 * Math.sin(L3 - w4rad) + -0.0002797 * Math.sin(L3 - w2rad) + 3.21E-05 * Math.sin(L3 + psi - 2 * PI - 2 * G) + 5.1E-06 * Math.sin(L3 - psi + G) + -4.5E-06 * Math.sin(L3 - psi - G) + -4.5E-06 * Math.sin(L3 + psi - 2 * PI) + 3.7E-06 * Math.sin(L3 + psi - 2 * PI - 3 * G) + 3E-06 * Math.sin(2 * l2rad - 3 * L3 + 4.03 * Sigma3 + w2rad) + -2.1E-06 * Math.sin(2 * l2rad - 3 * L3 + 4.03 * Sigma3 + w3rad));
    details.satellite3.equatorialLatitude = CT.r2D(B3);
    var B4 = Math.atan(-0.0076579 * Math.sin(L4 - psi) + 0.0044134 * Math.sin(L4 - w4rad) + -0.0005112 * Math.sin(L4 - w3rad) + 7.73E-05 * Math.sin(L4 + psi - 2 * PI - 2 * G) + 1.04E-05 * Math.sin(L4 - psi + G) + -1.02E-05 * Math.sin(L4 - psi - G) + 8.8E-06 * Math.sin(L4 + psi - 2 * PI - 3 * G) + -3.8E-06 * Math.sin(L4 + psi - 2 * PI - G));
    details.satellite4.equatorialLatitude = CT.r2D(B4);
    details.satellite1.r = 5.90569 * (1 + (-0.0041339 * Math.cos(2 * (l1rad - l2rad)) + -3.87E-05 * Math.cos(l1rad - pi3) + -2.14E-05 * Math.cos(l1rad - pi4) + 1.7E-05 * Math.cos(l1rad - l2rad) + -1.31E-05 * Math.cos(4 * (l1rad - l2rad)) + 1.06E-05 * Math.cos(l1rad - l3rad) + -6.6E-06 * Math.cos(l1rad + pi3 - 2 * PI - 2 * G)));
    details.satellite2.r = 9.39657 * (1 + (0.0093848 * Math.cos(l1rad - l2rad) + -0.0003116 * Math.cos(l2rad - pi3) + -0.0001744 * Math.cos(l2rad - pi4) + -0.0001442 * Math.cos(l2rad - pi2) + 5.53E-05 * Math.cos(l2rad - l3rad) + 5.23E-05 * Math.cos(l1rad - l3rad) + -2.9E-05 * Math.cos(2 * (l1rad - l2rad)) + 1.64E-05 * Math.cos(2 * (l2rad - w2rad)) + 1.07E-05 * Math.cos(l1rad - 2 * l3rad + pi3) + -1.02E-05 * Math.cos(l2rad - pi1) + -9.1E-06 * Math.cos(2 * (l1rad - l3rad))));
    details.satellite3.r = 14.98832 * (1 + (-0.0014388 * Math.cos(l3rad - pi3) + -0.0007919 * Math.cos(l3rad - pi4) + 0.0006342 * Math.cos(l2rad - l3rad) + -0.0001761 * Math.cos(2 * (l3rad - l4rad)) + 2.94E-05 * Math.cos(l3rad - l4rad) + -1.56E-05 * Math.cos(3 * (l3rad - l4rad)) + 1.56E-05 * Math.cos(l1rad - l3rad) + -1.53E-05 * Math.cos(l1rad - l2rad) + 7E-06 * Math.cos(2 * l2rad - 3 * l3rad + pi3) + -5.1E-06 * Math.cos(l3rad + pi3 - 2 * PI - 2 * G)));
    details.satellite4.r = 26.36273 * (1 + (-0.0073546 * Math.cos(l4rad - pi4) + 0.0001621 * Math.cos(l4rad - pi3) + 9.74E-05 * Math.cos(l3rad - l4rad) + -5.43E-05 * Math.cos(l4rad + pi4 - 2 * PI - 2 * G) + -2.71E-05 * Math.cos(2 * (l4rad - pi4)) + 1.82E-05 * Math.cos(l4rad - PI) + 1.77E-05 * Math.cos(2 * (l3rad - l4rad)) + -1.67E-05 * Math.cos(2 * l4rad - psi - w4rad) + 1.67E-05 * Math.cos(psi - w4rad) + -1.55E-05 * Math.cos(2 * (l4rad - PI - G)) + 1.42E-05 * Math.cos(2 * (l4rad - psi)) + 1.05E-05 * Math.cos(l1rad - l4rad) + 9.2E-06 * Math.cos(l2rad - l4rad) + -8.9E-06 * Math.cos(l4rad - PI - G) + -6.2E-06 * Math.cos(l4rad + pi4 - 2 * PI - 3 * G) + 4.8E-06 * Math.cos(2 * (l4rad - w4rad))));
    var T0 = (JD - 2433282.423) / 36525;
    var P = CT.d2R(1.3966626 * T0 + 0.0003088 * T0 * T0);
    L1 += P;
    details.satellite1.tropicalLongitude = CT.m360(CT.r2D(L1));
    L2 += P;
    details.satellite2.tropicalLongitude = CT.m360(CT.r2D(L2));
    L3 += P;
    details.satellite3.tropicalLongitude = CT.m360(CT.r2D(L3));
    L4 += P;
    details.satellite4.tropicalLongitude = CT.m360(CT.r2D(L4));
    psi += P;
    var T = (JD - 2415020.5) / 36525;
    var I = 3.120262 + 0.0006 * T;
    var Irad = CT.d2R(I);
    var X1 = details.satellite1.r * Math.cos(L1 - psi) * Math.cos(B1);
    var X2 = details.satellite2.r * Math.cos(L2 - psi) * Math.cos(B2);
    var X3 = details.satellite3.r * Math.cos(L3 - psi) * Math.cos(B3);
    var X4 = details.satellite4.r * Math.cos(L4 - psi) * Math.cos(B4);
    var X5 = 0;
    var Y1 = details.satellite1.r * Math.sin(L1 - psi) * Math.cos(B1);
    var Y2 = details.satellite2.r * Math.sin(L2 - psi) * Math.cos(B2);
    var Y3 = details.satellite3.r * Math.sin(L3 - psi) * Math.cos(B3);
    var Y4 = details.satellite4.r * Math.sin(L4 - psi) * Math.cos(B4);
    var Y5 = 0;
    var Z1 = details.satellite1.r * Math.sin(B1);
    var Z2 = details.satellite2.r * Math.sin(B2);
    var Z3 = details.satellite3.r * Math.sin(B3);
    var Z4 = details.satellite4.r * Math.sin(B4);
    var Z5 = 1;
    var omega = CT.d2R(EPO.jupiterLongitudeAscendingNode(JD));
    var i = CT.d2R(EPO.jupiterInclination(JD));
    var A6 = 0;
    var B6 = 0;
    var C6 = 0;
    var north = new C3D();
    var abc = GM.rotations(X5, Y5, Z5, Irad, psi, i, omega, lambda0, beta0, north);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    var D = Math.atan2(A6, C6);
    abc = GM.rotations(X1, Y1, Z1, Irad, psi, i, omega, lambda0, beta0, details.satellite1.eclipticRectangularCoordinates);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    details.satellite1.trueRectangularCoordinates.x = A6 * Math.cos(D) - C6 * Math.sin(D);
    details.satellite1.trueRectangularCoordinates.y = A6 * Math.sin(D) + C6 * Math.cos(D);
    details.satellite1.trueRectangularCoordinates.z = B6;
    abc = GM.rotations(X2, Y2, Z2, Irad, psi, i, omega, lambda0, beta0, details.satellite2.eclipticRectangularCoordinates);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    details.satellite2.trueRectangularCoordinates.x = A6 * Math.cos(D) - C6 * Math.sin(D);
    details.satellite2.trueRectangularCoordinates.y = A6 * Math.sin(D) + C6 * Math.cos(D);
    details.satellite2.trueRectangularCoordinates.z = B6;
    abc = GM.rotations(X3, Y3, Z3, Irad, psi, i, omega, lambda0, beta0, details.satellite3.eclipticRectangularCoordinates);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    details.satellite3.trueRectangularCoordinates.x = A6 * Math.cos(D) - C6 * Math.sin(D);
    details.satellite3.trueRectangularCoordinates.y = A6 * Math.sin(D) + C6 * Math.cos(D);
    details.satellite3.trueRectangularCoordinates.z = B6;
    abc = GM.rotations(X4, Y4, Z4, Irad, psi, i, omega, lambda0, beta0, details.satellite4.eclipticRectangularCoordinates);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    details.satellite4.trueRectangularCoordinates.x = A6 * Math.cos(D) - C6 * Math.sin(D);
    details.satellite4.trueRectangularCoordinates.y = A6 * Math.sin(D) + C6 * Math.cos(D);
    details.satellite4.trueRectangularCoordinates.z = B6;
    details.satellite1.apparentRectangularCoordinates.x = details.satellite1.trueRectangularCoordinates.x + Math.abs(details.satellite1.trueRectangularCoordinates.z) / 17295 * Math.sqrt(1 - (details.satellite1.trueRectangularCoordinates.x / details.satellite1.r) * (details.satellite1.trueRectangularCoordinates.x / details.satellite1.r));
    details.satellite1.apparentRectangularCoordinates.y = details.satellite1.trueRectangularCoordinates.y;
    details.satellite1.apparentRectangularCoordinates.z = details.satellite1.trueRectangularCoordinates.z;
    details.satellite2.apparentRectangularCoordinates.x = details.satellite2.trueRectangularCoordinates.x + Math.abs(details.satellite2.trueRectangularCoordinates.z) / 21819 * Math.sqrt(1 - (details.satellite2.trueRectangularCoordinates.x / details.satellite2.r) * (details.satellite2.trueRectangularCoordinates.x / details.satellite2.r));
    details.satellite2.apparentRectangularCoordinates.y = details.satellite2.trueRectangularCoordinates.y;
    details.satellite2.apparentRectangularCoordinates.z = details.satellite2.trueRectangularCoordinates.z;
    details.satellite3.apparentRectangularCoordinates.x = details.satellite3.trueRectangularCoordinates.x + Math.abs(details.satellite3.trueRectangularCoordinates.z) / 27558 * Math.sqrt(1 - (details.satellite3.trueRectangularCoordinates.x / details.satellite3.r) * (details.satellite3.trueRectangularCoordinates.x / details.satellite3.r));
    details.satellite3.apparentRectangularCoordinates.y = details.satellite3.trueRectangularCoordinates.y;
    details.satellite3.apparentRectangularCoordinates.z = details.satellite3.trueRectangularCoordinates.z;
    details.satellite4.apparentRectangularCoordinates.x = details.satellite4.trueRectangularCoordinates.x + Math.abs(details.satellite4.trueRectangularCoordinates.z) / 36548 * Math.sqrt(1 - (details.satellite4.trueRectangularCoordinates.x / details.satellite4.r) * (details.satellite4.trueRectangularCoordinates.x / details.satellite4.r));
    details.satellite4.apparentRectangularCoordinates.y = details.satellite4.trueRectangularCoordinates.y;
    details.satellite4.apparentRectangularCoordinates.z = details.satellite4.trueRectangularCoordinates.z;
    var W = DELTA / (DELTA + details.satellite1.trueRectangularCoordinates.z / 2095);
    details.satellite1.apparentRectangularCoordinates.x *= W;
    details.satellite1.apparentRectangularCoordinates.y *= W;
    W = DELTA / (DELTA + details.satellite2.trueRectangularCoordinates.z / 2095);
    details.satellite2.apparentRectangularCoordinates.x *= W;
    details.satellite2.apparentRectangularCoordinates.y *= W;
    W = DELTA / (DELTA + details.satellite3.trueRectangularCoordinates.z / 2095);
    details.satellite3.apparentRectangularCoordinates.x *= W;
    details.satellite3.apparentRectangularCoordinates.y *= W;
    W = DELTA / (DELTA + details.satellite4.trueRectangularCoordinates.z / 2095);
    details.satellite4.apparentRectangularCoordinates.x *= W;
    details.satellite4.apparentRectangularCoordinates.y *= W;
    return details;
}
GM.rotations = function GM$rotations(X, Y, Z, I, psi, i, omega, lambda0, beta0, eclipticCoord) {
    /// <param name="X" type="Number">
    /// </param>
    /// <param name="Y" type="Number">
    /// </param>
    /// <param name="Z" type="Number">
    /// </param>
    /// <param name="I" type="Number">
    /// </param>
    /// <param name="psi" type="Number">
    /// </param>
    /// <param name="i" type="Number">
    /// </param>
    /// <param name="omega" type="Number">
    /// </param>
    /// <param name="lambda0" type="Number">
    /// </param>
    /// <param name="beta0" type="Number">
    /// </param>
    /// <param name="eclipticCoord" type="C3D">
    /// </param>
    /// <returns type="Array" elementType="Number"></returns>
    var A6;
    var B6;
    var C6;
    var phi = psi - omega;
    var A1 = X;
    var B1 = Y * Math.cos(I) - Z * Math.sin(I);
    var C1 = Y * Math.sin(I) + Z * Math.cos(I);
    var A2 = A1 * Math.cos(phi) - B1 * Math.sin(phi);
    var B2 = A1 * Math.sin(phi) + B1 * Math.cos(phi);
    var C2 = C1;
    var A3 = A2;
    var B3 = B2 * Math.cos(i) - C2 * Math.sin(i);
    var C3 = B2 * Math.sin(i) + C2 * Math.cos(i);
    var A4 = A3 * Math.cos(omega) - B3 * Math.sin(omega);
    var B4 = A3 * Math.sin(omega) + B3 * Math.cos(omega);
    var C4 = C3;
    var JupiterRadiiToAU = 1 / 2095;
    eclipticCoord.x = A4 * JupiterRadiiToAU;
    eclipticCoord.y = B4 * JupiterRadiiToAU;
    eclipticCoord.z = C4 * JupiterRadiiToAU;
    var A5 = A4 * Math.sin(lambda0) - B4 * Math.cos(lambda0);
    var B5 = A4 * Math.cos(lambda0) + B4 * Math.sin(lambda0);
    var C5 = C4;
    A6 = A5;
    B6 = C5 * Math.sin(beta0) + B5 * Math.cos(beta0);
    C6 = C5 * Math.cos(beta0) - B5 * Math.sin(beta0);
    return [ A6, B6, C6 ];
}
GM.fillInPhenomenaDetails = function GM$fillInPhenomenaDetails(detail) {
    /// <param name="detail" type="GMD">
    /// </param>
    var Y1 = 1.071374 * detail.apparentRectangularCoordinates.y;
    var r = Y1 * Y1 + detail.apparentRectangularCoordinates.x * detail.apparentRectangularCoordinates.x;
    if (r < 1) {
        if (detail.apparentRectangularCoordinates.z < 0) {
            detail.bInTransit = true;
            detail.bInOccultation = false;
        }
        else {
            detail.bInTransit = false;
            detail.bInOccultation = true;
        }
    }
    else {
        detail.bInTransit = false;
        detail.bInOccultation = false;
    }
}


////////////////////////////////////////////////////////////////////////////////
// CAAGlobe

window.CAAGlobe = function CAAGlobe() {
}
CAAGlobe.rhoSinThetaPrime = function CAAGlobe$rhoSinThetaPrime(GeographicalLatitude, Height) {
    /// <param name="GeographicalLatitude" type="Number">
    /// </param>
    /// <param name="Height" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    GeographicalLatitude = CT.d2R(GeographicalLatitude);
    var U = Math.atan(0.99664719 * Math.tan(GeographicalLatitude));
    return 0.99664719 * Math.sin(U) + (Height / 6378149 * Math.sin(GeographicalLatitude));
}
CAAGlobe.rhoCosThetaPrime = function CAAGlobe$rhoCosThetaPrime(GeographicalLatitude, Height) {
    /// <param name="GeographicalLatitude" type="Number">
    /// </param>
    /// <param name="Height" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    GeographicalLatitude = CT.d2R(GeographicalLatitude);
    var U = Math.atan(0.99664719 * Math.tan(GeographicalLatitude));
    return Math.cos(U) + (Height / 6378149 * Math.cos(GeographicalLatitude));
}
CAAGlobe.radiusOfParallelOfLatitude = function CAAGlobe$radiusOfParallelOfLatitude(GeographicalLatitude) {
    /// <param name="GeographicalLatitude" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    GeographicalLatitude = CT.d2R(GeographicalLatitude);
    var sinGeo = Math.sin(GeographicalLatitude);
    return (6378.14 * Math.cos(GeographicalLatitude)) / Math.sqrt(1 - 0.0066943847614084 * sinGeo * sinGeo);
}
CAAGlobe.radiusOfCurvature = function CAAGlobe$radiusOfCurvature(GeographicalLatitude) {
    /// <param name="GeographicalLatitude" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    GeographicalLatitude = CT.d2R(GeographicalLatitude);
    var sinGeo = Math.sin(GeographicalLatitude);
    return (6378.14 * (1 - 0.0066943847614084)) / Math.pow((1 - 0.0066943847614084 * sinGeo * sinGeo), 1.5);
}
CAAGlobe.distanceBetweenPoints = function CAAGlobe$distanceBetweenPoints(GeographicalLatitude1, GeographicalLongitude1, GeographicalLatitude2, GeographicalLongitude2) {
    /// <param name="GeographicalLatitude1" type="Number">
    /// </param>
    /// <param name="GeographicalLongitude1" type="Number">
    /// </param>
    /// <param name="GeographicalLatitude2" type="Number">
    /// </param>
    /// <param name="GeographicalLongitude2" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    GeographicalLatitude1 = CT.d2R(GeographicalLatitude1);
    GeographicalLatitude2 = CT.d2R(GeographicalLatitude2);
    GeographicalLongitude1 = CT.d2R(GeographicalLongitude1);
    GeographicalLongitude2 = CT.d2R(GeographicalLongitude2);
    var F = (GeographicalLatitude1 + GeographicalLatitude2) / 2;
    var G = (GeographicalLatitude1 - GeographicalLatitude2) / 2;
    var lambda = (GeographicalLongitude1 - GeographicalLongitude2) / 2;
    var sinG = Math.sin(G);
    var cosG = Math.cos(G);
    var cosF = Math.cos(F);
    var sinF = Math.sin(F);
    var sinLambda = Math.sin(lambda);
    var cosLambda = Math.cos(lambda);
    var S = (sinG * sinG * cosLambda * cosLambda) + (cosF * cosF * sinLambda * sinLambda);
    var C = (cosG * cosG * cosLambda * cosLambda) + (sinF * sinF * sinLambda * sinLambda);
    var w = Math.atan(Math.sqrt(S / C));
    var R = Math.sqrt(S * C) / w;
    var D = 2 * w * 6378.14;
    var Hprime = (3 * R - 1) / (2 * C);
    var Hprime2 = (3 * R + 1) / (2 * S);
    var f = 0.00335281317789691;
    return D * (1 + (f * Hprime * sinF * sinF * cosG * cosG) - (f * Hprime2 * cosF * cosF * sinG * sinG));
}


////////////////////////////////////////////////////////////////////////////////
// IFR

window.IFR = function IFR() {
}
IFR.phaseAngle = function IFR$phaseAngle(r, R, Delta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="R" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CT.m360(CT.r2D(Math.acos((r * r + Delta * Delta - R * R) / (2 * r * Delta))));
}
IFR.phaseAngle2 = function IFR$phaseAngle2(R, R0, B, L, L0, Delta) {
    /// <param name="R" type="Number">
    /// </param>
    /// <param name="R0" type="Number">
    /// </param>
    /// <param name="B" type="Number">
    /// </param>
    /// <param name="L" type="Number">
    /// </param>
    /// <param name="L0" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    B = CT.d2R(B);
    L = CT.d2R(L);
    L0 = CT.d2R(L0);
    return CT.m360(CT.r2D(Math.acos((R - R0 * Math.cos(B) * Math.cos(L - L0)) / Delta)));
}
IFR.phaseAngleRectangular = function IFR$phaseAngleRectangular(x, y, z, B, L, Delta) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <param name="z" type="Number">
    /// </param>
    /// <param name="B" type="Number">
    /// </param>
    /// <param name="L" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    B = CT.d2R(B);
    L = CT.d2R(L);
    var cosB = Math.cos(B);
    return CT.m360(CT.r2D(Math.acos((x * cosB * Math.cos(L) + y * cosB * Math.sin(L) + z * Math.sin(B)) / Delta)));
}
IFR.illuminatedFraction = function IFR$illuminatedFraction(PhaseAngle) {
    /// <param name="PhaseAngle" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    PhaseAngle = CT.d2R(PhaseAngle);
    return (1 + Math.cos(PhaseAngle)) / 2;
}
IFR.illuminatedFraction2 = function IFR$illuminatedFraction2(r, R, Delta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="R" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return (((r + Delta) * (r + Delta) - R * R) / (4 * r * Delta));
}
IFR.mercuryMagnitudeMuller = function IFR$mercuryMagnitudeMuller(r, Delta, i) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="i" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var I_50 = i - 50;
    return 1.16 + 5 * wwtlib._util.log10(r * Delta) + 0.02838 * I_50 + 0.0001023 * I_50 * I_50;
}
IFR.venusMagnitudeMuller = function IFR$venusMagnitudeMuller(r, Delta, i) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="i" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -4 + 5 * wwtlib._util.log10(r * Delta) + 0.01322 * i + 4.247E-07 * i * i * i;
}
IFR.marsMagnitudeMuller = function IFR$marsMagnitudeMuller(r, Delta, i) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="i" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -1.3 + 5 * wwtlib._util.log10(r * Delta) + 0.01486 * i;
}
IFR.jupiterMagnitudeMuller = function IFR$jupiterMagnitudeMuller(r, Delta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -8.93 + 5 * wwtlib._util.log10(r * Delta);
}
IFR.saturnMagnitudeMuller = function IFR$saturnMagnitudeMuller(r, Delta, DeltaU, B) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="DeltaU" type="Number">
    /// </param>
    /// <param name="B" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    B = CT.d2R(B);
    var sinB = Math.sin(B);
    return -8.68 + 5 * wwtlib._util.log10(r * Delta) + 0.044 * Math.abs(DeltaU) - 2.6 * Math.sin(Math.abs(B)) + 1.25 * sinB * sinB;
}
IFR.uranusMagnitudeMuller = function IFR$uranusMagnitudeMuller(r, Delta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -6.85 + 5 * wwtlib._util.log10(r * Delta);
}
IFR.neptuneMagnitudeMuller = function IFR$neptuneMagnitudeMuller(r, Delta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -7.05 + 5 * wwtlib._util.log10(r * Delta);
}
IFR.mercuryMagnitudeAA = function IFR$mercuryMagnitudeAA(r, Delta, i) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="i" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var i2 = i * i;
    var i3 = i2 * i;
    return -0.42 + 5 * wwtlib._util.log10(r * Delta) + 0.038 * i - 0.000273 * i2 + 2E-06 * i3;
}
IFR.venusMagnitudeAA = function IFR$venusMagnitudeAA(r, Delta, i) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="i" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var i2 = i * i;
    var i3 = i2 * i;
    return -4.4 + 5 * wwtlib._util.log10(r * Delta) + 0.0009 * i + 0.000239 * i2 - 6.5E-07 * i3;
}
IFR.marsMagnitudeAA = function IFR$marsMagnitudeAA(r, Delta, i) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="i" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -1.52 + 5 * wwtlib._util.log10(r * Delta) + 0.016 * i;
}
IFR.jupiterMagnitudeAA = function IFR$jupiterMagnitudeAA(r, Delta, i) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="i" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -9.4 + 5 * wwtlib._util.log10(r * Delta) + 0.005 * i;
}
IFR.saturnMagnitudeAA = function IFR$saturnMagnitudeAA(r, Delta, DeltaU, B) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="DeltaU" type="Number">
    /// </param>
    /// <param name="B" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    B = CT.d2R(B);
    var sinB = Math.sin(B);
    return -8.88 + 5 * wwtlib._util.log10(r * Delta) + 0.044 * Math.abs(DeltaU) - 2.6 * Math.sin(Math.abs(B)) + 1.25 * sinB * sinB;
}
IFR.uranusMagnitudeAA = function IFR$uranusMagnitudeAA(r, Delta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -7.19 + 5 * wwtlib._util.log10(r * Delta);
}
IFR.neptuneMagnitudeAA = function IFR$neptuneMagnitudeAA(r, Delta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -6.87 + 5 * wwtlib._util.log10(r * Delta);
}
IFR.plutoMagnitudeAA = function IFR$plutoMagnitudeAA(r, Delta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -1 + 5 * wwtlib._util.log10(r * Delta);
}


////////////////////////////////////////////////////////////////////////////////
// INTP

window.INTP = function INTP() {
}
INTP.interpolate = function INTP$interpolate(n, Y1, Y2, Y3) {
    /// <param name="n" type="Number">
    /// </param>
    /// <param name="Y1" type="Number">
    /// </param>
    /// <param name="Y2" type="Number">
    /// </param>
    /// <param name="Y3" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var a = Y2 - Y1;
    var b = Y3 - Y2;
    var c = Y1 + Y3 - 2 * Y2;
    return Y2 + n / 2 * (a + b + n * c);
}
INTP.interpolate2 = function INTP$interpolate2(n, Y1, Y2, Y3, Y4, Y5) {
    /// <param name="n" type="Number">
    /// </param>
    /// <param name="Y1" type="Number">
    /// </param>
    /// <param name="Y2" type="Number">
    /// </param>
    /// <param name="Y3" type="Number">
    /// </param>
    /// <param name="Y4" type="Number">
    /// </param>
    /// <param name="Y5" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var A = Y2 - Y1;
    var B = Y3 - Y2;
    var C = Y4 - Y3;
    var D = Y5 - Y4;
    var E = B - A;
    var F = C - B;
    var G = D - C;
    var H = F - E;
    var J = G - F;
    var K = J - H;
    var N2 = n * n;
    var N3 = N2 * n;
    var N4 = N3 * n;
    return Y3 + n * ((B + C) / 2 - (H + J) / 12) + N2 * (F / 2 - K / 24) + N3 * ((H + J) / 12) + N4 * (K / 24);
}
INTP.interpolateToHalves = function INTP$interpolateToHalves(Y1, Y2, Y3, Y4) {
    /// <param name="Y1" type="Number">
    /// </param>
    /// <param name="Y2" type="Number">
    /// </param>
    /// <param name="Y3" type="Number">
    /// </param>
    /// <param name="Y4" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return (9 * (Y2 + Y3) - Y1 - Y4) / 16;
}
INTP.lagrangeInterpolate = function INTP$lagrangeInterpolate(X, n, pX, pY) {
    /// <param name="X" type="Number">
    /// </param>
    /// <param name="n" type="Number" integer="true">
    /// </param>
    /// <param name="pX" type="Array" elementType="Number">
    /// </param>
    /// <param name="pY" type="Array" elementType="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var V = 0;
    for (var i = 1; i <= n; i++) {
        var C = 1;
        for (var j = 1; j <= n; j++) {
            if (j !== i) {
                C = C * (X - pX[j - 1]) / (pX[i - 1] - pX[j - 1]);
            }
        }
        V += C * pY[i - 1];
    }
    return V;
}
INTP.zero = function INTP$zero(Y1, Y2, Y3) {
    /// <param name="Y1" type="Number">
    /// </param>
    /// <param name="Y2" type="Number">
    /// </param>
    /// <param name="Y3" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var a = Y2 - Y1;
    var b = Y3 - Y2;
    var c = Y1 + Y3 - 2 * Y2;
    var bRecalc = true;
    var n0prev = 0;
    var n0 = n0prev;
    while (bRecalc) {
        n0 = -2 * Y2 / (a + b + c * n0prev);
        bRecalc = (Math.abs(n0 - n0prev) > 1E-12);
        if (bRecalc) {
            n0prev = n0;
        }
    }
    return n0;
}
INTP.zeroB = function INTP$zeroB(Y1, Y2, Y3, Y4, Y5) {
    /// <param name="Y1" type="Number">
    /// </param>
    /// <param name="Y2" type="Number">
    /// </param>
    /// <param name="Y3" type="Number">
    /// </param>
    /// <param name="Y4" type="Number">
    /// </param>
    /// <param name="Y5" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var A = Y2 - Y1;
    var B = Y3 - Y2;
    var C = Y4 - Y3;
    var D = Y5 - Y4;
    var E = B - A;
    var F = C - B;
    var G = D - C;
    var H = F - E;
    var J = G - F;
    var K = J - H;
    var bRecalc = true;
    var n0prev = 0;
    var n0 = n0prev;
    while (bRecalc) {
        var n0prev2 = n0prev * n0prev;
        var n0prev3 = n0prev2 * n0prev;
        var n0prev4 = n0prev3 * n0prev;
        n0 = (-24 * Y3 + n0prev2 * (K - 12 * F) - 2 * n0prev3 * (H + J) - n0prev4 * K) / (2 * (6 * B + 6 * C - H - J));
        bRecalc = (Math.abs(n0 - n0prev) > 1E-12);
        if (bRecalc) {
            n0prev = n0;
        }
    }
    return n0;
}
INTP.zero2 = function INTP$zero2(Y1, Y2, Y3) {
    /// <param name="Y1" type="Number">
    /// </param>
    /// <param name="Y2" type="Number">
    /// </param>
    /// <param name="Y3" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var a = Y2 - Y1;
    var b = Y3 - Y2;
    var c = Y1 + Y3 - 2 * Y2;
    var bRecalc = true;
    var n0prev = 0;
    var n0 = n0prev;
    while (bRecalc) {
        var deltan0 = -(2 * Y2 + n0prev * (a + b + c * n0prev)) / (a + b + 2 * c * n0prev);
        n0 = n0prev + deltan0;
        bRecalc = (Math.abs(deltan0) > 1E-12);
        if (bRecalc) {
            n0prev = n0;
        }
    }
    return n0;
}
INTP.zero2B = function INTP$zero2B(Y1, Y2, Y3, Y4, Y5) {
    /// <param name="Y1" type="Number">
    /// </param>
    /// <param name="Y2" type="Number">
    /// </param>
    /// <param name="Y3" type="Number">
    /// </param>
    /// <param name="Y4" type="Number">
    /// </param>
    /// <param name="Y5" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var A = Y2 - Y1;
    var B = Y3 - Y2;
    var C = Y4 - Y3;
    var D = Y5 - Y4;
    var E = B - A;
    var F = C - B;
    var G = D - C;
    var H = F - E;
    var J = G - F;
    var K = J - H;
    var M = K / 24;
    var N = (H + J) / 12;
    var P = F / 2 - M;
    var Q = (B + C) / 2 - N;
    var bRecalc = true;
    var n0prev = 0;
    var n0 = n0prev;
    while (bRecalc) {
        var n0prev2 = n0prev * n0prev;
        var n0prev3 = n0prev2 * n0prev;
        var n0prev4 = n0prev3 * n0prev;
        var deltan0 = -(M * n0prev4 + N * n0prev3 + P * n0prev2 + Q * n0prev + Y3) / (4 * M * n0prev3 + 3 * N * n0prev2 + 2 * P * n0prev + Q);
        n0 = n0prev + deltan0;
        bRecalc = (Math.abs(deltan0) > 1E-12);
        if (bRecalc) {
            n0prev = n0;
        }
    }
    return n0;
}


////////////////////////////////////////////////////////////////////////////////
// CAAJupiter

window.CAAJupiter = function CAAJupiter() {
}
CAAJupiter.eclipticLongitude = function CAAJupiter$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0JupiterCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0JupiterCoefficients[i].a * Math.cos(GFX.g_L0JupiterCoefficients[i].b + GFX.g_L0JupiterCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1JupiterCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1JupiterCoefficients[i].a * Math.cos(GFX.g_L1JupiterCoefficients[i].b + GFX.g_L1JupiterCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2JupiterCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2JupiterCoefficients[i].a * Math.cos(GFX.g_L2JupiterCoefficients[i].b + GFX.g_L2JupiterCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3JupiterCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3JupiterCoefficients[i].a * Math.cos(GFX.g_L3JupiterCoefficients[i].b + GFX.g_L3JupiterCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4JupiterCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4JupiterCoefficients[i].a * Math.cos(GFX.g_L4JupiterCoefficients[i].b + GFX.g_L4JupiterCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5JupiterCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
        L5 += GFX.g_L5JupiterCoefficients[i].a * Math.cos(GFX.g_L5JupiterCoefficients[i].b + GFX.g_L5JupiterCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAAJupiter.eclipticLatitude = function CAAJupiter$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nB0Coefficients = GFX.g_B0JupiterCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0JupiterCoefficients[i].a * Math.cos(GFX.g_B0JupiterCoefficients[i].b + GFX.g_B0JupiterCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1JupiterCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1JupiterCoefficients[i].a * Math.cos(GFX.g_B1JupiterCoefficients[i].b + GFX.g_B1JupiterCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2JupiterCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2JupiterCoefficients[i].a * Math.cos(GFX.g_B2JupiterCoefficients[i].b + GFX.g_B2JupiterCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3JupiterCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3JupiterCoefficients[i].a * Math.cos(GFX.g_B3JupiterCoefficients[i].b + GFX.g_B3JupiterCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4JupiterCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4JupiterCoefficients[i].a * Math.cos(GFX.g_B4JupiterCoefficients[i].b + GFX.g_B4JupiterCoefficients[i].c * rho);
    }
    var nB5Coefficients = GFX.g_B5JupiterCoefficients.length;
    var B5 = 0;
    for (i = 0; i < nB5Coefficients; i++) {
        B5 += GFX.g_B5JupiterCoefficients[i].a * Math.cos(GFX.g_B5JupiterCoefficients[i].b + GFX.g_B5JupiterCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4 + B5 * rho5) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
CAAJupiter.radiusVector = function CAAJupiter$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nR0Coefficients = GFX.g_R0JupiterCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
        R0 += GFX.g_R0JupiterCoefficients[i].a * Math.cos(GFX.g_R0JupiterCoefficients[i].b + GFX.g_R0JupiterCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1JupiterCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
        R1 += GFX.g_R1JupiterCoefficients[i].a * Math.cos(GFX.g_R1JupiterCoefficients[i].b + GFX.g_R1JupiterCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2JupiterCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
        R2 += GFX.g_R2JupiterCoefficients[i].a * Math.cos(GFX.g_R2JupiterCoefficients[i].b + GFX.g_R2JupiterCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3JupiterCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
        R3 += GFX.g_R3JupiterCoefficients[i].a * Math.cos(GFX.g_R3JupiterCoefficients[i].b + GFX.g_R3JupiterCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4JupiterCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
        R4 += GFX.g_R4JupiterCoefficients[i].a * Math.cos(GFX.g_R4JupiterCoefficients[i].b + GFX.g_R4JupiterCoefficients[i].c * rho);
    }
    var nR5Coefficients = GFX.g_R5JupiterCoefficients.length;
    var R5 = 0;
    for (i = 0; i < nR5Coefficients; i++) {
        R5 += GFX.g_R5JupiterCoefficients[i].a * Math.cos(GFX.g_R5JupiterCoefficients[i].b + GFX.g_R5JupiterCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4 + R5 * rho5) / 100000000;
}


////////////////////////////////////////////////////////////////////////////////
// CAAKepler

window.CAAKepler = function CAAKepler() {
}
CAAKepler.calculate = function CAAKepler$calculate(M, e) {
    /// <param name="M" type="Number">
    /// </param>
    /// <param name="e" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CAAKepler.calculateIter(M, e, 53);
}
CAAKepler.calculateIter = function CAAKepler$calculateIter(M, e, nIterations) {
    /// <param name="M" type="Number">
    /// </param>
    /// <param name="e" type="Number">
    /// </param>
    /// <param name="nIterations" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    M = CT.d2R(M);
    var PI = CT.PI();
    var F = 1;
    if (M < 0) {
        F = -1;
    }
    M = Math.abs(M) / (2 * PI);
    M = (M - parseInt(M)) * 2 * PI * F;
    if (M < 0) {
        M += 2 * PI;
    }
    F = 1;
    if (M > PI) {
        F = -1;
    }
    if (M > PI) {
        M = 2 * PI - M;
    }
    var E = PI / 2;
    var scale = PI / 4;
    for (var i = 0; i < nIterations; i++) {
        var R = E - e * Math.sin(E);
        if (M > R) {
            E += scale;
        }
        else {
            E -= scale;
        }
        scale /= 2;
    }
    return CT.r2D(E) * F;
}


////////////////////////////////////////////////////////////////////////////////
// CAAMars

window.CAAMars = function CAAMars() {
}
CAAMars.eclipticLongitude = function CAAMars$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0MarsCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0MarsCoefficients[i].a * Math.cos(GFX.g_L0MarsCoefficients[i].b + GFX.g_L0MarsCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1MarsCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1MarsCoefficients[i].a * Math.cos(GFX.g_L1MarsCoefficients[i].b + GFX.g_L1MarsCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2MarsCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2MarsCoefficients[i].a * Math.cos(GFX.g_L2MarsCoefficients[i].b + GFX.g_L2MarsCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3MarsCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3MarsCoefficients[i].a * Math.cos(GFX.g_L3MarsCoefficients[i].b + GFX.g_L3MarsCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4MarsCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4MarsCoefficients[i].a * Math.cos(GFX.g_L4MarsCoefficients[i].b + GFX.g_L4MarsCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5MarsCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
        L5 += GFX.g_L5MarsCoefficients[i].a * Math.cos(GFX.g_L5MarsCoefficients[i].b + GFX.g_L5MarsCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAAMars.eclipticLatitude = function CAAMars$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0MarsCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0MarsCoefficients[i].a * Math.cos(GFX.g_B0MarsCoefficients[i].b + GFX.g_B0MarsCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1MarsCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1MarsCoefficients[i].a * Math.cos(GFX.g_B1MarsCoefficients[i].b + GFX.g_B1MarsCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2MarsCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2MarsCoefficients[i].a * Math.cos(GFX.g_B2MarsCoefficients[i].b + GFX.g_B2MarsCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3MarsCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3MarsCoefficients[i].a * Math.cos(GFX.g_B3MarsCoefficients[i].b + GFX.g_B3MarsCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4MarsCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4MarsCoefficients[i].a * Math.cos(GFX.g_B4MarsCoefficients[i].b + GFX.g_B4MarsCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
CAAMars.radiusVector = function CAAMars$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nR0Coefficients = GFX.g_R0MarsCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
        R0 += GFX.g_R0MarsCoefficients[i].a * Math.cos(GFX.g_R0MarsCoefficients[i].b + GFX.g_R0MarsCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1MarsCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
        R1 += GFX.g_R1MarsCoefficients[i].a * Math.cos(GFX.g_R1MarsCoefficients[i].b + GFX.g_R1MarsCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2MarsCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
        R2 += GFX.g_R2MarsCoefficients[i].a * Math.cos(GFX.g_R2MarsCoefficients[i].b + GFX.g_R2MarsCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3MarsCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
        R3 += GFX.g_R3MarsCoefficients[i].a * Math.cos(GFX.g_R3MarsCoefficients[i].b + GFX.g_R3MarsCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4MarsCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
        R4 += GFX.g_R4MarsCoefficients[i].a * Math.cos(GFX.g_R4MarsCoefficients[i].b + GFX.g_R4MarsCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4) / 100000000;
}


////////////////////////////////////////////////////////////////////////////////
// CAAMercury

window.CAAMercury = function CAAMercury() {
}
CAAMercury.eclipticLongitude = function CAAMercury$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0MercuryCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0MercuryCoefficients[i].a * Math.cos(GFX.g_L0MercuryCoefficients[i].b + GFX.g_L0MercuryCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1MercuryCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1MercuryCoefficients[i].a * Math.cos(GFX.g_L1MercuryCoefficients[i].b + GFX.g_L1MercuryCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2MercuryCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2MercuryCoefficients[i].a * Math.cos(GFX.g_L2MercuryCoefficients[i].b + GFX.g_L2MercuryCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3MercuryCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3MercuryCoefficients[i].a * Math.cos(GFX.g_L3MercuryCoefficients[i].b + GFX.g_L3MercuryCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4MercuryCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4MercuryCoefficients[i].a * Math.cos(GFX.g_L4MercuryCoefficients[i].b + GFX.g_L4MercuryCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5MercuryCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
        L5 += GFX.g_L5MercuryCoefficients[i].a * Math.cos(GFX.g_L5MercuryCoefficients[i].b + GFX.g_L5MercuryCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAAMercury.eclipticLatitude = function CAAMercury$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0MercuryCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0MercuryCoefficients[i].a * Math.cos(GFX.g_B0MercuryCoefficients[i].b + GFX.g_B0MercuryCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1MercuryCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1MercuryCoefficients[i].a * Math.cos(GFX.g_B1MercuryCoefficients[i].b + GFX.g_B1MercuryCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2MercuryCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2MercuryCoefficients[i].a * Math.cos(GFX.g_B2MercuryCoefficients[i].b + GFX.g_B2MercuryCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3MercuryCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3MercuryCoefficients[i].a * Math.cos(GFX.g_B3MercuryCoefficients[i].b + GFX.g_B3MercuryCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4MercuryCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4MercuryCoefficients[i].a * Math.cos(GFX.g_B4MercuryCoefficients[i].b + GFX.g_B4MercuryCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
CAAMercury.radiusVector = function CAAMercury$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var nR0Coefficients = GFX.g_R0MercuryCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
        R0 += GFX.g_R0MercuryCoefficients[i].a * Math.cos(GFX.g_R0MercuryCoefficients[i].b + GFX.g_R0MercuryCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1MercuryCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
        R1 += GFX.g_R1MercuryCoefficients[i].a * Math.cos(GFX.g_R1MercuryCoefficients[i].b + GFX.g_R1MercuryCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2MercuryCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
        R2 += GFX.g_R2MercuryCoefficients[i].a * Math.cos(GFX.g_R2MercuryCoefficients[i].b + GFX.g_R2MercuryCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3MercuryCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
        R3 += GFX.g_R3MercuryCoefficients[i].a * Math.cos(GFX.g_R3MercuryCoefficients[i].b + GFX.g_R3MercuryCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed) / 100000000;
}


////////////////////////////////////////////////////////////////////////////////
// CAAMoon

window.CAAMoon = function CAAMoon() {
}
CAAMoon.meanLongitude = function CAAMoon$meanLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(218.3164477 + 481267.88123421 * T - 0.0015786 * Tsquared + Tcubed / 538841 - T4 / 65194000);
}
CAAMoon.meanElongation = function CAAMoon$meanElongation(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(297.8501921 + 445267.1114034 * T - 0.0018819 * Tsquared + Tcubed / 545868 - T4 / 113065000);
}
CAAMoon.meanAnomaly = function CAAMoon$meanAnomaly(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(134.9633964 + 477198.8675055 * T + 0.0087414 * Tsquared + Tcubed / 69699 - T4 / 14712000);
}
CAAMoon.argumentOfLatitude = function CAAMoon$argumentOfLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(93.272095 + 483202.0175233 * T - 0.0036539 * Tsquared - Tcubed / 3526000 + T4 / 863310000);
}
CAAMoon.meanLongitudeAscendingNode = function CAAMoon$meanLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(125.0445479 - 1934.1362891 * T + 0.0020754 * Tsquared + Tcubed / 467441 - T4 / 60616000);
}
CAAMoon.meanLongitudePerigee = function CAAMoon$meanLongitudePerigee(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(83.3532465 + 4069.0137287 * T - 0.01032 * Tsquared - Tcubed / 80053 + T4 / 18999000);
}
CAAMoon.trueLongitudeAscendingNode = function CAAMoon$trueLongitudeAscendingNode(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var TrueAscendingNode = CAAMoon.meanLongitudeAscendingNode(JD);
    var D = CAAMoon.meanElongation(JD);
    D = CT.d2R(D);
    var M = CAAEarth.sunMeanAnomaly(JD);
    M = CT.d2R(M);
    var Mdash = CAAMoon.meanAnomaly(JD);
    Mdash = CT.d2R(Mdash);
    var F = CAAMoon.argumentOfLatitude(JD);
    F = CT.d2R(F);
    TrueAscendingNode -= 1.4979 * Math.sin(2 * (D - F));
    TrueAscendingNode -= 0.15 * Math.sin(M);
    TrueAscendingNode -= 0.1226 * Math.sin(2 * D);
    TrueAscendingNode += 0.1176 * Math.sin(2 * F);
    TrueAscendingNode -= 0.0801 * Math.sin(2 * (Mdash - F));
    return CT.m360(TrueAscendingNode);
}
CAAMoon.eclipticLongitude = function CAAMoon$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Ldash = CAAMoon.meanLongitude(JD);
    var LdashDegrees = Ldash;
    Ldash = CT.d2R(Ldash);
    var D = CAAMoon.meanElongation(JD);
    D = CT.d2R(D);
    var M = CAAEarth.sunMeanAnomaly(JD);
    M = CT.d2R(M);
    var Mdash = CAAMoon.meanAnomaly(JD);
    Mdash = CT.d2R(Mdash);
    var F = CAAMoon.argumentOfLatitude(JD);
    F = CT.d2R(F);
    var E = CAAEarth.eccentricity(JD);
    var T = (JD - 2451545) / 36525;
    var A1 = CT.m360(119.75 + 131.849 * T);
    A1 = CT.d2R(A1);
    var A2 = CT.m360(53.09 + 479264.29 * T);
    A2 = CT.d2R(A2);
    var A3 = CT.m360(313.45 + 481266.484 * T);
    A3 = CT.d2R(A3);
    var nLCoefficients = GFX.g_MoonCoefficients1.length;
    var SigmaL = 0;
    for (var i = 0; i < nLCoefficients; i++) {
        var ThisSigma = GFX.g_MoonCoefficients2[i].a * Math.sin(GFX.g_MoonCoefficients1[i].d * D + GFX.g_MoonCoefficients1[i].m * M + GFX.g_MoonCoefficients1[i].mdash * Mdash + GFX.g_MoonCoefficients1[i].f * F);
        if (!!GFX.g_MoonCoefficients1[i].m) {
            ThisSigma *= E;
        }
        SigmaL += ThisSigma;
    }
    SigmaL += 3958 * Math.sin(A1);
    SigmaL += 1962 * Math.sin(Ldash - F);
    SigmaL += 318 * Math.sin(A2);
    var NutationInLong = CAANutation.nutationInLongitude(JD);
    return CT.m360(LdashDegrees + SigmaL / 1000000 + NutationInLong / 3600);
}
CAAMoon.eclipticLatitude = function CAAMoon$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Ldash = CAAMoon.meanLongitude(JD);
    Ldash = CT.d2R(Ldash);
    var D = CAAMoon.meanElongation(JD);
    D = CT.d2R(D);
    var M = CAAEarth.sunMeanAnomaly(JD);
    M = CT.d2R(M);
    var Mdash = CAAMoon.meanAnomaly(JD);
    Mdash = CT.d2R(Mdash);
    var F = CAAMoon.argumentOfLatitude(JD);
    F = CT.d2R(F);
    var E = CAAEarth.eccentricity(JD);
    var T = (JD - 2451545) / 36525;
    var A1 = CT.m360(119.75 + 131.849 * T);
    A1 = CT.d2R(A1);
    var A2 = CT.m360(53.09 + 479264.29 * T);
    A2 = CT.d2R(A2);
    var A3 = CT.m360(313.45 + 481266.484 * T);
    A3 = CT.d2R(A3);
    var nBCoefficients = GFX.g_MoonCoefficients3.length;
    var SigmaB = 0;
    for (var i = 0; i < nBCoefficients; i++) {
        var ThisSigma = GFX.g_MoonCoefficients4[i] * Math.sin(GFX.g_MoonCoefficients3[i].d * D + GFX.g_MoonCoefficients3[i].m * M + GFX.g_MoonCoefficients3[i].mdash * Mdash + GFX.g_MoonCoefficients3[i].f * F);
        if (!!GFX.g_MoonCoefficients3[i].m) {
            ThisSigma *= E;
        }
        SigmaB += ThisSigma;
    }
    SigmaB -= 2235 * Math.sin(Ldash);
    SigmaB += 382 * Math.sin(A3);
    SigmaB += 175 * Math.sin(A1 - F);
    SigmaB += 175 * Math.sin(A1 + F);
    SigmaB += 127 * Math.sin(Ldash - Mdash);
    SigmaB -= 115 * Math.sin(Ldash + Mdash);
    return SigmaB / 1000000;
}
CAAMoon.radiusVector = function CAAMoon$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Ldash = CAAMoon.meanLongitude(JD);
    Ldash = CT.d2R(Ldash);
    var D = CAAMoon.meanElongation(JD);
    D = CT.d2R(D);
    var M = CAAEarth.sunMeanAnomaly(JD);
    M = CT.d2R(M);
    var Mdash = CAAMoon.meanAnomaly(JD);
    Mdash = CT.d2R(Mdash);
    var F = CAAMoon.argumentOfLatitude(JD);
    F = CT.d2R(F);
    var E = CAAEarth.eccentricity(JD);
    var T = (JD - 2451545) / 36525;
    var A1 = CT.m360(119.75 + 131.849 * T);
    A1 = CT.d2R(A1);
    var A2 = CT.m360(53.09 + 479264.29 * T);
    A2 = CT.d2R(A2);
    var A3 = CT.m360(313.45 + 481266.484 * T);
    A3 = CT.d2R(A3);
    var nRCoefficients = GFX.g_MoonCoefficients1.length;
    var SigmaR = 0;
    for (var i = 0; i < nRCoefficients; i++) {
        var ThisSigma = GFX.g_MoonCoefficients2[i].b * Math.cos(GFX.g_MoonCoefficients1[i].d * D + GFX.g_MoonCoefficients1[i].m * M + GFX.g_MoonCoefficients1[i].mdash * Mdash + GFX.g_MoonCoefficients1[i].f * F);
        if (!!GFX.g_MoonCoefficients1[i].m) {
            ThisSigma *= E;
        }
        SigmaR += ThisSigma;
    }
    return 385000.56 + SigmaR / 1000;
}
CAAMoon.radiusVectorToHorizontalParallax = function CAAMoon$radiusVectorToHorizontalParallax(RadiusVector) {
    /// <param name="RadiusVector" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CT.r2D(Math.asin(6378.14 / RadiusVector));
}
CAAMoon.horizontalParallaxToRadiusVector = function CAAMoon$horizontalParallaxToRadiusVector(Parallax) {
    /// <param name="Parallax" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 6378.14 / Math.sin(CT.d2R(Parallax));
}


////////////////////////////////////////////////////////////////////////////////
// MoonCoefficient1

window.MoonCoefficient1 = function MoonCoefficient1(d, m, mdash, f) {
    /// <param name="d" type="Number">
    /// </param>
    /// <param name="m" type="Number">
    /// </param>
    /// <param name="mdash" type="Number">
    /// </param>
    /// <param name="f" type="Number">
    /// </param>
    /// <field name="d" type="Number">
    /// </field>
    /// <field name="m" type="Number">
    /// </field>
    /// <field name="mdash" type="Number">
    /// </field>
    /// <field name="f" type="Number">
    /// </field>
    this.d = d;
    this.m = m;
    this.mdash = mdash;
    this.f = f;
}
MoonCoefficient1.prototype = {
    d: 0,
    m: 0,
    mdash: 0,
    f: 0
}


////////////////////////////////////////////////////////////////////////////////
// MoonCoefficient2

window.MoonCoefficient2 = function MoonCoefficient2(a, b) {
    /// <param name="a" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <field name="a" type="Number">
    /// </field>
    /// <field name="b" type="Number">
    /// </field>
    this.a = a;
    this.b = b;
}
MoonCoefficient2.prototype = {
    a: 0,
    b: 0
}


////////////////////////////////////////////////////////////////////////////////
// MIFR

window.MIFR = function MIFR() {
}
MIFR.geocentricElongation = function MIFR$geocentricElongation(ObjectAlpha, ObjectDelta, SunAlpha, SunDelta) {
    /// <param name="ObjectAlpha" type="Number">
    /// </param>
    /// <param name="ObjectDelta" type="Number">
    /// </param>
    /// <param name="SunAlpha" type="Number">
    /// </param>
    /// <param name="SunDelta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    ObjectAlpha = CT.d2R(ObjectAlpha * 15);
    SunAlpha = CT.d2R(SunAlpha * 15);
    ObjectDelta = CT.d2R(ObjectDelta);
    SunDelta = CT.d2R(SunDelta);
    return CT.r2D(Math.acos(Math.sin(SunDelta) * Math.sin(ObjectDelta) + Math.cos(SunDelta) * Math.cos(ObjectDelta) * Math.cos(SunAlpha - ObjectAlpha)));
}
MIFR.phaseAngle = function MIFR$phaseAngle(GeocentricElongation, EarthObjectDistance, EarthSunDistance) {
    /// <param name="GeocentricElongation" type="Number">
    /// </param>
    /// <param name="EarthObjectDistance" type="Number">
    /// </param>
    /// <param name="EarthSunDistance" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    GeocentricElongation = CT.d2R(GeocentricElongation);
    return CT.m360(CT.r2D(Math.atan2(EarthSunDistance * Math.sin(GeocentricElongation), EarthObjectDistance - EarthSunDistance * Math.cos(GeocentricElongation))));
}
MIFR.illuminatedFraction = function MIFR$illuminatedFraction(PhaseAngle) {
    /// <param name="PhaseAngle" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    PhaseAngle = CT.d2R(PhaseAngle);
    return (1 + Math.cos(PhaseAngle)) / 2;
}
MIFR.positionAngle = function MIFR$positionAngle(Alpha0, Delta0, Alpha, Delta) {
    /// <param name="Alpha0" type="Number">
    /// </param>
    /// <param name="Delta0" type="Number">
    /// </param>
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    Alpha0 = CT.h2R(Alpha0);
    Alpha = CT.h2R(Alpha);
    Delta0 = CT.d2R(Delta0);
    Delta = CT.d2R(Delta);
    return CT.m360(CT.r2D(Math.atan2(Math.cos(Delta0) * Math.sin(Alpha0 - Alpha), Math.sin(Delta0) * Math.cos(Delta) - Math.cos(Delta0) * Math.sin(Delta) * Math.cos(Alpha0 - Alpha))));
}


////////////////////////////////////////////////////////////////////////////////
// CAAMoonNodes

window.CAAMoonNodes = function CAAMoonNodes() {
}
CAAMoonNodes.k = function CAAMoonNodes$k(Year) {
    /// <param name="Year" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 13.4223 * (Year - 2000.05);
}
CAAMoonNodes.passageThroNode = function CAAMoonNodes$passageThroNode(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = k / 1342.23;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(183.638 + 331.73735682 * k + 0.0014852 * Tsquared + 2.09E-06 * Tcubed - 1E-08 * T4);
    var M = CT.m360(17.4006 + 26.8203725 * k + 0.0001186 * Tsquared + 6E-08 * Tcubed);
    var Mdash = CT.m360(38.3776 + 355.52747313 * k + 0.0123499 * Tsquared + 1.4627E-05 * Tcubed - 6.9E-08 * T4);
    var omega = CT.m360(123.9767 - 1.44098956 * k + 0.0020608 * Tsquared + 2.14E-06 * Tcubed - 1.6E-08 * T4);
    var V = CT.m360(299.75 + 132.85 * T - 0.009173 * Tsquared);
    var P = CT.m360(omega + 272.75 - 2.3 * T);
    var E = 1 - 0.002516 * T - 7.4E-06 * Tsquared;
    D = CT.d2R(D);
    var D2 = 2 * D;
    var D4 = D2 * D2;
    M = CT.d2R(M);
    Mdash = CT.d2R(Mdash);
    var Mdash2 = 2 * Mdash;
    omega = CT.d2R(omega);
    V = CT.d2R(V);
    P = CT.d2R(P);
    var JD = 2451565.1619 + 27.212220817 * k + 0.0002762 * Tsquared + 2.1E-08 * Tcubed - 8.8E-11 * T4 - 0.4721 * Math.sin(Mdash) - 0.1649 * Math.sin(D2) - 0.0868 * Math.sin(D2 - Mdash) + 0.0084 * Math.sin(D2 + Mdash) - E * 0.0083 * Math.sin(D2 - M) - E * 0.0039 * Math.sin(D2 - M - Mdash) + 0.0034 * Math.sin(Mdash2) - 0.0031 * Math.sin(D2 - Mdash2) + E * 0.003 * Math.sin(D2 + M) + E * 0.0028 * Math.sin(M - Mdash) + E * 0.0026 * Math.sin(M) + 0.0025 * Math.sin(D4) + 0.0024 * Math.sin(D) + E * 0.0022 * Math.sin(M + Mdash) + 0.0017 * Math.sin(omega) + 0.0014 * Math.sin(D4 - Mdash) + E * 0.0005 * Math.sin(D2 + M - Mdash) + E * 0.0004 * Math.sin(D2 - M + Mdash) - E * 0.0003 * Math.sin(D2 - M * M) + E * 0.0003 * Math.sin(D4 - M) + 0.0003 * Math.sin(V) + 0.0003 * Math.sin(P);
    return JD;
}


////////////////////////////////////////////////////////////////////////////////
// CAAMoonPerigeeApogee

window.CAAMoonPerigeeApogee = function CAAMoonPerigeeApogee() {
}
CAAMoonPerigeeApogee.k = function CAAMoonPerigeeApogee$k(Year) {
    /// <param name="Year" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 13.2555 * (Year - 1999.97);
}
CAAMoonPerigeeApogee.meanPerigee = function CAAMoonPerigeeApogee$meanPerigee(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return 2451534.6698 + 27.55454989 * k - 0.0006691 * Tsquared - 1.098E-06 * Tcubed + 5.2E-09 * T4;
}
CAAMoonPerigeeApogee.meanApogee = function CAAMoonPerigeeApogee$meanApogee(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CAAMoonPerigeeApogee.meanPerigee(k);
}
CAAMoonPerigeeApogee.truePerigee = function CAAMoonPerigeeApogee$truePerigee(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var MeanJD = CAAMoonPerigeeApogee.meanPerigee(k);
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(171.9179 + 335.9106046 * k - 0.0100383 * Tsquared - 1.156E-05 * Tcubed + 5.5E-08 * T4);
    D = CT.d2R(D);
    var M = CT.m360(347.3477 + 27.1577721 * k - 0.000813 * Tsquared - 1E-06 * Tcubed);
    M = CT.d2R(M);
    var F = CT.m360(316.6109 + 364.5287911 * k - 0.0125053 * Tsquared - 1.48E-05 * Tcubed);
    F = CT.d2R(F);
    var nPerigeeCoefficients = GFX.g_MoonPerigeeApogeeCoefficients1.length;
    var Sigma = 0;
    for (var i = 0; i < nPerigeeCoefficients; i++) {
        Sigma += GFX.g_MoonPerigeeApogeeCoefficients1[i].c * Math.sin(D * GFX.g_MoonPerigeeApogeeCoefficients1[i].d + M * GFX.g_MoonPerigeeApogeeCoefficients1[i].m + F * GFX.g_MoonPerigeeApogeeCoefficients1[i].f + T * GFX.g_MoonPerigeeApogeeCoefficients1[i].t);
    }
    return MeanJD + Sigma;
}
CAAMoonPerigeeApogee.trueApogee = function CAAMoonPerigeeApogee$trueApogee(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var MeanJD = CAAMoonPerigeeApogee.meanApogee(k);
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(171.9179 + 335.9106046 * k - 0.0100383 * Tsquared - 1.156E-05 * Tcubed + 5.5E-08 * T4);
    D = CT.d2R(D);
    var M = CT.m360(347.3477 + 27.1577721 * k - 0.000813 * Tsquared - 1E-06 * Tcubed);
    M = CT.d2R(M);
    var F = CT.m360(316.6109 + 364.5287911 * k - 0.0125053 * Tsquared - 1.48E-05 * Tcubed);
    F = CT.d2R(F);
    var nApogeeCoefficients = GFX.g_MoonPerigeeApogeeCoefficients2.length;
    var Sigma = 0;
    for (var i = 0; i < nApogeeCoefficients; i++) {
        Sigma += (GFX.g_MoonPerigeeApogeeCoefficients2[i].c + T * GFX.g_MoonPerigeeApogeeCoefficients2[i].t) * Math.sin(D * GFX.g_MoonPerigeeApogeeCoefficients2[i].d + M * GFX.g_MoonPerigeeApogeeCoefficients2[i].m + F * GFX.g_MoonPerigeeApogeeCoefficients2[i].f);
    }
    return MeanJD + Sigma;
}
CAAMoonPerigeeApogee.perigeeParallax = function CAAMoonPerigeeApogee$perigeeParallax(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(171.9179 + 335.9106046 * k - 0.0100383 * Tsquared - 1.156E-05 * Tcubed + 5.5E-08 * T4);
    D = CT.d2R(D);
    var M = CT.m360(347.3477 + 27.1577721 * k - 0.000813 * Tsquared - 1E-06 * Tcubed);
    M = CT.d2R(M);
    var F = CT.m360(316.6109 + 364.5287911 * k - 0.0125053 * Tsquared - 1.48E-05 * Tcubed);
    F = CT.d2R(F);
    var nPerigeeCoefficients = GFX.g_MoonPerigeeApogeeCoefficients3.length;
    var Parallax = 3629.215;
    for (var i = 0; i < nPerigeeCoefficients; i++) {
        Parallax += (GFX.g_MoonPerigeeApogeeCoefficients3[i].c + T * GFX.g_MoonPerigeeApogeeCoefficients3[i].t) * Math.cos(D * GFX.g_MoonPerigeeApogeeCoefficients3[i].d + M * GFX.g_MoonPerigeeApogeeCoefficients3[i].m + F * GFX.g_MoonPerigeeApogeeCoefficients3[i].f);
    }
    return Parallax / 3600;
}
CAAMoonPerigeeApogee.apogeeParallax = function CAAMoonPerigeeApogee$apogeeParallax(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(171.9179 + 335.9106046 * k - 0.0100383 * Tsquared - 1.156E-05 * Tcubed + 5.5E-08 * T4);
    D = CT.d2R(D);
    var M = CT.m360(347.3477 + 27.1577721 * k - 0.000813 * Tsquared - 1E-06 * Tcubed);
    M = CT.d2R(M);
    var F = CT.m360(316.6109 + 364.5287911 * k - 0.0125053 * Tsquared - 1.48E-05 * Tcubed);
    F = CT.d2R(F);
    var nApogeeCoefficients = GFX.g_MoonPerigeeApogeeCoefficients4.length;
    var Parallax = 3245.251;
    for (var i = 0; i < nApogeeCoefficients; i++) {
        Parallax += (GFX.g_MoonPerigeeApogeeCoefficients4[i].c + T * GFX.g_MoonPerigeeApogeeCoefficients4[i].t) * Math.cos(D * GFX.g_MoonPerigeeApogeeCoefficients4[i].d + M * GFX.g_MoonPerigeeApogeeCoefficients4[i].m + F * GFX.g_MoonPerigeeApogeeCoefficients4[i].f);
    }
    return Parallax / 3600;
}


////////////////////////////////////////////////////////////////////////////////
// MPAC

window.MPAC = function MPAC(D, M, F, C, T) {
    /// <param name="D" type="Number">
    /// </param>
    /// <param name="M" type="Number">
    /// </param>
    /// <param name="F" type="Number">
    /// </param>
    /// <param name="C" type="Number">
    /// </param>
    /// <param name="T" type="Number">
    /// </param>
    /// <field name="d" type="Number">
    /// </field>
    /// <field name="m" type="Number">
    /// </field>
    /// <field name="f" type="Number">
    /// </field>
    /// <field name="c" type="Number">
    /// </field>
    /// <field name="t" type="Number">
    /// </field>
    this.d = D;
    this.m = M;
    this.f = F;
    this.c = C;
    this.t = T;
}
MPAC.prototype = {
    d: 0,
    m: 0,
    f: 0,
    c: 0,
    t: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAAMoonPhases

window.CAAMoonPhases = function CAAMoonPhases() {
}
CAAMoonPhases.k = function CAAMoonPhases$k(Year) {
    /// <param name="Year" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 12.3685 * (Year - 2000);
}
CAAMoonPhases.meanPhase = function CAAMoonPhases$meanPhase(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = k / 1236.85;
    var T2 = T * T;
    var T3 = T2 * T;
    var T4 = T3 * T;
    return 2451550.09766 + 29.530588861 * k + 0.00015437 * T2 - 1.5E-07 * T3 + 7.3E-10 * T4;
}
CAAMoonPhases.truePhase = function CAAMoonPhases$truePhase(k) {
    /// <param name="k" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var JD = CAAMoonPhases.meanPhase(k);
    var T = k / 1236.85;
    var T2 = T * T;
    var T3 = T2 * T;
    var T4 = T3 * T;
    var E = 1 - 0.002516 * T - 7.4E-06 * T2;
    var E2 = E * E;
    var M = CT.m360(2.5534 + 29.1053567 * k - 1.4E-06 * T2 - 1.1E-07 * T3);
    M = CT.d2R(M);
    var Mdash = CT.m360(201.5643 + 385.81693528 * k + 0.0107582 * T2 + 1.238E-05 * T3 - 5.8E-08 * T4);
    Mdash = CT.d2R(Mdash);
    var F = CT.m360(160.7108 + 390.67050284 * k - 0.0016118 * T2 - 2.27E-06 * T3 + 1E-08 * T4);
    F = CT.d2R(F);
    var omega = CT.m360(124.7746 - 1.56375588 * k + 0.0020672 * T2 + 2.15E-06 * T3);
    omega = CT.d2R(omega);
    var A1 = CT.m360(299.77 + 0.107408 * k - 0.009173 * T2);
    A1 = CT.d2R(A1);
    var A2 = CT.m360(251.88 + 0.016321 * k);
    A2 = CT.d2R(A2);
    var A3 = CT.m360(251.83 + 26.651886 * k);
    A3 = CT.d2R(A3);
    var A4 = CT.m360(349.42 + 36.412478 * k);
    A4 = CT.d2R(A4);
    var A5 = CT.m360(84.66 + 18.206239 * k);
    A5 = CT.d2R(A5);
    var A6 = CT.m360(141.74 + 53.303771 * k);
    A6 = CT.d2R(A6);
    var A7 = CT.m360(207.14 + 2.453732 * k);
    A7 = CT.d2R(A7);
    var A8 = CT.m360(154.84 + 7.30686 * k);
    A8 = CT.d2R(A8);
    var A9 = CT.m360(34.52 + 27.261239 * k);
    A9 = CT.d2R(A9);
    var A10 = CT.m360(207.19 + 0.121824 * k);
    A10 = CT.d2R(A10);
    var A11 = CT.m360(291.34 + 1.844379 * k);
    A11 = CT.d2R(A11);
    var A12 = CT.m360(161.72 + 24.198154 * k);
    A12 = CT.d2R(A12);
    var A13 = CT.m360(239.56 + 25.513099 * k);
    A13 = CT.d2R(A13);
    var A14 = CT.m360(331.55 + 3.592518 * k);
    A14 = CT.d2R(A14);
    var kint = Math.floor(k);
    var kfrac = k - kint;
    if (kfrac < 0) {
        kfrac = 1 + kfrac;
    }
    if (!kfrac) {
        var DeltaJD = -0.4072 * Math.sin(Mdash) + 0.17241 * E * Math.sin(M) + 0.01608 * Math.sin(2 * Mdash) + 0.01039 * Math.sin(2 * F) + 0.00739 * E * Math.sin(Mdash - M) + -0.00514 * E * Math.sin(Mdash + M) + 0.00208 * E2 * Math.sin(2 * M) + -0.00111 * Math.sin(Mdash - 2 * F) + -0.00057 * Math.sin(Mdash + 2 * F) + 0.00056 * E * Math.sin(2 * Mdash + M) + -0.00042 * Math.sin(3 * Mdash) + 0.00042 * E * Math.sin(M + 2 * F) + 0.00038 * E * Math.sin(M - 2 * F) + -0.00024 * E * Math.sin(2 * Mdash - M) + -0.00017 * Math.sin(omega) + -7E-05 * Math.sin(Mdash + 2 * M) + 4E-05 * Math.sin(2 * Mdash - 2 * F) + 4E-05 * Math.sin(3 * M) + 3E-05 * Math.sin(Mdash + M - 2 * F) + 3E-05 * Math.sin(2 * Mdash + 2 * F) + -3E-05 * Math.sin(Mdash + M + 2 * F) + 3E-05 * Math.sin(Mdash - M + 2 * F) + -2E-05 * Math.sin(Mdash - M - 2 * F) + -2E-05 * Math.sin(3 * Mdash + M) + 2E-05 * Math.sin(4 * Mdash);
        JD += DeltaJD;
    }
    else if ((kfrac === 0.25) || (kfrac === 0.75)) {
        var DeltaJD = -0.62801 * Math.sin(Mdash) + 0.17172 * E * Math.sin(M) + -0.01183 * E * Math.sin(Mdash + M) + 0.00862 * Math.sin(2 * Mdash) + 0.00804 * Math.sin(2 * F) + 0.00454 * E * Math.sin(Mdash - M) + 0.00204 * E2 * Math.sin(2 * M) + -0.0018 * Math.sin(Mdash - 2 * F) + -0.0007 * Math.sin(Mdash + 2 * F) + -0.0004 * Math.sin(3 * Mdash) + -0.00034 * E * Math.sin(2 * Mdash - M) + 0.00032 * E * Math.sin(M + 2 * F) + 0.00032 * E * Math.sin(M - 2 * F) + -0.00028 * E2 * Math.sin(Mdash + 2 * M) + 0.00027 * E * Math.sin(2 * Mdash + M) + -0.00017 * Math.sin(omega) + -5E-05 * Math.sin(Mdash - M - 2 * F) + 4E-05 * Math.sin(2 * Mdash + 2 * F) + -4E-05 * Math.sin(Mdash + M + 2 * F) + 4E-05 * Math.sin(Mdash - 2 * M) + 3E-05 * Math.sin(Mdash + M - 2 * F) + 3E-05 * Math.sin(3 * M) + 2E-05 * Math.sin(2 * Mdash - 2 * F) + 2E-05 * Math.sin(Mdash - M + 2 * F) + -2E-05 * Math.sin(3 * Mdash + M);
        JD += DeltaJD;
        var W = 0.00306 - 0.00038 * E * Math.cos(M) + 0.00026 * Math.cos(Mdash) - 2E-05 * Math.cos(Mdash - M) + 2E-05 * Math.cos(Mdash + M) + 2E-05 * Math.cos(2 * F);
        if (kfrac === 0.25) {
            JD += W;
        }
        else {
            JD -= W;
        }
    }
    else if (kfrac === 0.5) {
        var DeltaJD = -0.40614 * Math.sin(Mdash) + 0.17302 * E * Math.sin(M) + 0.01614 * Math.sin(2 * Mdash) + 0.01043 * Math.sin(2 * F) + 0.00734 * E * Math.sin(Mdash - M) + -0.00514 * E * Math.sin(Mdash + M) + 0.00209 * E2 * Math.sin(2 * M) + -0.00111 * Math.sin(Mdash - 2 * F) + -0.00057 * Math.sin(Mdash + 2 * F) + 0.00056 * E * Math.sin(2 * Mdash + M) + -0.00042 * Math.sin(3 * Mdash) + 0.00042 * E * Math.sin(M + 2 * F) + 0.00038 * E * Math.sin(M - 2 * F) + -0.00024 * E * Math.sin(2 * Mdash - M) + -0.00017 * Math.sin(omega) + -7E-05 * Math.sin(Mdash + 2 * M) + 4E-05 * Math.sin(2 * Mdash - 2 * F) + 4E-05 * Math.sin(3 * M) + 3E-05 * Math.sin(Mdash + M - 2 * F) + 3E-05 * Math.sin(2 * Mdash + 2 * F) + -3E-05 * Math.sin(Mdash + M + 2 * F) + 3E-05 * Math.sin(Mdash - M + 2 * F) + -2E-05 * Math.sin(Mdash - M - 2 * F) + -2E-05 * Math.sin(3 * Mdash + M) + 2E-05 * Math.sin(4 * Mdash);
        JD += DeltaJD;
    }
    else {
    }
    var DeltaJD2 = 0.000325 * Math.sin(A1) + 0.000165 * Math.sin(A2) + 0.000164 * Math.sin(A3) + 0.000126 * Math.sin(A4) + 0.00011 * Math.sin(A5) + 6.2E-05 * Math.sin(A6) + 6E-05 * Math.sin(A7) + 5.6E-05 * Math.sin(A8) + 4.7E-05 * Math.sin(A9) + 4.2E-05 * Math.sin(A10) + 4E-05 * Math.sin(A11) + 3.7E-05 * Math.sin(A12) + 3.5E-05 * Math.sin(A13) + 2.3E-05 * Math.sin(A14);
    JD += DeltaJD2;
    return JD;
}


////////////////////////////////////////////////////////////////////////////////
// CAANeptune

window.CAANeptune = function CAANeptune() {
}
CAANeptune.eclipticLongitude = function CAANeptune$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nL0Coefficients = GFX.g_L0NC.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0NC[i].a * Math.cos(GFX.g_L0NC[i].b + GFX.g_L0NC[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1NC.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1NC[i].a * Math.cos(GFX.g_L1NC[i].b + GFX.g_L1NC[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2NC.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2NC[i].a * Math.cos(GFX.g_L2NC[i].b + GFX.g_L2NC[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3NC.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3NC[i].a * Math.cos(GFX.g_L3NC[i].b + GFX.g_L3NC[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4NC.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4NC[i].a * Math.cos(GFX.g_L4NC[i].b + GFX.g_L4NC[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAANeptune.eclipticLatitude = function CAANeptune$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0NC.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0NC[i].a * Math.cos(GFX.g_B0NC[i].b + GFX.g_B0NC[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1NC.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1NC[i].a * Math.cos(GFX.g_B1NC[i].b + GFX.g_B1NC[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2NC.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2NC[i].a * Math.cos(GFX.g_B2NC[i].b + GFX.g_B2NC[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3NC.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3NC[i].a * Math.cos(GFX.g_B3NC[i].b + GFX.g_B3NC[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4NC.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4NC[i].a * Math.cos(GFX.g_B4NC[i].b + GFX.g_B4NC[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
CAANeptune.radiusVector = function CAANeptune$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var nR0Coefficients = GFX.g_R0NC.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
        R0 += GFX.g_R0NC[i].a * Math.cos(GFX.g_R0NC[i].b + GFX.g_R0NC[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1NC.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
        R1 += GFX.g_R1NC[i].a * Math.cos(GFX.g_R1NC[i].b + GFX.g_R1NC[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2NC.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
        R2 += GFX.g_R2NC[i].a * Math.cos(GFX.g_R2NC[i].b + GFX.g_R2NC[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3NC.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
        R3 += GFX.g_R3NC[i].a * Math.cos(GFX.g_R3NC[i].b + GFX.g_R3NC[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed) / 100000000;
}


////////////////////////////////////////////////////////////////////////////////
// CAANutation

window.CAANutation = function CAANutation() {
}
CAANutation.nutationInLongitude = function CAANutation$nutationInLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var D = 297.85036 + 445267.11148 * T - 0.0019142 * Tsquared + Tcubed / 189474;
    D = CT.m360(D);
    var M = 357.52772 + 35999.05034 * T - 0.0001603 * Tsquared - Tcubed / 300000;
    M = CT.m360(M);
    var Mprime = 134.96298 + 477198.867398 * T + 0.0086972 * Tsquared + Tcubed / 56250;
    Mprime = CT.m360(Mprime);
    var F = 93.27191 + 483202.017538 * T - 0.0036825 * Tsquared + Tcubed / 327270;
    F = CT.m360(F);
    var omega = 125.04452 - 1934.136261 * T + 0.0020708 * Tsquared + Tcubed / 450000;
    omega = CT.m360(omega);
    var nCoefficients = GFX.g_NuC.length;
    var vvalue = 0;
    for (var i = 0; i < nCoefficients; i++) {
        var argument = GFX.g_NuC[i].d * D + GFX.g_NuC[i].m * M + GFX.g_NuC[i].mprime * Mprime + GFX.g_NuC[i].f * F + GFX.g_NuC[i].omega * omega;
        var radargument = CT.d2R(argument);
        vvalue += (GFX.g_NuC[i].sincoeff1 + GFX.g_NuC[i].sincoeff2 * T) * Math.sin(radargument) * 0.0001;
    }
    return vvalue;
}
CAANutation.nutationInObliquity = function CAANutation$nutationInObliquity(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var D = 297.85036 + 445267.11148 * T - 0.0019142 * Tsquared + Tcubed / 189474;
    D = CT.m360(D);
    var M = 357.52772 + 35999.05034 * T - 0.0001603 * Tsquared - Tcubed / 300000;
    M = CT.m360(M);
    var Mprime = 134.96298 + 477198.867398 * T + 0.0086972 * Tsquared + Tcubed / 56250;
    Mprime = CT.m360(Mprime);
    var F = 93.27191 + 483202.017538 * T - 0.0036825 * Tsquared + Tcubed / 327270;
    F = CT.m360(F);
    var omega = 125.04452 - 1934.136261 * T + 0.0020708 * Tsquared + Tcubed / 450000;
    omega = CT.m360(omega);
    var nCoefficients = GFX.g_NuC.length;
    var vvalue = 0;
    for (var i = 0; i < nCoefficients; i++) {
        var argument = GFX.g_NuC[i].d * D + GFX.g_NuC[i].m * M + GFX.g_NuC[i].mprime * Mprime + GFX.g_NuC[i].f * F + GFX.g_NuC[i].omega * omega;
        var radargument = CT.d2R(argument);
        vvalue += (GFX.g_NuC[i].coscoeff1 + GFX.g_NuC[i].coscoeff2 * T) * Math.cos(radargument) * 0.0001;
    }
    return vvalue;
}
CAANutation.nutationInRightAscension = function CAANutation$nutationInRightAscension(Alpha, Delta, Obliquity, NutationInLongitude, NutationInObliquity) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="Obliquity" type="Number">
    /// </param>
    /// <param name="NutationInLongitude" type="Number">
    /// </param>
    /// <param name="NutationInObliquity" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    Obliquity = CT.d2R(Obliquity);
    return (Math.cos(Obliquity) + Math.sin(Obliquity) * Math.sin(Alpha) * Math.tan(Delta)) * NutationInLongitude - Math.cos(Alpha) * Math.tan(Delta) * NutationInObliquity;
}
CAANutation.nutationInDeclination = function CAANutation$nutationInDeclination(Alpha, Delta, Obliquity, NutationInLongitude, NutationInObliquity) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="Obliquity" type="Number">
    /// </param>
    /// <param name="NutationInLongitude" type="Number">
    /// </param>
    /// <param name="NutationInObliquity" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    Obliquity = CT.d2R(Obliquity);
    return Math.sin(Obliquity) * Math.cos(Alpha) * NutationInLongitude + Math.sin(Alpha) * NutationInObliquity;
}
CAANutation.meanObliquityOfEcliptic = function CAANutation$meanObliquityOfEcliptic(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var U = (JD - 2451545) / 3652500;
    var Usquared = U * U;
    var Ucubed = Usquared * U;
    var U4 = Ucubed * U;
    var U5 = U4 * U;
    var U6 = U5 * U;
    var U7 = U6 * U;
    var U8 = U7 * U;
    var U9 = U8 * U;
    var U10 = U9 * U;
    return CT.dmS2D(23, 26, 21.448) - CT.dmS2D(0, 0, 4680.93) * U - CT.dmS2D(0, 0, 1.55) * Usquared + CT.dmS2D(0, 0, 1999.25) * Ucubed - CT.dmS2D(0, 0, 51.38) * U4 - CT.dmS2D(0, 0, 249.67) * U5 - CT.dmS2D(0, 0, 39.05) * U6 + CT.dmS2D(0, 0, 7.12) * U7 + CT.dmS2D(0, 0, 27.87) * U8 + CT.dmS2D(0, 0, 5.79) * U9 + CT.dmS2D(0, 0, 2.45) * U10;
}
CAANutation.trueObliquityOfEcliptic = function CAANutation$trueObliquityOfEcliptic(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CAANutation.meanObliquityOfEcliptic(JD) + CT.dmS2D(0, 0, CAANutation.nutationInObliquity(JD));
}


////////////////////////////////////////////////////////////////////////////////
// NUC

window.NUC = function NUC(D, M, Mprime, F, omega, sincoeff1, sincoeff2, coscoeff1, coscoeff2) {
    /// <param name="D" type="Number" integer="true">
    /// </param>
    /// <param name="M" type="Number" integer="true">
    /// </param>
    /// <param name="Mprime" type="Number" integer="true">
    /// </param>
    /// <param name="F" type="Number" integer="true">
    /// </param>
    /// <param name="omega" type="Number" integer="true">
    /// </param>
    /// <param name="sincoeff1" type="Number" integer="true">
    /// </param>
    /// <param name="sincoeff2" type="Number">
    /// </param>
    /// <param name="coscoeff1" type="Number" integer="true">
    /// </param>
    /// <param name="coscoeff2" type="Number">
    /// </param>
    /// <field name="d" type="Number" integer="true">
    /// </field>
    /// <field name="m" type="Number" integer="true">
    /// </field>
    /// <field name="mprime" type="Number" integer="true">
    /// </field>
    /// <field name="f" type="Number" integer="true">
    /// </field>
    /// <field name="omega" type="Number" integer="true">
    /// </field>
    /// <field name="sincoeff1" type="Number" integer="true">
    /// </field>
    /// <field name="sincoeff2" type="Number">
    /// </field>
    /// <field name="coscoeff1" type="Number" integer="true">
    /// </field>
    /// <field name="coscoeff2" type="Number">
    /// </field>
    this.d = D;
    this.m = M;
    this.mprime = Mprime;
    this.f = F;
    this.omega = omega;
    this.sincoeff1 = sincoeff1;
    this.sincoeff2 = sincoeff2;
    this.coscoeff1 = coscoeff1;
    this.coscoeff2 = coscoeff2;
}
NUC.prototype = {
    d: 0,
    m: 0,
    mprime: 0,
    f: 0,
    omega: 0,
    sincoeff1: 0,
    sincoeff2: 0,
    coscoeff1: 0,
    coscoeff2: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAATopocentricEclipticDetails

window.CAATopocentricEclipticDetails = function CAATopocentricEclipticDetails() {
    /// <field name="lambda" type="Number">
    /// </field>
    /// <field name="beta" type="Number">
    /// </field>
    /// <field name="semidiameter" type="Number">
    /// </field>
    this.lambda = 0;
    this.beta = 0;
    this.semidiameter = 0;
}
CAATopocentricEclipticDetails.prototype = {
    lambda: 0,
    beta: 0,
    semidiameter: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAAParallax

window.CAAParallax = function CAAParallax() {
}
CAAParallax.equatorial2TopocentricDelta = function CAAParallax$equatorial2TopocentricDelta(Alpha, Delta, Distance, Longitude, Latitude, Height, JD) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="Distance" type="Number">
    /// </param>
    /// <param name="Longitude" type="Number">
    /// </param>
    /// <param name="Latitude" type="Number">
    /// </param>
    /// <param name="Height" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    var RhoSinThetaPrime = CAAGlobe.rhoSinThetaPrime(Latitude, Height);
    var RhoCosThetaPrime = CAAGlobe.rhoCosThetaPrime(Latitude, Height);
    var theta = CAASidereal.apparentGreenwichSiderealTime(JD);
    Delta = CT.d2R(Delta);
    var cosDelta = Math.cos(Delta);
    var pi = Math.asin(GFX.g_AAParallax_C1 / Distance);
    var H = CT.h2R(theta - Longitude / 15 - Alpha);
    var cosH = Math.cos(H);
    var sinH = Math.sin(H);
    var DeltaTopocentric = new COR();
    DeltaTopocentric.x = CT.r2H(-pi * RhoCosThetaPrime * sinH / cosDelta);
    DeltaTopocentric.y = CT.r2D(-pi * (RhoSinThetaPrime * cosDelta - RhoCosThetaPrime * cosH * Math.sin(Delta)));
    return DeltaTopocentric;
}
CAAParallax.equatorial2Topocentric = function CAAParallax$equatorial2Topocentric(Alpha, Delta, Distance, Longitude, Latitude, Height, JD) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="Distance" type="Number">
    /// </param>
    /// <param name="Longitude" type="Number">
    /// </param>
    /// <param name="Latitude" type="Number">
    /// </param>
    /// <param name="Height" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    var RhoSinThetaPrime = CAAGlobe.rhoSinThetaPrime(Latitude, Height);
    var RhoCosThetaPrime = CAAGlobe.rhoCosThetaPrime(Latitude, Height);
    var theta = CAASidereal.apparentGreenwichSiderealTime(JD);
    Delta = CT.d2R(Delta);
    var cosDelta = Math.cos(Delta);
    var pi = Math.asin(GFX.g_AAParallax_C1 / Distance);
    var sinpi = Math.sin(pi);
    var H = CT.h2R(theta - Longitude / 15 - Alpha);
    var cosH = Math.cos(H);
    var sinH = Math.sin(H);
    var DeltaAlpha = Math.atan2(-RhoCosThetaPrime * sinpi * sinH, cosDelta - RhoCosThetaPrime * sinpi * cosH);
    var Topocentric = new COR();
    Topocentric.x = CT.m24(Alpha + CT.r2H(DeltaAlpha));
    Topocentric.y = CT.r2D(Math.atan2((Math.sin(Delta) - RhoSinThetaPrime * sinpi) * Math.cos(DeltaAlpha), cosDelta - RhoCosThetaPrime * sinpi * cosH));
    return Topocentric;
}
CAAParallax.ecliptic2Topocentric = function CAAParallax$ecliptic2Topocentric(Lambda, Beta, Semidiameter, Distance, Epsilon, Longitude, Latitude, Height, JD) {
    /// <param name="Lambda" type="Number">
    /// </param>
    /// <param name="Beta" type="Number">
    /// </param>
    /// <param name="Semidiameter" type="Number">
    /// </param>
    /// <param name="Distance" type="Number">
    /// </param>
    /// <param name="Epsilon" type="Number">
    /// </param>
    /// <param name="Longitude" type="Number">
    /// </param>
    /// <param name="Latitude" type="Number">
    /// </param>
    /// <param name="Height" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="CAATopocentricEclipticDetails"></returns>
    var S = CAAGlobe.rhoSinThetaPrime(Latitude, Height);
    var C = CAAGlobe.rhoCosThetaPrime(Latitude, Height);
    Lambda = CT.d2R(Lambda);
    Beta = CT.d2R(Beta);
    Epsilon = CT.d2R(Epsilon);
    Longitude = CT.d2R(Longitude);
    Latitude = CT.d2R(Latitude);
    Semidiameter = CT.d2R(Semidiameter);
    var sine = Math.sin(Epsilon);
    var cose = Math.cos(Epsilon);
    var cosBeta = Math.cos(Beta);
    var sinBeta = Math.sin(Beta);
    var theta = CAASidereal.apparentGreenwichSiderealTime(JD);
    theta = CT.h2R(theta);
    var sintheta = Math.sin(theta);
    var pi = Math.asin(GFX.g_AAParallax_C1 / Distance);
    var sinpi = Math.sin(pi);
    var N = Math.cos(Lambda) * cosBeta - C * sinpi * Math.cos(theta);
    var Topocentric = new CAATopocentricEclipticDetails();
    Topocentric.lambda = Math.atan2(Math.sin(Lambda) * cosBeta - sinpi * (S * sine + C * cose * sintheta), N);
    var cosTopocentricLambda = Math.cos(Topocentric.lambda);
    Topocentric.beta = Math.atan(cosTopocentricLambda * (sinBeta - sinpi * (S * cose - C * sine * sintheta)) / N);
    Topocentric.semidiameter = Math.asin(cosTopocentricLambda * Math.cos(Topocentric.beta) * Math.sin(Semidiameter) / N);
    Topocentric.semidiameter = CT.r2D(Topocentric.semidiameter);
    Topocentric.lambda = CT.m360(CT.r2D(Topocentric.lambda));
    Topocentric.beta = CT.r2D(Topocentric.beta);
    return Topocentric;
}
CAAParallax.parallaxToDistance = function CAAParallax$parallaxToDistance(Parallax) {
    /// <param name="Parallax" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return GFX.g_AAParallax_C1 / Math.sin(CT.d2R(Parallax));
}
CAAParallax.distanceToParallax = function CAAParallax$distanceToParallax(Distance) {
    /// <param name="Distance" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var pi = Math.asin(GFX.g_AAParallax_C1 / Distance);
    return CT.r2D(pi);
}


////////////////////////////////////////////////////////////////////////////////
// CAAPhysicalJupiterDetails

window.CAAPhysicalJupiterDetails = function CAAPhysicalJupiterDetails() {
    /// <field name="DE" type="Number">
    /// </field>
    /// <field name="DS" type="Number">
    /// </field>
    /// <field name="geometricw1" type="Number">
    /// </field>
    /// <field name="geometricw2" type="Number">
    /// </field>
    /// <field name="apparentw1" type="Number">
    /// </field>
    /// <field name="apparentw2" type="Number">
    /// </field>
    /// <field name="p" type="Number">
    /// </field>
    this.DE = 0;
    this.DS = 0;
    this.geometricw1 = 0;
    this.geometricw2 = 0;
    this.apparentw1 = 0;
    this.apparentw2 = 0;
    this.p = 0;
}
CAAPhysicalJupiterDetails.prototype = {
    DE: 0,
    DS: 0,
    geometricw1: 0,
    geometricw2: 0,
    apparentw1: 0,
    apparentw2: 0,
    p: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAAPhysicalJupiter

window.CAAPhysicalJupiter = function CAAPhysicalJupiter() {
}
CAAPhysicalJupiter.calculate = function CAAPhysicalJupiter$calculate(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="CAAPhysicalJupiterDetails"></returns>
    var details = new CAAPhysicalJupiterDetails();
    var d = JD - 2433282.5;
    var T1 = d / 36525;
    var alpha0 = 268 + 0.1061 * T1;
    var alpha0rad = CT.d2R(alpha0);
    var delta0 = 64.5 - 0.0164 * T1;
    var delta0rad = CT.d2R(delta0);
    var W1 = CT.m360(17.71 + 877.90003539 * d);
    var W2 = CT.m360(16.838 + 870.27003539 * d);
    var l0 = CAAEarth.eclipticLongitude(JD);
    var l0rad = CT.d2R(l0);
    var b0 = CAAEarth.eclipticLatitude(JD);
    var b0rad = CT.d2R(b0);
    var R = CAAEarth.radiusVector(JD);
    var l = CAAJupiter.eclipticLongitude(JD);
    var lrad = CT.d2R(l);
    var b = CAAJupiter.eclipticLatitude(JD);
    var brad = CT.d2R(b);
    var r = CAAJupiter.radiusVector(JD);
    var x = r * Math.cos(brad) * Math.cos(lrad) - R * Math.cos(l0rad);
    var y = r * Math.cos(brad) * Math.sin(lrad) - R * Math.sin(l0rad);
    var z = r * Math.sin(brad) - R * Math.sin(b0rad);
    var DELTA = Math.sqrt(x * x + y * y + z * z);
    l -= 0.01299 * DELTA / (r * r);
    lrad = CT.d2R(l);
    x = r * Math.cos(brad) * Math.cos(lrad) - R * Math.cos(l0rad);
    y = r * Math.cos(brad) * Math.sin(lrad) - R * Math.sin(l0rad);
    z = r * Math.sin(brad) - R * Math.sin(b0rad);
    DELTA = Math.sqrt(x * x + y * y + z * z);
    var e0 = CAANutation.meanObliquityOfEcliptic(JD);
    var e0rad = CT.d2R(e0);
    var alphas = Math.atan2(Math.cos(e0rad) * Math.sin(lrad) - Math.sin(e0rad) * Math.tan(brad), Math.cos(lrad));
    var deltas = Math.asin(Math.cos(e0rad) * Math.sin(brad) + Math.sin(e0rad) * Math.cos(brad) * Math.sin(lrad));
    details.DS = CT.r2D(Math.asin(-Math.sin(delta0rad) * Math.sin(deltas) - Math.cos(delta0rad) * Math.cos(deltas) * Math.cos(alpha0rad - alphas)));
    var u = y * Math.cos(e0rad) - z * Math.sin(e0rad);
    var v = y * Math.sin(e0rad) + z * Math.cos(e0rad);
    var alpharad = Math.atan2(u, x);
    var alpha = CT.r2D(alpharad);
    var deltarad = Math.atan2(v, Math.sqrt(x * x + u * u));
    var delta = CT.r2D(deltarad);
    var xi = Math.atan2(Math.sin(delta0rad) * Math.cos(deltarad) * Math.cos(alpha0rad - alpharad) - Math.sin(deltarad) * Math.cos(delta0rad), Math.cos(deltarad) * Math.sin(alpha0rad - alpharad));
    details.DE = CT.r2D(Math.asin(-Math.sin(delta0rad) * Math.sin(deltarad) - Math.cos(delta0rad) * Math.cos(deltarad) * Math.cos(alpha0rad - alpharad)));
    details.geometricw1 = CT.m360(W1 - CT.r2D(xi) - 5.07033 * DELTA);
    details.geometricw2 = CT.m360(W2 - CT.r2D(xi) - 5.02626 * DELTA);
    var C = 57.2958 * (2 * r * DELTA + R * R - r * r - DELTA * DELTA) / (4 * r * DELTA);
    if (Math.sin(lrad - l0rad) > 0) {
        details.apparentw1 = CT.m360(details.geometricw1 + C);
        details.apparentw2 = CT.m360(details.geometricw2 + C);
    }
    else {
        details.apparentw1 = CT.m360(details.geometricw1 - C);
        details.apparentw2 = CT.m360(details.geometricw2 - C);
    }
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var NutationInObliquity = CAANutation.nutationInObliquity(JD);
    e0 += NutationInObliquity / 3600;
    e0rad = CT.d2R(e0);
    alpha += 0.005693 * (Math.cos(alpharad) * Math.cos(l0rad) * Math.cos(e0rad) + Math.sin(alpharad) * Math.sin(l0rad)) / Math.cos(deltarad);
    alpha = CT.m360(alpha);
    alpharad = CT.d2R(alpha);
    delta += 0.005693 * (Math.cos(l0rad) * Math.cos(e0rad) * (Math.tan(e0rad) * Math.cos(deltarad) - Math.sin(alpharad) * Math.sin(deltarad)) + Math.cos(alpharad) * Math.sin(deltarad) * Math.sin(l0rad));
    deltarad = CT.d2R(delta);
    var NutationRA = CAANutation.nutationInRightAscension(alpha / 15, delta, e0, NutationInLongitude, NutationInObliquity);
    var alphadash = alpha + NutationRA / 3600;
    var alphadashrad = CT.d2R(alphadash);
    var NutationDec = CAANutation.nutationInDeclination(alpha / 15, delta, e0, NutationInLongitude, NutationInObliquity);
    var deltadash = delta + NutationDec / 3600;
    var deltadashrad = CT.d2R(deltadash);
    NutationRA = CAANutation.nutationInRightAscension(alpha0 / 15, delta0, e0, NutationInLongitude, NutationInObliquity);
    var alpha0dash = alpha0 + NutationRA / 3600;
    var alpha0dashrad = CT.d2R(alpha0dash);
    NutationDec = CAANutation.nutationInDeclination(alpha0 / 15, delta0, e0, NutationInLongitude, NutationInObliquity);
    var delta0dash = delta0 + NutationDec / 3600;
    var delta0dashrad = CT.d2R(delta0dash);
    details.p = CT.m360(CT.r2D(Math.atan2(Math.cos(delta0dashrad) * Math.sin(alpha0dashrad - alphadashrad), Math.sin(delta0dashrad) * Math.cos(deltadashrad) - Math.cos(delta0dashrad) * Math.sin(deltadashrad) * Math.cos(alpha0dashrad - alphadashrad))));
    return details;
}


////////////////////////////////////////////////////////////////////////////////
// CAAPhysicalMarsDetails

window.CAAPhysicalMarsDetails = function CAAPhysicalMarsDetails() {
    /// <field name="DE" type="Number">
    /// </field>
    /// <field name="DS" type="Number">
    /// </field>
    /// <field name="w" type="Number">
    /// </field>
    /// <field name="p" type="Number">
    /// </field>
    /// <field name="x" type="Number">
    /// </field>
    /// <field name="k" type="Number">
    /// </field>
    /// <field name="q" type="Number">
    /// </field>
    /// <field name="d" type="Number">
    /// </field>
    this.DE = 0;
    this.DS = 0;
    this.w = 0;
    this.p = 0;
    this.x = 0;
    this.k = 0;
    this.q = 0;
    this.d = 0;
}
CAAPhysicalMarsDetails.prototype = {
    DE: 0,
    DS: 0,
    w: 0,
    p: 0,
    x: 0,
    k: 0,
    q: 0,
    d: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAAPhysicalMars

window.CAAPhysicalMars = function CAAPhysicalMars() {
}
CAAPhysicalMars.calculate = function CAAPhysicalMars$calculate(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="CAAPhysicalMarsDetails"></returns>
    var details = new CAAPhysicalMarsDetails();
    var T = (JD - 2451545) / 36525;
    var Lambda0 = 352.9065 + 1.1733 * T;
    var Lambda0rad = CT.d2R(Lambda0);
    var Beta0 = 63.2818 - 0.00394 * T;
    var Beta0rad = CT.d2R(Beta0);
    var l0 = CAAEarth.eclipticLongitude(JD);
    var l0rad = CT.d2R(l0);
    var b0 = CAAEarth.eclipticLatitude(JD);
    var b0rad = CT.d2R(b0);
    var R = CAAEarth.radiusVector(JD);
    var PreviousLightTravelTime = 0;
    var LightTravelTime = 0;
    var x = 0;
    var y = 0;
    var z = 0;
    var bIterate = true;
    var DELTA = 0;
    var l = 0;
    var lrad = 0;
    var b = 0;
    var brad = 0;
    var r = 0;
    while (bIterate) {
        var JD2 = JD - LightTravelTime;
        l = CAAMars.eclipticLongitude(JD2);
        lrad = CT.d2R(l);
        b = CAAMars.eclipticLatitude(JD2);
        brad = CT.d2R(b);
        r = CAAMars.radiusVector(JD2);
        x = r * Math.cos(brad) * Math.cos(lrad) - R * Math.cos(l0rad);
        y = r * Math.cos(brad) * Math.sin(lrad) - R * Math.sin(l0rad);
        z = r * Math.sin(brad) - R * Math.sin(b0rad);
        DELTA = Math.sqrt(x * x + y * y + z * z);
        LightTravelTime = ELL.distanceToLightTime(DELTA);
        bIterate = (Math.abs(LightTravelTime - PreviousLightTravelTime) > 2E-06);
        if (bIterate) {
            PreviousLightTravelTime = LightTravelTime;
        }
    }
    var lambdarad = Math.atan2(y, x);
    var lambda = CT.r2D(lambdarad);
    var betarad = Math.atan2(z, Math.sqrt(x * x + y * y));
    var beta = CT.r2D(betarad);
    details.DE = CT.r2D(Math.asin(-Math.sin(Beta0rad) * Math.sin(betarad) - Math.cos(Beta0rad) * Math.cos(betarad) * Math.cos(Lambda0rad - lambdarad)));
    var N = 49.5581 + 0.7721 * T;
    var Nrad = CT.d2R(N);
    var ldash = l - 0.00697 / r;
    var ldashrad = CT.d2R(ldash);
    var bdash = b - 0.000225 * (Math.cos(lrad - Nrad) / r);
    var bdashrad = CT.d2R(bdash);
    details.DS = CT.r2D(Math.asin(-Math.sin(Beta0rad) * Math.sin(bdashrad) - Math.cos(Beta0rad) * Math.cos(bdashrad) * Math.cos(Lambda0rad - ldashrad)));
    var W = CT.m360(11.504 + 350.89200025 * (JD - LightTravelTime - 2433282.5));
    var e0 = CAANutation.meanObliquityOfEcliptic(JD);
    var e0rad = CT.d2R(e0);
    var PoleEquatorial = CT.ec2Eq(Lambda0, Beta0, e0);
    var alpha0rad = CT.h2R(PoleEquatorial.x);
    var delta0rad = CT.d2R(PoleEquatorial.y);
    var u = y * Math.cos(e0rad) - z * Math.sin(e0rad);
    var v = y * Math.sin(e0rad) + z * Math.cos(e0rad);
    var alpharad = Math.atan2(u, x);
    var alpha = CT.r2H(alpharad);
    var deltarad = Math.atan2(v, Math.sqrt(x * x + u * u));
    var delta = CT.r2D(deltarad);
    var xi = Math.atan2(Math.sin(delta0rad) * Math.cos(deltarad) * Math.cos(alpha0rad - alpharad) - Math.sin(deltarad) * Math.cos(delta0rad), Math.cos(deltarad) * Math.sin(alpha0rad - alpharad));
    details.w = CT.m360(W - CT.r2D(xi));
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var NutationInObliquity = CAANutation.nutationInObliquity(JD);
    lambda += 0.005693 * Math.cos(l0rad - lambdarad) / Math.cos(betarad);
    beta += 0.005693 * Math.sin(l0rad - lambdarad) * Math.sin(betarad);
    Lambda0 += NutationInLongitude / 3600;
    Lambda0rad = CT.d2R(Lambda0);
    lambda += NutationInLongitude / 3600;
    lambdarad = CT.d2R(lambda);
    e0 += NutationInObliquity / 3600;
    e0rad = CT.d2R(e0rad);
    var ApparentPoleEquatorial = CT.ec2Eq(Lambda0, Beta0, e0);
    var alpha0dash = CT.h2R(ApparentPoleEquatorial.x);
    var delta0dash = CT.d2R(ApparentPoleEquatorial.y);
    var ApparentMars = CT.ec2Eq(lambda, beta, e0);
    var alphadash = CT.h2R(ApparentMars.x);
    var deltadash = CT.d2R(ApparentMars.y);
    details.p = CT.m360(CT.r2D(Math.atan2(Math.cos(delta0dash) * Math.sin(alpha0dash - alphadash), Math.sin(delta0dash) * Math.cos(deltadash) - Math.cos(delta0dash) * Math.sin(deltadash) * Math.cos(alpha0dash - alphadash))));
    var SunLambda = CAASun.geometricEclipticLongitude(JD);
    var SunBeta = CAASun.geometricEclipticLatitude(JD);
    var SunEquatorial = CT.ec2Eq(SunLambda, SunBeta, e0);
    details.x = MIFR.positionAngle(SunEquatorial.x, SunEquatorial.y, alpha, delta);
    details.d = 9.36 / DELTA;
    details.k = IFR.illuminatedFraction2(r, R, DELTA);
    details.q = (1 - details.k) * details.d;
    return details;
}


////////////////////////////////////////////////////////////////////////////////
// CAAPhysicalSunDetails

window.CAAPhysicalSunDetails = function CAAPhysicalSunDetails() {
    /// <field name="p" type="Number">
    /// </field>
    /// <field name="b0" type="Number">
    /// </field>
    /// <field name="l0" type="Number">
    /// </field>
    this.p = 0;
    this.b0 = 0;
    this.l0 = 0;
}
CAAPhysicalSunDetails.prototype = {
    p: 0,
    b0: 0,
    l0: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAAPhysicalSun

window.CAAPhysicalSun = function CAAPhysicalSun() {
}
CAAPhysicalSun.calculate = function CAAPhysicalSun$calculate(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="CAAPhysicalSunDetails"></returns>
    var theta = CT.m360((JD - 2398220) * 360 / 25.38);
    var I = 7.25;
    var K = 73.6667 + 1.3958333 * (JD - 2396758) / 36525;
    var L = CAAEarth.eclipticLongitude(JD);
    var R = CAAEarth.radiusVector(JD);
    var SunLong = L + 180 - CT.dmS2D(0, 0, 20.4898 / R);
    var SunLongDash = SunLong + CT.dmS2D(0, 0, CAANutation.nutationInLongitude(JD));
    var epsilon = CAANutation.trueObliquityOfEcliptic(JD);
    epsilon = CT.d2R(epsilon);
    SunLong = CT.d2R(SunLong);
    SunLongDash = CT.d2R(SunLongDash);
    K = CT.d2R(K);
    I = CT.d2R(I);
    theta = CT.d2R(theta);
    var x = Math.atan(-Math.cos(SunLong) * Math.tan(epsilon));
    var y = Math.atan(-Math.cos(SunLong - K) * Math.tan(I));
    var details = new CAAPhysicalSunDetails();
    details.p = CT.r2D(x + y);
    details.b0 = CT.r2D(Math.asin(Math.sin(SunLong - K) * Math.sin(I)));
    var eta = Math.atan(Math.tan(SunLong - K) * Math.cos(I));
    details.l0 = CT.m360(CT.r2D(eta - theta));
    return details;
}
CAAPhysicalSun.timeOfStartOfRotation = function CAAPhysicalSun$timeOfStartOfRotation(C) {
    /// <param name="C" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    var JED = 2398140.227 + 27.2752316 * C;
    var M = CT.m360(281.96 + 26.882476 * C);
    M = CT.d2R(M);
    JED += (0.1454 * Math.sin(M) - 0.0085 * Math.sin(2 * M) - 0.0141 * Math.cos(2 * M));
    return JED;
}


////////////////////////////////////////////////////////////////////////////////
// CAAPluto

window.CAAPluto = function CAAPluto() {
}
CAAPluto.eclipticLongitude = function CAAPluto$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var J = 34.35 + 3034.9057 * T;
    var S = 50.08 + 1222.1138 * T;
    var P = 238.96 + 144.96 * T;
    var L = 0;
    var nPlutoCoefficients = GFX.g_PlutoArgumentCoefficients.length;
    for (var i = 0; i < nPlutoCoefficients; i++) {
        var Alpha = GFX.g_PlutoArgumentCoefficients[i].j * J + GFX.g_PlutoArgumentCoefficients[i].s * S + GFX.g_PlutoArgumentCoefficients[i].p * P;
        Alpha = CT.d2R(Alpha);
        L += ((GFX.g_PlutoLongitudeCoefficients[i].a * Math.sin(Alpha)) + (GFX.g_PlutoLongitudeCoefficients[i].b * Math.cos(Alpha)));
    }
    L = L / 1000000;
    L += (238.958116 + 144.96 * T);
    L = CT.m360(L);
    return L;
}
CAAPluto.eclipticLatitude = function CAAPluto$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var J = 34.35 + 3034.9057 * T;
    var S = 50.08 + 1222.1138 * T;
    var P = 238.96 + 144.96 * T;
    var L = 0;
    var nPlutoCoefficients = GFX.g_PlutoArgumentCoefficients.length;
    for (var i = 0; i < nPlutoCoefficients; i++) {
        var Alpha = GFX.g_PlutoArgumentCoefficients[i].j * J + GFX.g_PlutoArgumentCoefficients[i].s * S + GFX.g_PlutoArgumentCoefficients[i].p * P;
        Alpha = CT.d2R(Alpha);
        L += ((GFX.g_PlutoLatitudeCoefficients[i].a * Math.sin(Alpha)) + (GFX.g_PlutoLatitudeCoefficients[i].b * Math.cos(Alpha)));
    }
    L = L / 1000000;
    L += -3.908239;
    return L;
}
CAAPluto.radiusVector = function CAAPluto$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var T = (JD - 2451545) / 36525;
    var J = 34.35 + 3034.9057 * T;
    var S = 50.08 + 1222.1138 * T;
    var P = 238.96 + 144.96 * T;
    var R = 0;
    var nPlutoCoefficients = GFX.g_PlutoArgumentCoefficients.length;
    for (var i = 0; i < nPlutoCoefficients; i++) {
        var Alpha = GFX.g_PlutoArgumentCoefficients[i].j * J + GFX.g_PlutoArgumentCoefficients[i].s * S + GFX.g_PlutoArgumentCoefficients[i].p * P;
        Alpha = CT.d2R(Alpha);
        R += ((GFX.g_PlutoRadiusCoefficients[i].a * Math.sin(Alpha)) + (GFX.g_PlutoRadiusCoefficients[i].b * Math.cos(Alpha)));
    }
    R = R / 10000000;
    R += 40.7241346;
    return R;
}


////////////////////////////////////////////////////////////////////////////////
// PlutoCoefficient1

window.PlutoCoefficient1 = function PlutoCoefficient1(j, s, p) {
    /// <param name="j" type="Number">
    /// </param>
    /// <param name="s" type="Number">
    /// </param>
    /// <param name="p" type="Number">
    /// </param>
    /// <field name="j" type="Number">
    /// </field>
    /// <field name="s" type="Number">
    /// </field>
    /// <field name="p" type="Number">
    /// </field>
    this.j = j;
    this.s = s;
    this.p = p;
}
PlutoCoefficient1.prototype = {
    j: 0,
    s: 0,
    p: 0
}


////////////////////////////////////////////////////////////////////////////////
// PlutoCoefficient2

window.PlutoCoefficient2 = function PlutoCoefficient2(a, b) {
    /// <param name="a" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <field name="a" type="Number">
    /// </field>
    /// <field name="b" type="Number">
    /// </field>
    this.a = a;
    this.b = b;
}
PlutoCoefficient2.prototype = {
    a: 0,
    b: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAAPrecession

window.CAAPrecession = function CAAPrecession() {
}
CAAPrecession.precessEquatorial = function CAAPrecession$precessEquatorial(Alpha, Delta, JD0, JD) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="JD0" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    var T = (JD0 - 2451545) / 36525;
    var Tsquared = T * T;
    var t = (JD - JD0) / 36525;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    var sigma = (2306.2181 + 1.39656 * T - 0.000139 * Tsquared) * t + (0.30188 - 3.44E-05 * T) * tsquared + 0.017988 * tcubed;
    sigma = CT.d2R(CT.dmS2D(0, 0, sigma));
    var zeta = (2306.2181 + 1.39656 * T - 0.000138 * Tsquared) * t + (1.09468 + 6.6E-05 * T) * tsquared + 0.018203 * tcubed;
    zeta = CT.d2R(CT.dmS2D(0, 0, zeta));
    var phi = (2004.3109 - 0.8533 * T - 0.000217 * Tsquared) * t - (0.42665 + 0.000217 * T) * tsquared - 0.041833 * tcubed;
    phi = CT.d2R(CT.dmS2D(0, 0, phi));
    var A = Math.cos(Delta) * Math.sin(Alpha + sigma);
    var B = Math.cos(phi) * Math.cos(Delta) * Math.cos(Alpha + sigma) - Math.sin(phi) * Math.sin(Delta);
    var C = Math.sin(phi) * Math.cos(Delta) * Math.cos(Alpha + sigma) + Math.cos(phi) * Math.sin(Delta);
    var vvalue = new COR();
    vvalue.x = CT.r2H(Math.atan2(A, B) + zeta);
    if (vvalue.x < 0) {
        vvalue.x += 24;
    }
    vvalue.y = CT.r2D(Math.asin(C));
    return vvalue;
}
CAAPrecession.precessEquatorialFK4 = function CAAPrecession$precessEquatorialFK4(Alpha, Delta, JD0, JD) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="JD0" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    var T = (JD0 - 2415020.3135) / 36524.2199;
    var t = (JD - JD0) / 36524.2199;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    var sigma = (2304.25 + 1.396 * T) * t + 0.302 * tsquared + 0.018 * tcubed;
    sigma = CT.d2R(CT.dmS2D(0, 0, sigma));
    var zeta = 0.791 * tsquared + 0.001 * tcubed;
    zeta = CT.d2R(CT.dmS2D(0, 0, zeta));
    zeta += sigma;
    var phi = (2004.682 - 0.853 * T) * t - 0.426 * tsquared - 0.042 * tcubed;
    phi = CT.d2R(CT.dmS2D(0, 0, phi));
    var A = Math.cos(Delta) * Math.sin(Alpha + sigma);
    var B = Math.cos(phi) * Math.cos(Delta) * Math.cos(Alpha + sigma) - Math.sin(phi) * Math.sin(Delta);
    var C = Math.sin(phi) * Math.cos(Delta) * Math.cos(Alpha + sigma) + Math.cos(phi) * Math.sin(Delta);
    var vvalue = new COR();
    vvalue.x = CT.r2H(Math.atan2(A, B) + zeta);
    if (vvalue.x < 0) {
        vvalue.x += 24;
    }
    vvalue.y = CT.r2D(Math.asin(C));
    return vvalue;
}
CAAPrecession.precessEcliptic = function CAAPrecession$precessEcliptic(Lambda, Beta, JD0, JD) {
    /// <param name="Lambda" type="Number">
    /// </param>
    /// <param name="Beta" type="Number">
    /// </param>
    /// <param name="JD0" type="Number">
    /// </param>
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    var T = (JD0 - 2451545) / 36525;
    var Tsquared = T * T;
    var t = (JD - JD0) / 36525;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    Lambda = CT.d2R(Lambda);
    Beta = CT.d2R(Beta);
    var eta = (47.0029 - 0.06603 * T + 0.000598 * Tsquared) * t + (-0.03302 + 0.000598 * T) * tsquared + 6E-05 * tcubed;
    eta = CT.d2R(CT.dmS2D(0, 0, eta));
    var pi = 174.876384 * 3600 + 3289.4789 * T + 0.60622 * Tsquared - (869.8089 + 0.50491 * T) * t + 0.03536 * tsquared;
    pi = CT.d2R(CT.dmS2D(0, 0, pi));
    var p = (5029.0966 + 2.22226 * T - 4.2E-05 * Tsquared) * t + (1.11113 - 4.2E-05 * T) * tsquared - 6E-06 * tcubed;
    p = CT.d2R(CT.dmS2D(0, 0, p));
    var A = Math.cos(eta) * Math.cos(Beta) * Math.sin(pi - Lambda) - Math.sin(eta) * Math.sin(Beta);
    var B = Math.cos(Beta) * Math.cos(pi - Lambda);
    var C = Math.cos(eta) * Math.sin(Beta) + Math.sin(eta) * Math.cos(Beta) * Math.sin(pi - Lambda);
    var vvalue = new COR();
    vvalue.x = CT.r2D(p + pi - Math.atan2(A, B));
    if (vvalue.x < 0) {
        vvalue.x += 360;
    }
    vvalue.y = CT.r2D(Math.asin(C));
    return vvalue;
}
CAAPrecession.equatorialPMToEcliptic = function CAAPrecession$equatorialPMToEcliptic(Alpha, Delta, Beta, PMAlpha, PMDelta, Epsilon) {
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="Beta" type="Number">
    /// </param>
    /// <param name="PMAlpha" type="Number">
    /// </param>
    /// <param name="PMDelta" type="Number">
    /// </param>
    /// <param name="Epsilon" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    Epsilon = CT.d2R(Epsilon);
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    Beta = CT.d2R(Beta);
    var cosb = Math.cos(Beta);
    var sinEpsilon = Math.sin(Epsilon);
    var vvalue = new COR();
    vvalue.x = (PMDelta * sinEpsilon * Math.cos(Alpha) + PMAlpha * Math.cos(Delta) * (Math.cos(Epsilon) * Math.cos(Delta) + sinEpsilon * Math.sin(Delta) * Math.sin(Alpha))) / (cosb * cosb);
    vvalue.y = (PMDelta * (Math.cos(Epsilon) * Math.cos(Delta) + sinEpsilon * Math.sin(Delta) * Math.sin(Alpha)) - PMAlpha * sinEpsilon * Math.cos(Alpha) * Math.cos(Delta)) / cosb;
    return vvalue;
}
CAAPrecession.adjustPositionUsingUniformProperMotion = function CAAPrecession$adjustPositionUsingUniformProperMotion(t, Alpha, Delta, PMAlpha, PMDelta) {
    /// <param name="t" type="Number">
    /// </param>
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="PMAlpha" type="Number">
    /// </param>
    /// <param name="PMDelta" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    var vvalue = new COR();
    vvalue.x = Alpha + (PMAlpha * t / 3600);
    vvalue.y = Delta + (PMDelta * t / 3600);
    return vvalue;
}
CAAPrecession.adjustPositionUsingMotionInSpace = function CAAPrecession$adjustPositionUsingMotionInSpace(r, DeltaR, t, Alpha, Delta, PMAlpha, PMDelta) {
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="DeltaR" type="Number">
    /// </param>
    /// <param name="t" type="Number">
    /// </param>
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <param name="PMAlpha" type="Number">
    /// </param>
    /// <param name="PMDelta" type="Number">
    /// </param>
    /// <returns type="COR"></returns>
    DeltaR /= 977792;
    PMAlpha /= 13751;
    PMDelta /= 206265;
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    var x = r * Math.cos(Delta) * Math.cos(Alpha);
    var y = r * Math.cos(Delta) * Math.sin(Alpha);
    var z = r * Math.sin(Delta);
    var DeltaX = x / r * DeltaR - z * PMDelta * Math.cos(Alpha) - y * PMAlpha;
    var DeltaY = y / r * DeltaR - z * PMDelta * Math.sin(Alpha) + x * PMAlpha;
    var DeltaZ = z / r * DeltaR + r * PMDelta * Math.cos(Delta);
    x += t * DeltaX;
    y += t * DeltaY;
    z += t * DeltaZ;
    var vvalue = new COR();
    vvalue.x = CT.r2H(Math.atan2(y, x));
    if (vvalue.x < 0) {
        vvalue.x += 24;
    }
    vvalue.y = CT.r2D(Math.atan2(z, Math.sqrt(x * x + y * y)));
    return vvalue;
}


////////////////////////////////////////////////////////////////////////////////
// CAARiseTransitSetDetails

window.CAARiseTransitSetDetails = function CAARiseTransitSetDetails() {
    /// <field name="bValid" type="Boolean">
    /// </field>
    /// <field name="rise" type="Number">
    /// </field>
    /// <field name="transit" type="Number">
    /// </field>
    /// <field name="set" type="Number">
    /// </field>
    this.bValid = false;
    this.rise = 0;
    this.transit = 0;
    this.set = 0;
}
CAARiseTransitSetDetails.prototype = {
    bValid: false,
    rise: 0,
    transit: 0,
    set: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAARiseTransitSet

window.CAARiseTransitSet = function CAARiseTransitSet() {
}
CAARiseTransitSet.rise = function CAARiseTransitSet$rise(JD, Alpha1, Delta1, Alpha2, Delta2, Alpha3, Delta3, Longitude, Latitude, h0) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <param name="Alpha1" type="Number">
    /// </param>
    /// <param name="Delta1" type="Number">
    /// </param>
    /// <param name="Alpha2" type="Number">
    /// </param>
    /// <param name="Delta2" type="Number">
    /// </param>
    /// <param name="Alpha3" type="Number">
    /// </param>
    /// <param name="Delta3" type="Number">
    /// </param>
    /// <param name="Longitude" type="Number">
    /// </param>
    /// <param name="Latitude" type="Number">
    /// </param>
    /// <param name="h0" type="Number">
    /// </param>
    /// <returns type="CAARiseTransitSetDetails"></returns>
    var details = new CAARiseTransitSetDetails();
    details.bValid = false;
    var theta0 = CAASidereal.apparentGreenwichSiderealTime(JD);
    theta0 *= 15;
    var deltaT = DYT.deltaT(JD);
    var Delta2Rad = CT.d2R(Delta2);
    var LatitudeRad = CT.d2R(Latitude);
    var h0Rad = CT.d2R(h0);
    var cosH0 = (Math.sin(h0Rad) - Math.sin(LatitudeRad) * Math.sin(Delta2Rad)) / (Math.cos(LatitudeRad) * Math.cos(Delta2Rad));
    if ((cosH0 > 1) || (cosH0 < -1)) {
        return details;
    }
    var H0 = Math.acos(cosH0);
    H0 = CT.r2D(H0);
    var M0 = (Alpha2 * 15 + Longitude - theta0) / 360;
    var M1 = M0 - H0 / 360;
    var M2 = M0 + H0 / 360;
    if (M0 > 1) {
        M0 -= 1;
    }
    else if (M0 < 0) {
        M0 += 1;
    }
    if (M1 > 1) {
        M1 -= 1;
    }
    else if (M1 < 0) {
        M1 += 1;
    }
    if (M2 > 1) {
        M2 -= 1;
    }
    else if (M2 < 0) {
        M2 += 1;
    }
    for (var i = 0; i < 2; i++) {
        var theta1 = theta0 + 360.985647 * M1;
        theta1 = CT.m360(theta1);
        var n = M1 + deltaT / 86400;
        var Alpha = INTP.interpolate(n, Alpha1, Alpha2, Alpha3);
        var Delta = INTP.interpolate(n, Delta1, Delta2, Delta3);
        var H = theta1 - Longitude - Alpha * 15;
        var Horizontal = CT.eq2H(H / 15, Delta, Latitude);
        var DeltaM = (Horizontal.y - h0) / (360 * Math.cos(CT.d2R(Delta)) * Math.cos(LatitudeRad) * Math.sin(CT.d2R(H)));
        M1 += DeltaM;
        theta1 = theta0 + 360.985647 * M0;
        theta1 = CT.m360(theta1);
        n = M0 + deltaT / 86400;
        Alpha = INTP.interpolate(n, Alpha1, Alpha2, Alpha3);
        H = theta1 - Longitude - Alpha * 15;
        if (H < -180) {
            H += 360;
        }
        DeltaM = -H / 360;
        M0 += DeltaM;
        theta1 = theta0 + 360.985647 * M2;
        theta1 = CT.m360(theta1);
        n = M2 + deltaT / 86400;
        Alpha = INTP.interpolate(n, Alpha1, Alpha2, Alpha3);
        Delta = INTP.interpolate(n, Delta1, Delta2, Delta3);
        H = theta1 - Longitude - Alpha * 15;
        Horizontal = CT.eq2H(H / 15, Delta, Latitude);
        DeltaM = (Horizontal.y - h0) / (360 * Math.cos(CT.d2R(Delta)) * Math.cos(LatitudeRad) * Math.sin(CT.d2R(H)));
        M2 += DeltaM;
    }
    details.bValid = true;
    details.rise = M1 * 24;
    details.set = M2 * 24;
    details.transit = M0 * 24;
    return details;
}


////////////////////////////////////////////////////////////////////////////////
// CAASaturn

window.CAASaturn = function CAASaturn() {
}
CAASaturn.eclipticLongitude = function CAASaturn$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0SaturnCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0SaturnCoefficients[i].a * Math.cos(GFX.g_L0SaturnCoefficients[i].b + GFX.g_L0SaturnCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1SaturnCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1SaturnCoefficients[i].a * Math.cos(GFX.g_L1SaturnCoefficients[i].b + GFX.g_L1SaturnCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2SaturnCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2SaturnCoefficients[i].a * Math.cos(GFX.g_L2SaturnCoefficients[i].b + GFX.g_L2SaturnCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3SaturnCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3SaturnCoefficients[i].a * Math.cos(GFX.g_L3SaturnCoefficients[i].b + GFX.g_L3SaturnCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4SaturnCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4SaturnCoefficients[i].a * Math.cos(GFX.g_L4SaturnCoefficients[i].b + GFX.g_L4SaturnCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5SaturnCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
        L5 += GFX.g_L5SaturnCoefficients[i].a * Math.cos(GFX.g_L5SaturnCoefficients[i].b + GFX.g_L5SaturnCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAASaturn.eclipticLatitude = function CAASaturn$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nB0Coefficients = GFX.g_B0SaturnCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0SaturnCoefficients[i].a * Math.cos(GFX.g_B0SaturnCoefficients[i].b + GFX.g_B0SaturnCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1SaturnCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1SaturnCoefficients[i].a * Math.cos(GFX.g_B1SaturnCoefficients[i].b + GFX.g_B1SaturnCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2SaturnCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2SaturnCoefficients[i].a * Math.cos(GFX.g_B2SaturnCoefficients[i].b + GFX.g_B2SaturnCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3SaturnCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3SaturnCoefficients[i].a * Math.cos(GFX.g_B3SaturnCoefficients[i].b + GFX.g_B3SaturnCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4SaturnCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4SaturnCoefficients[i].a * Math.cos(GFX.g_B4SaturnCoefficients[i].b + GFX.g_B4SaturnCoefficients[i].c * rho);
    }
    var nB5Coefficients = GFX.g_B5SaturnCoefficients.length;
    var B5 = 0;
    for (i = 0; i < nB5Coefficients; i++) {
        B5 += GFX.g_B5SaturnCoefficients[i].a * Math.cos(GFX.g_B5SaturnCoefficients[i].b + GFX.g_B5SaturnCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4 + B5 * rho5) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
CAASaturn.radiusVector = function CAASaturn$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nR0Coefficients = GFX.g_R0SaturnCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
        R0 += GFX.g_R0SaturnCoefficients[i].a * Math.cos(GFX.g_R0SaturnCoefficients[i].b + GFX.g_R0SaturnCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1SaturnCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
        R1 += GFX.g_R1SaturnCoefficients[i].a * Math.cos(GFX.g_R1SaturnCoefficients[i].b + GFX.g_R1SaturnCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2SaturnCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
        R2 += GFX.g_R2SaturnCoefficients[i].a * Math.cos(GFX.g_R2SaturnCoefficients[i].b + GFX.g_R2SaturnCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3SaturnCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
        R3 += GFX.g_R3SaturnCoefficients[i].a * Math.cos(GFX.g_R3SaturnCoefficients[i].b + GFX.g_R3SaturnCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4SaturnCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
        R4 += GFX.g_R4SaturnCoefficients[i].a * Math.cos(GFX.g_R4SaturnCoefficients[i].b + GFX.g_R4SaturnCoefficients[i].c * rho);
    }
    var nR5Coefficients = GFX.g_R5SaturnCoefficients.length;
    var R5 = 0;
    for (i = 0; i < nR5Coefficients; i++) {
        R5 += GFX.g_R5SaturnCoefficients[i].a * Math.cos(GFX.g_R5SaturnCoefficients[i].b + GFX.g_R5SaturnCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4 + R5 * rho5) / 100000000;
}


////////////////////////////////////////////////////////////////////////////////
// CAASaturnRingDetails

window.CAASaturnRingDetails = function CAASaturnRingDetails() {
    /// <field name="b" type="Number">
    /// </field>
    /// <field name="bdash" type="Number">
    /// </field>
    /// <field name="p" type="Number">
    /// </field>
    /// <field name="a" type="Number">
    /// </field>
    /// <field name="b" type="Number">
    /// </field>
    /// <field name="deltaU" type="Number">
    /// </field>
    this.b = 0;
    this.bdash = 0;
    this.p = 0;
    this.a = 0;
    this.b = 0;
    this.deltaU = 0;
}
CAASaturnRingDetails.prototype = {
    b: 0,
    bdash: 0,
    p: 0,
    a: 0,
    b: 0,
    deltaU: 0
}


////////////////////////////////////////////////////////////////////////////////
// CAASaturnRings

window.CAASaturnRings = function CAASaturnRings() {
}
CAASaturnRings.calculate = function CAASaturnRings$calculate(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="CAASaturnRingDetails"></returns>
    var details = new CAASaturnRingDetails();
    var T = (JD - 2451545) / 36525;
    var T2 = T * T;
    var i = 28.075216 - 0.012998 * T + 4E-06 * T2;
    var irad = CT.d2R(i);
    var omega = 169.50847 + 1.394681 * T + 0.000412 * T2;
    var omegarad = CT.d2R(omega);
    var l0 = CAAEarth.eclipticLongitude(JD);
    var b0 = CAAEarth.eclipticLatitude(JD);
    l0 += CAAFK5.correctionInLongitude(l0, b0, JD);
    var l0rad = CT.d2R(l0);
    b0 += CAAFK5.correctionInLatitude(l0, JD);
    var b0rad = CT.d2R(b0);
    var R = CAAEarth.radiusVector(JD);
    var DELTA = 9;
    var PreviousEarthLightTravelTime = 0;
    var EarthLightTravelTime = ELL.distanceToLightTime(DELTA);
    var JD1 = JD - EarthLightTravelTime;
    var bIterate = true;
    var x = 0;
    var y = 0;
    var z = 0;
    var l = 0;
    var b = 0;
    var r = 0;
    while (bIterate) {
        l = CAASaturn.eclipticLongitude(JD1);
        b = CAASaturn.eclipticLatitude(JD1);
        l += CAAFK5.correctionInLongitude(l, b, JD1);
        b += CAAFK5.correctionInLatitude(l, JD1);
        var lrad = CT.d2R(l);
        var brad = CT.d2R(b);
        r = CAASaturn.radiusVector(JD1);
        x = r * Math.cos(brad) * Math.cos(lrad) - R * Math.cos(l0rad);
        y = r * Math.cos(brad) * Math.sin(lrad) - R * Math.sin(l0rad);
        z = r * Math.sin(brad) - R * Math.sin(b0rad);
        DELTA = Math.sqrt(x * x + y * y + z * z);
        EarthLightTravelTime = ELL.distanceToLightTime(DELTA);
        bIterate = (Math.abs(EarthLightTravelTime - PreviousEarthLightTravelTime) > 2E-06);
        if (bIterate) {
            JD1 = JD - EarthLightTravelTime;
            PreviousEarthLightTravelTime = EarthLightTravelTime;
        }
    }
    var lambda = Math.atan2(y, x);
    var beta = Math.atan2(z, Math.sqrt(x * x + y * y));
    details.b = Math.asin(Math.sin(irad) * Math.cos(beta) * Math.sin(lambda - omegarad) - Math.cos(irad) * Math.sin(beta));
    details.a = 375.35 / DELTA;
    details.b = details.a * Math.sin(Math.abs(details.b));
    details.b = CT.r2D(details.b);
    var N = 113.6655 + 0.8771 * T;
    var Nrad = CT.d2R(N);
    var ldash = l - 0.01759 / r;
    var ldashrad = CT.d2R(ldash);
    var bdash = b - 0.000764 * Math.cos(ldashrad - Nrad) / r;
    var bdashrad = CT.d2R(bdash);
    details.bdash = CT.r2D(Math.asin(Math.sin(irad) * Math.cos(bdashrad) * Math.sin(ldashrad - omegarad) - Math.cos(irad) * Math.sin(bdashrad)));
    var U1 = Math.atan2(Math.sin(irad) * Math.sin(bdashrad) + Math.cos(irad) * Math.cos(bdashrad) * Math.sin(ldashrad - omegarad), Math.cos(bdashrad) * Math.cos(ldashrad - omegarad));
    var U2 = Math.atan2(Math.sin(irad) * Math.sin(beta) + Math.cos(irad) * Math.cos(beta) * Math.sin(lambda - omegarad), Math.cos(beta) * Math.cos(lambda - omegarad));
    details.deltaU = CT.r2D(Math.abs(U1 - U2));
    var Obliquity = CAANutation.trueObliquityOfEcliptic(JD);
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var lambda0 = omega - 90;
    var beta0 = 90 - i;
    lambda += CT.d2R(0.005693 * Math.cos(l0rad - lambda) / Math.cos(beta));
    beta += CT.d2R(0.005693 * Math.sin(l0rad - lambda) * Math.sin(beta));
    lambda = CT.r2D(lambda);
    lambda += NutationInLongitude / 3600;
    lambda = CT.m360(lambda);
    lambda0 += NutationInLongitude / 3600;
    lambda0 = CT.m360(lambda0);
    beta = CT.r2D(beta);
    var GeocentricEclipticSaturn = CT.ec2Eq(lambda, beta, Obliquity);
    var alpha = CT.h2R(GeocentricEclipticSaturn.x);
    var delta = CT.d2R(GeocentricEclipticSaturn.y);
    var GeocentricEclipticNorthPole = CT.ec2Eq(lambda0, beta0, Obliquity);
    var alpha0 = CT.h2R(GeocentricEclipticNorthPole.x);
    var delta0 = CT.d2R(GeocentricEclipticNorthPole.y);
    details.p = CT.r2D(Math.atan2(Math.cos(delta0) * Math.sin(alpha0 - alpha), Math.sin(delta0) * Math.cos(delta) - Math.cos(delta0) * Math.sin(delta) * Math.cos(alpha0 - alpha)));
    return details;
}


////////////////////////////////////////////////////////////////////////////////
// CAASidereal

window.CAASidereal = function CAASidereal() {
}
CAASidereal.meanGreenwichSiderealTime = function CAASidereal$meanGreenwichSiderealTime(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var date = new DT();
    date.setJD(JD, DT.afterPapalReformJD(JD));
    var D = date.get();
    var Year = parseInt(D[0]);
    var Month = parseInt(D[1]);
    var Day = parseInt(D[2]);
    var Hour = parseInt(D[3]);
    var Minute = parseInt(D[4]);
    var Second = D[5];
    date.set(Year, Month, Day, 0, 0, 0, date.inGregorianCalendar());
    var JDMidnight = date.julian();
    var T = (JDMidnight - 2451545) / 36525;
    var TSquared = T * T;
    var TCubed = TSquared * T;
    var Value = 100.46061837 + (36000.770053608 * T) + (0.000387933 * TSquared) - (TCubed / 38710000);
    Value += (((Hour * 15) + (Minute * 0.25) + (Second * 0.00416666666666667)) * 1.00273790935);
    Value = CT.d2H(Value);
    return CT.m24(Value);
}
CAASidereal.apparentGreenwichSiderealTime = function CAASidereal$apparentGreenwichSiderealTime(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var MeanObliquity = CAANutation.meanObliquityOfEcliptic(JD);
    var TrueObliquity = MeanObliquity + CAANutation.nutationInObliquity(JD) / 3600;
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var Value = CAASidereal.meanGreenwichSiderealTime(JD) + (NutationInLongitude * Math.cos(CT.d2R(TrueObliquity)) / 54000);
    return CT.m24(Value);
}


////////////////////////////////////////////////////////////////////////////////
// CAAStellarMagnitudes

window.CAAStellarMagnitudes = function CAAStellarMagnitudes() {
}
CAAStellarMagnitudes.combinedMagnitude = function CAAStellarMagnitudes$combinedMagnitude(m1, m2) {
    /// <param name="m1" type="Number">
    /// </param>
    /// <param name="m2" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var x = 0.4 * (m2 - m1);
    return m2 - 2.5 * wwtlib._util.log10(Math.pow(10, x) + 1);
}
CAAStellarMagnitudes.combinedMagnitude2 = function CAAStellarMagnitudes$combinedMagnitude2(Magnitudes, pMagnitudes) {
    /// <param name="Magnitudes" type="Number" integer="true">
    /// </param>
    /// <param name="pMagnitudes" type="Array" elementType="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var vvalue = 0;
    for (var i = 0; i < Magnitudes; i++) {
        vvalue += Math.pow(10, -0.4 * pMagnitudes[i]);
    }
    return -2.5 * wwtlib._util.log10(vvalue);
}
CAAStellarMagnitudes.brightnessRatio = function CAAStellarMagnitudes$brightnessRatio(m1, m2) {
    /// <param name="m1" type="Number">
    /// </param>
    /// <param name="m2" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var x = 0.4 * (m2 - m1);
    return Math.pow(10, x);
}
CAAStellarMagnitudes.magnitudeDifference = function CAAStellarMagnitudes$magnitudeDifference(brightnessRatio) {
    /// <param name="brightnessRatio" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return 2.5 * wwtlib._util.log10(brightnessRatio);
}


////////////////////////////////////////////////////////////////////////////////
// CAASun

window.CAASun = function CAASun() {
}
CAASun.geometricEclipticLongitude = function CAASun$geometricEclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CT.m360(CAAEarth.eclipticLongitude(JD) + 180);
}
CAASun.geometricEclipticLatitude = function CAASun$geometricEclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -CAAEarth.eclipticLatitude(JD);
}
CAASun.geometricEclipticLongitudeJ2000 = function CAASun$geometricEclipticLongitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CT.m360(CAAEarth.eclipticLongitudeJ2000(JD) + 180);
}
CAASun.geometricEclipticLatitudeJ2000 = function CAASun$geometricEclipticLatitudeJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return -CAAEarth.eclipticLatitudeJ2000(JD);
}
CAASun.geometricFK5EclipticLongitude = function CAASun$geometricFK5EclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Longitude = CAASun.geometricEclipticLongitude(JD);
    var Latitude = CAASun.geometricEclipticLatitude(JD);
    Longitude += CAAFK5.correctionInLongitude(Longitude, Latitude, JD);
    return Longitude;
}
CAASun.geometricFK5EclipticLatitude = function CAASun$geometricFK5EclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Longitude = CAASun.geometricEclipticLongitude(JD);
    var Latitude = CAASun.geometricEclipticLatitude(JD);
    var SunLatCorrection = CAAFK5.correctionInLatitude(Longitude, JD);
    Latitude += SunLatCorrection;
    return Latitude;
}
CAASun.apparentEclipticLongitude = function CAASun$apparentEclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Longitude = CAASun.geometricFK5EclipticLongitude(JD);
    Longitude += CT.dmS2D(0, 0, CAANutation.nutationInLongitude(JD));
    var R = CAAEarth.radiusVector(JD);
    Longitude -= CT.dmS2D(0, 0, 20.4898 / R);
    return Longitude;
}
CAASun.apparentEclipticLatitude = function CAASun$apparentEclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return CAASun.geometricFK5EclipticLatitude(JD);
}
CAASun.eclipticRectangularCoordinatesMeanEquinox = function CAASun$eclipticRectangularCoordinatesMeanEquinox(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="C3D"></returns>
    var Longitude = CT.d2R(CAASun.geometricFK5EclipticLongitude(JD));
    var Latitude = CT.d2R(CAASun.geometricFK5EclipticLatitude(JD));
    var R = CAAEarth.radiusVector(JD);
    var epsilon = CT.d2R(CAANutation.meanObliquityOfEcliptic(JD));
    var vvalue = new C3D();
    vvalue.x = R * Math.cos(Latitude) * Math.cos(Longitude);
    vvalue.y = R * (Math.cos(Latitude) * Math.sin(Longitude) * Math.cos(epsilon) - Math.sin(Latitude) * Math.sin(epsilon));
    vvalue.z = R * (Math.cos(Latitude) * Math.sin(Longitude) * Math.sin(epsilon) + Math.sin(Latitude) * Math.cos(epsilon));
    return vvalue;
}
CAASun.eclipticRectangularCoordinatesJ2000 = function CAASun$eclipticRectangularCoordinatesJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="C3D"></returns>
    var Longitude = CAASun.geometricEclipticLongitudeJ2000(JD);
    Longitude = CT.d2R(Longitude);
    var Latitude = CAASun.geometricEclipticLatitudeJ2000(JD);
    Latitude = CT.d2R(Latitude);
    var R = CAAEarth.radiusVector(JD);
    var vvalue = new C3D();
    var coslatitude = Math.cos(Latitude);
    vvalue.x = R * coslatitude * Math.cos(Longitude);
    vvalue.y = R * coslatitude * Math.sin(Longitude);
    vvalue.z = R * Math.sin(Latitude);
    return vvalue;
}
CAASun.equatorialRectangularCoordinatesJ2000 = function CAASun$equatorialRectangularCoordinatesJ2000(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="C3D"></returns>
    var vvalue = CAASun.eclipticRectangularCoordinatesJ2000(JD);
    vvalue = CAAFK5.convertVSOPToFK5J2000(vvalue);
    return vvalue;
}
CAASun.equatorialRectangularCoordinatesB1950 = function CAASun$equatorialRectangularCoordinatesB1950(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="C3D"></returns>
    var vvalue = CAASun.eclipticRectangularCoordinatesJ2000(JD);
    vvalue = CAAFK5.convertVSOPToFK5B1950(vvalue);
    return vvalue;
}
CAASun.equatorialRectangularCoordinatesAnyEquinox = function CAASun$equatorialRectangularCoordinatesAnyEquinox(JD, JDEquinox) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <param name="JDEquinox" type="Number">
    /// </param>
    /// <returns type="C3D"></returns>
    var vvalue = CAASun.equatorialRectangularCoordinatesJ2000(JD);
    vvalue = CAAFK5.convertVSOPToFK5AnyEquinox(vvalue, JDEquinox);
    return vvalue;
}


////////////////////////////////////////////////////////////////////////////////
// CAAUranus

window.CAAUranus = function CAAUranus() {
}
CAAUranus.eclipticLongitude = function CAAUranus$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nL0Coefficients = GFX.g_L0UranusCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0UranusCoefficients[i].a * Math.cos(GFX.g_L0UranusCoefficients[i].b + GFX.g_L0UranusCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1UranusCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1UranusCoefficients[i].a * Math.cos(GFX.g_L1UranusCoefficients[i].b + GFX.g_L1UranusCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2UranusCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2UranusCoefficients[i].a * Math.cos(GFX.g_L2UranusCoefficients[i].b + GFX.g_L2UranusCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3UranusCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3UranusCoefficients[i].a * Math.cos(GFX.g_L3UranusCoefficients[i].b + GFX.g_L3UranusCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4UranusCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4UranusCoefficients[i].a * Math.cos(GFX.g_L4UranusCoefficients[i].b + GFX.g_L4UranusCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAAUranus.eclipticLatitude = function CAAUranus$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0UranusCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0UranusCoefficients[i].a * Math.cos(GFX.g_B0UranusCoefficients[i].b + GFX.g_B0UranusCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1UranusCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1UranusCoefficients[i].a * Math.cos(GFX.g_B1UranusCoefficients[i].b + GFX.g_B1UranusCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2UranusCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2UranusCoefficients[i].a * Math.cos(GFX.g_B2UranusCoefficients[i].b + GFX.g_B2UranusCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3UranusCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3UranusCoefficients[i].a * Math.cos(GFX.g_B3UranusCoefficients[i].b + GFX.g_B3UranusCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4UranusCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4UranusCoefficients[i].a * Math.cos(GFX.g_B4UranusCoefficients[i].b + GFX.g_B4UranusCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
CAAUranus.radiusVector = function CAAUranus$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nR0Coefficients = GFX.g_R0UranusCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
        R0 += GFX.g_R0UranusCoefficients[i].a * Math.cos(GFX.g_R0UranusCoefficients[i].b + GFX.g_R0UranusCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1UranusCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
        R1 += GFX.g_R1UranusCoefficients[i].a * Math.cos(GFX.g_R1UranusCoefficients[i].b + GFX.g_R1UranusCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2UranusCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
        R2 += GFX.g_R2UranusCoefficients[i].a * Math.cos(GFX.g_R2UranusCoefficients[i].b + GFX.g_R2UranusCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3UranusCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
        R3 += GFX.g_R3UranusCoefficients[i].a * Math.cos(GFX.g_R3UranusCoefficients[i].b + GFX.g_R3UranusCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4UranusCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
        R4 += GFX.g_R4UranusCoefficients[i].a * Math.cos(GFX.g_R4UranusCoefficients[i].b + GFX.g_R4UranusCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4) / 100000000;
}


////////////////////////////////////////////////////////////////////////////////
// CAAVenus

window.CAAVenus = function CAAVenus() {
}
CAAVenus.eclipticLongitude = function CAAVenus$eclipticLongitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0VenusCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
        L0 += GFX.g_L0VenusCoefficients[i].a * Math.cos(GFX.g_L0VenusCoefficients[i].b + GFX.g_L0VenusCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1VenusCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
        L1 += GFX.g_L1VenusCoefficients[i].a * Math.cos(GFX.g_L1VenusCoefficients[i].b + GFX.g_L1VenusCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2VenusCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
        L2 += GFX.g_L2VenusCoefficients[i].a * Math.cos(GFX.g_L2VenusCoefficients[i].b + GFX.g_L2VenusCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3VenusCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
        L3 += GFX.g_L3VenusCoefficients[i].a * Math.cos(GFX.g_L3VenusCoefficients[i].b + GFX.g_L3VenusCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4VenusCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
        L4 += GFX.g_L4VenusCoefficients[i].a * Math.cos(GFX.g_L4VenusCoefficients[i].b + GFX.g_L4VenusCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5VenusCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
        L5 += GFX.g_L5VenusCoefficients[i].a * Math.cos(GFX.g_L5VenusCoefficients[i].b + GFX.g_L5VenusCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
}
CAAVenus.eclipticLatitude = function CAAVenus$eclipticLatitude(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0VenusCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
        B0 += GFX.g_B0VenusCoefficients[i].a * Math.cos(GFX.g_B0VenusCoefficients[i].b + GFX.g_B0VenusCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1VenusCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
        B1 += GFX.g_B1VenusCoefficients[i].a * Math.cos(GFX.g_B1VenusCoefficients[i].b + GFX.g_B1VenusCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2VenusCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
        B2 += GFX.g_B2VenusCoefficients[i].a * Math.cos(GFX.g_B2VenusCoefficients[i].b + GFX.g_B2VenusCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3VenusCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
        B3 += GFX.g_B3VenusCoefficients[i].a * Math.cos(GFX.g_B3VenusCoefficients[i].b + GFX.g_B3VenusCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4VenusCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
        B4 += GFX.g_B4VenusCoefficients[i].a * Math.cos(GFX.g_B4VenusCoefficients[i].b + GFX.g_B4VenusCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
}
CAAVenus.radiusVector = function CAAVenus$radiusVector(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nR0Coefficients = GFX.g_R0VenusCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
        R0 += GFX.g_R0VenusCoefficients[i].a * Math.cos(GFX.g_R0VenusCoefficients[i].b + GFX.g_R0VenusCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1VenusCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
        R1 += GFX.g_R1VenusCoefficients[i].a * Math.cos(GFX.g_R1VenusCoefficients[i].b + GFX.g_R1VenusCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2VenusCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
        R2 += GFX.g_R2VenusCoefficients[i].a * Math.cos(GFX.g_R2VenusCoefficients[i].b + GFX.g_R2VenusCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3VenusCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
        R3 += GFX.g_R3VenusCoefficients[i].a * Math.cos(GFX.g_R3VenusCoefficients[i].b + GFX.g_R3VenusCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4VenusCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
        R4 += GFX.g_R4VenusCoefficients[i].a * Math.cos(GFX.g_R4VenusCoefficients[i].b + GFX.g_R4VenusCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4) / 100000000;
}


Type.registerNamespace('wwtlib');

////////////////////////////////////////////////////////////////////////////////
// wwtlib.CullMode

wwtlib.CullMode = function() { 
    /// <field name="none" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="counterClockwise" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="clockwise" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.CullMode.prototype = {
    none: 0, 
    counterClockwise: 2, 
    clockwise: 1
}
wwtlib.CullMode.registerEnum('wwtlib.CullMode', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PointScaleTypes

wwtlib.PointScaleTypes = function() { 
    /// <field name="linear" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="power" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="log" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constant" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="stellarMagnitude" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.PointScaleTypes.prototype = {
    linear: 0, 
    power: 1, 
    log: 2, 
    constant: 3, 
    stellarMagnitude: 4
}
wwtlib.PointScaleTypes.registerEnum('wwtlib.PointScaleTypes', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.AltUnits

wwtlib.AltUnits = function() { 
    /// <field name="meters" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="feet" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="inches" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="miles" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="kilometers" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="astronomicalUnits" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="lightYears" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="parsecs" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="megaParsecs" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="custom" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.AltUnits.prototype = {
    meters: 1, 
    feet: 2, 
    inches: 3, 
    miles: 4, 
    kilometers: 5, 
    astronomicalUnits: 6, 
    lightYears: 7, 
    parsecs: 8, 
    megaParsecs: 9, 
    custom: 10
}
wwtlib.AltUnits.registerEnum('wwtlib.AltUnits', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.FadeType

wwtlib.FadeType = function() { 
    /// <field name="fadeIn" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="fadeOut" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="both" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="none" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.FadeType.prototype = {
    fadeIn: 1, 
    fadeOut: 2, 
    both: 3, 
    none: 4
}
wwtlib.FadeType.registerEnum('wwtlib.FadeType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ReferenceFrames

wwtlib.ReferenceFrames = function() { 
    /// <field name="sky" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ecliptic" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="galactic" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="sun" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mercury" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="venus" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="earth" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mars" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="jupiter" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="saturn" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="uranus" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="neptune" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="pluto" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="moon" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="io" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="europa" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ganymede" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="callisto" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="custom" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="identity" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.ReferenceFrames.prototype = {
    sky: 0, 
    ecliptic: 1, 
    galactic: 2, 
    sun: 3, 
    mercury: 4, 
    venus: 5, 
    earth: 6, 
    mars: 7, 
    jupiter: 8, 
    saturn: 9, 
    uranus: 10, 
    neptune: 11, 
    pluto: 12, 
    moon: 13, 
    io: 14, 
    europa: 15, 
    ganymede: 16, 
    callisto: 17, 
    custom: 18, 
    identity: 19
}
wwtlib.ReferenceFrames.registerEnum('wwtlib.ReferenceFrames', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.IUIServicesCallbacks

wwtlib.IUIServicesCallbacks = function() { 
};
wwtlib.IUIServicesCallbacks.prototype = {
    showRowData : null
}
wwtlib.IUIServicesCallbacks.registerInterface('wwtlib.IUIServicesCallbacks');


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ReferenceFrameTypes

wwtlib.ReferenceFrameTypes = function() { 
    /// <field name="fixedSherical" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="orbital" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="trajectory" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.ReferenceFrameTypes.prototype = {
    fixedSherical: 0, 
    orbital: 1, 
    trajectory: 2
}
wwtlib.ReferenceFrameTypes.registerEnum('wwtlib.ReferenceFrameTypes', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.CoordinatesTypes

wwtlib.CoordinatesTypes = function() { 
    /// <field name="spherical" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="rectangular" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="orbital" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.CoordinatesTypes.prototype = {
    spherical: 0, 
    rectangular: 1, 
    orbital: 2
}
wwtlib.CoordinatesTypes.registerEnum('wwtlib.CoordinatesTypes', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.AltTypes

wwtlib.AltTypes = function() { 
    /// <field name="depth" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="altitude" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="distance" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="seaLevel" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="terrain" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.AltTypes.prototype = {
    depth: 0, 
    altitude: 1, 
    distance: 2, 
    seaLevel: 3, 
    terrain: 4
}
wwtlib.AltTypes.registerEnum('wwtlib.AltTypes', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.MarkerMixes

wwtlib.MarkerMixes = function() { 
    /// <field name="same_For_All" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.MarkerMixes.prototype = {
    same_For_All: 0
}
wwtlib.MarkerMixes.registerEnum('wwtlib.MarkerMixes', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ColorMaps

wwtlib.ColorMaps = function() { 
    /// <field name="same_For_All" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="group_by_Values" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="per_Column_Literal" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.ColorMaps.prototype = {
    same_For_All: 0, 
    group_by_Values: 2, 
    per_Column_Literal: 3
}
wwtlib.ColorMaps.registerEnum('wwtlib.ColorMaps', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PlotTypes

wwtlib.PlotTypes = function() { 
    /// <field name="gaussian" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="point" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="circle" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="pushPin" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.PlotTypes.prototype = {
    gaussian: 0, 
    point: 1, 
    circle: 2, 
    pushPin: 3
}
wwtlib.PlotTypes.registerEnum('wwtlib.PlotTypes', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.MarkerScales

wwtlib.MarkerScales = function() { 
    /// <field name="screen" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="world" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.MarkerScales.prototype = {
    screen: 0, 
    world: 1
}
wwtlib.MarkerScales.registerEnum('wwtlib.MarkerScales', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.RAUnits

wwtlib.RAUnits = function() { 
    /// <field name="hours" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="degrees" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.RAUnits.prototype = {
    hours: 0, 
    degrees: 1
}
wwtlib.RAUnits.registerEnum('wwtlib.RAUnits', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Alignment

wwtlib.Alignment = function() { 
    /// <field name="center" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="left" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.Alignment.prototype = {
    center: 0, 
    left: 1
}
wwtlib.Alignment.registerEnum('wwtlib.Alignment', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ISettings

wwtlib.ISettings = function() { 
};
wwtlib.ISettings.prototype = {
    get_actualPlanetScale : null,
    get_fovCamera : null,
    get_fovEyepiece : null,
    get_fovTelescope : null,
    get_locationAltitude : null,
    get_locationLat : null,
    get_locationLng : null,
    get_showClouds : null,
    get_showConstellationBoundries : null,
    get_showConstellationFigures : null,
    get_showConstellationSelection : null,
    get_showEcliptic : null,
    get_showElevationModel : null,
    get_showFieldOfView : null,
    get_showGrid : null,
    get_showHorizon : null,
    get_showHorizonPanorama : null,
    get_showMoonsAsPointSource : null,
    get_showSolarSystem : null,
    get_localHorizonMode : null,
    get_solarSystemStars : null,
    get_solarSystemMilkyWay : null,
    get_solarSystemCosmos : null,
    get_solarSystemCMB : null,
    get_solarSystemOrbits : null,
    get_solarSystemOverlays : null,
    get_solarSystemLighting : null,
    get_solarSystemMultiRes : null,
    get_solarSystemScale : null,
    get_solarSystemMinorPlanets : null,
    get_solarSystemPlanets : null,
    get_showEarthSky : null,
    get_solarSystemMinorOrbits : null,
    get_showEquatorialGridText : null,
    get_showGalacticGrid : null,
    get_showGalacticGridText : null,
    get_showEclipticGrid : null,
    get_showEclipticGridText : null,
    get_showEclipticOverviewText : null,
    get_showAltAzGrid : null,
    get_showAltAzGridText : null,
    get_showPrecessionChart : null,
    get_showConstellationPictures : null,
    get_showConstellationLabels : null,
    get_constellationsEnabled : null,
    get_constellationFiguresFilter : null,
    get_constellationBoundariesFilter : null,
    get_constellationNamesFilter : null,
    get_constellationArtFilter : null,
    get_showSkyOverlays : null,
    get_showConstellations : null,
    get_showSkyNode : null,
    get_showSkyGrids : null,
    get_showSkyOverlaysIn3d : null,
    get_earthCutawayView : null,
    get_showISSModel : null,
    get_milkyWayModel : null,
    get_galacticMode : null,
    get_minorPlanetsFilter : null,
    get_planetOrbitsFilter : null,
    getSetting : null
}
wwtlib.ISettings.registerInterface('wwtlib.ISettings');


////////////////////////////////////////////////////////////////////////////////
// wwtlib.StockSkyOverlayTypes

wwtlib.StockSkyOverlayTypes = function() { 
    /// <field name="empty" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="equatorialGrid" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="equatorialGridText" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="galacticGrid" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="galacticGridText" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="eclipticGrid" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="eclipticGridText" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="eclipticOverview" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="eclipticOverviewText" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="precessionChart" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="altAzGrid" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="altAzGridText" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constellationFigures" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constellationBoundaries" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constellationFocusedOnly" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constellationNames" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constellationPictures" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="fadeToBlack" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="fadeToLogo" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="fadeToGradient" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="screenBroadcast" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="fadeRemoteOnly" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="skyGrids" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constellations" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemStars" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemMilkyWay" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemCosmos" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemOrbits" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemPlanets" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemAsteroids" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemLighting" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemMinorOrbits" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="showEarthCloudLayer" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="showElevationModel" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="showAtmosphere" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="multiResSolarSystemBodies" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="auroraBorialis" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="earthCutAway" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="showSolarSystem" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="clouds8k" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="filedOfView" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="showISSModel" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystemCMB" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mpcZone1" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mpcZone2" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mpcZone3" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mpcZone4" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mpcZone5" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mpcZone6" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mpcZone7" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="orbitFilters" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.StockSkyOverlayTypes.prototype = {
    empty: 0, 
    equatorialGrid: 1, 
    equatorialGridText: 2, 
    galacticGrid: 3, 
    galacticGridText: 4, 
    eclipticGrid: 5, 
    eclipticGridText: 6, 
    eclipticOverview: 7, 
    eclipticOverviewText: 8, 
    precessionChart: 9, 
    altAzGrid: 10, 
    altAzGridText: 11, 
    constellationFigures: 12, 
    constellationBoundaries: 13, 
    constellationFocusedOnly: 14, 
    constellationNames: 15, 
    constellationPictures: 16, 
    fadeToBlack: 17, 
    fadeToLogo: 18, 
    fadeToGradient: 19, 
    screenBroadcast: 20, 
    fadeRemoteOnly: 21, 
    skyGrids: 22, 
    constellations: 23, 
    solarSystemStars: 24, 
    solarSystemMilkyWay: 25, 
    solarSystemCosmos: 26, 
    solarSystemOrbits: 27, 
    solarSystemPlanets: 28, 
    solarSystemAsteroids: 29, 
    solarSystemLighting: 30, 
    solarSystemMinorOrbits: 31, 
    showEarthCloudLayer: 32, 
    showElevationModel: 33, 
    showAtmosphere: 34, 
    multiResSolarSystemBodies: 35, 
    auroraBorialis: 36, 
    earthCutAway: 37, 
    showSolarSystem: 38, 
    clouds8k: 39, 
    filedOfView: 40, 
    showISSModel: 41, 
    solarSystemCMB: 42, 
    mpcZone1: 43, 
    mpcZone2: 44, 
    mpcZone3: 45, 
    mpcZone4: 46, 
    mpcZone5: 47, 
    mpcZone6: 48, 
    mpcZone7: 49, 
    orbitFilters: 50
}
wwtlib.StockSkyOverlayTypes.registerEnum('wwtlib.StockSkyOverlayTypes', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.OverlayAnchor

wwtlib.OverlayAnchor = function() { 
    /// <field name="sky" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="screen" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.OverlayAnchor.prototype = {
    sky: 0, 
    screen: 1
}
wwtlib.OverlayAnchor.registerEnum('wwtlib.OverlayAnchor', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.AudioType

wwtlib.AudioType = function() { 
    /// <field name="music" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="voice" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.AudioType.prototype = {
    music: 0, 
    voice: 1
}
wwtlib.AudioType.registerEnum('wwtlib.AudioType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ShapeType

wwtlib.ShapeType = function() { 
    /// <field name="circle" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="rectagle" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="star" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="donut" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="arrow" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="line" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="openRectagle" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.ShapeType.prototype = {
    circle: 0, 
    rectagle: 1, 
    star: 2, 
    donut: 3, 
    arrow: 4, 
    line: 5, 
    openRectagle: 6
}
wwtlib.ShapeType.registerEnum('wwtlib.ShapeType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LoopTypes

wwtlib.LoopTypes = function() { 
    /// <field name="loop" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="upDown" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="down" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="upDownOnce" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="once" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="begin" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="end" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.LoopTypes.prototype = {
    loop: 0, 
    upDown: 1, 
    down: 2, 
    upDownOnce: 3, 
    once: 4, 
    begin: 5, 
    end: 6
}
wwtlib.LoopTypes.registerEnum('wwtlib.LoopTypes', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TextBorderStyle

wwtlib.TextBorderStyle = function() { 
    /// <field name="none" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="tight" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="small" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="medium" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="large" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.TextBorderStyle.prototype = {
    none: 0, 
    tight: 1, 
    small: 2, 
    medium: 3, 
    large: 4
}
wwtlib.TextBorderStyle.registerEnum('wwtlib.TextBorderStyle', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.UserLevel

wwtlib.UserLevel = function() { 
    /// <field name="beginner" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="intermediate" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="advanced" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="educator" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="professional" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.UserLevel.prototype = {
    beginner: 0, 
    intermediate: 1, 
    advanced: 2, 
    educator: 3, 
    professional: 4
}
wwtlib.UserLevel.registerEnum('wwtlib.UserLevel', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.StateType

wwtlib.StateType = function() { 
    /// <field name="pending" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="received" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="error" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.StateType.prototype = {
    pending: 0, 
    received: 1, 
    error: 2
}
wwtlib.StateType.registerEnum('wwtlib.StateType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.SolarSystemObjects

wwtlib.SolarSystemObjects = function() { 
    /// <field name="sun" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mercury" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="venus" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="mars" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="jupiter" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="saturn" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="uranus" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="neptune" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="pluto" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="moon" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="io" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="europa" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ganymede" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="callisto" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ioShadow" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="europaShadow" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ganymedeShadow" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="callistoShadow" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="sunEclipsed" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="earth" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="custom" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="undefined" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.SolarSystemObjects.prototype = {
    sun: 0, 
    mercury: 1, 
    venus: 2, 
    mars: 3, 
    jupiter: 4, 
    saturn: 5, 
    uranus: 6, 
    neptune: 7, 
    pluto: 8, 
    moon: 9, 
    io: 10, 
    europa: 11, 
    ganymede: 12, 
    callisto: 13, 
    ioShadow: 14, 
    europaShadow: 15, 
    ganymedeShadow: 16, 
    callistoShadow: 17, 
    sunEclipsed: 18, 
    earth: 19, 
    custom: 20, 
    undefined: 65536
}
wwtlib.SolarSystemObjects.registerEnum('wwtlib.SolarSystemObjects', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.InterpolationType

wwtlib.InterpolationType = function() { 
    /// <field name="linear" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="easeIn" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="easeOut" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="easeInOut" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="exponential" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="defaultV" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.InterpolationType.prototype = {
    linear: 0, 
    easeIn: 1, 
    easeOut: 2, 
    easeInOut: 3, 
    exponential: 4, 
    defaultV: 5
}
wwtlib.InterpolationType.registerEnum('wwtlib.InterpolationType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PointType

wwtlib.PointType = function() { 
    /// <field name="move" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="line" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="dash" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="start" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.PointType.prototype = {
    move: 0, 
    line: 1, 
    dash: 2, 
    start: 3
}
wwtlib.PointType.registerEnum('wwtlib.PointType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LocationHint

wwtlib.LocationHint = function() { 
    /// <field name="slash" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="backslash" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="top" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.LocationHint.prototype = {
    slash: 0, 
    backslash: 1, 
    top: 2
}
wwtlib.LocationHint.registerEnum('wwtlib.LocationHint', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.FolderGroup

wwtlib.FolderGroup = function() { 
    /// <field name="explorer" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="tour" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="search" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constellation" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="view" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="goTo" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="community" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="context" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="voTable" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="imageStack" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.FolderGroup.prototype = {
    explorer: 0, 
    tour: 1, 
    search: 2, 
    constellation: 3, 
    view: 4, 
    goTo: 5, 
    community: 6, 
    context: 7, 
    voTable: 8, 
    imageStack: 9
}
wwtlib.FolderGroup.registerEnum('wwtlib.FolderGroup', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.FolderRefreshType

wwtlib.FolderRefreshType = function() { 
    /// <field name="interval" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="conditionalGet" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="viewChange" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.FolderRefreshType.prototype = {
    interval: 0, 
    conditionalGet: 1, 
    viewChange: 2
}
wwtlib.FolderRefreshType.registerEnum('wwtlib.FolderRefreshType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.FolderType

wwtlib.FolderType = function() { 
    /// <field name="earth" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="planet" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="sky" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="panorama" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.FolderType.prototype = {
    earth: 0, 
    planet: 1, 
    sky: 2, 
    panorama: 3
}
wwtlib.FolderType.registerEnum('wwtlib.FolderType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ThumbnailSize

wwtlib.ThumbnailSize = function() { 
    /// <field name="small" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="big" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.ThumbnailSize.prototype = {
    small: 0, 
    big: 1
}
wwtlib.ThumbnailSize.registerEnum('wwtlib.ThumbnailSize', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib._iFolder

wwtlib._iFolder = function() { 
};
wwtlib._iFolder.prototype = {
    get_browseable : null,
    set_browseable : null,
    get_group : null,
    set_group : null,
    get_msrCommunityId : null,
    set_msrCommunityId : null,
    get_msrComponentId : null,
    set_msrComponentId : null,
    get_name : null,
    set_name : null,
    get_permission : null,
    set_permission : null,
    get_readOnly : null,
    set_readOnly : null,
    get_refreshInterval : null,
    set_refreshInterval : null,
    get_refreshType : null,
    set_refreshType : null,
    get_refreshTypeSpecified : null,
    set_refreshTypeSpecified : null,
    get_searchable : null,
    set_searchable : null,
    get_subType : null,
    set_subType : null,
    get_thumbnailUrl : null,
    set_thumbnailUrl : null,
    get_type : null,
    set_type : null,
    get_url : null,
    set_url : null
}
wwtlib._iFolder.registerInterface('wwtlib._iFolder');


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ProjectionType

wwtlib.ProjectionType = function() { 
    /// <field name="mercator" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="equirectangular" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="tangent" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="tan" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="toast" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="spherical" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="skyImage" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="plotted" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.ProjectionType.prototype = {
    mercator: 0, 
    equirectangular: 1, 
    tangent: 2, 
    tan: 2, 
    toast: 3, 
    spherical: 4, 
    skyImage: 5, 
    plotted: 6
}
wwtlib.ProjectionType.registerEnum('wwtlib.ProjectionType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ImageSetType

wwtlib.ImageSetType = function() { 
    /// <field name="earth" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="planet" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="sky" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="panorama" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystem" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="sandbox" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.ImageSetType.prototype = {
    earth: 0, 
    planet: 1, 
    sky: 2, 
    panorama: 3, 
    solarSystem: 4, 
    sandbox: 5
}
wwtlib.ImageSetType.registerEnum('wwtlib.ImageSetType', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.BandPass

wwtlib.BandPass = function() { 
    /// <field name="gamma" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="xRay" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ultraviolet" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="visible" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="hydrogenAlpha" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="IR" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="microwave" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="radio" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="visibleNight" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.BandPass.prototype = {
    gamma: 0, 
    xRay: 1, 
    ultraviolet: 2, 
    visible: 3, 
    hydrogenAlpha: 4, 
    IR: 4, 
    microwave: 5, 
    radio: 6, 
    visibleNight: 6
}
wwtlib.BandPass.registerEnum('wwtlib.BandPass', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.IThumbnail

wwtlib.IThumbnail = function() { 
};
wwtlib.IThumbnail.prototype = {
    get_name : null,
    get_thumbnail : null,
    set_thumbnail : null,
    get_thumbnailUrl : null,
    set_thumbnailUrl : null,
    get_bounds : null,
    set_bounds : null,
    get_isImage : null,
    get_isTour : null,
    get_isFolder : null,
    get_isCloudCommunityItem : null,
    get_readOnly : null,
    get_children : null
}
wwtlib.IThumbnail.registerInterface('wwtlib.IThumbnail');


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Classification

wwtlib.Classification = function() { 
    /// <field name="star" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="supernova" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="blackHole" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="neutronStar" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="doubleStar" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="multipleStars" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="asterism" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="constellation" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="openCluster" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="globularCluster" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="nebulousCluster" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="nebula" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="emissionNebula" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="planetaryNebula" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="reflectionNebula" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="darkNebula" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="giantMolecularCloud" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="supernovaRemnant" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="interstellarDust" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="quasar" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="galaxy" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="spiralGalaxy" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="irregularGalaxy" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ellipticalGalaxy" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="knot" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="plateDefect" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="clusterOfGalaxies" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="otherNGC" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="unidentified" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="solarSystem" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="unfiltered" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="stellar" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="stellarGroupings" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="nebulae" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="galactic" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="other" type="Number" integer="true" static="true">
    /// </field>
};
wwtlib.Classification.prototype = {
    star: 1, 
    supernova: 2, 
    blackHole: 4, 
    neutronStar: 8, 
    doubleStar: 16, 
    multipleStars: 32, 
    asterism: 64, 
    constellation: 128, 
    openCluster: 256, 
    globularCluster: 512, 
    nebulousCluster: 1024, 
    nebula: 2048, 
    emissionNebula: 4096, 
    planetaryNebula: 8192, 
    reflectionNebula: 16384, 
    darkNebula: 32768, 
    giantMolecularCloud: 65536, 
    supernovaRemnant: 131072, 
    interstellarDust: 262144, 
    quasar: 524288, 
    galaxy: 1048576, 
    spiralGalaxy: 2097152, 
    irregularGalaxy: 4194304, 
    ellipticalGalaxy: 8388608, 
    knot: 16777216, 
    plateDefect: 33554432, 
    clusterOfGalaxies: 67108864, 
    otherNGC: 134217728, 
    unidentified: 268435456, 
    solarSystem: 536870912, 
    unfiltered: 1073741823, 
    stellar: 63, 
    stellarGroupings: 2032, 
    nebulae: 523264, 
    galactic: 133693440, 
    other: 436207616
}
wwtlib.Classification.registerEnum('wwtlib.Classification', false);


////////////////////////////////////////////////////////////////////////////////
// wwtlib.IPlace

wwtlib.IPlace = function() { 
};
wwtlib.IPlace.prototype = {
    get_name : null,
    get_thumbnail : null,
    set_thumbnail : null,
    get_thumbnailUrl : null,
    set_thumbnailUrl : null,
    get_bounds : null,
    set_bounds : null,
    get_isImage : null,
    get_isTour : null,
    get_isFolder : null,
    get_isCloudCommunityItem : null,
    get_readOnly : null,
    get_children : null,
    get_backgroundImageset : null,
    set_backgroundImageset : null,
    get_studyImageset : null,
    set_studyImageset : null,
    get_camParams : null,
    set_camParams : null,
    get_dec : null,
    set_dec : null,
    get_lat : null,
    set_lat : null,
    get_lng : null,
    set_lng : null,
    get_location3d : null,
    get_names : null,
    set_names : null,
    get_opacity : null,
    set_opacity : null,
    get_RA : null,
    set_RA : null,
    get_zoomLevel : null,
    set_zoomLevel : null,
    get_searchDistance : null,
    set_searchDistance : null,
    get_classification : null,
    set_classification : null,
    get_type : null,
    set_type : null,
    get_constellation : null,
    set_constellation : null,
    get_magnitude : null,
    set_magnitude : null,
    get_distance : null,
    set_distance : null,
    get_url : null,
    set_url : null,
    get_target : null,
    set_target : null,
    get_tag : null,
    set_tag : null
}
wwtlib.IPlace.registerInterface('wwtlib.IPlace');


////////////////////////////////////////////////////////////////////////////////
// wwtlib.IUiController

wwtlib.IUiController = function() { 
};
wwtlib.IUiController.prototype = {
    render : null,
    mouseDown : null,
    mouseUp : null,
    mouseMove : null,
    mouseClick : null,
    click : null,
    mouseDoubleClick : null,
    keyDown : null,
    keyUp : null,
    hover : null
}
wwtlib.IUiController.registerInterface('wwtlib.IUiController');


////////////////////////////////////////////////////////////////////////////////
// wwtlib.IViewMover

wwtlib.IViewMover = function() { 
};
wwtlib.IViewMover.prototype = {
    get_complete : null,
    get_currentPosition : null,
    get_currentDateTime : null,
    get_midpoint : null,
    set_midpoint : null,
    get_moveTime : null
}
wwtlib.IViewMover.registerInterface('wwtlib.IViewMover');


////////////////////////////////////////////////////////////////////////////////
// wwtlib.AstroRaDec

wwtlib.AstroRaDec = function wwtlib_AstroRaDec(ra, dec, dist, shadow, eclipsed) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <param name="dist" type="Number">
    /// </param>
    /// <param name="shadow" type="Boolean">
    /// </param>
    /// <param name="eclipsed" type="Boolean">
    /// </param>
    /// <field name="RA" type="Number">
    /// </field>
    /// <field name="dec" type="Number">
    /// </field>
    /// <field name="distance" type="Number">
    /// </field>
    /// <field name="shadow" type="Boolean">
    /// </field>
    /// <field name="eclipsed" type="Boolean">
    /// </field>
    this.RA = ra;
    this.dec = dec;
    this.distance = dist;
    this.shadow = shadow;
    this.eclipsed = eclipsed;
}
wwtlib.AstroRaDec.prototype = {
    RA: 0,
    dec: 0,
    distance: 0,
    shadow: false,
    eclipsed: false
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.RiseSetDetails

wwtlib.RiseSetDetails = function wwtlib_RiseSetDetails(bValid, Rise, Transit, Set, neverRises) {
    /// <param name="bValid" type="Boolean">
    /// </param>
    /// <param name="Rise" type="Number">
    /// </param>
    /// <param name="Transit" type="Number">
    /// </param>
    /// <param name="Set" type="Number">
    /// </param>
    /// <param name="neverRises" type="Boolean">
    /// </param>
    /// <field name="bValid" type="Boolean">
    /// </field>
    /// <field name="rise" type="Number">
    /// </field>
    /// <field name="transit" type="Number">
    /// </field>
    /// <field name="set" type="Number">
    /// </field>
    /// <field name="bNeverRises" type="Boolean">
    /// </field>
    this.bValid = bValid;
    this.rise = Rise;
    this.transit = Transit;
    this.set = Set;
    this.bNeverRises = neverRises;
}
wwtlib.RiseSetDetails.prototype = {
    bValid: false,
    rise: 0,
    transit: 0,
    set: 0,
    bNeverRises: false
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.AstroCalc

wwtlib.AstroCalc = function wwtlib_AstroCalc() {
    /// <field name="_galDetails" type="GMDS" static="true">
    /// </field>
    /// <field name="_jupDetails" type="EPD" static="true">
    /// </field>
    /// <field name="_jupPhisical" type="CAAPhysicalJupiterDetails" static="true">
    /// </field>
    /// <field name="_jDateLast" type="Number" static="true">
    /// </field>
}
wwtlib.AstroCalc.getPlanet = function wwtlib_AstroCalc$getPlanet(jDate, planetIn, locLat, locLong, locHeight) {
    /// <param name="jDate" type="Number">
    /// </param>
    /// <param name="planetIn" type="EO">
    /// </param>
    /// <param name="locLat" type="Number">
    /// </param>
    /// <param name="locLong" type="Number">
    /// </param>
    /// <param name="locHeight" type="Number">
    /// </param>
    /// <returns type="wwtlib.AstroRaDec"></returns>
    var planet = planetIn;
    locLong = -locLong;
    if (planet < 9) {
        var Details = ELL.calculate(jDate, planetIn);
        var corrected = CAAParallax.equatorial2Topocentric(Details.apparentGeocentricRA, Details.apparentGeocentricDeclination, Details.apparentGeocentricDistance, locLong, locLat, locHeight, jDate);
        return new wwtlib.AstroRaDec(corrected.x, corrected.y, Details.apparentGeocentricDistance, false, false);
    }
    else if (planet === 9) {
        var lat = CAAMoon.eclipticLatitude(jDate);
        var lng = CAAMoon.eclipticLongitude(jDate);
        var dis = CAAMoon.radiusVector(jDate) / 149598000;
        var epsilon = CAANutation.trueObliquityOfEcliptic(jDate);
        var d = CT.ec2Eq(lng, lat, epsilon);
        var corrected = CAAParallax.equatorial2Topocentric(d.x, d.y, dis, locLong, locLat, locHeight, jDate);
        return new wwtlib.AstroRaDec(corrected.x, corrected.y, dis, false, false);
    }
    else {
        if (jDate !== wwtlib.AstroCalc._jDateLast) {
            wwtlib.AstroCalc._jupDetails = ELL.calculate(jDate, 4);
            wwtlib.AstroCalc._jupPhisical = CAAPhysicalJupiter.calculate(jDate);
            var corrected = CAAParallax.equatorial2Topocentric(wwtlib.AstroCalc._jupDetails.apparentGeocentricRA, wwtlib.AstroCalc._jupDetails.apparentGeocentricDeclination, wwtlib.AstroCalc._jupDetails.apparentGeocentricDistance, locLong, locLat, locHeight, jDate);
            wwtlib.AstroCalc._jupDetails.apparentGeocentricRA = corrected.x;
            wwtlib.AstroCalc._jupDetails.apparentGeocentricDeclination = corrected.y;
            wwtlib.AstroCalc._galDetails = GM.calculate(jDate);
            wwtlib.AstroCalc._jDateLast = jDate;
        }
        var jupiterDiameter = 0.000954501;
        var scale = Math.atan(0.5 * (jupiterDiameter / wwtlib.AstroCalc._jupDetails.apparentGeocentricDistance)) / 3.1415927 * 180;
        var raScale = (scale / Math.cos(wwtlib.AstroCalc._jupDetails.apparentGeocentricDeclination / 180 * 3.1415927)) / 15;
        var xMoon = 0;
        var yMoon = 0;
        var zMoon = 0;
        var shadow = false;
        var eclipsed = false;
        switch (planet) {
            case 10:
                xMoon = wwtlib.AstroCalc._galDetails.satellite1.apparentRectangularCoordinates.x;
                yMoon = wwtlib.AstroCalc._galDetails.satellite1.apparentRectangularCoordinates.y;
                zMoon = wwtlib.AstroCalc._galDetails.satellite1.apparentRectangularCoordinates.z;
                eclipsed = wwtlib.AstroCalc._galDetails.satellite1.bInEclipse;
                shadow = wwtlib.AstroCalc._galDetails.satellite1.bInShadowTransit;
                break;
            case 11:
                xMoon = wwtlib.AstroCalc._galDetails.satellite2.apparentRectangularCoordinates.x;
                yMoon = wwtlib.AstroCalc._galDetails.satellite2.apparentRectangularCoordinates.y;
                zMoon = wwtlib.AstroCalc._galDetails.satellite2.apparentRectangularCoordinates.z;
                eclipsed = wwtlib.AstroCalc._galDetails.satellite2.bInEclipse;
                shadow = wwtlib.AstroCalc._galDetails.satellite2.bInShadowTransit;
                break;
            case 12:
                xMoon = wwtlib.AstroCalc._galDetails.satellite3.apparentRectangularCoordinates.x;
                yMoon = wwtlib.AstroCalc._galDetails.satellite3.apparentRectangularCoordinates.y;
                zMoon = wwtlib.AstroCalc._galDetails.satellite3.apparentRectangularCoordinates.z;
                eclipsed = wwtlib.AstroCalc._galDetails.satellite3.bInEclipse;
                shadow = wwtlib.AstroCalc._galDetails.satellite3.bInShadowTransit;
                break;
            case 13:
                xMoon = wwtlib.AstroCalc._galDetails.satellite4.apparentRectangularCoordinates.x;
                yMoon = wwtlib.AstroCalc._galDetails.satellite4.apparentRectangularCoordinates.y;
                zMoon = wwtlib.AstroCalc._galDetails.satellite4.apparentRectangularCoordinates.z;
                eclipsed = wwtlib.AstroCalc._galDetails.satellite4.bInEclipse;
                shadow = wwtlib.AstroCalc._galDetails.satellite4.bInShadowTransit;
                break;
            case 14:
                xMoon = wwtlib.AstroCalc._galDetails.satellite1.apparentShadowRectangularCoordinates.x;
                yMoon = wwtlib.AstroCalc._galDetails.satellite1.apparentShadowRectangularCoordinates.y;
                zMoon = wwtlib.AstroCalc._galDetails.satellite1.apparentShadowRectangularCoordinates.z * 0.9;
                shadow = wwtlib.AstroCalc._galDetails.satellite1.bInShadowTransit;
                break;
            case 15:
                xMoon = wwtlib.AstroCalc._galDetails.satellite2.apparentShadowRectangularCoordinates.x;
                yMoon = wwtlib.AstroCalc._galDetails.satellite2.apparentShadowRectangularCoordinates.y;
                zMoon = wwtlib.AstroCalc._galDetails.satellite2.apparentShadowRectangularCoordinates.z * 0.9;
                shadow = wwtlib.AstroCalc._galDetails.satellite2.bInShadowTransit;
                break;
            case 16:
                xMoon = wwtlib.AstroCalc._galDetails.satellite3.apparentShadowRectangularCoordinates.x;
                yMoon = wwtlib.AstroCalc._galDetails.satellite3.apparentShadowRectangularCoordinates.y;
                zMoon = wwtlib.AstroCalc._galDetails.satellite3.apparentShadowRectangularCoordinates.z * 0.9;
                shadow = wwtlib.AstroCalc._galDetails.satellite3.bInShadowTransit;
                break;
            case 17:
                xMoon = wwtlib.AstroCalc._galDetails.satellite4.apparentShadowRectangularCoordinates.x;
                yMoon = wwtlib.AstroCalc._galDetails.satellite4.apparentShadowRectangularCoordinates.y;
                zMoon = wwtlib.AstroCalc._galDetails.satellite4.apparentShadowRectangularCoordinates.z * 0.9;
                shadow = wwtlib.AstroCalc._galDetails.satellite4.bInShadowTransit;
                break;
        }
        var xTemp;
        var yTemp;
        var radians = wwtlib.AstroCalc._jupPhisical.p / 180 * 3.1415927;
        xTemp = xMoon * Math.cos(radians) - yMoon * Math.sin(radians);
        yTemp = xMoon * Math.sin(radians) + yMoon * Math.cos(radians);
        xMoon = xTemp;
        yMoon = yTemp;
        return new wwtlib.AstroRaDec(wwtlib.AstroCalc._jupDetails.apparentGeocentricRA - (xMoon * raScale), wwtlib.AstroCalc._jupDetails.apparentGeocentricDeclination + yMoon * scale, wwtlib.AstroCalc._jupDetails.apparentGeocentricDistance + (zMoon * jupiterDiameter / 2), shadow, eclipsed);
    }
}
wwtlib.AstroCalc.getJulianDay = function wwtlib_AstroCalc$getJulianDay(year, month, day) {
    /// <param name="year" type="Number">
    /// </param>
    /// <param name="month" type="Number">
    /// </param>
    /// <param name="day" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return DT.dateToJD(parseInt(year), parseInt(month), day, true);
}
wwtlib.AstroCalc.eclipticToJ2000 = function wwtlib_AstroCalc$eclipticToJ2000(l, b, jNow) {
    /// <param name="l" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <param name="jNow" type="Number">
    /// </param>
    /// <returns type="wwtlib.AstroRaDec"></returns>
    var radec = CT.ec2Eq(l, b, CAANutation.trueObliquityOfEcliptic(jNow));
    return new wwtlib.AstroRaDec(radec.x, radec.y, 0, false, false);
}
wwtlib.AstroCalc.galacticToJ2000 = function wwtlib_AstroCalc$galacticToJ2000(l, b) {
    /// <param name="l" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <returns type="wwtlib.AstroRaDec"></returns>
    var radec = CT.g2Eq(l, b);
    return new wwtlib.AstroRaDec(radec.x, radec.y, 0, false, false);
}
wwtlib.AstroCalc.j2000ToGalactic = function wwtlib_AstroCalc$j2000ToGalactic(ra, dec) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <returns type="wwtlib.AstroRaDec"></returns>
    var galactic = CT.eq2G(ra, dec);
    return new wwtlib.AstroRaDec(galactic.x, galactic.y, 0, false, false);
}
wwtlib.AstroCalc.getRiseTrinsitSet = function wwtlib_AstroCalc$getRiseTrinsitSet(jd, lat, lng, ra1, dec1, ra2, dec2, ra3, dec3, type) {
    /// <param name="jd" type="Number">
    /// </param>
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <param name="ra1" type="Number">
    /// </param>
    /// <param name="dec1" type="Number">
    /// </param>
    /// <param name="ra2" type="Number">
    /// </param>
    /// <param name="dec2" type="Number">
    /// </param>
    /// <param name="ra3" type="Number">
    /// </param>
    /// <param name="dec3" type="Number">
    /// </param>
    /// <param name="type" type="Number" integer="true">
    /// </param>
    /// <returns type="wwtlib.RiseSetDetails"></returns>
    var alt = -0.5667;
    switch (type) {
        case 0:
            alt = -0.5667;
            break;
        case 1:
            alt = -0.8333;
            break;
        case 2:
            alt = 0.125;
            break;
    }
    var RiseTransitSetTime = CAARiseTransitSet.rise(jd, ra1, dec1, ra2, dec2, ra3, dec3, lng, lat, alt);
    var neverRises = false;
    if (!RiseTransitSetTime.bValid) {
        neverRises = wwtlib._util.sign(lat) !== wwtlib._util.sign(dec2);
    }
    return new wwtlib.RiseSetDetails(RiseTransitSetTime.bValid, RiseTransitSetTime.rise, RiseTransitSetTime.transit, RiseTransitSetTime.set, neverRises);
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._positionVertexBuffer

wwtlib._positionVertexBuffer = function wwtlib__positionVertexBuffer(count) {
    /// <param name="count" type="Number" integer="true">
    /// </param>
    /// <field name="count" type="Number" integer="true">
    /// </field>
    /// <field name="_verts" type="Array" elementType="Vector3d">
    /// </field>
    /// <field name="vertexBuffer" type="WebGLBuffer">
    /// </field>
    this.count = count;
}
wwtlib._positionVertexBuffer.prototype = {
    count: 0,
    _verts: null,
    
    lock: function wwtlib__positionVertexBuffer$lock() {
        /// <returns type="Array" elementType="Vector3d"></returns>
        this._verts = new Array(this.count);
        return this._verts;
    },
    
    vertexBuffer: null,
    
    unlock: function wwtlib__positionVertexBuffer$unlock() {
        this.vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
        wwtlib.Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
        var f32array = new Float32Array(this.count * 3);
        var buffer = f32array;
        var index = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this._verts);
        while ($enum1.moveNext()) {
            var pt = $enum1.current;
            buffer[index++] = pt.x;
            buffer[index++] = pt.y;
            buffer[index++] = pt.z;
        }
        wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._positionTextureVertexBuffer

wwtlib._positionTextureVertexBuffer = function wwtlib__positionTextureVertexBuffer(count) {
    /// <param name="count" type="Number" integer="true">
    /// </param>
    /// <field name="count" type="Number" integer="true">
    /// </field>
    /// <field name="_verts" type="Array" elementType="PositionTexture">
    /// </field>
    /// <field name="vertexBuffer" type="WebGLBuffer">
    /// </field>
    this.count = count;
}
wwtlib._positionTextureVertexBuffer.prototype = {
    count: 0,
    _verts: null,
    
    lock: function wwtlib__positionTextureVertexBuffer$lock() {
        /// <returns type="Array" elementType="PositionTexture"></returns>
        this._verts = new Array(this.count);
        return this._verts;
    },
    
    vertexBuffer: null,
    
    unlock: function wwtlib__positionTextureVertexBuffer$unlock() {
        this.vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
        wwtlib.Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
        var f32array = new Float32Array(this.count * 5);
        var buffer = f32array;
        var index = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this._verts);
        while ($enum1.moveNext()) {
            var pt = $enum1.current;
            buffer[index++] = pt.position.x;
            buffer[index++] = pt.position.y;
            buffer[index++] = pt.position.z;
            buffer[index++] = pt.tu;
            buffer[index++] = pt.tv;
        }
        wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._timeSeriesLineVertexBuffer

wwtlib._timeSeriesLineVertexBuffer = function wwtlib__timeSeriesLineVertexBuffer(count) {
    /// <param name="count" type="Number" integer="true">
    /// </param>
    /// <field name="count" type="Number" integer="true">
    /// </field>
    /// <field name="_verts" type="Array" elementType="TimeSeriesLineVertex">
    /// </field>
    /// <field name="vertexBuffer" type="WebGLBuffer">
    /// </field>
    this.count = count;
}
wwtlib._timeSeriesLineVertexBuffer.prototype = {
    count: 0,
    _verts: null,
    
    lock: function wwtlib__timeSeriesLineVertexBuffer$lock() {
        /// <returns type="Array" elementType="TimeSeriesLineVertex"></returns>
        this._verts = new Array(this.count);
        return this._verts;
    },
    
    vertexBuffer: null,
    
    unlock: function wwtlib__timeSeriesLineVertexBuffer$unlock() {
        this.vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
        wwtlib.Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
        var f32array = new Float32Array(this.count * 9);
        var buffer = f32array;
        var index = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this._verts);
        while ($enum1.moveNext()) {
            var pt = $enum1.current;
            buffer[index++] = pt.position.x;
            buffer[index++] = pt.position.y;
            buffer[index++] = pt.position.z;
            buffer[index++] = pt.get_color().r / 255;
            buffer[index++] = pt.get_color().g / 255;
            buffer[index++] = pt.get_color().b / 255;
            buffer[index++] = pt.get_color().a / 255;
            buffer[index++] = pt.tu;
            buffer[index++] = pt.tv;
        }
        wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._timeSeriesPointVertexBuffer

wwtlib._timeSeriesPointVertexBuffer = function wwtlib__timeSeriesPointVertexBuffer(count) {
    /// <param name="count" type="Number" integer="true">
    /// </param>
    /// <field name="count" type="Number" integer="true">
    /// </field>
    /// <field name="_verts" type="Array" elementType="TimeSeriesPointVertex">
    /// </field>
    /// <field name="vertexBuffer" type="WebGLBuffer">
    /// </field>
    this.count = count;
}
wwtlib._timeSeriesPointVertexBuffer.prototype = {
    count: 0,
    _verts: null,
    
    lock: function wwtlib__timeSeriesPointVertexBuffer$lock() {
        /// <returns type="Array" elementType="TimeSeriesPointVertex"></returns>
        this._verts = new Array(this.count);
        return this._verts;
    },
    
    vertexBuffer: null,
    
    unlock: function wwtlib__timeSeriesPointVertexBuffer$unlock() {
        this.vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
        wwtlib.Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
        var f32array = new Float32Array(this.count * 10);
        var buffer = f32array;
        var index = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this._verts);
        while ($enum1.moveNext()) {
            var pt = $enum1.current;
            buffer[index++] = pt.position.x;
            buffer[index++] = pt.position.y;
            buffer[index++] = pt.position.z;
            buffer[index++] = pt.get_color().r / 255;
            buffer[index++] = pt.get_color().g / 255;
            buffer[index++] = pt.get_color().b / 255;
            buffer[index++] = pt.get_color().a / 255;
            buffer[index++] = pt.tu;
            buffer[index++] = pt.tv;
            buffer[index++] = pt.pointSize;
        }
        wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Dates

wwtlib.Dates = function wwtlib_Dates(start, end) {
    /// <param name="start" type="Number">
    /// </param>
    /// <param name="end" type="Number">
    /// </param>
    /// <field name="startDate" type="Number">
    /// </field>
    /// <field name="endDate" type="Number">
    /// </field>
    this.startDate = start;
    this.endDate = end;
}
wwtlib.Dates.prototype = {
    startDate: 0,
    endDate: 0,
    
    copy: function wwtlib_Dates$copy() {
        /// <returns type="wwtlib.Dates"></returns>
        return new wwtlib.Dates(this.startDate, this.endDate);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.SimpleLineList

wwtlib.SimpleLineList = function wwtlib_SimpleLineList() {
    /// <field name="_zBuffer" type="Boolean">
    /// </field>
    /// <field name="_linePoints" type="Array">
    /// </field>
    /// <field name="_usingLocalCenter" type="Boolean">
    /// </field>
    /// <field name="_localCenter" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="sky" type="Boolean">
    /// </field>
    /// <field name="aaFix" type="Boolean">
    /// </field>
    /// <field name="viewTransform" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_lineBuffers" type="Array">
    /// </field>
    /// <field name="_lineBufferCounts" type="Array">
    /// </field>
    /// <field name="useLocalCenters" type="Boolean">
    /// </field>
    this._linePoints = [];
    this.viewTransform = wwtlib.Matrix3d.get_identity();
    this._lineBuffers = [];
    this._lineBufferCounts = [];
}
wwtlib.SimpleLineList.prototype = {
    _zBuffer: true,
    
    get_depthBuffered: function wwtlib_SimpleLineList$get_depthBuffered() {
        /// <value type="Boolean"></value>
        return this._zBuffer;
    },
    set_depthBuffered: function wwtlib_SimpleLineList$set_depthBuffered(value) {
        /// <value type="Boolean"></value>
        this._zBuffer = value;
        return value;
    },
    
    addLine: function wwtlib_SimpleLineList$addLine(v1, v2) {
        /// <param name="v1" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v2" type="wwtlib.Vector3d">
        /// </param>
        this._linePoints.add(v1);
        this._linePoints.add(v2);
        this._emptyLineBuffer();
    },
    
    clear: function wwtlib_SimpleLineList$clear() {
        this._linePoints.clear();
        this._emptyLineBuffer();
    },
    
    _usingLocalCenter: false,
    _localCenter: null,
    sky: true,
    aaFix: true,
    
    drawLines: function wwtlib_SimpleLineList$drawLines(renderContext, opacity, color) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="color" type="wwtlib.Color">
        /// </param>
        if (this._linePoints.length < 2) {
            return;
        }
        this._initLineBuffer(renderContext);
        var count = this._linePoints.length;
        if (renderContext.gl == null) {
            var viewPoint = wwtlib.Vector3d._transformCoordinate(renderContext.get_viewPoint(), this.viewTransform);
            var ctx = renderContext.device;
            ctx.save();
            ctx.strokeStyle = color.toString();
            ctx.lineWidth = 2;
            ctx.globalAlpha = 0.25;
            var firstPoint = new wwtlib.Vector3d();
            var secondPoint = new wwtlib.Vector3d();
            for (var i = 0; i < count; i += 2) {
                firstPoint = renderContext.WVP.transform(this._linePoints[i]);
                secondPoint = renderContext.WVP.transform(this._linePoints[i + 1]);
                if (wwtlib.Vector3d.dot(this._linePoints[i], viewPoint) > 0.6) {
                    ctx.beginPath();
                    ctx.moveTo(firstPoint.x, firstPoint.y);
                    ctx.lineTo(secondPoint.x, secondPoint.y);
                    ctx.stroke();
                }
            }
            ctx.restore();
        }
        else {
            var $enum1 = ss.IEnumerator.getEnumerator(this._lineBuffers);
            while ($enum1.moveNext()) {
                var lineBuffer = $enum1.current;
                wwtlib.SimpleLineShader.use(renderContext, lineBuffer.vertexBuffer, color);
                renderContext.gl.drawArrays(1, 0, lineBuffer.count);
            }
        }
    },
    
    useLocalCenters: false,
    
    _initLineBuffer: function wwtlib_SimpleLineList$_initLineBuffer(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        if (renderContext.gl != null) {
            if (!this._lineBuffers.length) {
                var count = this._linePoints.length;
                var lineBuffer = null;
                var linePointList = null;
                this._localCenter = new wwtlib.Vector3d();
                if (this.get_depthBuffered()) {
                    var $enum1 = ss.IEnumerator.getEnumerator(this._linePoints);
                    while ($enum1.moveNext()) {
                        var point = $enum1.current;
                        this._localCenter.add(point);
                    }
                    this._localCenter.x /= count;
                    this._localCenter.y /= count;
                    this._localCenter.z /= count;
                }
                var countLeft = count;
                var index = 0;
                var counter = 0;
                var temp;
                var $enum2 = ss.IEnumerator.getEnumerator(this._linePoints);
                while ($enum2.moveNext()) {
                    var point = $enum2.current;
                    if (counter >= 100000 || linePointList == null) {
                        if (lineBuffer != null) {
                            lineBuffer.unlock();
                        }
                        var thisCount = Math.min(100000, countLeft);
                        countLeft -= thisCount;
                        lineBuffer = new wwtlib._positionVertexBuffer(thisCount);
                        linePointList = lineBuffer.lock();
                        this._lineBuffers.add(lineBuffer);
                        this._lineBufferCounts.add(thisCount);
                        counter = 0;
                    }
                    if (this.useLocalCenters) {
                        temp = wwtlib.Vector3d.subtractVectors(point, this._localCenter);
                        linePointList[counter] = temp;
                    }
                    else {
                        linePointList[counter] = point;
                    }
                    index++;
                    counter++;
                }
                if (lineBuffer != null) {
                    lineBuffer.unlock();
                }
            }
        }
    },
    
    _emptyLineBuffer: function wwtlib_SimpleLineList$_emptyLineBuffer() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LineList

wwtlib.LineList = function wwtlib_LineList() {
    /// <field name="_zBuffer" type="Boolean">
    /// </field>
    /// <field name="timeSeries" type="Boolean">
    /// </field>
    /// <field name="showFarSide" type="Boolean">
    /// </field>
    /// <field name="sky" type="Boolean">
    /// </field>
    /// <field name="decay" type="Number">
    /// </field>
    /// <field name="useNonRotatingFrame" type="Boolean">
    /// </field>
    /// <field name="jNow" type="Number">
    /// </field>
    /// <field name="_linePoints" type="Array">
    /// </field>
    /// <field name="_lineColors" type="Array">
    /// </field>
    /// <field name="_lineDates" type="Array">
    /// </field>
    /// <field name="_usingLocalCenter" type="Boolean">
    /// </field>
    /// <field name="_localCenter" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_lineBuffers" type="Array">
    /// </field>
    /// <field name="_lineBufferCounts" type="Array">
    /// </field>
    this._linePoints = [];
    this._lineColors = [];
    this._lineDates = [];
    this._lineBuffers = [];
    this._lineBufferCounts = [];
}
wwtlib.LineList.prototype = {
    _zBuffer: true,
    
    get_depthBuffered: function wwtlib_LineList$get_depthBuffered() {
        /// <value type="Boolean"></value>
        return this._zBuffer;
    },
    set_depthBuffered: function wwtlib_LineList$set_depthBuffered(value) {
        /// <value type="Boolean"></value>
        this._zBuffer = value;
        return value;
    },
    
    timeSeries: false,
    showFarSide: true,
    sky: false,
    decay: 0,
    useNonRotatingFrame: false,
    jNow: 0,
    
    addLine: function wwtlib_LineList$addLine(v1, v2, color, date) {
        /// <param name="v1" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v2" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="color" type="wwtlib.Color">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        this._linePoints.add(v1);
        this._linePoints.add(v2);
        this._lineColors.add(color);
        this._lineDates.add(date);
        this._emptyLineBuffer();
    },
    
    addLineNoDate: function wwtlib_LineList$addLineNoDate(v1, v2, color) {
        /// <param name="v1" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v2" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="color" type="wwtlib.Color">
        /// </param>
        this._linePoints.add(v1);
        this._linePoints.add(v2);
        this._lineColors.add(color);
        this._lineDates.add(new wwtlib.Dates(0, 0));
        this._emptyLineBuffer();
    },
    
    clear: function wwtlib_LineList$clear() {
        this._linePoints.clear();
        this._lineColors.clear();
        this._lineDates.clear();
    },
    
    _usingLocalCenter: true,
    _localCenter: null,
    
    drawLines: function wwtlib_LineList$drawLines(renderContext, opacity) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        if (this._linePoints.length < 2 || opacity <= 0) {
            return;
        }
        if (renderContext.gl == null) {
        }
        else {
            this._initLineBuffer();
            var $enum1 = ss.IEnumerator.getEnumerator(this._lineBuffers);
            while ($enum1.moveNext()) {
                var lineBuffer = $enum1.current;
                wwtlib.LineShaderNormalDates.use(renderContext, lineBuffer.vertexBuffer, wwtlib.Color.fromArgb(255, 255, 255, 255), this._zBuffer, this.jNow, this.decay);
                renderContext.gl.drawArrays(1, 0, lineBuffer.count);
            }
        }
    },
    
    _initLineBuffer: function wwtlib_LineList$_initLineBuffer() {
        if (!this._lineBuffers.length) {
            var count = this._linePoints.length;
            var lineBuffer = null;
            var linePointList = null;
            var countLeft = count;
            var index = 0;
            var counter = 0;
            var temp;
            var $enum1 = ss.IEnumerator.getEnumerator(this._linePoints);
            while ($enum1.moveNext()) {
                var point = $enum1.current;
                if (counter >= 100000 || linePointList == null) {
                    if (lineBuffer != null) {
                        lineBuffer.unlock();
                    }
                    var thisCount = Math.min(100000, countLeft);
                    countLeft -= thisCount;
                    lineBuffer = new wwtlib._timeSeriesLineVertexBuffer(thisCount);
                    linePointList = lineBuffer.lock();
                    this._lineBuffers.add(lineBuffer);
                    this._lineBufferCounts.add(thisCount);
                    counter = 0;
                }
                var div2 = parseInt((index / 2));
                temp = point;
                linePointList[counter] = new wwtlib.TimeSeriesLineVertex();
                linePointList[counter].position = temp;
                linePointList[counter].normal = point;
                linePointList[counter].tu = this._lineDates[div2].startDate;
                linePointList[counter].tv = this._lineDates[div2].endDate;
                linePointList[counter].set_color(this._lineColors[div2]);
                index++;
                counter++;
            }
            if (lineBuffer != null) {
                lineBuffer.unlock();
            }
        }
    },
    
    _emptyLineBuffer: function wwtlib_LineList$_emptyLineBuffer() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TriangleList

wwtlib.TriangleList = function wwtlib_TriangleList() {
    /// <field name="_trianglePoints" type="Array">
    /// </field>
    /// <field name="_triangleColors" type="Array">
    /// </field>
    /// <field name="_triangleDates" type="Array">
    /// </field>
    /// <field name="timeSeries" type="Boolean">
    /// </field>
    /// <field name="showFarSide" type="Boolean">
    /// </field>
    /// <field name="sky" type="Boolean">
    /// </field>
    /// <field name="depthBuffered" type="Boolean">
    /// </field>
    /// <field name="writeZbuffer" type="Boolean">
    /// </field>
    /// <field name="decay" type="Number">
    /// </field>
    /// <field name="autoTime" type="Boolean">
    /// </field>
    /// <field name="jNow" type="Number">
    /// </field>
    /// <field name="_dataToDraw" type="Boolean">
    /// </field>
    /// <field name="_triangleBuffers" type="Array">
    /// </field>
    /// <field name="_triangleBufferCounts" type="Array">
    /// </field>
    this._trianglePoints = [];
    this._triangleColors = [];
    this._triangleDates = [];
    this._triangleBuffers = [];
    this._triangleBufferCounts = [];
}
wwtlib.TriangleList.prototype = {
    timeSeries: false,
    showFarSide: false,
    sky: false,
    depthBuffered: true,
    writeZbuffer: false,
    decay: 0,
    autoTime: true,
    jNow: 0,
    _dataToDraw: false,
    
    addTriangle: function wwtlib_TriangleList$addTriangle(v1, v2, v3, color, date) {
        /// <param name="v1" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v2" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v3" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="color" type="wwtlib.Color">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        this._trianglePoints.add(v1);
        this._trianglePoints.add(v2);
        this._trianglePoints.add(v3);
        this._triangleColors.add(color);
        this._triangleDates.add(date);
        this._emptyTriangleBuffer();
    },
    
    addSubdividedTriangles: function wwtlib_TriangleList$addSubdividedTriangles(v1, v2, v3, color, date, subdivisions) {
        /// <param name="v1" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v2" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v3" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="color" type="wwtlib.Color">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        /// <param name="subdivisions" type="Number" integer="true">
        /// </param>
        subdivisions--;
        if (subdivisions < 0) {
            this.addTriangle(v1, v2, v3, color, date);
        }
        else {
            var v12;
            var v23;
            var v31;
            v12 = wwtlib.Vector3d.midPointByLength(v1, v2);
            v23 = wwtlib.Vector3d.midPointByLength(v2, v3);
            v31 = wwtlib.Vector3d.midPointByLength(v3, v1);
            this.addSubdividedTriangles(v1, v12, v31, color, date, subdivisions);
            this.addSubdividedTriangles(v12, v23, v31, color, date, subdivisions);
            this.addSubdividedTriangles(v12, v2, v23, color, date, subdivisions);
            this.addSubdividedTriangles(v23, v3, v31, color, date, subdivisions);
        }
    },
    
    addQuad: function wwtlib_TriangleList$addQuad(v1, v2, v3, v4, color, date) {
        /// <param name="v1" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v2" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v3" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="v4" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="color" type="wwtlib.Color">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        this._trianglePoints.add(v1);
        this._trianglePoints.add(v3);
        this._trianglePoints.add(v2);
        this._trianglePoints.add(v2);
        this._trianglePoints.add(v3);
        this._trianglePoints.add(v4);
        this._triangleColors.add(color);
        this._triangleDates.add(date);
        this._triangleColors.add(color);
        this._triangleDates.add(date);
        this._emptyTriangleBuffer();
    },
    
    clear: function wwtlib_TriangleList$clear() {
        this._triangleColors.clear();
        this._trianglePoints.clear();
        this._triangleDates.clear();
        this._emptyTriangleBuffer();
    },
    
    _emptyTriangleBuffer: function wwtlib_TriangleList$_emptyTriangleBuffer() {
    },
    
    _initTriangleBuffer: function wwtlib_TriangleList$_initTriangleBuffer() {
        if (!this._triangleBuffers.length) {
            var count = this._trianglePoints.length;
            var triangleBuffer = null;
            var triPointList = null;
            var countLeft = count;
            var index = 0;
            var counter = 0;
            var $enum1 = ss.IEnumerator.getEnumerator(this._trianglePoints);
            while ($enum1.moveNext()) {
                var point = $enum1.current;
                if (counter >= 90000 || triangleBuffer == null) {
                    if (triangleBuffer != null) {
                        triangleBuffer.unlock();
                    }
                    var thisCount = Math.min(90000, countLeft);
                    countLeft -= thisCount;
                    triangleBuffer = new wwtlib._timeSeriesLineVertexBuffer(thisCount);
                    this._triangleBuffers.add(triangleBuffer);
                    this._triangleBufferCounts.add(thisCount);
                    triPointList = triangleBuffer.lock();
                    counter = 0;
                }
                triPointList[counter] = new wwtlib.TimeSeriesLineVertex();
                triPointList[counter].position = point;
                triPointList[counter].normal = point;
                var div3 = parseInt((index / 3));
                triPointList[counter].set_color(this._triangleColors[div3]);
                triPointList[counter].tu = this._triangleDates[div3].startDate;
                triPointList[counter].tv = this._triangleDates[div3].endDate;
                index++;
                counter++;
            }
            if (triangleBuffer != null) {
                triangleBuffer.unlock();
            }
            this._triangleColors.clear();
            this._triangleDates.clear();
            this._trianglePoints.clear();
            this._dataToDraw = true;
        }
    },
    
    draw: function wwtlib_TriangleList$draw(renderContext, opacity, cull) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="cull" type="wwtlib.CullMode">
        /// </param>
        if (this._trianglePoints.length < 1 && !this._dataToDraw) {
            return;
        }
        if (renderContext.gl == null) {
        }
        else {
            this._initTriangleBuffer();
            var $enum1 = ss.IEnumerator.getEnumerator(this._triangleBuffers);
            while ($enum1.moveNext()) {
                var triBuffer = $enum1.current;
                wwtlib.LineShaderNormalDates.use(renderContext, triBuffer.vertexBuffer, wwtlib.Color.fromArgb(255, 255, 255, 255), this.depthBuffered, this.jNow, this.decay);
                renderContext.gl.drawArrays(4, 0, triBuffer.count);
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PointList

wwtlib.PointList = function wwtlib_PointList(device) {
    /// <param name="device" type="wwtlib.RenderContext">
    /// </param>
    /// <field name="_device" type="wwtlib.RenderContext">
    /// </field>
    /// <field name="_points" type="Array">
    /// </field>
    /// <field name="_colors" type="Array">
    /// </field>
    /// <field name="_dates" type="Array">
    /// </field>
    /// <field name="_sizes" type="Array">
    /// </field>
    /// <field name="timeSeries" type="Boolean">
    /// </field>
    /// <field name="showFarSide" type="Boolean">
    /// </field>
    /// <field name="sky" type="Boolean">
    /// </field>
    /// <field name="depthBuffered" type="Boolean">
    /// </field>
    /// <field name="decay" type="Number">
    /// </field>
    /// <field name="autoTime" type="Boolean">
    /// </field>
    /// <field name="jNow" type="Number">
    /// </field>
    /// <field name="_dataToDraw" type="Boolean">
    /// </field>
    /// <field name="_transformedList" type="Array" elementType="Vector3d">
    /// </field>
    /// <field name="_worldList" type="Array" elementType="Vector3d">
    /// </field>
    /// <field name="items" type="Array">
    /// </field>
    /// <field name="_starProfile" type="Object" domElement="true">
    /// </field>
    /// <field name="_starTexture" type="wwtlib.Texture">
    /// </field>
    /// <field name="_imageReady" type="Boolean">
    /// </field>
    /// <field name="_init" type="Boolean">
    /// </field>
    /// <field name="_pointBuffers" type="Array">
    /// </field>
    /// <field name="_pointBufferCounts" type="Array">
    /// </field>
    this._points = [];
    this._colors = [];
    this._dates = [];
    this._sizes = [];
    this.items = [];
    this._pointBuffers = [];
    this._pointBufferCounts = [];
    this._device = device;
}
wwtlib.PointList.prototype = {
    _device: null,
    timeSeries: false,
    showFarSide: false,
    sky: false,
    depthBuffered: true,
    decay: 0,
    autoTime: true,
    jNow: 0,
    _dataToDraw: false,
    
    addPoint: function wwtlib_PointList$addPoint(v1, color, date, size) {
        /// <param name="v1" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="color" type="wwtlib.Color">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        /// <param name="size" type="Number">
        /// </param>
        this._points.add(v1);
        this._colors.add(color._clone());
        this._dates.add(date);
        this._sizes.add(size);
        this._emptyPointBuffer();
    },
    
    clear: function wwtlib_PointList$clear() {
        this._colors.clear();
        this._points.clear();
        this._dates.clear();
        this._emptyPointBuffer();
    },
    
    _transformedList: null,
    _worldList: null,
    
    _emptyPointBuffer: function wwtlib_PointList$_emptyPointBuffer() {
        this._init = false;
    },
    
    _starProfile: null,
    _starTexture: null,
    _imageReady: false,
    _init: false,
    
    _initBuffer: function wwtlib_PointList$_initBuffer(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        if (!this._init) {
            if (renderContext.gl == null) {
                this._starProfile = document.createElement('img');
                this._starProfile.addEventListener('load', ss.Delegate.create(this, function(e) {
                    this._imageReady = true;
                }), false);
                this._starProfile.src = '/images/starProfile.png';
                this._worldList = new Array(this._points.length);
                this._transformedList = new Array(this._points.length);
                var index = 0;
                var $enum1 = ss.IEnumerator.getEnumerator(this._points);
                while ($enum1.moveNext()) {
                    var pnt = $enum1.current;
                    var item = new wwtlib.DataItem();
                    item.location = pnt;
                    item.tranformed = new wwtlib.Vector3d();
                    item.size = this._sizes[index];
                    item.color = this._colors[index];
                    this._worldList[index] = item.location;
                    this._transformedList[index] = item.tranformed;
                    this.items.add(item);
                    index++;
                }
            }
            else {
                if (!this._pointBuffers.length) {
                    if (this._starTexture == null) {
                        this._starTexture = wwtlib.Planets.loadPlanetTexture('/images/starProfile.png');
                    }
                    var count = this._points.length;
                    var pointBuffer = null;
                    var pointList = null;
                    var countLeft = count;
                    var index = 0;
                    var counter = 0;
                    var $enum2 = ss.IEnumerator.getEnumerator(this._points);
                    while ($enum2.moveNext()) {
                        var point = $enum2.current;
                        if (counter >= 100000 || pointList == null) {
                            if (pointBuffer != null) {
                                pointBuffer.unlock();
                            }
                            var thisCount = Math.min(100000, countLeft);
                            countLeft -= thisCount;
                            pointBuffer = new wwtlib._timeSeriesPointVertexBuffer(thisCount);
                            pointList = pointBuffer.lock();
                            this._pointBuffers.add(pointBuffer);
                            this._pointBufferCounts.add(thisCount);
                            counter = 0;
                        }
                        pointList[counter] = new wwtlib.TimeSeriesPointVertex();
                        pointList[counter].position = point;
                        pointList[counter].pointSize = this._sizes[index];
                        pointList[counter].tu = this._dates[index].startDate;
                        pointList[counter].tv = this._dates[index].endDate;
                        pointList[counter].set_color(this._colors[index]);
                        index++;
                        counter++;
                    }
                    if (pointBuffer != null) {
                        pointBuffer.unlock();
                    }
                }
            }
            this._init = true;
        }
    },
    
    draw: function wwtlib_PointList$draw(renderContext, opacity, cull) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="cull" type="Boolean">
        /// </param>
        this._initBuffer(renderContext);
        if (renderContext.gl == null) {
            if (!this._imageReady) {
                return;
            }
            renderContext.device.save();
            renderContext.WVP.projectArrayToScreen(this._worldList, this._transformedList);
            var ctx = renderContext.device;
            ctx.globalAlpha = 0.4;
            var width = renderContext.width;
            var height = renderContext.height;
            var viewPoint = wwtlib.Vector3d.makeCopy(renderContext.get_viewPoint());
            var scaleFactor = renderContext.get_fovScale() / 100;
            var $enum1 = ss.IEnumerator.getEnumerator(this.items);
            while ($enum1.moveNext()) {
                var item = $enum1.current;
                if (item.tranformed.z < 1) {
                    var x = item.tranformed.x;
                    var y = item.tranformed.y;
                    var size = 0.1 * item.size / scaleFactor;
                    var half = size / 2;
                    if (x > -half && x < width + half && y > -half && y < height + half) {
                        ctx.beginPath();
                        ctx.fillStyle = item.color.toFormat();
                        ctx.arc(x, y, size, 0, Math.PI * 2, true);
                        ctx.fill();
                    }
                }
            }
            renderContext.device.restore();
        }
        else {
            var $enum2 = ss.IEnumerator.getEnumerator(this._pointBuffers);
            while ($enum2.moveNext()) {
                var pointBuffer = $enum2.current;
                wwtlib.TimeSeriesPointSpriteShader.use(renderContext, pointBuffer.vertexBuffer, this._starTexture.texture2d, wwtlib.Color.fromArgb(255, 255, 255, 255), this.depthBuffered, this.jNow, this.decay);
                renderContext.gl.drawArrays(0, 0, pointBuffer.count);
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TimeSeriesLineVertex

wwtlib.TimeSeriesLineVertex = function wwtlib_TimeSeriesLineVertex() {
    /// <field name="position" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="normal" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="color" type="wwtlib.Color">
    /// </field>
    /// <field name="tu" type="Number">
    /// </field>
    /// <field name="tv" type="Number">
    /// </field>
    this.position = new wwtlib.Vector3d();
    this.normal = new wwtlib.Vector3d();
}
wwtlib.TimeSeriesLineVertex.create = function wwtlib_TimeSeriesLineVertex$create(position, normal, time, color) {
    /// <param name="position" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="normal" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="time" type="Number">
    /// </param>
    /// <param name="color" type="wwtlib.Color">
    /// </param>
    /// <returns type="wwtlib.TimeSeriesLineVertex"></returns>
    var temp = new wwtlib.TimeSeriesLineVertex();
    temp.position = position;
    temp.normal = normal;
    temp.tu = time;
    temp.tv = 0;
    temp.color = color;
    return temp;
}
wwtlib.TimeSeriesLineVertex.prototype = {
    color: null,
    
    get_color: function wwtlib_TimeSeriesLineVertex$get_color() {
        /// <value type="wwtlib.Color"></value>
        return this.color;
    },
    set_color: function wwtlib_TimeSeriesLineVertex$set_color(value) {
        /// <value type="wwtlib.Color"></value>
        this.color = value;
        return value;
    },
    
    tu: 0,
    tv: 0
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TimeSeriesPointVertex

wwtlib.TimeSeriesPointVertex = function wwtlib_TimeSeriesPointVertex() {
    /// <field name="position" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="pointSize" type="Number">
    /// </field>
    /// <field name="color" type="wwtlib.Color">
    /// </field>
    /// <field name="tu" type="Number">
    /// </field>
    /// <field name="tv" type="Number">
    /// </field>
}
wwtlib.TimeSeriesPointVertex.create = function wwtlib_TimeSeriesPointVertex$create(position, size, time, color) {
    /// <param name="position" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="size" type="Number">
    /// </param>
    /// <param name="time" type="Number">
    /// </param>
    /// <param name="color" type="wwtlib.Color">
    /// </param>
    /// <returns type="wwtlib.TimeSeriesPointVertex"></returns>
    var tmp = new wwtlib.TimeSeriesPointVertex();
    tmp.position = position;
    tmp.pointSize = size;
    tmp.tu = time;
    tmp.tv = 0;
    tmp.color = color;
    return tmp;
}
wwtlib.TimeSeriesPointVertex.prototype = {
    position: null,
    pointSize: 0,
    color: null,
    
    get_color: function wwtlib_TimeSeriesPointVertex$get_color() {
        /// <value type="wwtlib.Color"></value>
        return this.color;
    },
    set_color: function wwtlib_TimeSeriesPointVertex$set_color(value) {
        /// <value type="wwtlib.Color"></value>
        this.color = value;
        return value;
    },
    
    tu: 0,
    tv: 0
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.SimpleLineShader

wwtlib.SimpleLineShader = function wwtlib_SimpleLineShader() {
    /// <field name="_frag" type="WebGLShader" static="true">
    /// </field>
    /// <field name="_vert" type="WebGLShader" static="true">
    /// </field>
    /// <field name="vertLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="lineColorLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="projMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="mvMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="initialized" type="Boolean" static="true">
    /// </field>
    /// <field name="_prog" type="WebGLProgram" static="true">
    /// </field>
}
wwtlib.SimpleLineShader.init = function wwtlib_SimpleLineShader$init(renderContext) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    var gl = renderContext.gl;
    var fragShaderText = ' precision highp float;                                                              \n' + ' uniform vec4 lineColor;                                                               \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '   gl_FragColor = lineColor;         \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '     }                                                                            \n' + '                                                                                  \n';
    wwtlib.SimpleLineShader._frag = gl.createShader(35632);
    gl.shaderSource(wwtlib.SimpleLineShader._frag, fragShaderText);
    gl.compileShader(wwtlib.SimpleLineShader._frag);
    var stat = gl.getShaderParameter(wwtlib.SimpleLineShader._frag, 35713);
    wwtlib.SimpleLineShader._vert = gl.createShader(35633);
    gl.shaderSource(wwtlib.SimpleLineShader._vert, vertexShaderText);
    gl.compileShader(wwtlib.SimpleLineShader._vert);
    var stat1 = gl.getShaderParameter(wwtlib.SimpleLineShader._vert, 35713);
    wwtlib.SimpleLineShader._prog = gl.createProgram();
    gl.attachShader(wwtlib.SimpleLineShader._prog, wwtlib.SimpleLineShader._vert);
    gl.attachShader(wwtlib.SimpleLineShader._prog, wwtlib.SimpleLineShader._frag);
    gl.linkProgram(wwtlib.SimpleLineShader._prog);
    var errcode = gl.getProgramParameter(wwtlib.SimpleLineShader._prog, 35714);
    gl.useProgram(wwtlib.SimpleLineShader._prog);
    wwtlib.SimpleLineShader.vertLoc = gl.getAttribLocation(wwtlib.SimpleLineShader._prog, 'aVertexPosition');
    wwtlib.SimpleLineShader.lineColorLoc = gl.getUniformLocation(wwtlib.SimpleLineShader._prog, 'lineColor');
    wwtlib.SimpleLineShader.projMatLoc = gl.getUniformLocation(wwtlib.SimpleLineShader._prog, 'uPMatrix');
    wwtlib.SimpleLineShader.mvMatLoc = gl.getUniformLocation(wwtlib.SimpleLineShader._prog, 'uMVMatrix');
    gl.enable(3042);
    gl.blendFunc(770, 771);
    wwtlib.SimpleLineShader.initialized = true;
}
wwtlib.SimpleLineShader.use = function wwtlib_SimpleLineShader$use(renderContext, vertex, lineColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="vertex" type="WebGLBuffer">
    /// </param>
    /// <param name="lineColor" type="wwtlib.Color">
    /// </param>
    var gl = renderContext.gl;
    if (gl != null) {
        if (!wwtlib.SimpleLineShader.initialized) {
            wwtlib.SimpleLineShader.init(renderContext);
        }
        gl.useProgram(wwtlib.SimpleLineShader._prog);
        var mvMat = wwtlib.Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
        gl.uniformMatrix4fv(wwtlib.SimpleLineShader.mvMatLoc, false, mvMat.floatArray());
        gl.uniformMatrix4fv(wwtlib.SimpleLineShader.projMatLoc, false, renderContext.get_projection().floatArray());
        gl.uniform4f(wwtlib.SimpleLineShader.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, 1);
        if (renderContext.space) {
            gl.disable(2929);
        }
        else {
            gl.enable(2929);
        }
        gl.disableVertexAttribArray(0);
        gl.disableVertexAttribArray(1);
        gl.disableVertexAttribArray(2);
        gl.disableVertexAttribArray(3);
        gl.enableVertexAttribArray(wwtlib.SimpleLineShader.vertLoc);
        gl.bindBuffer(34962, vertex);
        gl.bindBuffer(34963, null);
        gl.vertexAttribPointer(wwtlib.SimpleLineShader.vertLoc, 3, 5126, false, 0, 0);
        gl.lineWidth(1);
        gl.blendFunc(770, 771);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LineShaderNormalDates

wwtlib.LineShaderNormalDates = function wwtlib_LineShaderNormalDates() {
    /// <field name="_frag" type="WebGLShader" static="true">
    /// </field>
    /// <field name="_vert" type="WebGLShader" static="true">
    /// </field>
    /// <field name="vertLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="colorLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="timeLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="lineColorLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="projMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="mvMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="jNowLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="decayLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="initialized" type="Boolean" static="true">
    /// </field>
    /// <field name="_prog" type="WebGLProgram" static="true">
    /// </field>
}
wwtlib.LineShaderNormalDates.init = function wwtlib_LineShaderNormalDates$init(renderContext) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    var gl = renderContext.gl;
    var fragShaderText = '    precision highp float;                                                              \n' + '    uniform vec4 lineColor;                                                             \n' + '    varying lowp vec4 vColor;                                                           \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        gl_FragColor = lineColor * vColor;                                              \n' + '    }                                                                                   \n';
    var vertexShaderText = '    attribute vec3 aVertexPosition;                                                     \n' + '    attribute vec4 aVertexColor;                                                        \n' + '    attribute vec2 aTime;                                                               \n' + '    uniform mat4 uMVMatrix;                                                             \n' + '    uniform mat4 uPMatrix;                                                              \n' + '    uniform float jNow;                                                                 \n' + '    uniform float decay;                                                                \n' + '                                                                                        \n' + '    varying lowp vec4 vColor;                                                           \n' + '                                                                                        \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);                \n' + '        float dAlpha = 1.0;                                                             \n' + '        if ( decay > 0.0)                                                               \n' + '        {                                                                               \n' + '             dAlpha = 1.0 - ((jNow - aTime.y) / decay);                                 \n ' + '             if (dAlpha > 1.0 )                                                         \n' + '             {                                                                          \n' + '                  dAlpha = 1.0;                                                         \n' + '             }                                                                          \n' + '        }                                                                               \n' + '     if (jNow < aTime.x && decay > 0.0)                                                 \n' + '     {                                                                                  \n' + '         vColor = vec4(0.0, 0.0, 0.0, 0.0);                                             \n' + '     }                                                                                  \n' + '     else                                                                               \n' + '     {                                                                                  \n' + '        vColor = vec4(aVertexColor.r, aVertexColor.g, aVertexColor.b, dAlpha);          \n' + '     }                                                                                  \n' + '    }                                                                                   \n' + '                                                                                        \n';
    wwtlib.LineShaderNormalDates._frag = gl.createShader(35632);
    gl.shaderSource(wwtlib.LineShaderNormalDates._frag, fragShaderText);
    gl.compileShader(wwtlib.LineShaderNormalDates._frag);
    var stat = gl.getShaderParameter(wwtlib.LineShaderNormalDates._frag, 35713);
    wwtlib.LineShaderNormalDates._vert = gl.createShader(35633);
    gl.shaderSource(wwtlib.LineShaderNormalDates._vert, vertexShaderText);
    gl.compileShader(wwtlib.LineShaderNormalDates._vert);
    var stat1 = gl.getShaderParameter(wwtlib.LineShaderNormalDates._vert, 35713);
    wwtlib.LineShaderNormalDates._prog = gl.createProgram();
    gl.attachShader(wwtlib.LineShaderNormalDates._prog, wwtlib.LineShaderNormalDates._vert);
    gl.attachShader(wwtlib.LineShaderNormalDates._prog, wwtlib.LineShaderNormalDates._frag);
    gl.linkProgram(wwtlib.LineShaderNormalDates._prog);
    var errcode = gl.getProgramParameter(wwtlib.LineShaderNormalDates._prog, 35714);
    gl.useProgram(wwtlib.LineShaderNormalDates._prog);
    wwtlib.LineShaderNormalDates.vertLoc = gl.getAttribLocation(wwtlib.LineShaderNormalDates._prog, 'aVertexPosition');
    wwtlib.LineShaderNormalDates.colorLoc = gl.getAttribLocation(wwtlib.LineShaderNormalDates._prog, 'aVertexColor');
    wwtlib.LineShaderNormalDates.timeLoc = gl.getAttribLocation(wwtlib.LineShaderNormalDates._prog, 'aVertexColor');
    wwtlib.LineShaderNormalDates.lineColorLoc = gl.getUniformLocation(wwtlib.LineShaderNormalDates._prog, 'lineColor');
    wwtlib.LineShaderNormalDates.projMatLoc = gl.getUniformLocation(wwtlib.LineShaderNormalDates._prog, 'uPMatrix');
    wwtlib.LineShaderNormalDates.mvMatLoc = gl.getUniformLocation(wwtlib.LineShaderNormalDates._prog, 'uMVMatrix');
    wwtlib.LineShaderNormalDates.jNowLoc = gl.getUniformLocation(wwtlib.LineShaderNormalDates._prog, 'jNow');
    wwtlib.LineShaderNormalDates.decayLoc = gl.getUniformLocation(wwtlib.LineShaderNormalDates._prog, 'decay');
    gl.enable(3042);
    gl.blendFunc(770, 771);
    wwtlib.LineShaderNormalDates.initialized = true;
}
wwtlib.LineShaderNormalDates.use = function wwtlib_LineShaderNormalDates$use(renderContext, vertex, lineColor, zBuffer, jNow, decay) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="vertex" type="WebGLBuffer">
    /// </param>
    /// <param name="lineColor" type="wwtlib.Color">
    /// </param>
    /// <param name="zBuffer" type="Boolean">
    /// </param>
    /// <param name="jNow" type="Number">
    /// </param>
    /// <param name="decay" type="Number">
    /// </param>
    var gl = renderContext.gl;
    if (gl != null) {
        if (!wwtlib.LineShaderNormalDates.initialized) {
            wwtlib.LineShaderNormalDates.init(renderContext);
        }
        gl.useProgram(wwtlib.LineShaderNormalDates._prog);
        var mvMat = wwtlib.Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
        gl.uniformMatrix4fv(wwtlib.LineShaderNormalDates.mvMatLoc, false, mvMat.floatArray());
        gl.uniformMatrix4fv(wwtlib.LineShaderNormalDates.projMatLoc, false, renderContext.get_projection().floatArray());
        gl.uniform4f(wwtlib.LineShaderNormalDates.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, 1);
        gl.uniform1f(wwtlib.LineShaderNormalDates.jNowLoc, jNow);
        gl.uniform1f(wwtlib.LineShaderNormalDates.decayLoc, decay);
        if (zBuffer) {
            gl.enable(2929);
        }
        else {
            gl.disable(2929);
        }
        gl.disableVertexAttribArray(0);
        gl.disableVertexAttribArray(1);
        gl.disableVertexAttribArray(2);
        gl.disableVertexAttribArray(3);
        gl.enableVertexAttribArray(wwtlib.LineShaderNormalDates.vertLoc);
        gl.enableVertexAttribArray(wwtlib.LineShaderNormalDates.colorLoc);
        gl.bindBuffer(34962, vertex);
        gl.bindBuffer(34963, null);
        gl.vertexAttribPointer(wwtlib.LineShaderNormalDates.vertLoc, 3, 5126, false, 36, 0);
        gl.vertexAttribPointer(wwtlib.LineShaderNormalDates.colorLoc, 4, 5126, false, 36, 12);
        gl.vertexAttribPointer(wwtlib.LineShaderNormalDates.colorLoc, 2, 5126, false, 36, 28);
        gl.lineWidth(1);
        gl.blendFunc(770, 771);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TimeSeriesPointSpriteShader

wwtlib.TimeSeriesPointSpriteShader = function wwtlib_TimeSeriesPointSpriteShader() {
    /// <field name="_frag" type="WebGLShader" static="true">
    /// </field>
    /// <field name="_vert" type="WebGLShader" static="true">
    /// </field>
    /// <field name="vertLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="colorLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="pointSizeLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="timeLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="projMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="mvMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="sampLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="jNowLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="decayLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="lineColorLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="initialized" type="Boolean" static="true">
    /// </field>
    /// <field name="_prog" type="WebGLProgram" static="true">
    /// </field>
}
wwtlib.TimeSeriesPointSpriteShader.init = function wwtlib_TimeSeriesPointSpriteShader$init(renderContext) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    var gl = renderContext.gl;
    var fragShaderText = '    precision mediump float;                                                            \n' + '    uniform vec4 lineColor;                                                             \n' + '    varying lowp vec4 vColor;                                                           \n' + '    uniform sampler2D uSampler;                                                         \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        vec4 texColor;                                                                  \n' + '        texColor = texture2D(uSampler, gl_PointCoord);                                  \n' + '                                                                                        \n' + '                                                                                        \n' + '        gl_FragColor = lineColor * vColor * texColor;                                   \n' + '    }                                                                                   \n';
    var vertexShaderText = '    attribute vec3 aVertexPosition;                                                     \n' + '    attribute vec4 aVertexColor;                                                        \n' + '    attribute vec2 aTime;                                                               \n' + '    attribute float aPointSize;                                                         \n' + '    uniform mat4 uMVMatrix;                                                             \n' + '    uniform mat4 uPMatrix;                                                              \n' + '    uniform float jNow;                                                                 \n' + '    uniform float decay;                                                                \n' + '                                                                                        \n' + '    varying lowp vec4 vColor;                                                           \n' + '                                                                                        \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);                \n' + '        float dAlpha = 1.0;                                                             \n' + '        if ( decay > 0.0)                                                               \n' + '        {                                                                               \n' + '             dAlpha = 1.0 - ((jNow - aTime.y) / decay);                                 \n ' + '             if (dAlpha > 1.0 )                                                         \n' + '             {                                                                          \n' + '                  dAlpha = 1.0;                                                         \n' + '             }                                                                          \n' + '        }                                                                               \n' + '     if (jNow < aTime.x && decay > 0.0)                                                 \n' + '     {                                                                                  \n' + '         vColor = vec4(0.0, 0.0, 0.0, 0.0);                                             \n' + '     }                                                                                  \n' + '     else                                                                               \n' + '     {                                                                                  \n' + '        vColor = vec4(aVertexColor.r, aVertexColor.g, aVertexColor.b, dAlpha);          \n' + '     }                                                                                  \n' + '        gl_PointSize = aPointSize/0.1;                                                  \n' + '    }                                                                                   \n' + '                                                                                        \n';
    wwtlib.TimeSeriesPointSpriteShader._frag = gl.createShader(35632);
    gl.shaderSource(wwtlib.TimeSeriesPointSpriteShader._frag, fragShaderText);
    gl.compileShader(wwtlib.TimeSeriesPointSpriteShader._frag);
    var stat = gl.getShaderParameter(wwtlib.TimeSeriesPointSpriteShader._frag, 35713);
    wwtlib.TimeSeriesPointSpriteShader._vert = gl.createShader(35633);
    gl.shaderSource(wwtlib.TimeSeriesPointSpriteShader._vert, vertexShaderText);
    gl.compileShader(wwtlib.TimeSeriesPointSpriteShader._vert);
    var stat1 = gl.getShaderParameter(wwtlib.TimeSeriesPointSpriteShader._vert, 35713);
    var compilationLog = gl.getShaderInfoLog(wwtlib.TimeSeriesPointSpriteShader._vert);
    wwtlib.TimeSeriesPointSpriteShader._prog = gl.createProgram();
    gl.attachShader(wwtlib.TimeSeriesPointSpriteShader._prog, wwtlib.TimeSeriesPointSpriteShader._vert);
    gl.attachShader(wwtlib.TimeSeriesPointSpriteShader._prog, wwtlib.TimeSeriesPointSpriteShader._frag);
    gl.linkProgram(wwtlib.TimeSeriesPointSpriteShader._prog);
    var errcode = gl.getProgramParameter(wwtlib.TimeSeriesPointSpriteShader._prog, 35714);
    gl.useProgram(wwtlib.TimeSeriesPointSpriteShader._prog);
    wwtlib.TimeSeriesPointSpriteShader.vertLoc = gl.getAttribLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'aVertexPosition');
    wwtlib.TimeSeriesPointSpriteShader.colorLoc = gl.getAttribLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'aVertexColor');
    wwtlib.TimeSeriesPointSpriteShader.pointSizeLoc = gl.getAttribLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'aPointSize');
    wwtlib.TimeSeriesPointSpriteShader.timeLoc = gl.getAttribLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'aTime');
    wwtlib.TimeSeriesPointSpriteShader.projMatLoc = gl.getUniformLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'uPMatrix');
    wwtlib.TimeSeriesPointSpriteShader.mvMatLoc = gl.getUniformLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'uMVMatrix');
    wwtlib.TimeSeriesPointSpriteShader.sampLoc = gl.getUniformLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'uSampler');
    wwtlib.TimeSeriesPointSpriteShader.jNowLoc = gl.getUniformLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'jNow');
    wwtlib.TimeSeriesPointSpriteShader.decayLoc = gl.getUniformLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'decay');
    wwtlib.TimeSeriesPointSpriteShader.lineColorLoc = gl.getUniformLocation(wwtlib.TimeSeriesPointSpriteShader._prog, 'lineColor');
    gl.enable(3042);
    wwtlib.TimeSeriesPointSpriteShader.initialized = true;
}
wwtlib.TimeSeriesPointSpriteShader.use = function wwtlib_TimeSeriesPointSpriteShader$use(renderContext, vertex, texture, lineColor, zBuffer, jNow, decay) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="vertex" type="WebGLBuffer">
    /// </param>
    /// <param name="texture" type="WebGLTexture">
    /// </param>
    /// <param name="lineColor" type="wwtlib.Color">
    /// </param>
    /// <param name="zBuffer" type="Boolean">
    /// </param>
    /// <param name="jNow" type="Number">
    /// </param>
    /// <param name="decay" type="Number">
    /// </param>
    var gl = renderContext.gl;
    if (gl != null) {
        if (!wwtlib.TimeSeriesPointSpriteShader.initialized) {
            wwtlib.TimeSeriesPointSpriteShader.init(renderContext);
        }
        gl.useProgram(wwtlib.TimeSeriesPointSpriteShader._prog);
        var mvMat = wwtlib.Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
        gl.uniformMatrix4fv(wwtlib.TimeSeriesPointSpriteShader.mvMatLoc, false, mvMat.floatArray());
        gl.uniformMatrix4fv(wwtlib.TimeSeriesPointSpriteShader.projMatLoc, false, renderContext.get_projection().floatArray());
        gl.uniform1i(wwtlib.TimeSeriesPointSpriteShader.sampLoc, 0);
        gl.uniform1f(wwtlib.TimeSeriesPointSpriteShader.jNowLoc, jNow);
        gl.uniform1f(wwtlib.TimeSeriesPointSpriteShader.decayLoc, decay);
        gl.uniform4f(wwtlib.TimeSeriesPointSpriteShader.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, 1);
        if (zBuffer) {
            gl.enable(2929);
        }
        else {
            gl.disable(2929);
        }
        gl.disableVertexAttribArray(0);
        gl.disableVertexAttribArray(1);
        gl.disableVertexAttribArray(2);
        gl.disableVertexAttribArray(3);
        gl.enableVertexAttribArray(wwtlib.TimeSeriesPointSpriteShader.vertLoc);
        gl.enableVertexAttribArray(wwtlib.TimeSeriesPointSpriteShader.colorLoc);
        gl.enableVertexAttribArray(wwtlib.TimeSeriesPointSpriteShader.pointSizeLoc);
        gl.enableVertexAttribArray(wwtlib.TimeSeriesPointSpriteShader.timeLoc);
        gl.bindBuffer(34962, vertex);
        gl.bindBuffer(34963, null);
        gl.vertexAttribPointer(wwtlib.TimeSeriesPointSpriteShader.vertLoc, 3, 5126, false, 40, 0);
        gl.vertexAttribPointer(wwtlib.TimeSeriesPointSpriteShader.colorLoc, 4, 5126, false, 40, 12);
        gl.vertexAttribPointer(wwtlib.TimeSeriesPointSpriteShader.pointSizeLoc, 1, 5126, false, 40, 36);
        gl.vertexAttribPointer(wwtlib.TimeSeriesPointSpriteShader.timeLoc, 2, 5126, false, 40, 28);
        gl.activeTexture(33984);
        gl.bindTexture(3553, texture);
        gl.lineWidth(1);
        gl.blendFunc(770, 1);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TileShader

wwtlib.TileShader = function wwtlib_TileShader() {
    /// <field name="_frag" type="WebGLShader" static="true">
    /// </field>
    /// <field name="_vert" type="WebGLShader" static="true">
    /// </field>
    /// <field name="vertLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="textureLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="projMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="mvMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="sampLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="initialized" type="Boolean" static="true">
    /// </field>
    /// <field name="_prog" type="WebGLProgram" static="true">
    /// </field>
}
wwtlib.TileShader.init = function wwtlib_TileShader$init(renderContext) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                              \n' + '                                                                                       \n' + '   varying vec2 vTextureCoord;                                                         \n' + '                                                                                       \n' + '   uniform sampler2D uSampler;                                                         \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));         \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec2 aTextureCoord;                                                \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '     }                                                                            \n' + '                                                                                  \n';
    wwtlib.TileShader._frag = gl.createShader(35632);
    gl.shaderSource(wwtlib.TileShader._frag, fragShaderText);
    gl.compileShader(wwtlib.TileShader._frag);
    var stat = gl.getShaderParameter(wwtlib.TileShader._frag, 35713);
    wwtlib.TileShader._vert = gl.createShader(35633);
    gl.shaderSource(wwtlib.TileShader._vert, vertexShaderText);
    gl.compileShader(wwtlib.TileShader._vert);
    var stat1 = gl.getShaderParameter(wwtlib.TileShader._vert, 35713);
    wwtlib.TileShader._prog = gl.createProgram();
    gl.attachShader(wwtlib.TileShader._prog, wwtlib.TileShader._vert);
    gl.attachShader(wwtlib.TileShader._prog, wwtlib.TileShader._frag);
    gl.linkProgram(wwtlib.TileShader._prog);
    var errcode = gl.getProgramParameter(wwtlib.TileShader._prog, 35714);
    gl.useProgram(wwtlib.TileShader._prog);
    wwtlib.TileShader.vertLoc = gl.getAttribLocation(wwtlib.TileShader._prog, 'aVertexPosition');
    wwtlib.TileShader.textureLoc = gl.getAttribLocation(wwtlib.TileShader._prog, 'aTextureCoord');
    wwtlib.TileShader.projMatLoc = gl.getUniformLocation(wwtlib.TileShader._prog, 'uPMatrix');
    wwtlib.TileShader.mvMatLoc = gl.getUniformLocation(wwtlib.TileShader._prog, 'uMVMatrix');
    wwtlib.TileShader.sampLoc = gl.getUniformLocation(wwtlib.TileShader._prog, 'uSampler');
    wwtlib.Tile.uvMultiple = 1;
    wwtlib.Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    wwtlib.TileShader.initialized = true;
}
wwtlib.TileShader.use = function wwtlib_TileShader$use(renderContext, vertex, index, texture) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="vertex" type="WebGLBuffer">
    /// </param>
    /// <param name="index" type="WebGLBuffer">
    /// </param>
    /// <param name="texture" type="WebGLTexture">
    /// </param>
    var gl = renderContext.gl;
    if (gl != null) {
        if (!wwtlib.TileShader.initialized) {
            wwtlib.TileShader.init(renderContext);
        }
        gl.useProgram(wwtlib.TileShader._prog);
        var mvMat = wwtlib.Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
        gl.uniformMatrix4fv(wwtlib.TileShader.mvMatLoc, false, mvMat.floatArray());
        gl.uniformMatrix4fv(wwtlib.TileShader.projMatLoc, false, renderContext.get_projection().floatArray());
        gl.uniform1i(wwtlib.TileShader.sampLoc, 0);
        if (renderContext.space) {
            gl.disable(2929);
        }
        else {
            gl.enable(2929);
        }
        gl.enableVertexAttribArray(wwtlib.TileShader.vertLoc);
        gl.enableVertexAttribArray(wwtlib.TileShader.textureLoc);
        gl.bindBuffer(34962, vertex);
        gl.vertexAttribPointer(wwtlib.TileShader.vertLoc, 3, 5126, false, 20, 0);
        gl.vertexAttribPointer(wwtlib.TileShader.textureLoc, 2, 5126, false, 20, 12);
        gl.activeTexture(33984);
        gl.bindTexture(3553, texture);
        gl.bindBuffer(34963, index);
        gl.blendFunc(770, 771);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TextShader

wwtlib.TextShader = function wwtlib_TextShader() {
    /// <field name="_frag" type="WebGLShader" static="true">
    /// </field>
    /// <field name="_vert" type="WebGLShader" static="true">
    /// </field>
    /// <field name="vertLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="textureLoc" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="projMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="mvMatLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="sampLoc" type="WebGLUniformLocation" static="true">
    /// </field>
    /// <field name="initialized" type="Boolean" static="true">
    /// </field>
    /// <field name="_prog" type="WebGLProgram" static="true">
    /// </field>
}
wwtlib.TextShader.init = function wwtlib_TextShader$init(renderContext) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                              \n' + '                                                                                       \n' + '   varying vec2 vTextureCoord;                                                         \n' + '                                                                                       \n' + '   uniform sampler2D uSampler;                                                         \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));         \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec2 aTextureCoord;                                                \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '     }                                                                            \n' + '                                                                                  \n';
    wwtlib.TextShader._frag = gl.createShader(35632);
    gl.shaderSource(wwtlib.TextShader._frag, fragShaderText);
    gl.compileShader(wwtlib.TextShader._frag);
    var stat = gl.getShaderParameter(wwtlib.TextShader._frag, 35713);
    wwtlib.TextShader._vert = gl.createShader(35633);
    gl.shaderSource(wwtlib.TextShader._vert, vertexShaderText);
    gl.compileShader(wwtlib.TextShader._vert);
    var stat1 = gl.getShaderParameter(wwtlib.TextShader._vert, 35713);
    wwtlib.TextShader._prog = gl.createProgram();
    gl.attachShader(wwtlib.TextShader._prog, wwtlib.TextShader._vert);
    gl.attachShader(wwtlib.TextShader._prog, wwtlib.TextShader._frag);
    gl.linkProgram(wwtlib.TextShader._prog);
    var errcode = gl.getProgramParameter(wwtlib.TextShader._prog, 35714);
    gl.useProgram(wwtlib.TextShader._prog);
    wwtlib.TextShader.vertLoc = gl.getAttribLocation(wwtlib.TextShader._prog, 'aVertexPosition');
    wwtlib.TextShader.textureLoc = gl.getAttribLocation(wwtlib.TextShader._prog, 'aTextureCoord');
    wwtlib.TextShader.projMatLoc = gl.getUniformLocation(wwtlib.TextShader._prog, 'uPMatrix');
    wwtlib.TextShader.mvMatLoc = gl.getUniformLocation(wwtlib.TextShader._prog, 'uMVMatrix');
    wwtlib.TextShader.sampLoc = gl.getUniformLocation(wwtlib.TextShader._prog, 'uSampler');
    wwtlib.Tile.uvMultiple = 1;
    wwtlib.Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    wwtlib.TextShader.initialized = true;
}
wwtlib.TextShader.use = function wwtlib_TextShader$use(renderContext, vertex, texture) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="vertex" type="WebGLBuffer">
    /// </param>
    /// <param name="texture" type="WebGLTexture">
    /// </param>
    var gl = renderContext.gl;
    if (gl != null) {
        if (!wwtlib.TextShader.initialized) {
            wwtlib.TextShader.init(renderContext);
        }
        gl.useProgram(wwtlib.TextShader._prog);
        var mvMat = wwtlib.Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
        gl.uniformMatrix4fv(wwtlib.TextShader.mvMatLoc, false, mvMat.floatArray());
        gl.uniformMatrix4fv(wwtlib.TextShader.projMatLoc, false, renderContext.get_projection().floatArray());
        gl.uniform1i(wwtlib.TextShader.sampLoc, 0);
        if (renderContext.space) {
            gl.disable(2929);
        }
        else {
            gl.enable(2929);
        }
        gl.enableVertexAttribArray(wwtlib.TextShader.vertLoc);
        gl.enableVertexAttribArray(wwtlib.TextShader.textureLoc);
        gl.bindBuffer(34962, vertex);
        gl.vertexAttribPointer(wwtlib.TextShader.vertLoc, 3, 5126, false, 20, 0);
        gl.vertexAttribPointer(wwtlib.TextShader.textureLoc, 2, 5126, false, 20, 12);
        gl.activeTexture(33984);
        gl.bindTexture(3553, texture);
        gl.blendFunc(770, 771);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Tessellator

wwtlib.Tessellator = function wwtlib_Tessellator() {
}
wwtlib.Tessellator.tesselateSimplePoly = function wwtlib_Tessellator$tesselateSimplePoly(inputList) {
    /// <param name="inputList" type="Array">
    /// </param>
    /// <returns type="Array"></returns>
    var results = [];
    var tess = new wwtlib.Tessellator();
    tess.process(inputList, results);
    return results;
}
wwtlib.Tessellator.prototype = {
    
    _isLeftOfHalfSpace: function wwtlib_Tessellator$_isLeftOfHalfSpace(pntA, pntB, pntTest) {
        /// <param name="pntA" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntB" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntTest" type="wwtlib.Vector3d">
        /// </param>
        /// <returns type="Boolean"></returns>
        pntA.normalize();
        pntB.normalize();
        var cross = wwtlib.Vector3d.cross(pntA, pntB);
        var dot = wwtlib.Vector3d.dot(cross, pntTest);
        return dot > 0;
    },
    
    _insideTriangle: function wwtlib_Tessellator$_insideTriangle(pntA, pntB, pntC, pntTest) {
        /// <param name="pntA" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntB" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntC" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntTest" type="wwtlib.Vector3d">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (!this._isLeftOfHalfSpace(pntA, pntB, pntTest)) {
            return false;
        }
        if (!this._isLeftOfHalfSpace(pntB, pntC, pntTest)) {
            return false;
        }
        if (!this._isLeftOfHalfSpace(pntC, pntA, pntTest)) {
            return false;
        }
        return true;
    },
    
    _canClipEar: function wwtlib_Tessellator$_canClipEar(poly, u, v, w, n, verts) {
        /// <param name="poly" type="Array">
        /// </param>
        /// <param name="u" type="Number" integer="true">
        /// </param>
        /// <param name="v" type="Number" integer="true">
        /// </param>
        /// <param name="w" type="Number" integer="true">
        /// </param>
        /// <param name="n" type="Number" integer="true">
        /// </param>
        /// <param name="verts" type="Array" elementType="Number" elementInteger="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        var p;
        var a = poly[verts[u]].copy();
        var b = poly[verts[v]].copy();
        var c = poly[verts[w]].copy();
        var P;
        var d = wwtlib.Vector3d.subtractVectors(b, a);
        d.normalize();
        var e = wwtlib.Vector3d.subtractVectors(b, c);
        e.normalize();
        var g = wwtlib.Vector3d.cross(d, e);
        var bn = b.copy();
        bn.normalize();
        if (wwtlib.Vector3d.dot(g, bn) > 0) {
            return false;
        }
        for (p = 0; p < n; p++) {
            if ((p === u) || (p === v) || (p === w)) {
                continue;
            }
            P = poly[verts[p]].copy();
            if (this._insideTriangle(a, b, c, P)) {
                return false;
            }
        }
        return true;
    },
    
    process: function wwtlib_Tessellator$process(poly, result) {
        /// <param name="poly" type="Array">
        /// </param>
        /// <param name="result" type="Array">
        /// </param>
        /// <returns type="Boolean"></returns>
        var n = poly.length;
        if (poly.length < 3) {
            return false;
        }
        var verts = new Array(poly.length);
        for (var i = 0; i < n; i++) {
            verts[i] = i;
        }
        var nv = n;
        var count = 2 * nv;
        for (var m = 0, v = nv - 1; nv > 2; ) {
            if (0 >= (count--)) {
                return false;
            }
            var u = v;
            if (nv <= u) {
                u = 0;
            }
            v = u + 1;
            if (nv <= v) {
                v = 0;
            }
            var w = v + 1;
            if (nv <= w) {
                w = 0;
            }
            if (this._canClipEar(poly, u, v, w, nv, verts)) {
                var s, t;
                result.add(verts[u]);
                result.add(verts[v]);
                result.add(verts[w]);
                m++;
                for (s = v, t = v + 1; t < nv; s++, t++) {
                    verts[s] = verts[t];
                }
                nv--;
                count = 2 * nv;
            }
        }
        return true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Texture

wwtlib.Texture = function wwtlib_Texture() {
    /// <field name="imageElement" type="Object" domElement="true">
    /// </field>
    /// <field name="texture2d" type="WebGLTexture">
    /// </field>
    /// <field name="_downloading" type="Boolean">
    /// </field>
    /// <field name="_ready" type="Boolean">
    /// </field>
    /// <field name="_errored" type="Boolean">
    /// </field>
    /// <field name="URL" type="String">
    /// </field>
}
wwtlib.Texture.prototype = {
    imageElement: null,
    texture2d: null,
    _downloading: false,
    _ready: false,
    _errored: false,
    URL: '',
    
    load: function wwtlib_Texture$load(url) {
        /// <param name="url" type="String">
        /// </param>
        this.URL = url;
        if (!this._downloading) {
            this._downloading = true;
            this.imageElement = document.createElement('img');
            var xdomimg = this.imageElement;
            this.imageElement.addEventListener('load', ss.Delegate.create(this, function(e) {
                this._ready = true;
                this._downloading = false;
                this._errored = false;
                this.makeTexture();
            }), false);
            this.imageElement.addEventListener('error', ss.Delegate.create(this, function(e) {
                this._downloading = false;
                this._ready = false;
                this._errored = true;
            }), false);
            xdomimg.crossOrigin = 'anonymous';
            this.imageElement.src = this.URL;
        }
    },
    
    makeTexture: function wwtlib_Texture$makeTexture() {
        if (wwtlib.Tile.prepDevice != null) {
            try {
                this.texture2d = wwtlib.Tile.prepDevice.createTexture();
                wwtlib.Tile.prepDevice.bindTexture(3553, this.texture2d);
                var image = this.imageElement;
                if ((!this._isPowerOfTwo(this.imageElement.height) | !this._isPowerOfTwo(this.imageElement.width)) === 1) {
                    var temp = document.createElement('canvas');
                    temp.height = this._fitPowerOfTwo(image.height);
                    temp.width = this._fitPowerOfTwo(image.width);
                    var ctx = temp.getContext('2d');
                    ctx.drawImage(image, 0, 0, image.width, image.height);
                    image = temp;
                }
                wwtlib.Tile.prepDevice.texParameteri(3553, 10242, 33071);
                wwtlib.Tile.prepDevice.texParameteri(3553, 10243, 33071);
                wwtlib.Tile.prepDevice.texImage2D(3553, 0, 6408, 6408, 5121, image);
                wwtlib.Tile.prepDevice.texParameteri(3553, 10241, 9985);
                wwtlib.Tile.prepDevice.generateMipmap(3553);
                wwtlib.Tile.prepDevice.bindTexture(3553, null);
            }
            catch ($e1) {
                this._errored = true;
            }
        }
    },
    
    _isPowerOfTwo: function wwtlib_Texture$_isPowerOfTwo(val) {
        /// <param name="val" type="Number" integer="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        return !(val & (val - 1));
    },
    
    _fitPowerOfTwo: function wwtlib_Texture$_fitPowerOfTwo(val) {
        /// <param name="val" type="Number" integer="true">
        /// </param>
        /// <returns type="Number" integer="true"></returns>
        val--;
        for (var i = 1; i < 32; i <<= 1) {
            val = val | val >> i;
        }
        return val + 1;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Grids

wwtlib.Grids = function wwtlib_Grids() {
    /// <field name="_equLineList" type="wwtlib.SimpleLineList" static="true">
    /// </field>
    /// <field name="_equTextBatch" type="wwtlib.Text3dBatch" static="true">
    /// </field>
    /// <field name="_eclipticCount" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_eclipticYear" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_monthDays" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="_monthNames" type="Array" elementType="String" static="true">
    /// </field>
    /// <field name="_eclipticOverviewLineList" type="wwtlib.SimpleLineList" static="true">
    /// </field>
    /// <field name="_eclipticTextYear" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_eclipOvTextBatch" type="wwtlib.Text3dBatch" static="true">
    /// </field>
    /// <field name="_precLineList" type="wwtlib.SimpleLineList" static="true">
    /// </field>
    /// <field name="_precTextBatch" type="wwtlib.Text3dBatch" static="true">
    /// </field>
    /// <field name="_altAzLineList" type="wwtlib.SimpleLineList" static="true">
    /// </field>
    /// <field name="_altAzTextBatch" type="wwtlib.Text3dBatch" static="true">
    /// </field>
    /// <field name="_eclipticLineList" type="wwtlib.SimpleLineList" static="true">
    /// </field>
    /// <field name="_eclipticTextBatch" type="wwtlib.Text3dBatch" static="true">
    /// </field>
    /// <field name="_galLineList" type="wwtlib.SimpleLineList" static="true">
    /// </field>
    /// <field name="_galTextBatch" type="wwtlib.Text3dBatch" static="true">
    /// </field>
}
wwtlib.Grids.drawEquitorialGrid = function wwtlib_Grids$drawEquitorialGrid(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    if (wwtlib.Grids._equLineList == null) {
        wwtlib.Grids._equLineList = new wwtlib.SimpleLineList();
        wwtlib.Grids._equLineList.set_depthBuffered(false);
        for (var hour = 0; hour < 24; hour++) {
            for (var dec = -80; dec < 80; dec += 2) {
                wwtlib.Grids._equLineList.addLine(wwtlib.Coordinates.raDecTo3dAu(hour, dec, 1), wwtlib.Coordinates.raDecTo3dAu(hour, dec + 2, 1));
            }
        }
        for (var dec = -80; dec <= 80; dec += 10) {
            for (var hour = 0; hour < 23.8; hour += 0.2) {
                wwtlib.Grids._equLineList.addLine(wwtlib.Coordinates.raDecTo3dAu(hour, dec, 1), wwtlib.Coordinates.raDecTo3dAu(hour + 0.2, dec, 1));
            }
        }
        var counter = 0;
        for (var ra = 0; ra < 24; ra += 0.25) {
            var dec = 0.5;
            switch (counter % 4) {
                case 0:
                    counter++;
                    continue;
                case 3:
                case 1:
                    dec = 0.25;
                    break;
            }
            counter++;
            wwtlib.Grids._equLineList.addLine(wwtlib.Coordinates.raDecTo3dAu(ra, dec, 1), wwtlib.Coordinates.raDecTo3dAu(ra, -dec, 1));
        }
        counter = 0;
        for (var ra = 0; ra < 24; ra += 3) {
            counter = 0;
            for (var dec = -80; dec <= 80; dec += 1) {
                var width = 0.5 / 30;
                switch (counter % 10) {
                    case 0:
                        counter++;
                        continue;
                    case 5:
                        width = 0.5 / 15;
                        break;
                }
                counter++;
                wwtlib.Grids._equLineList.addLine(wwtlib.Coordinates.raDecTo3dAu(ra + width, dec, 1), wwtlib.Coordinates.raDecTo3dAu(ra - width, dec, 1));
            }
        }
    }
    wwtlib.Grids._equLineList.drawLines(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids.drawEquitorialGridText = function wwtlib_Grids$drawEquitorialGridText(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    wwtlib.Grids._makeEquitorialGridText();
    wwtlib.Grids._equTextBatch.draw(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids._makeEquitorialGridText = function wwtlib_Grids$_makeEquitorialGridText() {
    if (wwtlib.Grids._equTextBatch == null) {
        wwtlib.Grids._equTextBatch = new wwtlib.Text3dBatch(30);
        var index = 0;
        for (var ra = 0; ra < 24; ra++) {
            var text = ra.toString() + ' hr';
            if (ra < 10) {
                text = '  ' + ra.toString() + ' hr';
            }
            wwtlib.Grids._equTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.raDecTo3dAu(ra + 0.005, 0.4, 1), wwtlib.Coordinates.raDecTo3dAu(ra + 0.005, 0.5, 1), text, 30, 6E-05));
        }
        index = 0;
        for (var ra = 0; ra < 24; ra += 3) {
            for (var dec = -80; dec <= 80; dec += 10) {
                if (!dec) {
                    continue;
                }
                var text = dec.toString();
                if (dec > 0) {
                    text = '  +' + dec.toString();
                    wwtlib.Grids._equTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.raDecTo3dAu(ra, dec - 0.4, 1), wwtlib.Coordinates.raDecTo3dAu(ra, dec - 0.3, 1), text, 30, 6E-05));
                }
                else {
                    text = '  - ' + text.substr(1);
                    wwtlib.Grids._equTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.raDecTo3dAu(ra, dec + 0.4, 1), wwtlib.Coordinates.raDecTo3dAu(ra, dec + 0.5, 1), text, 30, 6E-05));
                }
                index++;
            }
        }
    }
}
wwtlib.Grids.drawEcliptic = function wwtlib_Grids$drawEcliptic(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    var col = drawColor;
    var year = wwtlib.SpaceTimeController.get_now().getUTCFullYear();
    if (wwtlib.Grids._eclipticOverviewLineList == null || year !== wwtlib.Grids._eclipticYear) {
        if (wwtlib.Grids._eclipticOverviewLineList != null) {
            wwtlib.Grids._eclipticOverviewLineList.clear();
            wwtlib.Grids._eclipticOverviewLineList = null;
        }
        wwtlib.Grids._eclipticYear = year;
        var obliquity = wwtlib.Coordinates.meanObliquityOfEcliptic(wwtlib.SpaceTimeController.get_jNow());
        var mat = wwtlib.Matrix3d._rotationX((-obliquity / 360 * (Math.PI * 2)));
        var daysPerYear = 365.25;
        if (DT.isLeap(year, true)) {
            wwtlib.Grids._monthDays[1] = 29;
            daysPerYear = 366;
        }
        else {
            wwtlib.Grids._monthDays[1] = 28;
            daysPerYear = 365;
        }
        var count = 2 * parseInt(daysPerYear);
        wwtlib.Grids._eclipticCount = parseInt(daysPerYear);
        var jYear = wwtlib.SpaceTimeController.utcToJulian(new Date(year, 0, 1, 12, 0, 0));
        var index = 0;
        var d = 0;
        wwtlib.Grids._eclipticOverviewLineList = new wwtlib.SimpleLineList();
        wwtlib.Grids._eclipticOverviewLineList.set_depthBuffered(false);
        for (var m = 0; m < 12; m++) {
            var daysThisMonth = parseInt(wwtlib.Grids._monthDays[m]);
            for (var i = 0; i < daysThisMonth; i++) {
                var sunRaDec = wwtlib.Planets.getPlanetLocationJD('Sun', jYear);
                var sunEcliptic = CT.eq2Ec(sunRaDec.RA, sunRaDec.dec, obliquity);
                d = sunEcliptic.x;
                var width = 0.005;
                if (!i) {
                    width = 0.01;
                }
                var dd = d;
                wwtlib.Grids._eclipticOverviewLineList.addLine(wwtlib.Vector3d._transformCoordinate(wwtlib.Vector3d.create(Math.cos((dd * Math.PI * 2) / 360), width, Math.sin((dd * Math.PI * 2) / 360)), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Vector3d.create(Math.cos((dd * Math.PI * 2) / 360), -width, Math.sin((dd * Math.PI * 2) / 360)), mat));
                index++;
                jYear += 1;
            }
            d += wwtlib.Grids._monthDays[m];
        }
    }
    wwtlib.Grids._eclipticOverviewLineList.drawLines(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids.drawEclipticText = function wwtlib_Grids$drawEclipticText(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    wwtlib.Grids._makeEclipticText();
    wwtlib.Grids._eclipOvTextBatch.draw(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids._makeEclipticText = function wwtlib_Grids$_makeEclipticText() {
    var year = wwtlib.SpaceTimeController.get_now().getUTCFullYear();
    if (wwtlib.Grids._eclipOvTextBatch == null) {
        wwtlib.Grids._eclipOvTextBatch = new wwtlib.Text3dBatch(80);
        wwtlib.Grids._eclipticTextYear = year;
        var obliquity = wwtlib.Coordinates.meanObliquityOfEcliptic(wwtlib.SpaceTimeController.get_jNow());
        var mat = wwtlib.Matrix3d._rotationX((-obliquity / 360 * (Math.PI * 2)));
        var daysPerYear = 365.25;
        if (DT.isLeap(year, true)) {
            wwtlib.Grids._monthDays[1] = 29;
            daysPerYear = 366;
        }
        else {
            wwtlib.Grids._monthDays[1] = 28;
            daysPerYear = 365;
        }
        var count = 2 * parseInt(daysPerYear);
        wwtlib.Grids._eclipticCount = parseInt(daysPerYear);
        var jYear = wwtlib.SpaceTimeController.utcToJulian(new Date(year, 0, 1, 12, 0, 0));
        var index = 0;
        var d = 0;
        for (var m = 0; m < 12; m++) {
            var daysThisMonth = parseInt(wwtlib.Grids._monthDays[m]);
            for (var i = 0; i < daysThisMonth; i++) {
                var sunRaDec = wwtlib.Planets.getPlanetLocationJD('Sun', jYear);
                var sunEcliptic = CT.eq2Ec(sunRaDec.RA, sunRaDec.dec, obliquity);
                d = sunEcliptic.x;
                var dd = d;
                if (i === Math.floor(daysThisMonth / 2)) {
                    var center = wwtlib.Vector3d._transformCoordinate(wwtlib.Vector3d.create(Math.cos((dd * Math.PI * 2) / 360), 0.025, Math.sin((dd * Math.PI * 2) / 360)), mat);
                    var up = wwtlib.Vector3d._transformCoordinate(wwtlib.Vector3d.create(Math.cos((dd * Math.PI * 2) / 360), 0.045, Math.sin((dd * Math.PI * 2) / 360)), mat);
                    up.subtract(center);
                    up.normalize();
                    wwtlib.Grids._eclipOvTextBatch.add(new wwtlib.Text3d(center, up, wwtlib.Grids._monthNames[m], 80, 0.000159375));
                }
                index++;
                index++;
                jYear += 1;
            }
            d += wwtlib.Grids._monthDays[m];
        }
    }
}
wwtlib.Grids.drawPrecessionChart = function wwtlib_Grids$drawPrecessionChart(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    wwtlib.Grids._makePrecessionChart();
    wwtlib.Grids._precTextBatch.draw(renderContext, opacity, drawColor);
    wwtlib.Grids._precLineList.drawLines(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids._makePrecessionChart = function wwtlib_Grids$_makePrecessionChart() {
    var obliquity = wwtlib.Coordinates.meanObliquityOfEcliptic(wwtlib.SpaceTimeController.get_jNow());
    var mat = wwtlib.Matrix3d._rotationX((obliquity / 360 * (Math.PI * 2)));
    var col = wwtlib.Colors.get_white();
    if (wwtlib.Grids._precLineList == null) {
        wwtlib.Grids._precLineList = new wwtlib.SimpleLineList();
        wwtlib.Grids._precLineList.set_depthBuffered(false);
        for (var l = 0; l < 360; l++) {
            var b = 90 - obliquity;
            wwtlib.Grids._precLineList.addLine(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu((l + 1) / 15, b, 1), mat));
        }
        for (var l = -12000; l < 13000; l += 2000) {
            var b = 90 - obliquity;
            var p = -((l - 2000) / 25772 * 24) - 6;
            wwtlib.Grids._precLineList.addLine(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(p, b - 0.5, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(p, b + 0.5, 1), mat));
        }
    }
    if (wwtlib.Grids._precTextBatch == null) {
        wwtlib.Grids._precTextBatch = new wwtlib.Text3dBatch(50);
        var index = 0;
        for (var l = -12000; l < 13000; l += 2000) {
            var b = 90 - obliquity + 3;
            var p = -((l - 2000) / 25772 * 24) - 6;
            var text = l.toString();
            if (!l) {
                b = 90 - obliquity + 2;
                text = '1 CE';
            }
            else if (l < 0) {
                text = '  ' + Math.abs(l).toString() + ' BCE';
            }
            else {
                text = Math.abs(l).toString() + ' CE';
            }
            if (text.length === 9) {
                text = '   ' + text;
            }
            wwtlib.Grids._precTextBatch.add(new wwtlib.Text3d(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(p, b, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(p + 0.01, b, 1), mat), text, 80, 9E-05));
        }
    }
    return;
}
wwtlib.Grids.drawAltAzGrid = function wwtlib_Grids$drawAltAzGrid(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    var zenithAltAz = new wwtlib.Coordinates(0, 0);
    var zenith = wwtlib.Coordinates.horizonToEquitorial(zenithAltAz, wwtlib.SpaceTimeController.get_location(), wwtlib.SpaceTimeController.get_now());
    var raPart = -((zenith.get_RA() + 6) / 24 * (Math.PI * 2));
    var decPart = -(zenith.get_dec() / 360 * (Math.PI * 2));
    var raText = wwtlib.Coordinates.formatDMS(zenith.get_RA());
    var mat = wwtlib.Matrix3d._rotationY(-raPart);
    mat._multiply(wwtlib.Matrix3d._rotationX(decPart));
    mat.invert();
    if (wwtlib.Grids._altAzLineList == null) {
        wwtlib.Grids._altAzLineList = new wwtlib.SimpleLineList();
        wwtlib.Grids._altAzLineList.set_depthBuffered(false);
        for (var l = 0; l < 360; l += 10) {
            for (var b = -80; b < 80; b += 2) {
                wwtlib.Grids._altAzLineList.addLine(wwtlib.Coordinates.raDecTo3dAu(l / 15, b, 1), wwtlib.Coordinates.raDecTo3dAu(l / 15, b + 2, 1));
            }
        }
        for (var b = -80; b <= 80; b += 10) {
            for (var l = 0; l < 360; l += 5) {
                wwtlib.Grids._altAzLineList.addLine(wwtlib.Coordinates.raDecTo3dAu(l / 15, b, 1), wwtlib.Coordinates.raDecTo3dAu((l + 5) / 15, b, 1));
            }
        }
        var counter = 0;
        for (var l = 0; l < 360; l += 1) {
            var b = 0.25;
            switch (counter % 10) {
                case 0:
                    counter++;
                    continue;
                case 5:
                    b = 0.5;
                    break;
            }
            counter++;
            wwtlib.Grids._altAzLineList.addLine(wwtlib.Coordinates.raDecTo3dAu(l / 15, b, 1), wwtlib.Coordinates.raDecTo3dAu(l / 15, -b, 1));
        }
        counter = 0;
        for (var l = 0; l < 360; l += 90) {
            counter = 0;
            for (var b = -80; b <= 80; b += 1) {
                var width = 0.5 / 2;
                switch (counter % 10) {
                    case 0:
                        counter++;
                        continue;
                    case 5:
                        width = 0.5;
                        break;
                }
                counter++;
                wwtlib.Grids._altAzLineList.addLine(wwtlib.Coordinates.raDecTo3dAu((l + width) / 15, b, 1), wwtlib.Coordinates.raDecTo3dAu((l - width) / 15, b, 1));
            }
        }
    }
    var matOldWorld = renderContext.get_world().clone();
    var matOldWorldBase = renderContext.get_worldBase().clone();
    renderContext.set_worldBase(wwtlib.Matrix3d.multiplyMatrix(mat, renderContext.get_world()));
    renderContext.set_world(renderContext.get_worldBase().clone());
    renderContext.makeFrustum();
    wwtlib.Grids._altAzLineList.viewTransform = wwtlib.Matrix3d.invertMatrix(mat);
    wwtlib.Grids._altAzLineList.drawLines(renderContext, opacity, drawColor);
    renderContext.set_worldBase(matOldWorldBase);
    renderContext.set_world(matOldWorld);
    renderContext.makeFrustum();
    return true;
}
wwtlib.Grids.drawAltAzGridText = function wwtlib_Grids$drawAltAzGridText(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    var zenithAltAz = new wwtlib.Coordinates(0, 0);
    var zenith = wwtlib.Coordinates.horizonToEquitorial(zenithAltAz, wwtlib.SpaceTimeController.get_location(), wwtlib.SpaceTimeController.get_now());
    var raPart = -((zenith.get_RA() - 6) / 24 * (Math.PI * 2));
    var decPart = -(zenith.get_dec() / 360 * (Math.PI * 2));
    var raText = wwtlib.Coordinates.formatDMS(zenith.get_RA());
    var mat = wwtlib.Matrix3d._rotationY(-raPart - Math.PI);
    mat._multiply(wwtlib.Matrix3d._rotationX(decPart));
    mat.invert();
    wwtlib.Grids._makeAltAzGridText();
    var matOldWorld = renderContext.get_world().clone();
    var matOldWorldBase = renderContext.get_worldBase().clone();
    renderContext.set_worldBase(wwtlib.Matrix3d.multiplyMatrix(mat, renderContext.get_world()));
    renderContext.set_world(renderContext.get_worldBase().clone());
    renderContext.makeFrustum();
    wwtlib.Grids._altAzTextBatch.viewTransform = wwtlib.Matrix3d.invertMatrix(mat);
    wwtlib.Grids._altAzTextBatch.draw(renderContext, opacity, drawColor);
    renderContext.set_worldBase(matOldWorldBase);
    renderContext.set_world(matOldWorld);
    renderContext.makeFrustum();
    return true;
}
wwtlib.Grids._makeAltAzGridText = function wwtlib_Grids$_makeAltAzGridText() {
    var drawColor = wwtlib.Colors.get_white();
    var index = 0;
    if (wwtlib.Grids._altAzTextBatch == null) {
        wwtlib.Grids._altAzTextBatch = new wwtlib.Text3dBatch(30);
        for (var l = 0; l < 360; l += 10) {
            var text = '       ' + l.toString();
            if (l < 10) {
                text = '   ' + l.toString();
            }
            else if (l < 100) {
                text = '     ' + l.toString();
            }
            var lc = 360 - l;
            wwtlib.Grids._altAzTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.raDecTo3dAu(lc / 15 - 6, 0.4, 1), wwtlib.Coordinates.raDecTo3dAu(lc / 15 - 6, 0.5, 1), text, 80, 6E-05));
        }
        index = 0;
        for (var l = 0; l < 360; l += 90) {
            for (var b = -80; b <= 80; b += 10) {
                if (!b) {
                    continue;
                }
                var text = b.toString();
                if (b > 0) {
                    text = '  +' + b.toString();
                    wwtlib.Grids._altAzTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.raDecTo3dAu(l / 15, b - 0.4, 1), wwtlib.Coordinates.raDecTo3dAu(l / 15, b - 0.3, 1), text, 80, 6E-05));
                }
                else {
                    text = '  - ' + text.substr(1);
                    wwtlib.Grids._altAzTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.raDecTo3dAu(l / 15, b + 0.4, 1), wwtlib.Coordinates.raDecTo3dAu(l / 15, b + 0.5, 1), text, 80, 6E-05));
                }
                index++;
            }
        }
    }
    return;
}
wwtlib.Grids.drawEclipticGrid = function wwtlib_Grids$drawEclipticGrid(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    if (wwtlib.Grids._eclipticLineList == null) {
        wwtlib.Grids._eclipticLineList = new wwtlib.SimpleLineList();
        wwtlib.Grids._eclipticLineList.set_depthBuffered(false);
        var obliquity = wwtlib.Coordinates.meanObliquityOfEcliptic(2451545);
        var mat = wwtlib.Matrix3d._rotationX((-obliquity / 360 * (Math.PI * 2)));
        for (var l = 0; l < 360; l += 10) {
            for (var b = -80; b < 80; b += 2) {
                wwtlib.Grids._eclipticLineList.addLine(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b + 2, 1), mat));
            }
        }
        for (var b = -80; b <= 80; b += 10) {
            for (var l = 0; l < 360; l += 5) {
                wwtlib.Grids._eclipticLineList.addLine(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu((l + 5) / 15, b, 1), mat));
            }
        }
        var counter = 0;
        for (var l = 0; l < 360; l += 1) {
            var b = 0.25;
            switch (counter % 10) {
                case 0:
                    counter++;
                    continue;
                case 5:
                    b = 0.5;
                    break;
            }
            counter++;
            wwtlib.Grids._eclipticLineList.addLine(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, -b, 1), mat));
        }
        counter = 0;
        for (var l = 0; l < 360; l += 90) {
            counter = 0;
            for (var b = -80; b <= 80; b += 1) {
                var width = 0.5 / 2;
                switch (counter % 10) {
                    case 0:
                        counter++;
                        continue;
                    case 5:
                        width = 0.5;
                        break;
                }
                counter++;
                wwtlib.Grids._eclipticLineList.addLine(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu((l + width) / 15, b, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu((l - width) / 15, b, 1), mat));
            }
        }
    }
    wwtlib.Grids._eclipticLineList.drawLines(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids.drawEclipticGridText = function wwtlib_Grids$drawEclipticGridText(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    wwtlib.Grids._makeEclipticGridText();
    wwtlib.Grids._eclipticTextBatch.draw(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids._makeEclipticGridText = function wwtlib_Grids$_makeEclipticGridText() {
    var drawColor = wwtlib.Colors.get_white();
    var obliquity = wwtlib.Coordinates.meanObliquityOfEcliptic(wwtlib.SpaceTimeController.get_jNow());
    var mat = wwtlib.Matrix3d._rotationX((-obliquity / 360 * (Math.PI * 2)));
    if (wwtlib.Grids._eclipticTextBatch == null) {
        wwtlib.Grids._eclipticTextBatch = new wwtlib.Text3dBatch(30);
        for (var l = 0; l < 360; l += 10) {
            var text = '       ' + l.toString();
            if (l < 10) {
                text = '   ' + l.toString();
            }
            else if (l < 100) {
                text = '     ' + l.toString();
            }
            wwtlib.Grids._eclipticTextBatch.add(new wwtlib.Text3d(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, 0.4, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, 0.5, 1), mat), text, 80, 6E-05));
        }
        for (var l = 0; l < 360; l += 90) {
            for (var b = -80; b <= 80; b += 10) {
                if (!b) {
                    continue;
                }
                var text = b.toString();
                if (b > 0) {
                    text = '  +' + b.toString();
                    wwtlib.Grids._eclipticTextBatch.add(new wwtlib.Text3d(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b - 0.4, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b - 0.3, 1), mat), text, 80, 6E-05));
                }
                else {
                    text = '  - ' + text.substr(1);
                    wwtlib.Grids._eclipticTextBatch.add(new wwtlib.Text3d(wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b + 0.4, 1), mat), wwtlib.Vector3d._transformCoordinate(wwtlib.Coordinates.raDecTo3dAu(l / 15, b + 0.5, 1), mat), text, 80, 6E-05));
                }
            }
        }
    }
    return;
}
wwtlib.Grids.drawGalacticGrid = function wwtlib_Grids$drawGalacticGrid(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    if (wwtlib.Grids._galLineList == null) {
        wwtlib.Grids._galLineList = new wwtlib.SimpleLineList();
        wwtlib.Grids._galLineList.set_depthBuffered(false);
        for (var l = 0; l < 360; l += 10) {
            for (var b = -80; b < 80; b += 2) {
                wwtlib.Grids._galLineList.addLine(wwtlib.Coordinates.galacticTo3dDouble(l, b), wwtlib.Coordinates.galacticTo3dDouble(l, b + 2));
            }
        }
        for (var b = -80; b <= 80; b += 10) {
            for (var l = 0; l < 360; l += 5) {
                wwtlib.Grids._galLineList.addLine(wwtlib.Coordinates.galacticTo3dDouble(l, b), wwtlib.Coordinates.galacticTo3dDouble(l + 5, b));
            }
        }
        var counter = 0;
        for (var l = 0; l < 360; l += 1) {
            var b = 0.25;
            switch (counter % 10) {
                case 0:
                    counter++;
                    continue;
                case 5:
                    b = 0.5;
                    break;
            }
            counter++;
            wwtlib.Grids._galLineList.addLine(wwtlib.Coordinates.galacticTo3dDouble(l, b), wwtlib.Coordinates.galacticTo3dDouble(l, -b));
        }
        counter = 0;
        for (var l = 0; l < 360; l += 90) {
            counter = 0;
            for (var b = -80; b <= 80; b += 1) {
                var width = 0.5 / 2;
                switch (counter % 10) {
                    case 0:
                        counter++;
                        continue;
                    case 5:
                        width = 0.5;
                        break;
                }
                counter++;
                wwtlib.Grids._galLineList.addLine(wwtlib.Coordinates.galacticTo3dDouble(l + width, b), wwtlib.Coordinates.galacticTo3dDouble(l - width, b));
            }
        }
    }
    wwtlib.Grids._galLineList.drawLines(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids.drawGalacticGridText = function wwtlib_Grids$drawGalacticGridText(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    /// <returns type="Boolean"></returns>
    wwtlib.Grids._makeGalacticGridText();
    wwtlib.Grids._galTextBatch.draw(renderContext, opacity, drawColor);
    return true;
}
wwtlib.Grids._makeGalacticGridText = function wwtlib_Grids$_makeGalacticGridText() {
    if (wwtlib.Grids._galTextBatch == null) {
        wwtlib.Grids._galTextBatch = new wwtlib.Text3dBatch(30);
        for (var l = 0; l < 360; l += 10) {
            var text = '       ' + l.toString();
            if (l < 10) {
                text = '   ' + l.toString();
            }
            else if (l < 100) {
                text = '     ' + l.toString();
            }
            wwtlib.Grids._galTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.galacticTo3dDouble(l, 0.4), wwtlib.Coordinates.galacticTo3dDouble(l, 0.5), text, 80, 6E-05));
        }
        for (var l = 0; l < 360; l += 90) {
            for (var b = -80; b <= 80; b += 10) {
                if (!b) {
                    continue;
                }
                var text = b.toString();
                if (b > 0) {
                    text = '  +' + b.toString();
                    wwtlib.Grids._galTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.galacticTo3dDouble(l, b - 0.4), wwtlib.Coordinates.galacticTo3dDouble(l, b - 0.3), text, 80, 6E-05));
                }
                else {
                    text = '  - ' + text.substr(1);
                    wwtlib.Grids._galTextBatch.add(new wwtlib.Text3d(wwtlib.Coordinates.galacticTo3dDouble(l, b + 0.4), wwtlib.Coordinates.galacticTo3dDouble(l, b + 0.5), text, 80, 6E-05));
                }
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.GreatCirlceRouteLayer

wwtlib.GreatCirlceRouteLayer = function wwtlib_GreatCirlceRouteLayer() {
    /// <field name="_triangleList$1" type="wwtlib.TriangleList">
    /// </field>
    /// <field name="_latStart$1" type="Number">
    /// </field>
    /// <field name="_lngStart$1" type="Number">
    /// </field>
    /// <field name="_latEnd$1" type="Number">
    /// </field>
    /// <field name="_lngEnd$1" type="Number">
    /// </field>
    /// <field name="_width$1" type="Number">
    /// </field>
    /// <field name="_percentComplete$1" type="Number">
    /// </field>
    wwtlib.GreatCirlceRouteLayer.initializeBase(this);
}
wwtlib.GreatCirlceRouteLayer.prototype = {
    _triangleList$1: null,
    
    cleanUp: function wwtlib_GreatCirlceRouteLayer$cleanUp() {
        if (this._triangleList$1 != null) {
            this._triangleList$1.clear();
        }
        this._triangleList$1 = null;
        wwtlib.GreatCirlceRouteLayer.callBaseMethod(this, 'cleanUp');
    },
    
    draw: function wwtlib_GreatCirlceRouteLayer$draw(renderContext, opacity, flat) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="flat" type="Boolean">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (this._triangleList$1 == null) {
            this._initializeRoute$1(renderContext);
        }
        this._triangleList$1.jNow = this._percentComplete$1 / 100;
        this._triangleList$1.draw(renderContext, opacity * this.get_opacity(), 2);
        return true;
    },
    
    _initializeRoute$1: function wwtlib_GreatCirlceRouteLayer$_initializeRoute$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        this._triangleList$1 = new wwtlib.TriangleList();
        this._triangleList$1.decay = 1000;
        this._triangleList$1.sky = this.get_astronomical();
        this._triangleList$1.timeSeries = true;
        this._triangleList$1.depthBuffered = false;
        this._triangleList$1.autoTime = false;
        var steps = 500;
        var start = wwtlib.Coordinates.geoTo3dDouble(this._latStart$1, this._lngStart$1);
        var end = wwtlib.Coordinates.geoTo3dDouble(this._latEnd$1, this._lngEnd$1);
        var dir = wwtlib.Vector3d.subtractVectors(end, start);
        dir.normalize();
        var startNormal = start;
        startNormal.normalize();
        var left = wwtlib.Vector3d.cross(startNormal, dir);
        var right = wwtlib.Vector3d.cross(dir, startNormal);
        left.normalize();
        right.normalize();
        left.multiply(0.001 * this._width$1);
        right.multiply(0.001 * this._width$1);
        var lastLeft = new wwtlib.Vector3d();
        var lastRight = new wwtlib.Vector3d();
        var firstTime = true;
        for (var i = 0; i <= steps; i++) {
            var v = wwtlib.Vector3d.lerp(start, end, i / steps);
            v.normalize();
            var cl = v;
            var cr = v;
            cl.add(left);
            cr.add(right);
            if (!firstTime) {
                this._triangleList$1.addQuad(lastRight, lastLeft, cr, cl, this.get_color(), new wwtlib.Dates(i / steps, 2));
            }
            else {
                firstTime = false;
            }
            lastLeft = cl;
            lastRight = cr;
        }
    },
    
    getParams: function wwtlib_GreatCirlceRouteLayer$getParams() {
        /// <returns type="Array" elementType="Number"></returns>
        return [ this._percentComplete$1 ];
    },
    
    getParamNames: function wwtlib_GreatCirlceRouteLayer$getParamNames() {
        /// <returns type="Array" elementType="String"></returns>
        return [ 'Percentage' ];
    },
    
    setParams: function wwtlib_GreatCirlceRouteLayer$setParams(paramList) {
        /// <param name="paramList" type="Array" elementType="Number">
        /// </param>
        if (paramList.length > 0) {
            this._percentComplete$1 = paramList[0];
        }
    },
    
    _latStart$1: 0,
    
    get_latStart: function wwtlib_GreatCirlceRouteLayer$get_latStart() {
        /// <value type="Number"></value>
        return this._latStart$1;
    },
    set_latStart: function wwtlib_GreatCirlceRouteLayer$set_latStart(value) {
        /// <value type="Number"></value>
        if (this._latStart$1 !== value) {
            this._latStart$1 = value;
            this.version++;
        }
        return value;
    },
    
    _lngStart$1: 0,
    
    get_lngStart: function wwtlib_GreatCirlceRouteLayer$get_lngStart() {
        /// <value type="Number"></value>
        return this._lngStart$1;
    },
    set_lngStart: function wwtlib_GreatCirlceRouteLayer$set_lngStart(value) {
        /// <value type="Number"></value>
        if (this._lngStart$1 !== value) {
            this._lngStart$1 = value;
            this.version++;
        }
        return value;
    },
    
    _latEnd$1: 0,
    
    get_latEnd: function wwtlib_GreatCirlceRouteLayer$get_latEnd() {
        /// <value type="Number"></value>
        return this._latEnd$1;
    },
    set_latEnd: function wwtlib_GreatCirlceRouteLayer$set_latEnd(value) {
        /// <value type="Number"></value>
        if (this._latEnd$1 !== value) {
            this._latEnd$1 = value;
            this.version++;
        }
        return value;
    },
    
    _lngEnd$1: 0,
    
    get_lngEnd: function wwtlib_GreatCirlceRouteLayer$get_lngEnd() {
        /// <value type="Number"></value>
        return this._lngEnd$1;
    },
    set_lngEnd: function wwtlib_GreatCirlceRouteLayer$set_lngEnd(value) {
        /// <value type="Number"></value>
        if (this._lngEnd$1 !== value) {
            this._lngEnd$1 = value;
            this.version++;
        }
        return value;
    },
    
    _width$1: 4,
    
    get_width: function wwtlib_GreatCirlceRouteLayer$get_width() {
        /// <value type="Number"></value>
        return this._width$1;
    },
    set_width: function wwtlib_GreatCirlceRouteLayer$set_width(value) {
        /// <value type="Number"></value>
        if (this._width$1 !== value) {
            this._width$1 = value;
            this.version++;
        }
        return value;
    },
    
    _percentComplete$1: 100,
    
    get_percentComplete: function wwtlib_GreatCirlceRouteLayer$get_percentComplete() {
        /// <value type="Number"></value>
        return this._percentComplete$1;
    },
    set_percentComplete: function wwtlib_GreatCirlceRouteLayer$set_percentComplete(value) {
        /// <value type="Number"></value>
        if (this._percentComplete$1 !== value) {
            this._percentComplete$1 = value;
            this.version++;
        }
        return value;
    },
    
    initializeFromXml: function wwtlib_GreatCirlceRouteLayer$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        this._latStart$1 = parseFloat(node.attributes.getNamedItem('LatStart').nodeValue);
        this._lngStart$1 = parseFloat(node.attributes.getNamedItem('LngStart').nodeValue);
        this._latEnd$1 = parseFloat(node.attributes.getNamedItem('LatEnd').nodeValue);
        this._lngEnd$1 = parseFloat(node.attributes.getNamedItem('LngEnd').nodeValue);
        this._width$1 = parseFloat(node.attributes.getNamedItem('Width').nodeValue);
        this._percentComplete$1 = parseFloat(node.attributes.getNamedItem('PercentComplete').nodeValue);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ImageSetLayer

wwtlib.ImageSetLayer = function wwtlib_ImageSetLayer() {
    wwtlib.ImageSetLayer.initializeBase(this);
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Layer

wwtlib.Layer = function wwtlib_Layer() {
    /// <field name="id" type="wwtlib.Guid">
    /// </field>
    /// <field name="loadedFromTour" type="Boolean">
    /// </field>
    /// <field name="tourDocument" type="wwtlib.TourDocument">
    /// </field>
    /// <field name="_opacity" type="Number">
    /// </field>
    /// <field name="opened" type="Boolean">
    /// </field>
    /// <field name="_startTime" type="Date">
    /// </field>
    /// <field name="_endTime" type="Date">
    /// </field>
    /// <field name="_fadeSpan" type="Number">
    /// </field>
    /// <field name="_fadeType" type="wwtlib.FadeType">
    /// </field>
    /// <field name="version" type="Number" integer="true">
    /// </field>
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="_referenceFrame" type="String">
    /// </field>
    /// <field name="_color" type="wwtlib.Color">
    /// </field>
    /// <field name="_enabled" type="Boolean">
    /// </field>
    /// <field name="astronomical" type="Boolean">
    /// </field>
    this.id = wwtlib.Guid.newGuid();
    this._startTime = Date.parseDate('01/01/2100');
    this._endTime = Date.parseDate('01/01/1900');
    this._fadeType = 4;
    this._color = wwtlib.Colors.get_white();
}
wwtlib.Layer._fromXml = function wwtlib_Layer$_fromXml(layerNode, someFlag) {
    /// <param name="layerNode" type="XmlNode">
    /// </param>
    /// <param name="someFlag" type="Boolean">
    /// </param>
    /// <returns type="wwtlib.Layer"></returns>
    var layerClassName = layerNode.attributes.getNamedItem('Type').nodeValue;
    var overLayType = layerClassName.replaceAll('TerraViewer.', '');
    if (overLayType == null) {
        return null;
    }
    var newLayer = null;
    switch (overLayType) {
        case 'SpreadSheetLayer':
            newLayer = new wwtlib._spreadSheetLayer();
            break;
        case 'GreatCirlceRouteLayer':
            newLayer = new wwtlib.GreatCirlceRouteLayer();
            break;
        default:
            return null;
    }
    newLayer._initFromXml(layerNode);
    return newLayer;
}
wwtlib.Layer.prototype = {
    
    getPrimaryUI: function wwtlib_Layer$getPrimaryUI() {
        /// <returns type="wwtlib.LayerUI"></returns>
        return null;
    },
    
    loadedFromTour: false,
    tourDocument: null,
    
    getFileStreamUrl: function wwtlib_Layer$getFileStreamUrl(filename) {
        /// <param name="filename" type="String">
        /// </param>
        /// <returns type="String"></returns>
        if (this.tourDocument != null) {
            return this.tourDocument.getFileStream(filename);
        }
        return null;
    },
    
    _opacity: 1,
    
    get_opacity: function wwtlib_Layer$get_opacity() {
        /// <value type="Number"></value>
        return this._opacity;
    },
    set_opacity: function wwtlib_Layer$set_opacity(value) {
        /// <value type="Number"></value>
        if (this._opacity !== value) {
            this.version++;
            this._opacity = value;
        }
        return value;
    },
    
    opened: false,
    
    get_opened: function wwtlib_Layer$get_opened() {
        /// <value type="Boolean"></value>
        return this.opened;
    },
    set_opened: function wwtlib_Layer$set_opened(value) {
        /// <value type="Boolean"></value>
        if (this.opened !== value) {
            this.version++;
            this.opened = value;
        }
        return value;
    },
    
    get_startTime: function wwtlib_Layer$get_startTime() {
        /// <value type="Date"></value>
        return this._startTime;
    },
    set_startTime: function wwtlib_Layer$set_startTime(value) {
        /// <value type="Date"></value>
        if (this._startTime !== value) {
            this.version++;
            this._startTime = value;
        }
        return value;
    },
    
    get_endTime: function wwtlib_Layer$get_endTime() {
        /// <value type="Date"></value>
        return this._endTime;
    },
    set_endTime: function wwtlib_Layer$set_endTime(value) {
        /// <value type="Date"></value>
        if (this._endTime !== value) {
            this.version++;
            this._endTime = value;
        }
        return value;
    },
    
    _fadeSpan: 0,
    
    get_fadeSpan: function wwtlib_Layer$get_fadeSpan() {
        /// <value type="Number"></value>
        return this._fadeSpan;
    },
    set_fadeSpan: function wwtlib_Layer$set_fadeSpan(value) {
        /// <value type="Number"></value>
        this.version++;
        this._fadeSpan = value;
        return value;
    },
    
    get_fadeType: function wwtlib_Layer$get_fadeType() {
        /// <value type="wwtlib.FadeType"></value>
        return this._fadeType;
    },
    set_fadeType: function wwtlib_Layer$set_fadeType(value) {
        /// <value type="wwtlib.FadeType"></value>
        if (this._fadeType !== value) {
            this.set_version(this.get_version() + 1) - 1;
            this._fadeType = value;
        }
        return value;
    },
    
    version: 0,
    
    get_version: function wwtlib_Layer$get_version() {
        /// <value type="Number" integer="true"></value>
        return this.version;
    },
    set_version: function wwtlib_Layer$set_version(value) {
        /// <value type="Number" integer="true"></value>
        this.version = value;
        return value;
    },
    
    findClosest: function wwtlib_Layer$findClosest(target, distance, closestPlace, astronomical) {
        /// <param name="target" type="wwtlib.Coordinates">
        /// </param>
        /// <param name="distance" type="Number">
        /// </param>
        /// <param name="closestPlace" type="wwtlib.Place">
        /// </param>
        /// <param name="astronomical" type="Boolean">
        /// </param>
        /// <returns type="wwtlib.Place"></returns>
        return closestPlace;
    },
    
    hoverCheckScreenSpace: function wwtlib_Layer$hoverCheckScreenSpace(cursor) {
        /// <param name="cursor" type="wwtlib.Vector2d">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    clickCheckScreenSpace: function wwtlib_Layer$clickCheckScreenSpace(cursor) {
        /// <param name="cursor" type="wwtlib.Vector2d">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    draw: function wwtlib_Layer$draw(renderContext, opacity, flat) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="flat" type="Boolean">
        /// </param>
        /// <returns type="Boolean"></returns>
        return true;
    },
    
    preDraw: function wwtlib_Layer$preDraw(renderContext, opacity) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        return true;
    },
    
    upadteData: function wwtlib_Layer$upadteData(data, purgeOld, purgeAll, hasHeader) {
        /// <param name="data" type="Object">
        /// </param>
        /// <param name="purgeOld" type="Boolean">
        /// </param>
        /// <param name="purgeAll" type="Boolean">
        /// </param>
        /// <param name="hasHeader" type="Boolean">
        /// </param>
        /// <returns type="Boolean"></returns>
        return true;
    },
    
    canCopyToClipboard: function wwtlib_Layer$canCopyToClipboard() {
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    copyToClipboard: function wwtlib_Layer$copyToClipboard() {
        return;
    },
    
    getParams: function wwtlib_Layer$getParams() {
        /// <returns type="Array" elementType="Number"></returns>
        return new Array(0);
    },
    
    setParams: function wwtlib_Layer$setParams(paramList) {
        /// <param name="paramList" type="Array" elementType="Number">
        /// </param>
    },
    
    getParamNames: function wwtlib_Layer$getParamNames() {
        /// <returns type="Array" elementType="String"></returns>
        return new Array(0);
    },
    
    cleanUp: function wwtlib_Layer$cleanUp() {
    },
    
    _name: null,
    
    get_name: function wwtlib_Layer$get_name() {
        /// <value type="String"></value>
        return this._name;
    },
    set_name: function wwtlib_Layer$set_name(value) {
        /// <value type="String"></value>
        if (this._name !== value) {
            this.version++;
            this._name = value;
        }
        return value;
    },
    
    toString: function wwtlib_Layer$toString() {
        /// <returns type="String"></returns>
        return this._name;
    },
    
    _referenceFrame: null,
    
    get_referenceFrame: function wwtlib_Layer$get_referenceFrame() {
        /// <value type="String"></value>
        return this._referenceFrame;
    },
    set_referenceFrame: function wwtlib_Layer$set_referenceFrame(value) {
        /// <value type="String"></value>
        this._referenceFrame = value;
        return value;
    },
    
    getProps: function wwtlib_Layer$getProps() {
        /// <returns type="String"></returns>
        return '';
    },
    
    get_color: function wwtlib_Layer$get_color() {
        /// <value type="wwtlib.Color"></value>
        return this._color;
    },
    set_color: function wwtlib_Layer$set_color(value) {
        /// <value type="wwtlib.Color"></value>
        if (this._color !== value) {
            this._color = value;
            this.version++;
            this.cleanUp();
        }
        return value;
    },
    
    get_colorValue: function wwtlib_Layer$get_colorValue() {
        /// <value type="String"></value>
        return this.get_color().toString();
    },
    set_colorValue: function wwtlib_Layer$set_colorValue(value) {
        /// <value type="String"></value>
        this.set_color(wwtlib.Color.fromName(value));
        return value;
    },
    
    _enabled: true,
    
    get_enabled: function wwtlib_Layer$get_enabled() {
        /// <value type="Boolean"></value>
        return this._enabled;
    },
    set_enabled: function wwtlib_Layer$set_enabled(value) {
        /// <value type="Boolean"></value>
        if (this._enabled !== value) {
            this.version++;
            this._enabled = value;
        }
        return value;
    },
    
    astronomical: false,
    
    get_astronomical: function wwtlib_Layer$get_astronomical() {
        /// <value type="Boolean"></value>
        return this.astronomical;
    },
    set_astronomical: function wwtlib_Layer$set_astronomical(value) {
        /// <value type="Boolean"></value>
        if (this.astronomical !== value) {
            this.version++;
            this.astronomical = value;
        }
        return value;
    },
    
    saveToXml: function wwtlib_Layer$saveToXml(xmlWriter) {
        /// <param name="xmlWriter" type="XmlNode">
        /// </param>
    },
    
    initializeFromXml: function wwtlib_Layer$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
    },
    
    _initFromXml: function wwtlib_Layer$_initFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        this.id = wwtlib.Guid.fromString(node.attributes.getNamedItem('Id').nodeValue);
        this.set_name(node.attributes.getNamedItem('Name').nodeValue);
        this._referenceFrame = node.attributes.getNamedItem('ReferenceFrame').nodeValue;
        this._color = wwtlib.Color.load(node.attributes.getNamedItem('Color').nodeValue);
        this._opacity = parseFloat(node.attributes.getNamedItem('Opacity').nodeValue);
        if (node.attributes.getNamedItem('StartTime') != null) {
            this.set_startTime(new Date(node.attributes.getNamedItem('StartTime').nodeValue));
        }
        if (node.attributes.getNamedItem('EndTime') != null) {
            this.set_endTime(new Date(node.attributes.getNamedItem('EndTime').nodeValue));
        }
        if (node.attributes.getNamedItem('FadeSpan') != null) {
            this.set_fadeSpan(wwtlib._util.parseTimeSpan(node.attributes.getNamedItem('FadeSpan').nodeValue));
        }
        if (node.attributes.getNamedItem('FadeType') != null) {
            switch (node.attributes.getNamedItem('FadeType').nodeValue) {
                case 'In':
                    this.set_fadeType(1);
                    break;
                case 'Out':
                    this.set_fadeType(2);
                    break;
                case 'Both':
                    this.set_fadeType(3);
                    break;
                case 'None':
                    this.set_fadeType(4);
                    break;
                default:
                    break;
            }
        }
        this.initializeFromXml(node);
    },
    
    loadData: function wwtlib_Layer$loadData(path) {
        /// <param name="path" type="String">
        /// </param>
        return;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._layerCollection

wwtlib._layerCollection = function wwtlib__layerCollection() {
    wwtlib._layerCollection.initializeBase(this);
}
wwtlib._layerCollection.prototype = {
    
    draw: function wwtlib__layerCollection$draw(renderContext, opacity, flat) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="flat" type="Boolean">
        /// </param>
        /// <returns type="Boolean"></returns>
        return wwtlib._layerCollection.callBaseMethod(this, 'draw', [ renderContext, opacity, false ]);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.DomainValue

wwtlib.DomainValue = function wwtlib_DomainValue(text, markerIndex) {
    /// <param name="text" type="String">
    /// </param>
    /// <param name="markerIndex" type="Number" integer="true">
    /// </param>
    /// <field name="text" type="String">
    /// </field>
    /// <field name="markerIndex" type="Number" integer="true">
    /// </field>
    /// <field name="customMarker" type="Object">
    /// </field>
    this.text = text;
    this.markerIndex = markerIndex;
}
wwtlib.DomainValue.prototype = {
    text: null,
    markerIndex: 4,
    customMarker: null
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LayerManager

wwtlib.LayerManager = function wwtlib_LayerManager() {
    /// <field name="_version" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_tourLayers" type="Boolean" static="true">
    /// </field>
    /// <field name="_layerMaps" type="Object" static="true">
    /// </field>
    /// <field name="_layerMapsTours" type="Object" static="true">
    /// </field>
    /// <field name="_allMaps" type="Object" static="true">
    /// </field>
    /// <field name="_allMapsTours" type="Object" static="true">
    /// </field>
    /// <field name="_currentMap" type="String" static="true">
    /// </field>
    /// <field name="_layerList" type="Object" static="true">
    /// </field>
    /// <field name="_layerListTours" type="Object" static="true">
    /// </field>
}
wwtlib.LayerManager.get_version = function wwtlib_LayerManager$get_version() {
    /// <value type="Number" integer="true"></value>
    return wwtlib.LayerManager._version;
}
wwtlib.LayerManager.set_version = function wwtlib_LayerManager$set_version(value) {
    /// <value type="Number" integer="true"></value>
    wwtlib.LayerManager._version = value;
    return value;
}
wwtlib.LayerManager.get_tourLayers = function wwtlib_LayerManager$get_tourLayers() {
    /// <value type="Boolean"></value>
    return wwtlib.LayerManager._tourLayers;
}
wwtlib.LayerManager.set_tourLayers = function wwtlib_LayerManager$set_tourLayers(value) {
    /// <value type="Boolean"></value>
    if (wwtlib.LayerManager._tourLayers !== value && !value) {
        wwtlib.LayerManager._clearLayers();
        wwtlib.LayerManager._tourLayers = value;
        wwtlib.LayerManager.loadTree();
    }
    else if (wwtlib.LayerManager._tourLayers !== value && !!value) {
        wwtlib.LayerManager._tourLayers = value;
        wwtlib.LayerManager.initLayers();
    }
    return value;
}
wwtlib.LayerManager.loadTree = function wwtlib_LayerManager$loadTree() {
}
wwtlib.LayerManager.get_layerMaps = function wwtlib_LayerManager$get_layerMaps() {
    /// <value type="Object"></value>
    if (wwtlib.LayerManager.get_tourLayers()) {
        return wwtlib.LayerManager._layerMapsTours;
    }
    else {
        return wwtlib.LayerManager._layerMaps;
    }
}
wwtlib.LayerManager.set_layerMaps = function wwtlib_LayerManager$set_layerMaps(value) {
    /// <value type="Object"></value>
    if (wwtlib.LayerManager.get_tourLayers()) {
        wwtlib.LayerManager._layerMapsTours = value;
    }
    else {
        wwtlib.LayerManager._layerMaps = value;
    }
    return value;
}
wwtlib.LayerManager.get_allMaps = function wwtlib_LayerManager$get_allMaps() {
    /// <value type="Object"></value>
    if (wwtlib.LayerManager.get_tourLayers()) {
        return wwtlib.LayerManager._allMapsTours;
    }
    else {
        return wwtlib.LayerManager._allMaps;
    }
}
wwtlib.LayerManager.set_allMaps = function wwtlib_LayerManager$set_allMaps(value) {
    /// <value type="Object"></value>
    if (wwtlib.LayerManager.get_tourLayers()) {
        wwtlib.LayerManager._allMapsTours = value;
    }
    else {
        wwtlib.LayerManager._allMaps = value;
    }
    return value;
}
wwtlib.LayerManager.get_currentMap = function wwtlib_LayerManager$get_currentMap() {
    /// <value type="String"></value>
    return wwtlib.LayerManager._currentMap;
}
wwtlib.LayerManager.set_currentMap = function wwtlib_LayerManager$set_currentMap(value) {
    /// <value type="String"></value>
    wwtlib.LayerManager._currentMap = value;
    return value;
}
wwtlib.LayerManager.get_layerList = function wwtlib_LayerManager$get_layerList() {
    /// <value type="Object"></value>
    if (wwtlib.LayerManager.get_tourLayers()) {
        return wwtlib.LayerManager._layerListTours;
    }
    else {
        return wwtlib.LayerManager._layerList;
    }
}
wwtlib.LayerManager.set_layerList = function wwtlib_LayerManager$set_layerList(value) {
    /// <value type="Object"></value>
    if (wwtlib.LayerManager.get_tourLayers()) {
        wwtlib.LayerManager._layerListTours = value;
    }
    else {
        wwtlib.LayerManager._layerList = value;
    }
    return value;
}
wwtlib.LayerManager.initLayers = function wwtlib_LayerManager$initLayers() {
    wwtlib.LayerManager._clearLayers();
    wwtlib.LayerManager.get_layerMaps()['Sun'] = new wwtlib.LayerMap('Sun', 3);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Mercury'] = new wwtlib.LayerMap('Mercury', 4);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Venus'] = new wwtlib.LayerMap('Venus', 5);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Earth'] = new wwtlib.LayerMap('Earth', 6);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Earth'].childMaps['Moon'] = new wwtlib.LayerMap('Moon', 13);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Mars'] = new wwtlib.LayerMap('Mars', 7);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'] = new wwtlib.LayerMap('Jupiter', 8);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'].childMaps['Io'] = new wwtlib.LayerMap('Io', 14);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'].childMaps['Europa'] = new wwtlib.LayerMap('Europa', 15);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'].childMaps['Ganymede'] = new wwtlib.LayerMap('Ganymede', 16);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'].childMaps['Callisto'] = new wwtlib.LayerMap('Callisto', 17);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Saturn'] = new wwtlib.LayerMap('Saturn', 9);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Uranus'] = new wwtlib.LayerMap('Uranus', 10);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Neptune'] = new wwtlib.LayerMap('Neptune', 11);
    wwtlib.LayerManager.get_layerMaps()['Sun'].childMaps['Pluto'] = new wwtlib.LayerMap('Pluto', 12);
    wwtlib.LayerManager.get_layerMaps()['Sky'] = new wwtlib.LayerMap('Sky', 0);
    wwtlib.LayerManager.get_layerMaps()['Sun'].open = true;
    Object.clearKeys(wwtlib.LayerManager.get_allMaps());
    wwtlib.LayerManager._addAllMaps(wwtlib.LayerManager.get_layerMaps(), null);
    wwtlib.LayerManager._version++;
    wwtlib.LayerManager.loadTree();
}
wwtlib.LayerManager._addAllMaps = function wwtlib_LayerManager$_addAllMaps(maps, parent) {
    /// <param name="maps" type="Object">
    /// </param>
    /// <param name="parent" type="String">
    /// </param>
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(maps));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var map = maps[key];
        map.frame.parent = parent;
        wwtlib.LayerManager.get_allMaps()[map.get_name()] = map;
        wwtlib.LayerManager._addAllMaps(map.childMaps, map.get_name());
    }
}
wwtlib.LayerManager._clearLayers = function wwtlib_LayerManager$_clearLayers() {
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager.get_layerList()));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var layer = wwtlib.LayerManager.get_layerList()[key];
        layer.cleanUp();
    }
    Object.clearKeys(wwtlib.LayerManager.get_layerList());
    Object.clearKeys(wwtlib.LayerManager.get_layerMaps());
}
wwtlib.LayerManager._closeAllTourLoadedLayers = function wwtlib_LayerManager$_closeAllTourLoadedLayers() {
    var purgeTargets = [];
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager.get_layerList()));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var layer = wwtlib.LayerManager.get_layerList()[key];
        if (layer.loadedFromTour) {
            purgeTargets.add(layer.id);
        }
    }
    var $enum2 = ss.IEnumerator.getEnumerator(purgeTargets);
    while ($enum2.moveNext()) {
        var guid = $enum2.current;
        wwtlib.LayerManager.deleteLayerByID(guid, true, false);
    }
    var purgeMapsNames = [];
    var $enum3 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager.get_allMaps()));
    while ($enum3.moveNext()) {
        var key = $enum3.current;
        var map = wwtlib.LayerManager.get_allMaps()[key];
        if (map.loadedFromTour && !map.layers.length) {
            purgeMapsNames.add(map.get_name());
        }
    }
    var $enum4 = ss.IEnumerator.getEnumerator(purgeMapsNames);
    while ($enum4.moveNext()) {
        var name = $enum4.current;
        wwtlib.LayerManager.purgeLayerMapDeep(wwtlib.LayerManager.get_allMaps()[name], true);
    }
    wwtlib.LayerManager.set_version(wwtlib.LayerManager.get_version() + 1) - 1;
    wwtlib.LayerManager.loadTree();
}
wwtlib.LayerManager.purgeLayerMapDeep = function wwtlib_LayerManager$purgeLayerMapDeep(target, topLevel) {
    /// <param name="target" type="wwtlib.LayerMap">
    /// </param>
    /// <param name="topLevel" type="Boolean">
    /// </param>
    var $enum1 = ss.IEnumerator.getEnumerator(target.layers);
    while ($enum1.moveNext()) {
        var layer = $enum1.current;
        wwtlib.LayerManager.deleteLayerByID(layer.id, false, false);
    }
    target.layers.clear();
    var $enum2 = ss.IEnumerator.getEnumerator(Object.keys(target.childMaps));
    while ($enum2.moveNext()) {
        var key = $enum2.current;
        var map = target.childMaps[key];
        wwtlib.LayerManager.purgeLayerMapDeep(map, false);
    }
    Object.clearKeys(target.childMaps);
    if (topLevel) {
        if (!String.isNullOrEmpty(target.frame.parent)) {
            if (Object.keyExists(wwtlib.LayerManager.get_allMaps(), target.frame.parent)) {
                delete wwtlib.LayerManager.get_allMaps()[target.frame.parent].childMaps[target.get_name()];
            }
        }
        else {
            if (Object.keyExists(wwtlib.LayerManager.get_layerMaps(), target.get_name())) {
                delete wwtlib.LayerManager.get_layerMaps()[target.get_name()];
            }
        }
    }
    delete wwtlib.LayerManager.get_allMaps()[target.get_name()];
    wwtlib.LayerManager._version++;
}
wwtlib.LayerManager._cleanAllTourLoadedLayers = function wwtlib_LayerManager$_cleanAllTourLoadedLayers() {
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager.get_layerList()));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var layer = wwtlib.LayerManager.get_layerList()[key];
        if (layer.loadedFromTour) {
            layer.loadedFromTour = false;
        }
    }
}
wwtlib.LayerManager.mergeToursLayers = function wwtlib_LayerManager$mergeToursLayers() {
    wwtlib.LayerManager._tourLayers = false;
    var OverWrite = false;
    var CollisionChecked = false;
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager._allMapsTours));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var map = wwtlib.LayerManager._allMapsTours[key];
        if (!Object.keyExists(wwtlib.LayerManager._allMaps, map.get_name())) {
            var newMap = new wwtlib.LayerMap(map.get_name(), 18);
            newMap.frame = map.frame;
            newMap.loadedFromTour = true;
            wwtlib.LayerManager.get_allMaps()[newMap.get_name()] = newMap;
        }
    }
    wwtlib.LayerManager.connectAllChildren();
    var $enum2 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager._layerListTours));
    while ($enum2.moveNext()) {
        var key = $enum2.current;
        var layer = wwtlib.LayerManager._layerListTours[key];
        if (Object.keyExists(wwtlib.LayerManager.get_layerList(), layer.id)) {
            if (!CollisionChecked) {
                if (true) {
                    OverWrite = true;
                }
                else {
                    OverWrite = false;
                }
                CollisionChecked = true;
            }
            if (OverWrite) {
                wwtlib.LayerManager.deleteLayerByID(layer.id, true, false);
            }
        }
        if (!Object.keyExists(wwtlib.LayerManager.get_layerList(), layer.id)) {
            if (Object.keyExists(wwtlib.LayerManager.get_allMaps(), layer.get_referenceFrame())) {
                wwtlib.LayerManager.get_layerList()[layer.id] = layer;
                wwtlib.LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.add(layer);
            }
        }
        else {
            layer.cleanUp();
        }
    }
    Object.clearKeys(wwtlib.LayerManager._layerListTours);
    Object.clearKeys(wwtlib.LayerManager._allMapsTours);
    Object.clearKeys(wwtlib.LayerManager._layerMapsTours);
    wwtlib.LayerManager.loadTree();
}
wwtlib.LayerManager.connectAllChildren = function wwtlib_LayerManager$connectAllChildren() {
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager.get_allMaps()));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var map = wwtlib.LayerManager.get_allMaps()[key];
        if (String.isNullOrEmpty(map.frame.parent) && !Object.keyExists(wwtlib.LayerManager.get_layerMaps(), map.frame.name)) {
            wwtlib.LayerManager.get_layerMaps()[map.get_name()] = map;
        }
        else if (!String.isNullOrEmpty(map.frame.parent) && Object.keyExists(wwtlib.LayerManager.get_allMaps(), map.frame.parent)) {
            if (!Object.keyExists(wwtlib.LayerManager.get_allMaps()[map.frame.parent].childMaps, map.frame.name)) {
                wwtlib.LayerManager.get_allMaps()[map.frame.parent].childMaps[map.frame.name] = map;
            }
        }
    }
}
wwtlib.LayerManager.deleteLayerByID = function wwtlib_LayerManager$deleteLayerByID(ID, removeFromParent, updateTree) {
    /// <param name="ID" type="wwtlib.Guid">
    /// </param>
    /// <param name="removeFromParent" type="Boolean">
    /// </param>
    /// <param name="updateTree" type="Boolean">
    /// </param>
    /// <returns type="Boolean"></returns>
    if (Object.keyExists(wwtlib.LayerManager.get_layerList(), ID)) {
        var layer = wwtlib.LayerManager.get_layerList()[ID];
        layer.cleanUp();
        if (removeFromParent) {
            wwtlib.LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.remove(layer);
        }
        delete wwtlib.LayerManager.get_layerList()[ID];
        wwtlib.LayerManager._version++;
        if (updateTree) {
            wwtlib.LayerManager.loadTree();
        }
        return true;
    }
    else {
        return false;
    }
}
wwtlib.LayerManager._prepTourLayers = function wwtlib_LayerManager$_prepTourLayers() {
    if (wwtlib.TourPlayer.get_playing()) {
        var player = wwtlib.WWTControl.singleton.uiController;
        if (player != null) {
            var tour = player.get_tour();
            if (tour.get_currentTourStop() != null) {
                player.updateTweenPosition(-1);
                if (!tour.get_currentTourStop().get_keyFramed()) {
                    tour.get_currentTourStop()._updateLayerOpacity();
                    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(tour.get_currentTourStop().layers));
                    while ($enum1.moveNext()) {
                        var key = $enum1.current;
                        var info = tour.get_currentTourStop().layers[key];
                        if (Object.keyExists(wwtlib.LayerManager.get_layerList(), info.id)) {
                            wwtlib.LayerManager.get_layerList()[info.id].set_opacity(info.frameOpacity);
                            wwtlib.LayerManager.get_layerList()[info.id].setParams(info.frameParams);
                        }
                    }
                }
            }
        }
    }
}
wwtlib.LayerManager._draw = function wwtlib_LayerManager$_draw(renderContext, opacity, astronomical, referenceFrame, nested, cosmos) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="astronomical" type="Boolean">
    /// </param>
    /// <param name="referenceFrame" type="String">
    /// </param>
    /// <param name="nested" type="Boolean">
    /// </param>
    /// <param name="cosmos" type="Boolean">
    /// </param>
    if (!Object.keyExists(wwtlib.LayerManager.get_allMaps(), referenceFrame)) {
        return;
    }
    var thisMap = wwtlib.LayerManager.get_allMaps()[referenceFrame];
    if (!thisMap.enabled || (!Object.getKeyCount(thisMap.childMaps) && !thisMap.layers.length && !(thisMap.frame.showAsPoint || thisMap.frame.showOrbitPath))) {
        return;
    }
    if (wwtlib.TourPlayer.get_playing()) {
        var player = wwtlib.WWTControl.singleton.uiController;
        if (player != null) {
            var tour = player.get_tour();
            if (tour.get_currentTourStop() != null) {
                player.updateTweenPosition(-1);
                tour.get_currentTourStop()._updateLayerOpacity();
                var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(tour.get_currentTourStop().layers));
                while ($enum1.moveNext()) {
                    var key = $enum1.current;
                    var info = tour.get_currentTourStop().layers[key];
                    if (Object.keyExists(wwtlib.LayerManager.get_layerList(), info.id)) {
                        wwtlib.LayerManager.get_layerList()[info.id].set_opacity(info.frameOpacity);
                        wwtlib.LayerManager.get_layerList()[info.id].setParams(info.frameParams);
                    }
                }
            }
        }
    }
    var matOld = renderContext.get_world();
    var matOldNonRotating = renderContext.get_worldBaseNonRotating();
    var oldNominalRadius = renderContext.get_nominalRadius();
    if (thisMap.frame.reference === 18) {
        thisMap.computeFrame(renderContext);
        if (thisMap.frame.referenceFrameType !== 1 && thisMap.frame.referenceFrameType !== 2) {
            renderContext.set_world(wwtlib.Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_world()));
        }
        else {
            renderContext.set_world(wwtlib.Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_worldBaseNonRotating()));
        }
        renderContext.set_nominalRadius(thisMap.frame.meanRadius);
    }
    if (thisMap.frame.showAsPoint) {
    }
    for (var pass = 0; pass < 2; pass++) {
        var $enum2 = ss.IEnumerator.getEnumerator(wwtlib.LayerManager.get_allMaps()[referenceFrame].layers);
        while ($enum2.moveNext()) {
            var layer = $enum2.current;
            if ((!pass && Type.canCast(layer, wwtlib.ImageSetLayer)) || (pass === 1 && !(Type.canCast(layer, wwtlib.ImageSetLayer)))) {
                if (layer.get_enabled()) {
                    var layerStart = wwtlib.SpaceTimeController.utcToJulian(layer.get_startTime());
                    var layerEnd = wwtlib.SpaceTimeController.utcToJulian(layer.get_endTime());
                    var fadeIn = wwtlib.SpaceTimeController.utcToJulian(layer.get_startTime()) - ((layer.get_fadeType() === 1 || layer.get_fadeType() === 3) ? (layer.get_fadeSpan() / 864000000) : 0);
                    var fadeOut = wwtlib.SpaceTimeController.utcToJulian(layer.get_endTime()) + ((layer.get_fadeType() === 2 || layer.get_fadeType() === 3) ? (layer.get_fadeSpan() / 864000000) : 0);
                    if (wwtlib.SpaceTimeController.get_jNow() > fadeIn && wwtlib.SpaceTimeController.get_jNow() < fadeOut) {
                        var fadeOpacity = 1;
                        if (wwtlib.SpaceTimeController.get_jNow() < layerStart) {
                            fadeOpacity = ((wwtlib.SpaceTimeController.get_jNow() - fadeIn) / (layer.get_fadeSpan() / 864000000));
                        }
                        if (wwtlib.SpaceTimeController.get_jNow() > layerEnd) {
                            fadeOpacity = ((fadeOut - wwtlib.SpaceTimeController.get_jNow()) / (layer.get_fadeSpan() / 864000000));
                        }
                        layer.set_astronomical(astronomical);
                        layer.draw(renderContext, opacity * fadeOpacity, cosmos);
                    }
                }
            }
        }
    }
    if (nested) {
        var $enum3 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager.get_allMaps()[referenceFrame].childMaps));
        while ($enum3.moveNext()) {
            var key = $enum3.current;
            var map = wwtlib.LayerManager.get_allMaps()[referenceFrame].childMaps[key];
            if (map.frame.showOrbitPath && wwtlib.Settings.get_active().get_solarSystemOrbits()) {
                if (map.frame.referenceFrameType === 1) {
                    if (map.frame.get_orbit() == null) {
                        map.frame.set_orbit(new wwtlib.Orbit(map.frame.get_elements(), 360, map.frame.get_representativeColor(), 1, renderContext.get_nominalRadius()));
                    }
                    var matSaved = renderContext.get_world();
                    renderContext.set_world(wwtlib.Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_worldBaseNonRotating()));
                    map.frame.get_orbit().draw3D(renderContext, 1 * 0.25, wwtlib.Vector3d.create(0, 0, 0));
                    renderContext.set_world(matSaved);
                }
                else if (map.frame.referenceFrameType === 2) {
                }
            }
            if ((map.frame.reference === 18 || map.frame.reference === 19)) {
                wwtlib.LayerManager._draw(renderContext, opacity, astronomical, map.get_name(), nested, cosmos);
            }
        }
    }
    renderContext.set_nominalRadius(oldNominalRadius);
    renderContext.set_world(matOld);
    renderContext.set_worldBaseNonRotating(matOldNonRotating);
}
wwtlib.LayerManager._preDraw = function wwtlib_LayerManager$_preDraw(renderContext, opacity, astronomical, referenceFrame, nested) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="astronomical" type="Boolean">
    /// </param>
    /// <param name="referenceFrame" type="String">
    /// </param>
    /// <param name="nested" type="Boolean">
    /// </param>
    if (!Object.keyExists(wwtlib.LayerManager.get_allMaps(), referenceFrame)) {
        return;
    }
    var thisMap = wwtlib.LayerManager.get_allMaps()[referenceFrame];
    if (!Object.getKeyCount(thisMap.childMaps) && !thisMap.layers.length) {
        return;
    }
    if (wwtlib.TourPlayer.get_playing()) {
        var player = Type.safeCast(wwtlib.WWTControl.singleton.uiController, wwtlib.TourPlayer);
        if (player != null) {
            var tour = player.get_tour();
            if (tour.get_currentTourStop() != null) {
                player.updateTweenPosition(-1);
                tour.get_currentTourStop()._updateLayerOpacity();
                var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(tour.get_currentTourStop().layers));
                while ($enum1.moveNext()) {
                    var key = $enum1.current;
                    var info = tour.get_currentTourStop().layers[key];
                    if (Object.keyExists(wwtlib.LayerManager.get_layerList(), info.id)) {
                        wwtlib.LayerManager.get_layerList()[info.id].set_opacity(info.frameOpacity);
                        wwtlib.LayerManager.get_layerList()[info.id].setParams(info.frameParams);
                    }
                }
            }
        }
    }
    var matOld = renderContext.get_world();
    var matOldNonRotating = renderContext.get_worldBaseNonRotating();
    var oldNominalRadius = renderContext.get_nominalRadius();
    if (thisMap.frame.reference === 18) {
        thisMap.computeFrame(renderContext);
        if (thisMap.frame.referenceFrameType !== 1) {
            renderContext.set_world(wwtlib.Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_world()));
        }
        else {
            renderContext.set_world(wwtlib.Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_worldBaseNonRotating()));
        }
        renderContext.set_nominalRadius(thisMap.frame.meanRadius);
    }
    for (var pass = 0; pass < 2; pass++) {
        var $enum2 = ss.IEnumerator.getEnumerator(wwtlib.LayerManager.get_allMaps()[referenceFrame].layers);
        while ($enum2.moveNext()) {
            var layer = $enum2.current;
            if ((!pass && Type.canCast(layer, wwtlib.ImageSetLayer)) || (pass === 1 && !(Type.canCast(layer, wwtlib.ImageSetLayer)))) {
                if (layer.get_enabled()) {
                    var layerStart = wwtlib.SpaceTimeController.utcToJulian(layer.get_startTime());
                    var layerEnd = wwtlib.SpaceTimeController.utcToJulian(layer.get_endTime());
                    var fadeIn = wwtlib.SpaceTimeController.utcToJulian(layer.get_startTime()) - ((layer.get_fadeType() === 1 || layer.get_fadeType() === 3) ? (layer.get_fadeSpan() / 864000000) : 0);
                    var fadeOut = wwtlib.SpaceTimeController.utcToJulian(layer.get_endTime()) + ((layer.get_fadeType() === 2 || layer.get_fadeType() === 3) ? (layer.get_fadeSpan() / 864000000) : 0);
                    if (wwtlib.SpaceTimeController.get_jNow() > fadeIn && wwtlib.SpaceTimeController.get_jNow() < fadeOut) {
                        var fadeOpacity = 1;
                        if (wwtlib.SpaceTimeController.get_jNow() < layerStart) {
                            fadeOpacity = ((wwtlib.SpaceTimeController.get_jNow() - fadeIn) / (layer.get_fadeSpan() / 864000000));
                        }
                        if (wwtlib.SpaceTimeController.get_jNow() > layerEnd) {
                            fadeOpacity = ((fadeOut - wwtlib.SpaceTimeController.get_jNow()) / (layer.get_fadeSpan() / 864000000));
                        }
                        if (!thisMap.frame.reference) {
                            layer.set_astronomical(true);
                        }
                        layer.preDraw(renderContext, opacity * fadeOpacity);
                    }
                }
            }
        }
    }
    if (nested) {
        var $enum3 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.LayerManager.get_allMaps()[referenceFrame].childMaps));
        while ($enum3.moveNext()) {
            var key = $enum3.current;
            var map = wwtlib.LayerManager.get_allMaps()[referenceFrame].childMaps[key];
            if ((map.frame.reference === 18 || map.frame.reference === 19)) {
                wwtlib.LayerManager._preDraw(renderContext, opacity, astronomical, map.get_name(), nested);
            }
        }
    }
    renderContext.set_nominalRadius(oldNominalRadius);
    renderContext.set_world(matOld);
    renderContext.set_worldBaseNonRotating(matOldNonRotating);
}
wwtlib.LayerManager.add = function wwtlib_LayerManager$add(layer, updateTree) {
    /// <param name="layer" type="wwtlib.Layer">
    /// </param>
    /// <param name="updateTree" type="Boolean">
    /// </param>
    if (!Object.keyExists(wwtlib.LayerManager.get_layerList(), layer.id)) {
        if (Object.keyExists(wwtlib.LayerManager.get_allMaps(), layer.get_referenceFrame())) {
            wwtlib.LayerManager.get_layerList()[layer.id] = layer;
            wwtlib.LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.add(layer);
            wwtlib.LayerManager._version++;
            if (updateTree) {
                wwtlib.LayerManager.loadTree();
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LayerMap

wwtlib.LayerMap = function wwtlib_LayerMap(name, reference) {
    /// <param name="name" type="String">
    /// </param>
    /// <param name="reference" type="wwtlib.ReferenceFrames">
    /// </param>
    /// <field name="childMaps" type="Object">
    /// </field>
    /// <field name="layers" type="Array">
    /// </field>
    /// <field name="open" type="Boolean">
    /// </field>
    /// <field name="enabled" type="Boolean">
    /// </field>
    /// <field name="loadedFromTour" type="Boolean">
    /// </field>
    /// <field name="frame" type="wwtlib.ReferenceFrame">
    /// </field>
    this.childMaps = {};
    this.layers = [];
    this.frame = new wwtlib.ReferenceFrame();
    this.set_name(name);
    this.frame.reference = reference;
    var radius = 6371000;
    switch (reference) {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            radius = 696000000;
            break;
        case 4:
            radius = 2439700;
            break;
        case 5:
            radius = 6051800;
            break;
        case 6:
            radius = 6371000;
            break;
        case 7:
            radius = 3390000;
            break;
        case 8:
            radius = 69911000;
            break;
        case 9:
            radius = 58232000;
            break;
        case 10:
            radius = 25362000;
            break;
        case 11:
            radius = 24622000;
            break;
        case 12:
            radius = 1161000;
            break;
        case 13:
            radius = 1737100;
            break;
        case 14:
            radius = 1821500;
            break;
        case 15:
            radius = 1561000;
            break;
        case 16:
            radius = 2631200;
            break;
        case 17:
            radius = 2410300;
            break;
        case 18:
            break;
        case 19:
            break;
        default:
            break;
    }
    this.frame.meanRadius = radius;
}
wwtlib.LayerMap.prototype = {
    open: false,
    enabled: true,
    loadedFromTour: false,
    
    get_name: function wwtlib_LayerMap$get_name() {
        /// <value type="String"></value>
        return this.frame.name;
    },
    set_name: function wwtlib_LayerMap$set_name(value) {
        /// <value type="String"></value>
        this.frame.name = value;
        return value;
    },
    
    computeFrame: function wwtlib_LayerMap$computeFrame(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        if (this.frame.reference === 18) {
            this.frame.computeFrame(renderContext);
        }
    },
    
    toString: function wwtlib_LayerMap$toString() {
        /// <returns type="String"></returns>
        return this.get_name();
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LayerUI

wwtlib.LayerUI = function wwtlib_LayerUI() {
    /// <field name="_type" type="Type" static="true">
    /// </field>
}
wwtlib.LayerUI.prototype = {
    
    get_hasTreeViewNodes: function wwtlib_LayerUI$get_hasTreeViewNodes() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    getTreeNodes: function wwtlib_LayerUI$getTreeNodes() {
        /// <returns type="Array"></returns>
        return null;
    },
    
    getNodeContextMenu: function wwtlib_LayerUI$getNodeContextMenu(node) {
        /// <param name="node" type="wwtlib.LayerUITreeNode">
        /// </param>
        /// <returns type="Array"></returns>
        return null;
    },
    
    setUICallbacks: function wwtlib_LayerUI$setUICallbacks(callbacks) {
        /// <param name="callbacks" type="wwtlib.IUIServicesCallbacks">
        /// </param>
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LayerUIMenuItem

wwtlib.LayerUIMenuItem = function wwtlib_LayerUIMenuItem() {
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="_tag" type="Object">
    /// </field>
    /// <field name="_isChecked" type="Boolean">
    /// </field>
    /// <field name="_isEnabled" type="Boolean">
    /// </field>
    /// <field name="__menuItemSelected" type="Function">
    /// </field>
    /// <field name="_subMenus" type="Array">
    /// </field>
}
wwtlib.LayerUIMenuItem.prototype = {
    _name: null,
    
    get_name: function wwtlib_LayerUIMenuItem$get_name() {
        /// <value type="String"></value>
        return this._name;
    },
    set_name: function wwtlib_LayerUIMenuItem$set_name(value) {
        /// <value type="String"></value>
        this._name = value;
        return value;
    },
    
    _tag: null,
    
    get_tag: function wwtlib_LayerUIMenuItem$get_tag() {
        /// <value type="Object"></value>
        return this._tag;
    },
    set_tag: function wwtlib_LayerUIMenuItem$set_tag(value) {
        /// <value type="Object"></value>
        this._tag = value;
        return value;
    },
    
    _isChecked: false,
    
    get_checked: function wwtlib_LayerUIMenuItem$get_checked() {
        /// <value type="Boolean"></value>
        return this._isChecked;
    },
    set_checked: function wwtlib_LayerUIMenuItem$set_checked(value) {
        /// <value type="Boolean"></value>
        this._isChecked = value;
        return value;
    },
    
    _isEnabled: true,
    
    get_enabled: function wwtlib_LayerUIMenuItem$get_enabled() {
        /// <value type="Boolean"></value>
        return this._isEnabled;
    },
    set_enabled: function wwtlib_LayerUIMenuItem$set_enabled(value) {
        /// <value type="Boolean"></value>
        this._isEnabled = value;
        return value;
    },
    
    add_menuItemSelected: function wwtlib_LayerUIMenuItem$add_menuItemSelected(value) {
        /// <param name="value" type="Function" />
        this.__menuItemSelected = ss.Delegate.combine(this.__menuItemSelected, value);
    },
    remove_menuItemSelected: function wwtlib_LayerUIMenuItem$remove_menuItemSelected(value) {
        /// <param name="value" type="Function" />
        this.__menuItemSelected = ss.Delegate.remove(this.__menuItemSelected, value);
    },
    
    __menuItemSelected: null,
    
    fireMenuItemSelected: function wwtlib_LayerUIMenuItem$fireMenuItemSelected() {
        if (this.__menuItemSelected != null) {
            this.__menuItemSelected(this);
        }
    },
    
    _subMenus: null,
    
    get_subMenus: function wwtlib_LayerUIMenuItem$get_subMenus() {
        /// <value type="Array"></value>
        if (this._subMenus == null) {
            this._subMenus = [];
        }
        return this._subMenus;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LayerUITreeNode

wwtlib.LayerUITreeNode = function wwtlib_LayerUITreeNode() {
    /// <field name="__nodeChecked" type="Function">
    /// </field>
    /// <field name="__nodeUpdated" type="Function">
    /// </field>
    /// <field name="__nodeSelected" type="Function">
    /// </field>
    /// <field name="__nodeActivated" type="Function">
    /// </field>
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="_parent" type="wwtlib.LayerUITreeNode">
    /// </field>
    /// <field name="_level" type="Number" integer="true">
    /// </field>
    /// <field name="_tag" type="Object">
    /// </field>
    /// <field name="_referenceTag" type="Object">
    /// </field>
    /// <field name="_open" type="Boolean">
    /// </field>
    /// <field name="_isChecked" type="Boolean">
    /// </field>
    /// <field name="_bold" type="Boolean">
    /// </field>
    /// <field name="_color" type="wwtlib.Color">
    /// </field>
    /// <field name="_nodes" type="Array">
    /// </field>
    this._color = wwtlib.Colors.get_white();
}
wwtlib.LayerUITreeNode.prototype = {
    
    add_nodeChecked: function wwtlib_LayerUITreeNode$add_nodeChecked(value) {
        /// <param name="value" type="Function" />
        this.__nodeChecked = ss.Delegate.combine(this.__nodeChecked, value);
    },
    remove_nodeChecked: function wwtlib_LayerUITreeNode$remove_nodeChecked(value) {
        /// <param name="value" type="Function" />
        this.__nodeChecked = ss.Delegate.remove(this.__nodeChecked, value);
    },
    
    __nodeChecked: null,
    
    fireNodeChecked: function wwtlib_LayerUITreeNode$fireNodeChecked() {
        if (this.__nodeChecked != null) {
            this.__nodeChecked(this);
        }
    },
    
    add_nodeUpdated: function wwtlib_LayerUITreeNode$add_nodeUpdated(value) {
        /// <param name="value" type="Function" />
        this.__nodeUpdated = ss.Delegate.combine(this.__nodeUpdated, value);
    },
    remove_nodeUpdated: function wwtlib_LayerUITreeNode$remove_nodeUpdated(value) {
        /// <param name="value" type="Function" />
        this.__nodeUpdated = ss.Delegate.remove(this.__nodeUpdated, value);
    },
    
    __nodeUpdated: null,
    
    fireNodeUpdated: function wwtlib_LayerUITreeNode$fireNodeUpdated() {
        if (this.__nodeUpdated != null) {
            this.__nodeUpdated(this);
        }
    },
    
    add_nodeSelected: function wwtlib_LayerUITreeNode$add_nodeSelected(value) {
        /// <param name="value" type="Function" />
        this.__nodeSelected = ss.Delegate.combine(this.__nodeSelected, value);
    },
    remove_nodeSelected: function wwtlib_LayerUITreeNode$remove_nodeSelected(value) {
        /// <param name="value" type="Function" />
        this.__nodeSelected = ss.Delegate.remove(this.__nodeSelected, value);
    },
    
    __nodeSelected: null,
    
    fireNodeSelected: function wwtlib_LayerUITreeNode$fireNodeSelected() {
        if (this.__nodeSelected != null) {
            this.__nodeSelected(this);
        }
    },
    
    add_nodeActivated: function wwtlib_LayerUITreeNode$add_nodeActivated(value) {
        /// <param name="value" type="Function" />
        this.__nodeActivated = ss.Delegate.combine(this.__nodeActivated, value);
    },
    remove_nodeActivated: function wwtlib_LayerUITreeNode$remove_nodeActivated(value) {
        /// <param name="value" type="Function" />
        this.__nodeActivated = ss.Delegate.remove(this.__nodeActivated, value);
    },
    
    __nodeActivated: null,
    
    fireNodeActivated: function wwtlib_LayerUITreeNode$fireNodeActivated() {
        if (this.__nodeActivated != null) {
            this.__nodeActivated(this);
        }
    },
    
    _name: null,
    
    get_name: function wwtlib_LayerUITreeNode$get_name() {
        /// <value type="String"></value>
        return this._name;
    },
    set_name: function wwtlib_LayerUITreeNode$set_name(value) {
        /// <value type="String"></value>
        if (this._name !== value) {
            this._name = value;
            this.fireNodeUpdated();
        }
        return value;
    },
    
    _parent: null,
    
    get_parent: function wwtlib_LayerUITreeNode$get_parent() {
        /// <value type="wwtlib.LayerUITreeNode"></value>
        return this._parent;
    },
    set_parent: function wwtlib_LayerUITreeNode$set_parent(value) {
        /// <value type="wwtlib.LayerUITreeNode"></value>
        this._parent = value;
        return value;
    },
    
    _level: 0,
    
    get_level: function wwtlib_LayerUITreeNode$get_level() {
        /// <value type="Number" integer="true"></value>
        return this._level;
    },
    set_level: function wwtlib_LayerUITreeNode$set_level(value) {
        /// <value type="Number" integer="true"></value>
        this._level = value;
        return value;
    },
    
    _tag: null,
    
    get_tag: function wwtlib_LayerUITreeNode$get_tag() {
        /// <value type="Object"></value>
        return this._tag;
    },
    set_tag: function wwtlib_LayerUITreeNode$set_tag(value) {
        /// <value type="Object"></value>
        this._tag = value;
        return value;
    },
    
    _referenceTag: null,
    
    get_referenceTag: function wwtlib_LayerUITreeNode$get_referenceTag() {
        /// <value type="Object"></value>
        return this._referenceTag;
    },
    set_referenceTag: function wwtlib_LayerUITreeNode$set_referenceTag(value) {
        /// <value type="Object"></value>
        this._referenceTag = value;
        return value;
    },
    
    _open: false,
    
    get_opened: function wwtlib_LayerUITreeNode$get_opened() {
        /// <value type="Boolean"></value>
        return this._open;
    },
    set_opened: function wwtlib_LayerUITreeNode$set_opened(value) {
        /// <value type="Boolean"></value>
        if (this._open !== value) {
            this._open = value;
            this.fireNodeUpdated();
        }
        return value;
    },
    
    _isChecked: false,
    
    get_checked: function wwtlib_LayerUITreeNode$get_checked() {
        /// <value type="Boolean"></value>
        return this._isChecked;
    },
    set_checked: function wwtlib_LayerUITreeNode$set_checked(value) {
        /// <value type="Boolean"></value>
        if (this._isChecked !== value) {
            this._isChecked = value;
            this.fireNodeUpdated();
        }
        return value;
    },
    
    _bold: false,
    
    get_bold: function wwtlib_LayerUITreeNode$get_bold() {
        /// <value type="Boolean"></value>
        return this._bold;
    },
    set_bold: function wwtlib_LayerUITreeNode$set_bold(value) {
        /// <value type="Boolean"></value>
        if (this._bold !== value) {
            this._bold = value;
            this.fireNodeUpdated();
        }
        return value;
    },
    
    get_color: function wwtlib_LayerUITreeNode$get_color() {
        /// <value type="wwtlib.Color"></value>
        return this._color;
    },
    set_color: function wwtlib_LayerUITreeNode$set_color(value) {
        /// <value type="wwtlib.Color"></value>
        if (this._color !== value) {
            this._color = value;
            this.fireNodeUpdated();
        }
        return value;
    },
    
    add: function wwtlib_LayerUITreeNode$add(name) {
        /// <param name="name" type="String">
        /// </param>
        /// <returns type="wwtlib.LayerUITreeNode"></returns>
        var node = new wwtlib.LayerUITreeNode();
        node.set_name(name);
        node.set_parent(this);
        node.set_level(this.get_level() + 1);
        this.get_nodes().add(node);
        return node;
    },
    
    _nodes: null,
    
    get_nodes: function wwtlib_LayerUITreeNode$get_nodes() {
        /// <value type="Array"></value>
        if (this._nodes == null) {
            this._nodes = [];
        }
        return this._nodes;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Orbit

wwtlib.Orbit = function wwtlib_Orbit(elements, segments, color, thickness, scale) {
    /// <param name="elements" type="EOE">
    /// </param>
    /// <param name="segments" type="Number" integer="true">
    /// </param>
    /// <param name="color" type="wwtlib.Color">
    /// </param>
    /// <param name="thickness" type="Number">
    /// </param>
    /// <param name="scale" type="Number">
    /// </param>
    /// <field name="_elements" type="EOE">
    /// </field>
    /// <field name="_orbitColor" type="wwtlib.Color">
    /// </field>
    /// <field name="_scale" type="Number">
    /// </field>
    /// <field name="_initBegun" type="Boolean" static="true">
    /// </field>
    /// <field name="_segmentCount" type="Number" integer="true">
    /// </field>
    this._orbitColor = wwtlib.Colors.get_white();
    this._elements = elements;
    this._segmentCount = segments;
    this._orbitColor = color;
    this._scale = scale;
}
wwtlib.Orbit.prototype = {
    _elements: null,
    _scale: 0,
    
    cleanUp: function wwtlib_Orbit$cleanUp() {
    },
    
    initVertexBuffer: function wwtlib_Orbit$initVertexBuffer(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
    },
    
    draw3D: function wwtlib_Orbit$draw3D(renderContext, opacity, centerPoint) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="centerPoint" type="wwtlib.Vector3d">
        /// </param>
    },
    
    _segmentCount: 0
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ReferenceFrame

wwtlib.ReferenceFrame = function wwtlib_ReferenceFrame() {
    /// <field name="position" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="meanAnomoly" type="Number">
    /// </field>
    /// <field name="worldMatrix" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="orbitalYears" type="Number">
    /// </field>
    /// <field name="name" type="String">
    /// </field>
    /// <field name="parent" type="String">
    /// </field>
    /// <field name="reference" type="wwtlib.ReferenceFrames">
    /// </field>
    /// <field name="parentsRoationalBase" type="Boolean">
    /// </field>
    /// <field name="referenceFrameType" type="wwtlib.ReferenceFrameTypes">
    /// </field>
    /// <field name="meanRadius" type="Number">
    /// </field>
    /// <field name="oblateness" type="Number">
    /// </field>
    /// <field name="heading" type="Number">
    /// </field>
    /// <field name="pitch" type="Number">
    /// </field>
    /// <field name="roll" type="Number">
    /// </field>
    /// <field name="scale" type="Number">
    /// </field>
    /// <field name="tilt" type="Number">
    /// </field>
    /// <field name="translation" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="lat" type="Number">
    /// </field>
    /// <field name="lng" type="Number">
    /// </field>
    /// <field name="altitude" type="Number">
    /// </field>
    /// <field name="rotationalPeriod" type="Number">
    /// </field>
    /// <field name="zeroRotationDate" type="Number">
    /// </field>
    /// <field name="representativeColor" type="wwtlib.Color">
    /// </field>
    /// <field name="showAsPoint" type="Boolean">
    /// </field>
    /// <field name="showOrbitPath" type="Boolean">
    /// </field>
    /// <field name="stationKeeping" type="Boolean">
    /// </field>
    /// <field name="semiMajorAxis" type="Number">
    /// </field>
    /// <field name="semiMajorAxisUnits" type="wwtlib.AltUnits">
    /// </field>
    /// <field name="eccentricity" type="Number">
    /// </field>
    /// <field name="inclination" type="Number">
    /// </field>
    /// <field name="argumentOfPeriapsis" type="Number">
    /// </field>
    /// <field name="longitudeOfAscendingNode" type="Number">
    /// </field>
    /// <field name="meanAnomolyAtEpoch" type="Number">
    /// </field>
    /// <field name="meanDailyMotion" type="Number">
    /// </field>
    /// <field name="epoch" type="Number">
    /// </field>
    /// <field name="_orbit" type="wwtlib.Orbit">
    /// </field>
    /// <field name="_elements" type="EOE">
    /// </field>
    this.reference = 18;
    this.referenceFrameType = 0;
    this.representativeColor = wwtlib.Colors.get_white();
    this.semiMajorAxisUnits = 1;
    this._elements = new EOE();
}
wwtlib.ReferenceFrame.isTLECheckSumGood = function wwtlib_ReferenceFrame$isTLECheckSumGood(line) {
    /// <param name="line" type="String">
    /// </param>
    /// <returns type="Boolean"></returns>
    if (line.length !== 69) {
        return false;
    }
    var checksum = 0;
    for (var i = 0; i < 68; i++) {
        switch (line.substr(i, 1)) {
            case '1':
                checksum += 1;
                break;
            case '2':
                checksum += 2;
                break;
            case '3':
                checksum += 3;
                break;
            case '4':
                checksum += 4;
                break;
            case '5':
                checksum += 5;
                break;
            case '6':
                checksum += 6;
                break;
            case '7':
                checksum += 7;
                break;
            case '8':
                checksum += 8;
                break;
            case '9':
                checksum += 9;
                break;
            case '-':
                checksum += 1;
                break;
        }
    }
    return ('0' + (checksum % 10)) === line.charAt(68);
}
wwtlib.ReferenceFrame.prototype = {
    position: null,
    meanAnomoly: 0,
    worldMatrix: null,
    orbitalYears: 0,
    name: null,
    parent: null,
    parentsRoationalBase: false,
    meanRadius: 6371000,
    oblateness: 0.0033528,
    heading: 0,
    pitch: 0,
    roll: 0,
    scale: 1,
    tilt: 0,
    translation: null,
    lat: 0,
    lng: 0,
    altitude: 0,
    rotationalPeriod: 0,
    zeroRotationDate: 0,
    
    get_representativeColor: function wwtlib_ReferenceFrame$get_representativeColor() {
        /// <value type="wwtlib.Color"></value>
        return this.representativeColor;
    },
    set_representativeColor: function wwtlib_ReferenceFrame$set_representativeColor(value) {
        /// <value type="wwtlib.Color"></value>
        if (value !== this.representativeColor) {
            this.representativeColor = value;
            this._orbit = null;
        }
        return value;
    },
    
    showAsPoint: false,
    showOrbitPath: false,
    stationKeeping: true,
    semiMajorAxis: 0,
    eccentricity: 0,
    inclination: 0,
    argumentOfPeriapsis: 0,
    longitudeOfAscendingNode: 0,
    meanAnomolyAtEpoch: 0,
    meanDailyMotion: 0,
    epoch: 0,
    _orbit: null,
    
    get_orbit: function wwtlib_ReferenceFrame$get_orbit() {
        /// <value type="wwtlib.Orbit"></value>
        return this._orbit;
    },
    set_orbit: function wwtlib_ReferenceFrame$set_orbit(value) {
        /// <value type="wwtlib.Orbit"></value>
        this._orbit = value;
        return value;
    },
    
    importTrajectory: function wwtlib_ReferenceFrame$importTrajectory(filename) {
        /// <param name="filename" type="String">
        /// </param>
    },
    
    initializeFromXml: function wwtlib_ReferenceFrame$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        this.name = node.attributes.getNamedItem('Name').nodeValue;
        this.parent = node.attributes.getNamedItem('Parent').nodeValue;
        switch (node.attributes.getNamedItem('ReferenceFrameType').nodeValue) {
            case 'FixedSherical':
                this.referenceFrameType = 0;
                break;
            case 'Orbital':
                this.referenceFrameType = 1;
                break;
            case 'Trajectory':
                this.referenceFrameType = 2;
                break;
            default:
                break;
        }
        switch (node.attributes.getNamedItem('Reference').nodeValue) {
            case 'Sky':
                this.reference = 0;
                break;
            case 'Ecliptic':
                this.reference = 1;
                break;
            case 'Galactic':
                this.reference = 2;
                break;
            case 'Sun':
                this.reference = 3;
                break;
            case 'Mercury':
                this.reference = 4;
                break;
            case 'Venus':
                this.reference = 5;
                break;
            case 'Earth':
                this.reference = 6;
                break;
            case 'Mars':
                this.reference = 7;
                break;
            case 'Jupiter':
                this.reference = 8;
                break;
            case 'Saturn':
                this.reference = 9;
                break;
            case 'Uranus':
                this.reference = 10;
                break;
            case 'Neptune':
                this.reference = 11;
                break;
            case 'Pluto':
                this.reference = 12;
                break;
            case 'Moon':
                this.reference = 13;
                break;
            case 'Io':
                this.reference = 14;
                break;
            case 'Europa':
                this.reference = 15;
                break;
            case 'Ganymede':
                this.reference = 16;
                break;
            case 'Callisto':
                this.reference = 17;
                break;
            case 'Custom':
                this.reference = 18;
                break;
            case 'Identity':
                this.reference = 19;
                break;
            default:
                break;
        }
        this.parentsRoationalBase = Boolean.parse(node.attributes.getNamedItem('ParentsRoationalBase').nodeValue);
        this.meanRadius = parseFloat(node.attributes.getNamedItem('MeanRadius').nodeValue);
        this.oblateness = parseFloat(node.attributes.getNamedItem('Oblateness').nodeValue);
        this.heading = parseFloat(node.attributes.getNamedItem('Heading').nodeValue);
        this.pitch = parseFloat(node.attributes.getNamedItem('Pitch').nodeValue);
        this.roll = parseFloat(node.attributes.getNamedItem('Roll').nodeValue);
        this.scale = parseFloat(node.attributes.getNamedItem('Scale').nodeValue);
        this.tilt = parseFloat(node.attributes.getNamedItem('Tilt').nodeValue);
        this.translation = wwtlib.Vector3d.parse(node.attributes.getNamedItem('Translation').nodeValue);
        if (!this.referenceFrameType) {
            this.lat = parseFloat(node.attributes.getNamedItem('Lat').nodeValue);
            this.lng = parseFloat(node.attributes.getNamedItem('Lng').nodeValue);
            this.altitude = parseFloat(node.attributes.getNamedItem('Altitude').nodeValue);
        }
        this.rotationalPeriod = parseFloat(node.attributes.getNamedItem('RotationalPeriod').nodeValue);
        this.zeroRotationDate = parseFloat(node.attributes.getNamedItem('ZeroRotationDate').nodeValue);
        this.set_representativeColor(wwtlib.Color.load(node.attributes.getNamedItem('RepresentativeColor').nodeValue));
        this.showAsPoint = Boolean.parse(node.attributes.getNamedItem('ShowAsPoint').nodeValue);
        if (node.attributes.getNamedItem('StationKeeping') != null) {
            this.stationKeeping = Boolean.parse(node.attributes.getNamedItem('StationKeeping').nodeValue);
        }
        if (this.referenceFrameType === 1) {
            this.showOrbitPath = Boolean.parse(node.attributes.getNamedItem('ShowOrbitPath').nodeValue);
            this.semiMajorAxis = parseFloat(node.attributes.getNamedItem('SemiMajorAxis').nodeValue);
            switch (node.attributes.getNamedItem('SemiMajorAxisScale').nodeValue) {
                case 'Meters':
                    this.semiMajorAxisUnits = 1;
                    break;
                case 'Feet':
                    this.semiMajorAxisUnits = 2;
                    break;
                case 'Inches':
                    this.semiMajorAxisUnits = 3;
                    break;
                case 'Miles':
                    this.semiMajorAxisUnits = 4;
                    break;
                case 'Kilometers':
                    this.semiMajorAxisUnits = 5;
                    break;
                case 'AstronomicalUnits':
                    this.semiMajorAxisUnits = 6;
                    break;
                case 'LightYears':
                    this.semiMajorAxisUnits = 7;
                    break;
                case 'Parsecs':
                    this.semiMajorAxisUnits = 8;
                    break;
                case 'MegaParsecs':
                    this.semiMajorAxisUnits = 9;
                    break;
                case 'Custom':
                    this.semiMajorAxisUnits = 10;
                    break;
                default:
                    break;
            }
            this.eccentricity = parseFloat(node.attributes.getNamedItem('Eccentricity').nodeValue);
            this.inclination = parseFloat(node.attributes.getNamedItem('Inclination').nodeValue);
            this.argumentOfPeriapsis = parseFloat(node.attributes.getNamedItem('ArgumentOfPeriapsis').nodeValue);
            this.longitudeOfAscendingNode = parseFloat(node.attributes.getNamedItem('LongitudeOfAscendingNode').nodeValue);
            this.meanAnomolyAtEpoch = parseFloat(node.attributes.getNamedItem('MeanAnomolyAtEpoch').nodeValue);
            this.meanDailyMotion = parseFloat(node.attributes.getNamedItem('MeanDailyMotion').nodeValue);
            this.epoch = parseFloat(node.attributes.getNamedItem('Epoch').nodeValue);
        }
    },
    
    fromTLE: function wwtlib_ReferenceFrame$fromTLE(line1, line2, gravity) {
        /// <param name="line1" type="String">
        /// </param>
        /// <param name="line2" type="String">
        /// </param>
        /// <param name="gravity" type="Number">
        /// </param>
        this.epoch = wwtlib.SpaceTimeController._twoLineDateToJulian(line1.substr(18, 14));
        this.eccentricity = parseFloat('0.' + line2.substr(26, 7));
        this.inclination = parseFloat(line2.substr(8, 8));
        this.longitudeOfAscendingNode = parseFloat(line2.substr(17, 8));
        this.argumentOfPeriapsis = parseFloat(line2.substr(34, 8));
        var revs = parseFloat(line2.substr(52, 11));
        this.meanAnomolyAtEpoch = parseFloat(line2.substr(43, 8));
        this.meanDailyMotion = revs * 360;
        var part = (86400 / revs) / (Math.PI * 2);
        this.semiMajorAxis = Math.pow((part * part) * gravity, 1 / 3);
        this.semiMajorAxisUnits = 1;
    },
    
    get_elements: function wwtlib_ReferenceFrame$get_elements() {
        /// <value type="EOE"></value>
        this._elements.a = this.semiMajorAxis;
        this._elements.e = this.eccentricity;
        this._elements.i = this.inclination;
        this._elements.w = this.argumentOfPeriapsis;
        this._elements.omega = this.longitudeOfAscendingNode;
        this._elements.jdEquinox = this.epoch;
        if (!this.meanDailyMotion) {
            this._elements.n = ELL.meanMotionFromSemiMajorAxis(this._elements.a);
        }
        else {
            this._elements.n = this.meanDailyMotion;
        }
        this._elements.t = this.epoch - (this.meanAnomolyAtEpoch / this._elements.n);
        return this._elements;
    },
    set_elements: function wwtlib_ReferenceFrame$set_elements(value) {
        /// <value type="EOE"></value>
        this._elements = value;
        return value;
    },
    
    computeFrame: function wwtlib_ReferenceFrame$computeFrame(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        switch (this.referenceFrameType) {
            case 1:
                this._computeOrbital(renderContext);
                break;
            case 0:
                this._computeFixedSherical(renderContext);
                break;
            case 2:
                this._computeFrameTrajectory(renderContext);
                break;
            default:
                break;
        }
    },
    
    _computeFixedRectangular: function wwtlib_ReferenceFrame$_computeFixedRectangular(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
    },
    
    _computeFixedSherical: function wwtlib_ReferenceFrame$_computeFixedSherical(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
    },
    
    _computeFrameTrajectory: function wwtlib_ReferenceFrame$_computeFrameTrajectory(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
    },
    
    _computeOrbital: function wwtlib_ReferenceFrame$_computeOrbital(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._spreadSheetLayer

wwtlib._spreadSheetLayer = function wwtlib__spreadSheetLayer() {
    /// <field name="_dataDirty$2" type="Boolean">
    /// </field>
    /// <field name="_fileName$2" type="String">
    /// </field>
    /// <field name="_barChartBitmask$2" type="Number" integer="true">
    /// </field>
    /// <field name="_barScaleFactor$2" type="Number">
    /// </field>
    /// <field name="_meanRadius$2" type="Number">
    /// </field>
    /// <field name="_table$2" type="wwtlib._table">
    /// </field>
    this._table$2 = new wwtlib._table();
    wwtlib._spreadSheetLayer.initializeBase(this);
}
wwtlib._spreadSheetLayer._getDatafromFeed$2 = function wwtlib__spreadSheetLayer$_getDatafromFeed$2(url) {
    /// <param name="url" type="String">
    /// </param>
    /// <returns type="String"></returns>
    return '';
}
wwtlib._spreadSheetLayer._executeQuery$2 = function wwtlib__spreadSheetLayer$_executeQuery$2(url) {
    /// <param name="url" type="String">
    /// </param>
    /// <returns type="String"></returns>
    return '';
}
wwtlib._spreadSheetLayer.parseDate = function wwtlib__spreadSheetLayer$parseDate(date) {
    /// <param name="date" type="String">
    /// </param>
    /// <returns type="Date"></returns>
    var dt = Date.get_now();
    try {
        dt = new Date(date);
    }
    catch ($e1) {
        try {
            return wwtlib._spreadSheetLayer.execlToDateTime(parseFloat(date));
        }
        catch ($e2) {
        }
    }
    return dt;
}
wwtlib._spreadSheetLayer.execlToDateTime = function wwtlib__spreadSheetLayer$execlToDateTime(excelDate) {
    /// <param name="excelDate" type="Number">
    /// </param>
    /// <returns type="Date"></returns>
    if (excelDate > 59) {
        excelDate -= 1;
    }
    if (excelDate > 730000) {
        excelDate = 730000;
    }
    var es = new Date(1899, 12, 31);
    return new Date(es.getDate() + parseInt((excelDate * 24 * 60 * 60 * 1000)));
}
wwtlib._spreadSheetLayer.prototype = {
    
    get_header: function wwtlib__spreadSheetLayer$get_header() {
        /// <value type="Array"></value>
        return this._table$2.header;
    },
    
    canCopyToClipboard: function wwtlib__spreadSheetLayer$canCopyToClipboard() {
        /// <returns type="Boolean"></returns>
        return true;
    },
    
    copyToClipboard: function wwtlib__spreadSheetLayer$copyToClipboard() {
    },
    
    _dataDirty$2: false,
    
    dynamicUpdate: function wwtlib__spreadSheetLayer$dynamicUpdate() {
        /// <returns type="Boolean"></returns>
        var data = wwtlib._spreadSheetLayer._getDatafromFeed$2(this.get_dataSourceUrl());
        if (data != null) {
            this.upadteData(data, false, true, true);
            this.guessHeaderAssignments();
            return true;
        }
        return false;
    },
    
    upadteData: function wwtlib__spreadSheetLayer$upadteData(data, purgeOld, purgeAll, hasHeader) {
        /// <param name="data" type="Object">
        /// </param>
        /// <param name="purgeOld" type="Boolean">
        /// </param>
        /// <param name="purgeAll" type="Boolean">
        /// </param>
        /// <param name="hasHeader" type="Boolean">
        /// </param>
        /// <returns type="Boolean"></returns>
        this.loadFromString(Type.safeCast(data, String), true, purgeOld, purgeAll, hasHeader);
        this.computeDateDomainRange(-1, -1);
        this._dataDirty$2 = true;
        return true;
    },
    
    loadData: function wwtlib__spreadSheetLayer$loadData(path) {
        /// <param name="path" type="String">
        /// </param>
        this._table$2 = new wwtlib._table();
        var xhr = new XMLHttpRequest();
        xhr.open('GET', path);
        xhr.onreadystatechange = ss.Delegate.create(this, function() {
            if (xhr.readyState === 4) {
                this._table$2.loadFromString(xhr.responseText, false, true, true);
                this.computeDateDomainRange(-1, -1);
                if (this.get_dynamicData() && this.get_autoUpdate()) {
                    this.dynamicUpdate();
                }
                this._dataDirty$2 = true;
                this.dirty = true;
            }
        });
        xhr.send();
    },
    
    _fileName$2: null,
    
    guessHeaderAssignments: function wwtlib__spreadSheetLayer$guessHeaderAssignments() {
        var index = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this._table$2.header);
        while ($enum1.moveNext()) {
            var headerName = $enum1.current;
            var name = headerName.toLowerCase();
            if (name.indexOf('lat') > -1 && this.latColumn === -1) {
                this.latColumn = index;
            }
            if ((name.indexOf('lon') > -1 || name.indexOf('lng') > -1) && this.lngColumn === -1) {
                this.lngColumn = index;
            }
            if (name.indexOf('dec') > -1 && this.latColumn === -1) {
                this.latColumn = index;
                this.astronomical = true;
            }
            if ((name.indexOf('ra') > -1 || name.indexOf('ascen') > -1) && this.lngColumn === -1) {
                this.lngColumn = index;
                this.astronomical = true;
                this.pointScaleType = 4;
            }
            if ((name.indexOf('mag') > -1 || name.indexOf('size') > -1) && this.sizeColumn === -1) {
                this.sizeColumn = index;
            }
            if ((name.indexOf('date') > -1 || name.indexOf('time') > -1 || name.indexOf('dt') > -1 || name.indexOf('tm') > -1)) {
                if (name.indexOf('end') > -1 && this.endDateColumn === -1) {
                    this.endDateColumn = index;
                }
                else if (this.startDateColumn === -1) {
                    this.startDateColumn = index;
                }
            }
            if ((name.indexOf('altitude') > -1 || name.indexOf('alt') > -1) && this.altColumn === -1) {
                this.altColumn = index;
                this.set_altType(1);
                this.set_altUnit(1);
            }
            if (name.indexOf('depth') > -1 && this.altColumn === -1) {
                this.altColumn = index;
                this.set_altType(0);
                this.set_altUnit(5);
            }
            if (name.startsWith('x') && this.get_xAxisColumn() === -1) {
                this.set_xAxisColumn(index);
            }
            if (name.startsWith('y') && this.get_yAxisColumn() === -1) {
                this.set_yAxisColumn(index);
            }
            if (name.startsWith('z') && this.get_zAxisColumn() === -1) {
                this.set_zAxisColumn(index);
            }
            if (name.indexOf('color') > -1 && this.get_colorMapColumn() === -1) {
                this.set_colorMapColumn(index);
            }
            if ((name.indexOf('geometry') > -1 || name.indexOf('geography') > -1) && this.geometryColumn === -1) {
                this.geometryColumn = index;
            }
            index++;
        }
        if (this._table$2.header.length > 0) {
            this.nameColumn = 0;
        }
    },
    
    computeDateDomainRange: function wwtlib__spreadSheetLayer$computeDateDomainRange(columnStart, columnEnd) {
        /// <param name="columnStart" type="Number" integer="true">
        /// </param>
        /// <param name="columnEnd" type="Number" integer="true">
        /// </param>
        if (columnStart === -1) {
            columnStart = this.startDateColumn;
        }
        if (columnEnd === -1) {
            columnEnd = this.endDateColumn;
        }
        if (columnEnd === -1) {
            columnEnd = columnStart;
        }
        this.set_beginRange(new Date('12/31/2100'));
        this.set_endRange(new Date('12/31/1890'));
        var $enum1 = ss.IEnumerator.getEnumerator(this._table$2.rows);
        while ($enum1.moveNext()) {
            var row = $enum1.current;
            try {
                if (columnStart > -1) {
                    var sucsess = false;
                    var dateTimeStart = new Date('12/31/2100');
                    try {
                        dateTimeStart = new Date(row[columnStart]);
                        if (dateTimeStart < this.get_beginRange()) {
                            this.set_beginRange(dateTimeStart);
                        }
                    }
                    catch ($e2) {
                    }
                    try {
                        var dateTimeEnd = new Date('12/31/1890');
                        if (columnEnd > -1) {
                            dateTimeEnd = new Date(row[columnEnd]);
                            if (sucsess && dateTimeEnd > this.get_endRange()) {
                                this.set_endRange(dateTimeEnd);
                            }
                        }
                    }
                    catch ($e3) {
                    }
                }
            }
            catch ($e4) {
            }
        }
    },
    
    checkState: function wwtlib__spreadSheetLayer$checkState() {
    },
    
    getMaxValue: function wwtlib__spreadSheetLayer$getMaxValue(column) {
        /// <param name="column" type="Number" integer="true">
        /// </param>
        /// <returns type="Number"></returns>
        var max = 0;
        this._table$2.lock();
        var $enum1 = ss.IEnumerator.getEnumerator(this._table$2.rows);
        while ($enum1.moveNext()) {
            var row = $enum1.current;
            try {
                if (column > -1) {
                    var sucsess = false;
                    try {
                        var val = parseFloat(row[column]);
                        if (sucsess && val > max) {
                            max = val;
                        }
                    }
                    catch ($e2) {
                    }
                }
            }
            catch ($e3) {
            }
        }
        this._table$2.unlock();
        return max;
    },
    
    getDomainValues: function wwtlib__spreadSheetLayer$getDomainValues(column) {
        /// <param name="column" type="Number" integer="true">
        /// </param>
        /// <returns type="Array"></returns>
        var domainValues = [];
        this._table$2.lock();
        var $enum1 = ss.IEnumerator.getEnumerator(this._table$2.rows);
        while ($enum1.moveNext()) {
            var row = $enum1.current;
            try {
                if (column > -1) {
                    if (!domainValues.contains(row[column])) {
                        domainValues.add(row[column]);
                    }
                }
            }
            catch ($e2) {
            }
        }
        domainValues.sort();
        this._table$2.unlock();
        return domainValues;
    },
    
    _barChartBitmask$2: 0,
    
    get_barChartBitmask: function wwtlib__spreadSheetLayer$get_barChartBitmask() {
        /// <value type="Number" integer="true"></value>
        return this._barChartBitmask$2;
    },
    set_barChartBitmask: function wwtlib__spreadSheetLayer$set_barChartBitmask(value) {
        /// <value type="Number" integer="true"></value>
        this._barChartBitmask$2 = value;
        return value;
    },
    
    _barScaleFactor$2: 20,
    _meanRadius$2: 6371000,
    
    prepVertexBuffer: function wwtlib__spreadSheetLayer$prepVertexBuffer(renderContext, opacity) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        this._table$2.lock();
        if (this.lineList != null) {
            this.lineList.clear();
        }
        if (this.lineList2d != null) {
            this.lineList2d.clear();
        }
        if (this.triangleList != null) {
            this.triangleList.clear();
        }
        if (this.pointList != null) {
            this.pointList.clear();
        }
        if (this.triangleList2d != null) {
            this.triangleList2d.clear();
        }
        if (this.lineList == null) {
            this.lineList = new wwtlib.LineList();
        }
        if (this.pointList == null) {
            this.pointList = new wwtlib.PointList(renderContext);
        }
        this.lineList.timeSeries = this.timeSeries;
        if (this.lineList2d == null) {
            this.lineList2d = new wwtlib.LineList();
            this.lineList2d.set_depthBuffered(false);
        }
        this.lineList.timeSeries = this.timeSeries;
        if (this.triangleList == null) {
            this.triangleList = new wwtlib.TriangleList();
        }
        if (this.triangleList2d == null) {
            this.triangleList2d = new wwtlib.TriangleList();
            this.triangleList2d.depthBuffered = false;
        }
        this.positions.clear();
        var currentIndex = 0;
        var colorLocal = this.get_color();
        var ecliptic = wwtlib.Coordinates.meanObliquityOfEcliptic(wwtlib.SpaceTimeController.get_jNow()) / 180 * Math.PI;
        var selectDomain = {};
        var mr = 0;
        if (!!mr) {
            this._meanRadius$2 = mr;
        }
        var position = new wwtlib.Vector3d();
        var pointSize = 0.0002;
        var pointColor = wwtlib.Colors.get_white();
        var pointStartTime = 0;
        var pointEndTime = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this._table$2.rows);
        while ($enum1.moveNext()) {
            var row = $enum1.current;
            try {
                var selected = false;
                if (this.geometryColumn > -1 || (!this.get_coordinatesType() && (this.lngColumn > -1 && this.latColumn > -1)) || ((this.get_coordinatesType() === 1) && (this.get_xAxisColumn() > -1 && this.get_yAxisColumn() > -1))) {
                    var Xcoord = 0;
                    var Ycoord = 0;
                    var Zcoord = 0;
                    var alt = 1;
                    var altitude = 0;
                    var distParces = 0;
                    var factor = this.getScaleFactor(this.get_altUnit(), 1);
                    if (this.altColumn === -1 || this.get_altType() === 3 || this.bufferIsFlat) {
                        alt = 1;
                        if ((this.astronomical & !this.bufferIsFlat) === 1) {
                            alt = 63239.6717 * 100;
                        }
                    }
                    else {
                        if (!this.get_altType()) {
                            factor = -factor;
                        }
                        alt = 0;
                        try {
                            alt = parseFloat(row[this.altColumn]);
                        }
                        catch ($e2) {
                        }
                        if (this.astronomical) {
                            factor = factor / (1000 * 149598000);
                            distParces = (alt * factor) / 206264.806;
                            altitude = (factor * alt);
                            alt = (factor * alt);
                        }
                        else if (this.get_altType() === 2) {
                            altitude = (factor * alt);
                            alt = (factor * alt / this._meanRadius$2);
                        }
                        else {
                            altitude = (factor * alt);
                            alt = 1 + (factor * alt / this._meanRadius$2);
                        }
                    }
                    if (!this.get_coordinatesType() && this.lngColumn > -1 && this.latColumn > -1) {
                        Xcoord = parseFloat(row[this.lngColumn]);
                        Ycoord = parseFloat(row[this.latColumn]);
                        if (this.astronomical) {
                            if (!this.get_raUnits()) {
                                Xcoord *= 15;
                            }
                            if (this.bufferIsFlat) {
                            }
                        }
                        var offset = 0;
                        var pos = wwtlib.Coordinates.geoTo3dDoubleRad(Ycoord, Xcoord, alt);
                        if (this.astronomical && !this.bufferIsFlat) {
                            pos.rotateX(ecliptic);
                        }
                        position = pos;
                        this.positions.add(position);
                    }
                    else if (this.get_coordinatesType() === 1) {
                        var xyzScale = this.getScaleFactor(this.get_cartesianScale(), this.get_cartesianCustomScale()) / this._meanRadius$2;
                        if (this.get_zAxisColumn() > -1) {
                            Zcoord = parseFloat(row[this.get_zAxisColumn()]);
                        }
                        Xcoord = parseFloat(row[this.get_xAxisColumn()]);
                        Ycoord = parseFloat(row[this.get_yAxisColumn()]);
                        if (this.get_xAxisReverse()) {
                            Xcoord = -Xcoord;
                        }
                        if (this.get_yAxisReverse()) {
                            Ycoord = -Ycoord;
                        }
                        if (this.get_zAxisReverse()) {
                            Zcoord = -Zcoord;
                        }
                        position = wwtlib.Vector3d.create((Xcoord * xyzScale), (Zcoord * xyzScale), (Ycoord * xyzScale));
                        this.positions.add(position);
                    }
                    switch (this.get__colorMap()) {
                        case 0:
                            pointColor = colorLocal;
                            break;
                        case 3:
                            if (this.get_colorMapColumn() > -1) {
                                pointColor = this._parseColor$2(row[this.get_colorMapColumn()], colorLocal);
                            }
                            else {
                                pointColor = colorLocal;
                            }
                            break;
                        default:
                            break;
                    }
                    if (this.sizeColumn > -1) {
                        switch (this.pointScaleType) {
                            case 0:
                                pointSize = parseFloat(row[this.sizeColumn]);
                                break;
                            case 2:
                                pointSize = Math.log(parseFloat(row[this.sizeColumn]));
                                break;
                            case 1:
                                var size = 0;
                                try {
                                    pointSize = parseFloat(row[this.altColumn]);
                                }
                                catch ($e3) {
                                    pointSize = 0;
                                }
                                break;
                            case 4:
                                var size = 0;
                                try {
                                    size = parseFloat(row[this.sizeColumn]);
                                    if (!this.bufferIsFlat) {
                                        size = size - 5 * (wwtlib._util.logN(distParces, 10) - 1);
                                        pointSize = (120000000 / Math.pow(1.6, size));
                                    }
                                    else {
                                        pointSize = (40 / Math.pow(1.6, size));
                                    }
                                }
                                catch ($e4) {
                                    pointSize = 0;
                                }
                                break;
                            case 3:
                                pointSize = 1;
                                break;
                            default:
                                break;
                        }
                    }
                    else {
                        pointSize = 1;
                    }
                    if (this.get_plotType() === 1) {
                        pointSize = 1;
                    }
                    if ((this.astronomical & !this.bufferIsFlat) === 1) {
                    }
                    if (this.startDateColumn > -1) {
                        var dateTime = new Date(row[this.startDateColumn]);
                        pointStartTime = (wwtlib.SpaceTimeController.utcToJulian(dateTime) - wwtlib.SpaceTimeController.utcToJulian(this.baseDate));
                        if (this.endDateColumn > -1) {
                            dateTime = new Date(row[this.endDateColumn]);
                            pointEndTime = (wwtlib.SpaceTimeController.utcToJulian(dateTime) - wwtlib.SpaceTimeController.utcToJulian(this.baseDate));
                        }
                        else {
                            pointEndTime = pointStartTime;
                        }
                    }
                    this.pointList.addPoint(position, pointColor, new wwtlib.Dates(pointStartTime, pointEndTime), pointSize);
                    if (this.geometryColumn > -1) {
                        this._parseGeometry$2(row[this.geometryColumn], pointColor, pointColor, altitude, new wwtlib.Dates(pointStartTime, pointEndTime));
                    }
                    currentIndex++;
                }
            }
            catch ($e5) {
            }
            this.lines = false;
        }
        this._table$2.unlock();
        this._dataDirty$2 = false;
        this.dirty = false;
        return false;
    },
    
    _parseGeometry$2: function wwtlib__spreadSheetLayer$_parseGeometry$2(gs, lineColor, polyColor, alt, date) {
        /// <param name="gs" type="String">
        /// </param>
        /// <param name="lineColor" type="wwtlib.Color">
        /// </param>
        /// <param name="polyColor" type="wwtlib.Color">
        /// </param>
        /// <param name="alt" type="Number">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        gs = gs.trim().toLowerCase();
        var index = gs.indexOf('(');
        if (index < 0) {
            return;
        }
        if (!gs.endsWith(')')) {
            return;
        }
        var commandPart = gs.substring(0, index).trim();
        var parens = gs.substr(index);
        var parts = commandPart.split(' ');
        var command = null;
        var mods = null;
        if (parts.length > 0) {
            var $enum1 = ss.IEnumerator.getEnumerator(parts);
            while ($enum1.moveNext()) {
                var item = $enum1.current;
                if (String.isNullOrEmpty(command)) {
                    command = item;
                }
                else if (String.isNullOrEmpty(mods)) {
                    mods = item;
                }
            }
        }
        switch (command) {
            case 'multipolygon':
            case 'polygon':
                this._parsePolygon$2(parens, mods, lineColor, polyColor, alt, date);
                break;
            case 'multilinestring':
                this._parseLineString$2(parens, mods, lineColor, alt, false, date);
                break;
            case 'linestring':
                this._parseLineString$2(parens, mods, lineColor, alt, true, date);
                break;
            case 'geometrycollection':
                parens = parens.substring(1, parens.length - 2);
                var shapes = wwtlib.UiTools.splitString(parens, ',');
                var $enum2 = ss.IEnumerator.getEnumerator(shapes);
                while ($enum2.moveNext()) {
                    var shape = $enum2.current;
                    this._parseGeometry$2(shape, lineColor, polyColor, alt, date);
                }
                break;
            default:
                break;
        }
    },
    
    _parsePolygon$2: function wwtlib__spreadSheetLayer$_parsePolygon$2(parens, mods, lineColor, polyColor, alt, date) {
        /// <param name="parens" type="String">
        /// </param>
        /// <param name="mods" type="String">
        /// </param>
        /// <param name="lineColor" type="wwtlib.Color">
        /// </param>
        /// <param name="polyColor" type="wwtlib.Color">
        /// </param>
        /// <param name="alt" type="Number">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        if (!parens.startsWith('(') && parens.endsWith(')')) {
            return;
        }
        parens = parens.substring(1, parens.length - 2);
        var shapes = wwtlib.UiTools.splitString(parens, ',');
        var $enum1 = ss.IEnumerator.getEnumerator(shapes);
        while ($enum1.moveNext()) {
            var shape = $enum1.current;
            var lineList = new wwtlib.KmlLineList();
            lineList.astronomical = this.astronomical;
            lineList.meanRadius = this._meanRadius$2;
            lineList.parseWkt(shape, mods, alt, date);
            if (!alt) {
                this._addPolygonFlat$2(false, lineList, 1, polyColor, lineColor, true, true, date);
            }
            else {
                this._addPolygon$2(false, lineList, 1, polyColor, lineColor, true, true, date);
            }
        }
    },
    
    _parseLineString$2: function wwtlib__spreadSheetLayer$_parseLineString$2(parens, mods, lineColor, alt, single, date) {
        /// <param name="parens" type="String">
        /// </param>
        /// <param name="mods" type="String">
        /// </param>
        /// <param name="lineColor" type="wwtlib.Color">
        /// </param>
        /// <param name="alt" type="Number">
        /// </param>
        /// <param name="single" type="Boolean">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        if (!parens.startsWith('(') && parens.endsWith(')')) {
            return;
        }
        if (!single) {
            parens = parens.substring(1, parens.length - 2);
        }
        var shapes = wwtlib.UiTools.splitString(parens, ',');
        var $enum1 = ss.IEnumerator.getEnumerator(shapes);
        while ($enum1.moveNext()) {
            var shape = $enum1.current;
            var lineList = new wwtlib.KmlLineList();
            lineList.astronomical = this.astronomical;
            lineList.meanRadius = this._meanRadius$2;
            lineList.parseWkt(shape, mods, alt, date);
            this._addPolygon$2(false, lineList, 1, wwtlib.Colors.get_white(), lineColor, false, false, date);
        }
    },
    
    _splitShapes$2: function wwtlib__spreadSheetLayer$_splitShapes$2(shapes) {
        /// <param name="shapes" type="String">
        /// </param>
        /// <returns type="Array"></returns>
        var shapeList = [];
        var nesting = 0;
        var current = 0;
        while (current < shapes.length) {
            if (shapes.substr(current, 1) === '(') {
                nesting++;
            }
        }
        return shapeList;
    },
    
    _addPolygon$2: function wwtlib__spreadSheetLayer$_addPolygon$2(sky, geo, lineWidth, polyColor, lineColor, extrude, fill, date) {
        /// <param name="sky" type="Boolean">
        /// </param>
        /// <param name="geo" type="wwtlib.KmlLineList">
        /// </param>
        /// <param name="lineWidth" type="Number">
        /// </param>
        /// <param name="polyColor" type="wwtlib.Color">
        /// </param>
        /// <param name="lineColor" type="wwtlib.Color">
        /// </param>
        /// <param name="extrude" type="Boolean">
        /// </param>
        /// <param name="fill" type="Boolean">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        var vertexList = [];
        var vertexListGround = [];
        for (var i = 0; i < geo.pointList.length; i++) {
            vertexList.add(wwtlib.Coordinates.geoTo3dDoubleRad(geo.pointList[i].lat, geo.pointList[i].lng, 1 + (geo.pointList[i].alt / this._meanRadius$2)));
            vertexListGround.add(wwtlib.Coordinates.geoTo3dDoubleRad(geo.pointList[i].lat, geo.pointList[i].lng, 1));
        }
        for (var i = 0; i < (geo.pointList.length - 1); i++) {
            if (sky) {
            }
            else {
                if (extrude) {
                    this.triangleList.addQuad(vertexList[i], vertexList[i + 1], vertexListGround[i], vertexListGround[i + 1], polyColor, date);
                }
                if (lineWidth > 0) {
                    if (extrude) {
                        this.lineList.addLine(vertexList[i], vertexList[i + 1], lineColor, date);
                    }
                    else {
                        this.lineList2d.addLine(vertexList[i], vertexList[i + 1], lineColor, date);
                    }
                    if (extrude) {
                        this.lineList.addLine(vertexListGround[i], vertexListGround[i + 1], lineColor, date);
                        this.lineList.addLine(vertexList[i], vertexListGround[i], lineColor, date);
                        this.lineList.addLine(vertexList[i + 1], vertexListGround[i + 1], lineColor, date);
                    }
                }
            }
        }
        if (fill) {
            var indexes = wwtlib.Tessellator.tesselateSimplePoly(vertexList);
            for (var i = 0; i < indexes.length; i += 3) {
                this.triangleList.addTriangle(vertexList[indexes[i]], vertexList[indexes[i + 1]], vertexList[indexes[i + 2]], polyColor, date);
            }
        }
    },
    
    _addPolygonFlat$2: function wwtlib__spreadSheetLayer$_addPolygonFlat$2(sky, geo, lineWidth, polyColor, lineColor, extrude, fill, date) {
        /// <param name="sky" type="Boolean">
        /// </param>
        /// <param name="geo" type="wwtlib.KmlLineList">
        /// </param>
        /// <param name="lineWidth" type="Number">
        /// </param>
        /// <param name="polyColor" type="wwtlib.Color">
        /// </param>
        /// <param name="lineColor" type="wwtlib.Color">
        /// </param>
        /// <param name="extrude" type="Boolean">
        /// </param>
        /// <param name="fill" type="Boolean">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        var vertexList = [];
        for (var i = 0; i < geo.pointList.length; i++) {
            vertexList.add(wwtlib.Coordinates.geoTo3dDoubleRad(geo.pointList[i].lat, geo.pointList[i].lng, 1 + (geo.pointList[i].alt / this._meanRadius$2)));
        }
        for (var i = 0; i < (geo.pointList.length - 1); i++) {
            if (sky) {
            }
            else {
                if (lineWidth > 0) {
                    this.lineList2d.addLine(vertexList[i], vertexList[i + 1], lineColor, date);
                }
            }
        }
        if (fill) {
            var indexes = wwtlib.Tessellator.tesselateSimplePoly(vertexList);
            for (var i = 0; i < indexes.length; i += 3) {
                this.triangleList2d.addSubdividedTriangles(vertexList[indexes[i]], vertexList[indexes[i + 1]], vertexList[indexes[i + 2]], polyColor, date, 2);
            }
        }
    },
    
    _parseColor$2: function wwtlib__spreadSheetLayer$_parseColor$2(colorText, defaultColor) {
        /// <param name="colorText" type="String">
        /// </param>
        /// <param name="defaultColor" type="wwtlib.Color">
        /// </param>
        /// <returns type="wwtlib.Color"></returns>
        return wwtlib.Color.load(colorText);
    },
    
    getScaleFactor: function wwtlib__spreadSheetLayer$getScaleFactor(AltUnit, custom) {
        /// <param name="AltUnit" type="wwtlib.AltUnits">
        /// </param>
        /// <param name="custom" type="Number">
        /// </param>
        /// <returns type="Number"></returns>
        var factor = 1;
        switch (AltUnit) {
            case 1:
                factor = 1;
                break;
            case 2:
                factor = 1 * 0.3048;
                break;
            case 3:
                factor = (1 / 12) * 0.3048;
                break;
            case 4:
                factor = 5280 * 0.3048;
                break;
            case 5:
                factor = 1000;
                break;
            case 6:
                factor = 1000 * 149598000;
                break;
            case 7:
                factor = 1000 * 149598000 * 63239.6717;
                break;
            case 8:
                factor = 1000 * 149598000 * 206264.806;
                break;
            case 9:
                factor = 1000 * 149598000 * 206264.806 * 1000000;
                break;
            case 10:
                factor = custom;
                break;
            default:
                break;
        }
        return factor;
    },
    
    get__table: function wwtlib__spreadSheetLayer$get__table() {
        /// <value type="wwtlib._table"></value>
        return this._table$2;
    },
    set__table: function wwtlib__spreadSheetLayer$set__table(value) {
        /// <value type="wwtlib._table"></value>
        this._table$2 = value;
        return value;
    },
    
    loadFromString: function wwtlib__spreadSheetLayer$loadFromString(data, isUpdate, purgeOld, purgeAll, hasHeader) {
        /// <param name="data" type="String">
        /// </param>
        /// <param name="isUpdate" type="Boolean">
        /// </param>
        /// <param name="purgeOld" type="Boolean">
        /// </param>
        /// <param name="purgeAll" type="Boolean">
        /// </param>
        /// <param name="hasHeader" type="Boolean">
        /// </param>
        if (!isUpdate) {
            this._table$2 = new wwtlib._table();
        }
        this._table$2.lock();
        this._table$2.loadFromString(data, isUpdate, purgeAll, hasHeader);
        if (!isUpdate) {
            this.guessHeaderAssignments();
        }
        if (this.astronomical && this.lngColumn > -1) {
            var max = this.getMaxValue(this.lngColumn);
            if (max > 24) {
                this.set_raUnits(1);
            }
        }
        if (purgeOld) {
            this.purgeByTime();
        }
        this._table$2.unlock();
    },
    
    purgeByTime: function wwtlib__spreadSheetLayer$purgeByTime() {
        if (this.startDateColumn < 0) {
            return;
        }
        var columnToUse = this.startDateColumn;
        if (this.endDateColumn > -1) {
            columnToUse = this.endDateColumn;
        }
        var threasholdTime = wwtlib.SpaceTimeController.get_now();
        var ts = parseInt(this.decay) * 24 * 60 * 60 * 1000;
        threasholdTime = new Date(threasholdTime.getDate() - ts);
        var count = this._table$2.rows.length;
        for (var i = 0; i < count; i++) {
            try {
                var row = this._table$2.rows[i];
                var colDate = new Date(row[columnToUse]);
                if (colDate < threasholdTime) {
                    this._table$2.rows.removeAt(i);
                    count--;
                    i--;
                }
            }
            catch ($e1) {
            }
        }
    },
    
    draw: function wwtlib__spreadSheetLayer$draw(renderContext, opacity, flat) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="flat" type="Boolean">
        /// </param>
        /// <returns type="Boolean"></returns>
        var bVal = wwtlib._spreadSheetLayer.callBaseMethod(this, 'draw', [ renderContext, opacity, flat ]);
        return bVal;
    },
    
    cleanUp: function wwtlib__spreadSheetLayer$cleanUp() {
        this._table$2.lock();
        wwtlib._spreadSheetLayer.callBaseMethod(this, 'cleanUp');
        this._table$2.unlock();
        this.dirty = true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.KmlCoordinate

wwtlib.KmlCoordinate = function wwtlib_KmlCoordinate() {
    /// <field name="lat" type="Number">
    /// </field>
    /// <field name="lng" type="Number">
    /// </field>
    /// <field name="alt" type="Number">
    /// </field>
    /// <field name="date" type="wwtlib.Dates">
    /// </field>
}
wwtlib.KmlCoordinate.prototype = {
    lat: 0,
    lng: 0,
    alt: 0,
    date: null
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.KmlLineList

wwtlib.KmlLineList = function wwtlib_KmlLineList() {
    /// <field name="extrude" type="Boolean">
    /// </field>
    /// <field name="astronomical" type="Boolean">
    /// </field>
    /// <field name="meanRadius" type="Number">
    /// </field>
    /// <field name="pointList" type="Array">
    /// </field>
    this.pointList = [];
}
wwtlib.KmlLineList.prototype = {
    extrude: false,
    astronomical: false,
    meanRadius: 6371000,
    
    parseWkt: function wwtlib_KmlLineList$parseWkt(geoText, option, alt, date) {
        /// <param name="geoText" type="String">
        /// </param>
        /// <param name="option" type="String">
        /// </param>
        /// <param name="alt" type="Number">
        /// </param>
        /// <param name="date" type="wwtlib.Dates">
        /// </param>
        var parts = wwtlib.UiTools.split(geoText, '(,)');
        var $enum1 = ss.IEnumerator.getEnumerator(parts);
        while ($enum1.moveNext()) {
            var part = $enum1.current;
            var coordinates = part.trim().split(' ');
            if (coordinates.length > 1) {
                var pnt = new wwtlib.KmlCoordinate();
                pnt.lng = parseFloat(coordinates[0]);
                if (this.astronomical) {
                    pnt.lng -= 180;
                }
                pnt.lat = parseFloat(coordinates[1]);
                if (coordinates.length > 2 && !alt) {
                    pnt.alt = parseFloat(coordinates[2]);
                }
                else {
                    pnt.alt = alt;
                }
                pnt.date = date;
                this.pointList.add(pnt);
            }
        }
    },
    
    getCenterPoint: function wwtlib_KmlLineList$getCenterPoint() {
        /// <returns type="wwtlib.KmlCoordinate"></returns>
        var point = new wwtlib.KmlCoordinate();
        point.lat = 0;
        point.lng = 0;
        point.alt = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this.pointList);
        while ($enum1.moveNext()) {
            var pnt = $enum1.current;
            point.lat += pnt.lat;
            point.lng += pnt.lng;
            point.alt += pnt.alt;
        }
        point.lat /= this.pointList.length;
        point.lng /= this.pointList.length;
        point.alt /= this.pointList.length;
        return point;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._table

wwtlib._table = function wwtlib__table() {
    /// <field name="guid" type="wwtlib.Guid">
    /// </field>
    /// <field name="header" type="Array">
    /// </field>
    /// <field name="rows" type="Array">
    /// </field>
    /// <field name="delimiter" type="String">
    /// </field>
    /// <field name="locked" type="Boolean">
    /// </field>
    this.guid = new wwtlib.Guid();
    this.header = [];
    this.rows = [];
}
wwtlib._table.prototype = {
    delimiter: '\t',
    locked: false,
    
    lock: function wwtlib__table$lock() {
        this.locked = true;
    },
    
    unlock: function wwtlib__table$unlock() {
        this.locked = false;
    },
    
    loadFromString: function wwtlib__table$loadFromString(data, isUpdate, purge, hasHeader) {
        /// <param name="data" type="String">
        /// </param>
        /// <param name="isUpdate" type="Boolean">
        /// </param>
        /// <param name="purge" type="Boolean">
        /// </param>
        /// <param name="hasHeader" type="Boolean">
        /// </param>
        var count = 0;
        var lines = data.split('\r\n');
        if (!isUpdate || hasHeader) {
            if (lines.length > 0) {
                var headerLine = lines[0];
                count++;
                if (headerLine.indexOf('\t') === -1 && headerLine.indexOf(',') > -1) {
                    this.delimiter = ',';
                }
                if (!isUpdate) {
                    this.rows.clear();
                }
                this.header = wwtlib.UiTools.splitString(headerLine, this.delimiter);
            }
            else {
                this.header = [];
            }
        }
        var temp = [];
        if (!purge) {
            temp = this.rows;
        }
        while (count < lines.length) {
            var line = lines[count];
            var rowData = wwtlib.UiTools.splitString(line, this.delimiter);
            if (rowData.length < 1) {
                break;
            }
            temp.add(rowData);
            count++;
        }
        if (purge) {
            this.rows = temp;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TimeSeriesLayer

wwtlib.TimeSeriesLayer = function wwtlib_TimeSeriesLayer() {
    /// <field name="isLongIndex" type="Boolean">
    /// </field>
    /// <field name="shapeVertexCount" type="Number" integer="true">
    /// </field>
    /// <field name="lines" type="Boolean">
    /// </field>
    /// <field name="latColumn" type="Number" integer="true">
    /// </field>
    /// <field name="fixedSize" type="Number">
    /// </field>
    /// <field name="decay" type="Number">
    /// </field>
    /// <field name="timeSeries" type="Boolean">
    /// </field>
    /// <field name="_dynamicData$1" type="Boolean">
    /// </field>
    /// <field name="_autoUpdate$1" type="Boolean">
    /// </field>
    /// <field name="_dataSourceUrl$1" type="String">
    /// </field>
    /// <field name="_beginRange$1" type="Date">
    /// </field>
    /// <field name="_endRange$1" type="Date">
    /// </field>
    /// <field name="markerDomainValues" type="Object">
    /// </field>
    /// <field name="colorDomainValues" type="Object">
    /// </field>
    /// <field name="_coordinatesType$1" type="wwtlib.CoordinatesTypes">
    /// </field>
    /// <field name="lngColumn" type="Number" integer="true">
    /// </field>
    /// <field name="geometryColumn" type="Number" integer="true">
    /// </field>
    /// <field name="_xAxisColumn$1" type="Number" integer="true">
    /// </field>
    /// <field name="_yAxisColumn$1" type="Number" integer="true">
    /// </field>
    /// <field name="_zAxisColumn$1" type="Number" integer="true">
    /// </field>
    /// <field name="_xAxisReverse$1" type="Boolean">
    /// </field>
    /// <field name="_yAxisReverse$1" type="Boolean">
    /// </field>
    /// <field name="_zAxisReverse$1" type="Boolean">
    /// </field>
    /// <field name="_altType$1" type="wwtlib.AltTypes">
    /// </field>
    /// <field name="_markerMix$1" type="wwtlib.MarkerMixes">
    /// </field>
    /// <field name="_raUnits$1" type="wwtlib.RAUnits">
    /// </field>
    /// <field name="_colorMap$1" type="wwtlib.ColorMaps">
    /// </field>
    /// <field name="_markerColumn$1" type="Number" integer="true">
    /// </field>
    /// <field name="_colorMapColumn$1" type="Number" integer="true">
    /// </field>
    /// <field name="_plotType$1" type="wwtlib.PlotTypes">
    /// </field>
    /// <field name="_markerIndex$1" type="Number" integer="true">
    /// </field>
    /// <field name="_showFarSide$1" type="Boolean">
    /// </field>
    /// <field name="_markerScale$1" type="wwtlib.MarkerScales">
    /// </field>
    /// <field name="_altUnit$1" type="wwtlib.AltUnits">
    /// </field>
    /// <field name="_cartesianScale$1" type="wwtlib.AltUnits">
    /// </field>
    /// <field name="_cartesianCustomScale$1" type="Number">
    /// </field>
    /// <field name="altColumn" type="Number" integer="true">
    /// </field>
    /// <field name="startDateColumn" type="Number" integer="true">
    /// </field>
    /// <field name="endDateColumn" type="Number" integer="true">
    /// </field>
    /// <field name="sizeColumn" type="Number" integer="true">
    /// </field>
    /// <field name="nameColumn" type="Number" integer="true">
    /// </field>
    /// <field name="_hyperlinkFormat$1" type="String">
    /// </field>
    /// <field name="_hyperlinkColumn$1" type="Number" integer="true">
    /// </field>
    /// <field name="scaleFactor" type="Number">
    /// </field>
    /// <field name="pointScaleType" type="wwtlib.PointScaleTypes">
    /// </field>
    /// <field name="positions" type="Array">
    /// </field>
    /// <field name="lineList" type="wwtlib.LineList">
    /// </field>
    /// <field name="lineList2d" type="wwtlib.LineList">
    /// </field>
    /// <field name="triangleList" type="wwtlib.TriangleList">
    /// </field>
    /// <field name="triangleList2d" type="wwtlib.TriangleList">
    /// </field>
    /// <field name="pointList" type="wwtlib.PointList">
    /// </field>
    /// <field name="bufferIsFlat" type="Boolean">
    /// </field>
    /// <field name="baseDate" type="Date">
    /// </field>
    /// <field name="_circleTexture$1" type="Object" domElement="true" static="true">
    /// </field>
    /// <field name="dirty" type="Boolean">
    /// </field>
    this.latColumn = -1;
    this._beginRange$1 = new Date('1/1/2100');
    this._endRange$1 = new Date('01/01/1800');
    this.markerDomainValues = {};
    this.colorDomainValues = {};
    this._coordinatesType$1 = 0;
    this.lngColumn = -1;
    this.geometryColumn = -1;
    this._xAxisColumn$1 = -1;
    this._yAxisColumn$1 = -1;
    this._zAxisColumn$1 = -1;
    this._altType$1 = 3;
    this._markerMix$1 = 0;
    this._raUnits$1 = 0;
    this._colorMap$1 = 3;
    this._markerColumn$1 = -1;
    this._colorMapColumn$1 = -1;
    this._plotType$1 = 0;
    this._markerScale$1 = 1;
    this._altUnit$1 = 1;
    this._cartesianScale$1 = 1;
    this.altColumn = -1;
    this.startDateColumn = -1;
    this.endDateColumn = -1;
    this.sizeColumn = -1;
    this._hyperlinkColumn$1 = -1;
    this.pointScaleType = 1;
    this.positions = [];
    this.baseDate = new Date(2010, 0, 1, 12, 0, 0);
    wwtlib.TimeSeriesLayer.initializeBase(this);
}
wwtlib.TimeSeriesLayer.get__circleTexture$1 = function wwtlib_TimeSeriesLayer$get__circleTexture$1() {
    /// <value type="Object" domElement="true"></value>
    return wwtlib.TimeSeriesLayer._circleTexture$1;
}
wwtlib.TimeSeriesLayer.prototype = {
    isLongIndex: false,
    shapeVertexCount: 0,
    lines: false,
    fixedSize: 1,
    decay: 16,
    timeSeries: false,
    _dynamicData$1: false,
    
    get_dynamicData: function wwtlib_TimeSeriesLayer$get_dynamicData() {
        /// <value type="Boolean"></value>
        return this._dynamicData$1;
    },
    set_dynamicData: function wwtlib_TimeSeriesLayer$set_dynamicData(value) {
        /// <value type="Boolean"></value>
        this._dynamicData$1 = value;
        return value;
    },
    
    _autoUpdate$1: false,
    
    get_autoUpdate: function wwtlib_TimeSeriesLayer$get_autoUpdate() {
        /// <value type="Boolean"></value>
        return this._autoUpdate$1;
    },
    set_autoUpdate: function wwtlib_TimeSeriesLayer$set_autoUpdate(value) {
        /// <value type="Boolean"></value>
        this._autoUpdate$1 = value;
        return value;
    },
    
    _dataSourceUrl$1: '',
    
    get_dataSourceUrl: function wwtlib_TimeSeriesLayer$get_dataSourceUrl() {
        /// <value type="String"></value>
        return this._dataSourceUrl$1;
    },
    set_dataSourceUrl: function wwtlib_TimeSeriesLayer$set_dataSourceUrl(value) {
        /// <value type="String"></value>
        this._dataSourceUrl$1 = value;
        return value;
    },
    
    get_timeSeries: function wwtlib_TimeSeriesLayer$get_timeSeries() {
        /// <value type="Boolean"></value>
        return this.timeSeries;
    },
    set_timeSeries: function wwtlib_TimeSeriesLayer$set_timeSeries(value) {
        /// <value type="Boolean"></value>
        if (this.timeSeries !== value) {
            this.version++;
            this.timeSeries = value;
        }
        return value;
    },
    
    get_header: function wwtlib_TimeSeriesLayer$get_header() {
        /// <value type="Array"></value>
        return null;
    },
    
    get_beginRange: function wwtlib_TimeSeriesLayer$get_beginRange() {
        /// <value type="Date"></value>
        return this._beginRange$1;
    },
    set_beginRange: function wwtlib_TimeSeriesLayer$set_beginRange(value) {
        /// <value type="Date"></value>
        if (this._beginRange$1 !== value) {
            this.version++;
            this._beginRange$1 = value;
        }
        return value;
    },
    
    get_endRange: function wwtlib_TimeSeriesLayer$get_endRange() {
        /// <value type="Date"></value>
        return this._endRange$1;
    },
    set_endRange: function wwtlib_TimeSeriesLayer$set_endRange(value) {
        /// <value type="Date"></value>
        if (this._endRange$1 !== value) {
            this.version++;
            this._endRange$1 = value;
        }
        return value;
    },
    
    initializeFromXml: function wwtlib_TimeSeriesLayer$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        this.set_timeSeries(Boolean.parse(node.attributes.getNamedItem('TimeSeries').nodeValue));
        this.set_beginRange(new Date(node.attributes.getNamedItem('BeginRange').nodeValue));
        this.set_endRange(new Date(node.attributes.getNamedItem('EndRange').nodeValue));
        this.set_decay(parseFloat(node.attributes.getNamedItem('Decay').nodeValue));
        switch (node.attributes.getNamedItem('CoordinatesType').nodeValue) {
            case 'Spherical':
                this.set_coordinatesType(0);
                break;
            case 'Rectangular':
                this.set_coordinatesType(1);
                break;
            case 'Orbital':
                this.set_coordinatesType(2);
                break;
            default:
                break;
        }
        if (this.get_coordinatesType() < 0) {
            this.set_coordinatesType(0);
        }
        this.set_latColumn(parseInt(node.attributes.getNamedItem('LatColumn').nodeValue));
        this.set_lngColumn(parseInt(node.attributes.getNamedItem('LngColumn').nodeValue));
        if (node.attributes.getNamedItem('GeometryColumn') != null) {
            this.set_geometryColumn(parseInt(node.attributes.getNamedItem('GeometryColumn').nodeValue));
        }
        switch (node.attributes.getNamedItem('AltType').nodeValue) {
            case 'Depth':
                this.set_altType(0);
                break;
            case 'Altitude':
                this.set_altType(1);
                break;
            case 'Distance':
                this.set_altType(2);
                break;
            case 'SeaLevel':
                this.set_altType(3);
                break;
            case 'Terrain':
                this.set_altType(4);
                break;
            default:
                break;
        }
        this.set_markerMix(0);
        switch (node.attributes.getNamedItem('ColorMap').nodeValue) {
            case 'Same_For_All':
                this.set__colorMap(0);
                break;
            case 'Group_by_Values':
                this.set__colorMap(2);
                break;
            case 'Per_Column_Literal':
                this.set__colorMap(3);
                break;
            default:
                break;
        }
        this.set_markerColumn(parseInt(node.attributes.getNamedItem('MarkerColumn').nodeValue));
        this.set_colorMapColumn(parseInt(node.attributes.getNamedItem('ColorMapColumn').nodeValue));
        switch (node.attributes.getNamedItem('PlotType').nodeValue) {
            case 'Gaussian':
                this.set_plotType(0);
                break;
            case 'Point':
                this.set_plotType(1);
                break;
            case 'Circle':
                this.set_plotType(2);
                break;
            case 'PushPin':
                this.set_plotType(3);
                break;
            default:
                break;
        }
        this.set_markerIndex(parseInt(node.attributes.getNamedItem('MarkerIndex').nodeValue));
        switch (node.attributes.getNamedItem('MarkerScale').nodeValue) {
            case 'Screen':
                this.set_markerScale(0);
                break;
            case 'World':
                this.set_markerScale(1);
                break;
            default:
                break;
        }
        switch (node.attributes.getNamedItem('AltUnit').nodeValue) {
            case 'Meters':
                this.set_altUnit(1);
                break;
            case 'Feet':
                this.set_altUnit(2);
                break;
            case 'Inches':
                this.set_altUnit(3);
                break;
            case 'Miles':
                this.set_altUnit(4);
                break;
            case 'Kilometers':
                this.set_altUnit(5);
                break;
            case 'AstronomicalUnits':
                this.set_altUnit(6);
                break;
            case 'LightYears':
                this.set_altUnit(7);
                break;
            case 'Parsecs':
                this.set_altUnit(8);
                break;
            case 'MegaParsecs':
                this.set_altUnit(9);
                break;
            case 'Custom':
                this.set_altUnit(10);
                break;
            default:
                break;
        }
        this.set_altColumn(parseInt(node.attributes.getNamedItem('AltColumn').nodeValue));
        this.set_startDateColumn(parseInt(node.attributes.getNamedItem('StartDateColumn').nodeValue));
        this.set_endDateColumn(parseInt(node.attributes.getNamedItem('EndDateColumn').nodeValue));
        this.set_sizeColumn(parseInt(node.attributes.getNamedItem('SizeColumn').nodeValue));
        this.set_hyperlinkFormat(node.attributes.getNamedItem('HyperlinkFormat').nodeValue);
        this.set_hyperlinkColumn(parseInt(node.attributes.getNamedItem('HyperlinkColumn').nodeValue));
        this.set_scaleFactor(parseFloat(node.attributes.getNamedItem('ScaleFactor').nodeValue));
        switch (node.attributes.getNamedItem('PointScaleType').nodeValue) {
            case 'Linear':
                this.set_pointScaleType(0);
                break;
            case 'Power':
                this.set_pointScaleType(1);
                break;
            case 'Log':
                this.set_pointScaleType(2);
                break;
            case 'Constant':
                this.set_pointScaleType(3);
                break;
            case 'StellarMagnitude':
                this.set_pointScaleType(4);
                break;
            default:
                break;
        }
        if (node.attributes.getNamedItem('ShowFarSide') != null) {
            this.set_showFarSide(Boolean.parse(node.attributes.getNamedItem('ShowFarSide').nodeValue));
        }
        if (node.attributes.getNamedItem('RaUnits') != null) {
            switch (node.attributes.getNamedItem('RaUnits').nodeValue) {
                case 'Hours':
                    this.set_raUnits(0);
                    break;
                case 'Degrees':
                    this.set_raUnits(1);
                    break;
            }
        }
        if (node.attributes.getNamedItem('HoverTextColumn') != null) {
            this.set_nameColumn(parseInt(node.attributes.getNamedItem('HoverTextColumn').nodeValue));
        }
        if (node.attributes.getNamedItem('XAxisColumn') != null) {
            this.set_xAxisColumn(parseInt(node.attributes.getNamedItem('XAxisColumn').nodeValue));
            this.set_xAxisReverse(Boolean.parse(node.attributes.getNamedItem('XAxisReverse').nodeValue));
            this.set_yAxisColumn(parseInt(node.attributes.getNamedItem('YAxisColumn').nodeValue));
            this.set_yAxisReverse(Boolean.parse(node.attributes.getNamedItem('YAxisReverse').nodeValue));
            this.set_zAxisColumn(parseInt(node.attributes.getNamedItem('ZAxisColumn').nodeValue));
            this.set_zAxisReverse(Boolean.parse(node.attributes.getNamedItem('ZAxisReverse').nodeValue));
            switch (node.attributes.getNamedItem('CartesianScale').nodeValue) {
                case 'Meters':
                    this.set_cartesianScale(1);
                    break;
                case 'Feet':
                    this.set_cartesianScale(2);
                    break;
                case 'Inches':
                    this.set_cartesianScale(3);
                    break;
                case 'Miles':
                    this.set_cartesianScale(4);
                    break;
                case 'Kilometers':
                    this.set_cartesianScale(5);
                    break;
                case 'AstronomicalUnits':
                    this.set_cartesianScale(6);
                    break;
                case 'LightYears':
                    this.set_cartesianScale(7);
                    break;
                case 'Parsecs':
                    this.set_cartesianScale(8);
                    break;
                case 'MegaParsecs':
                    this.set_cartesianScale(9);
                    break;
                case 'Custom':
                    this.set_cartesianScale(10);
                    break;
                default:
                    break;
            }
            this.set_cartesianCustomScale(parseFloat(node.attributes.getNamedItem('CartesianCustomScale').nodeValue));
        }
        if (node.attributes.getNamedItem('DynamicData') != null) {
            this.set_dynamicData(Boolean.parse(node.attributes.getNamedItem('DynamicData').nodeValue));
            this.set_autoUpdate(Boolean.parse(node.attributes.getNamedItem('AutoUpdate').nodeValue));
            this.set_dataSourceUrl(node.attributes.getNamedItem('DataSourceUrl').nodeValue);
        }
    },
    
    computeDateDomainRange: function wwtlib_TimeSeriesLayer$computeDateDomainRange(columnStart, columnEnd) {
        /// <param name="columnStart" type="Number" integer="true">
        /// </param>
        /// <param name="columnEnd" type="Number" integer="true">
        /// </param>
    },
    
    getDomainValues: function wwtlib_TimeSeriesLayer$getDomainValues(column) {
        /// <param name="column" type="Number" integer="true">
        /// </param>
        /// <returns type="Array"></returns>
        return [];
    },
    
    get_decay: function wwtlib_TimeSeriesLayer$get_decay() {
        /// <value type="Number"></value>
        return this.decay;
    },
    set_decay: function wwtlib_TimeSeriesLayer$set_decay(value) {
        /// <value type="Number"></value>
        if (this.decay !== value) {
            this.version++;
            this.decay = value;
        }
        return value;
    },
    
    get_coordinatesType: function wwtlib_TimeSeriesLayer$get_coordinatesType() {
        /// <value type="wwtlib.CoordinatesTypes"></value>
        return this._coordinatesType$1;
    },
    set_coordinatesType: function wwtlib_TimeSeriesLayer$set_coordinatesType(value) {
        /// <value type="wwtlib.CoordinatesTypes"></value>
        if (this._coordinatesType$1 !== value) {
            this.version++;
            this._coordinatesType$1 = value;
        }
        return value;
    },
    
    get_latColumn: function wwtlib_TimeSeriesLayer$get_latColumn() {
        /// <value type="Number" integer="true"></value>
        return this.latColumn;
    },
    set_latColumn: function wwtlib_TimeSeriesLayer$set_latColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this.latColumn !== value) {
            this.version++;
            this.latColumn = value;
        }
        return value;
    },
    
    get_lngColumn: function wwtlib_TimeSeriesLayer$get_lngColumn() {
        /// <value type="Number" integer="true"></value>
        return this.lngColumn;
    },
    set_lngColumn: function wwtlib_TimeSeriesLayer$set_lngColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this.lngColumn !== value) {
            this.version++;
            this.lngColumn = value;
        }
        return value;
    },
    
    get_geometryColumn: function wwtlib_TimeSeriesLayer$get_geometryColumn() {
        /// <value type="Number" integer="true"></value>
        return this.geometryColumn;
    },
    set_geometryColumn: function wwtlib_TimeSeriesLayer$set_geometryColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this.geometryColumn !== value) {
            this.version++;
            this.geometryColumn = value;
        }
        return value;
    },
    
    get_xAxisColumn: function wwtlib_TimeSeriesLayer$get_xAxisColumn() {
        /// <value type="Number" integer="true"></value>
        return this._xAxisColumn$1;
    },
    set_xAxisColumn: function wwtlib_TimeSeriesLayer$set_xAxisColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this._xAxisColumn$1 !== value) {
            this.version++;
            this._xAxisColumn$1 = value;
        }
        return value;
    },
    
    get_yAxisColumn: function wwtlib_TimeSeriesLayer$get_yAxisColumn() {
        /// <value type="Number" integer="true"></value>
        return this._yAxisColumn$1;
    },
    set_yAxisColumn: function wwtlib_TimeSeriesLayer$set_yAxisColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this._yAxisColumn$1 !== value) {
            this.version++;
            this._yAxisColumn$1 = value;
        }
        return value;
    },
    
    get_zAxisColumn: function wwtlib_TimeSeriesLayer$get_zAxisColumn() {
        /// <value type="Number" integer="true"></value>
        return this._zAxisColumn$1;
    },
    set_zAxisColumn: function wwtlib_TimeSeriesLayer$set_zAxisColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this._zAxisColumn$1 !== value) {
            this.version++;
            this._zAxisColumn$1 = value;
        }
        return value;
    },
    
    _xAxisReverse$1: false,
    
    get_xAxisReverse: function wwtlib_TimeSeriesLayer$get_xAxisReverse() {
        /// <value type="Boolean"></value>
        return this._xAxisReverse$1;
    },
    set_xAxisReverse: function wwtlib_TimeSeriesLayer$set_xAxisReverse(value) {
        /// <value type="Boolean"></value>
        if (this._xAxisReverse$1 !== value) {
            this.version++;
            this._xAxisReverse$1 = value;
        }
        return value;
    },
    
    _yAxisReverse$1: false,
    
    get_yAxisReverse: function wwtlib_TimeSeriesLayer$get_yAxisReverse() {
        /// <value type="Boolean"></value>
        return this._yAxisReverse$1;
    },
    set_yAxisReverse: function wwtlib_TimeSeriesLayer$set_yAxisReverse(value) {
        /// <value type="Boolean"></value>
        if (this._yAxisReverse$1 !== value) {
            this.version++;
            this._yAxisReverse$1 = value;
        }
        return value;
    },
    
    _zAxisReverse$1: false,
    
    get_zAxisReverse: function wwtlib_TimeSeriesLayer$get_zAxisReverse() {
        /// <value type="Boolean"></value>
        return this._zAxisReverse$1;
    },
    set_zAxisReverse: function wwtlib_TimeSeriesLayer$set_zAxisReverse(value) {
        /// <value type="Boolean"></value>
        if (this._zAxisReverse$1 !== value) {
            this.version++;
            this._zAxisReverse$1 = value;
        }
        return value;
    },
    
    get_altType: function wwtlib_TimeSeriesLayer$get_altType() {
        /// <value type="wwtlib.AltTypes"></value>
        return this._altType$1;
    },
    set_altType: function wwtlib_TimeSeriesLayer$set_altType(value) {
        /// <value type="wwtlib.AltTypes"></value>
        if (this._altType$1 !== value) {
            this.version++;
            this._altType$1 = value;
        }
        return value;
    },
    
    get_markerMix: function wwtlib_TimeSeriesLayer$get_markerMix() {
        /// <value type="wwtlib.MarkerMixes"></value>
        return this._markerMix$1;
    },
    set_markerMix: function wwtlib_TimeSeriesLayer$set_markerMix(value) {
        /// <value type="wwtlib.MarkerMixes"></value>
        if (this._markerMix$1 !== value) {
            this.version++;
            this._markerMix$1 = value;
        }
        return value;
    },
    
    get_raUnits: function wwtlib_TimeSeriesLayer$get_raUnits() {
        /// <value type="wwtlib.RAUnits"></value>
        return this._raUnits$1;
    },
    set_raUnits: function wwtlib_TimeSeriesLayer$set_raUnits(value) {
        /// <value type="wwtlib.RAUnits"></value>
        if (this._raUnits$1 !== value) {
            this.version++;
            this._raUnits$1 = value;
        }
        return value;
    },
    
    get__colorMap: function wwtlib_TimeSeriesLayer$get__colorMap() {
        /// <value type="wwtlib.ColorMaps"></value>
        return this._colorMap$1;
    },
    set__colorMap: function wwtlib_TimeSeriesLayer$set__colorMap(value) {
        /// <value type="wwtlib.ColorMaps"></value>
        if (this._colorMap$1 !== value) {
            this.version++;
            this._colorMap$1 = value;
        }
        return value;
    },
    
    get_markerColumn: function wwtlib_TimeSeriesLayer$get_markerColumn() {
        /// <value type="Number" integer="true"></value>
        return this._markerColumn$1;
    },
    set_markerColumn: function wwtlib_TimeSeriesLayer$set_markerColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this._markerColumn$1 !== value) {
            this.version++;
            this._markerColumn$1 = value;
        }
        return value;
    },
    
    get_colorMapColumn: function wwtlib_TimeSeriesLayer$get_colorMapColumn() {
        /// <value type="Number" integer="true"></value>
        return this._colorMapColumn$1;
    },
    set_colorMapColumn: function wwtlib_TimeSeriesLayer$set_colorMapColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this._colorMapColumn$1 !== value) {
            this.version++;
            this._colorMapColumn$1 = value;
        }
        return value;
    },
    
    get_plotType: function wwtlib_TimeSeriesLayer$get_plotType() {
        /// <value type="wwtlib.PlotTypes"></value>
        return this._plotType$1;
    },
    set_plotType: function wwtlib_TimeSeriesLayer$set_plotType(value) {
        /// <value type="wwtlib.PlotTypes"></value>
        if (this._plotType$1 !== value) {
            this.version++;
            this._plotType$1 = value;
        }
        return value;
    },
    
    _markerIndex$1: 0,
    
    get_markerIndex: function wwtlib_TimeSeriesLayer$get_markerIndex() {
        /// <value type="Number" integer="true"></value>
        return this._markerIndex$1;
    },
    set_markerIndex: function wwtlib_TimeSeriesLayer$set_markerIndex(value) {
        /// <value type="Number" integer="true"></value>
        if (this._markerIndex$1 !== value) {
            this.version++;
            this._markerIndex$1 = value;
        }
        return value;
    },
    
    _showFarSide$1: false,
    
    get_showFarSide: function wwtlib_TimeSeriesLayer$get_showFarSide() {
        /// <value type="Boolean"></value>
        return this._showFarSide$1;
    },
    set_showFarSide: function wwtlib_TimeSeriesLayer$set_showFarSide(value) {
        /// <value type="Boolean"></value>
        if (this._showFarSide$1 !== value) {
            this.version++;
            this._showFarSide$1 = value;
        }
        return value;
    },
    
    get_markerScale: function wwtlib_TimeSeriesLayer$get_markerScale() {
        /// <value type="wwtlib.MarkerScales"></value>
        return this._markerScale$1;
    },
    set_markerScale: function wwtlib_TimeSeriesLayer$set_markerScale(value) {
        /// <value type="wwtlib.MarkerScales"></value>
        if (this._markerScale$1 !== value) {
            this.version++;
            this._markerScale$1 = value;
        }
        return value;
    },
    
    get_altUnit: function wwtlib_TimeSeriesLayer$get_altUnit() {
        /// <value type="wwtlib.AltUnits"></value>
        return this._altUnit$1;
    },
    set_altUnit: function wwtlib_TimeSeriesLayer$set_altUnit(value) {
        /// <value type="wwtlib.AltUnits"></value>
        if (this._altUnit$1 !== value) {
            this.version++;
            this._altUnit$1 = value;
        }
        return value;
    },
    
    get_cartesianScale: function wwtlib_TimeSeriesLayer$get_cartesianScale() {
        /// <value type="wwtlib.AltUnits"></value>
        return this._cartesianScale$1;
    },
    set_cartesianScale: function wwtlib_TimeSeriesLayer$set_cartesianScale(value) {
        /// <value type="wwtlib.AltUnits"></value>
        if (this._cartesianScale$1 !== value) {
            this.version++;
            this._cartesianScale$1 = value;
        }
        return value;
    },
    
    _cartesianCustomScale$1: 1,
    
    get_cartesianCustomScale: function wwtlib_TimeSeriesLayer$get_cartesianCustomScale() {
        /// <value type="Number"></value>
        return this._cartesianCustomScale$1;
    },
    set_cartesianCustomScale: function wwtlib_TimeSeriesLayer$set_cartesianCustomScale(value) {
        /// <value type="Number"></value>
        if (this._cartesianCustomScale$1 !== value) {
            this.version++;
            this._cartesianCustomScale$1 = value;
        }
        return value;
    },
    
    get_altColumn: function wwtlib_TimeSeriesLayer$get_altColumn() {
        /// <value type="Number" integer="true"></value>
        return this.altColumn;
    },
    set_altColumn: function wwtlib_TimeSeriesLayer$set_altColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this.altColumn !== value) {
            this.version++;
            this.altColumn = value;
        }
        return value;
    },
    
    get_startDateColumn: function wwtlib_TimeSeriesLayer$get_startDateColumn() {
        /// <value type="Number" integer="true"></value>
        return this.startDateColumn;
    },
    set_startDateColumn: function wwtlib_TimeSeriesLayer$set_startDateColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this.startDateColumn !== value) {
            this.version++;
            this.startDateColumn = value;
        }
        return value;
    },
    
    get_endDateColumn: function wwtlib_TimeSeriesLayer$get_endDateColumn() {
        /// <value type="Number" integer="true"></value>
        return this.endDateColumn;
    },
    set_endDateColumn: function wwtlib_TimeSeriesLayer$set_endDateColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this.endDateColumn !== value) {
            this.version++;
            this.endDateColumn = value;
        }
        return value;
    },
    
    get_sizeColumn: function wwtlib_TimeSeriesLayer$get_sizeColumn() {
        /// <value type="Number" integer="true"></value>
        return this.sizeColumn;
    },
    set_sizeColumn: function wwtlib_TimeSeriesLayer$set_sizeColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this.sizeColumn !== value) {
            this.version++;
            this.sizeColumn = value;
        }
        return value;
    },
    
    nameColumn: 0,
    
    get_nameColumn: function wwtlib_TimeSeriesLayer$get_nameColumn() {
        /// <value type="Number" integer="true"></value>
        return this.nameColumn;
    },
    set_nameColumn: function wwtlib_TimeSeriesLayer$set_nameColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this.nameColumn !== value) {
            this.version++;
            this.nameColumn = value;
        }
        return value;
    },
    
    _hyperlinkFormat$1: '',
    
    get_hyperlinkFormat: function wwtlib_TimeSeriesLayer$get_hyperlinkFormat() {
        /// <value type="String"></value>
        return this._hyperlinkFormat$1;
    },
    set_hyperlinkFormat: function wwtlib_TimeSeriesLayer$set_hyperlinkFormat(value) {
        /// <value type="String"></value>
        if (this._hyperlinkFormat$1 !== value) {
            this.version++;
            this._hyperlinkFormat$1 = value;
        }
        return value;
    },
    
    get_hyperlinkColumn: function wwtlib_TimeSeriesLayer$get_hyperlinkColumn() {
        /// <value type="Number" integer="true"></value>
        return this._hyperlinkColumn$1;
    },
    set_hyperlinkColumn: function wwtlib_TimeSeriesLayer$set_hyperlinkColumn(value) {
        /// <value type="Number" integer="true"></value>
        if (this._hyperlinkColumn$1 !== value) {
            this.version++;
            this._hyperlinkColumn$1 = value;
        }
        return value;
    },
    
    scaleFactor: 1,
    
    get_scaleFactor: function wwtlib_TimeSeriesLayer$get_scaleFactor() {
        /// <value type="Number"></value>
        return this.scaleFactor;
    },
    set_scaleFactor: function wwtlib_TimeSeriesLayer$set_scaleFactor(value) {
        /// <value type="Number"></value>
        if (this.scaleFactor !== value) {
            this.version++;
            this.scaleFactor = value;
        }
        return value;
    },
    
    get_pointScaleType: function wwtlib_TimeSeriesLayer$get_pointScaleType() {
        /// <value type="wwtlib.PointScaleTypes"></value>
        return this.pointScaleType;
    },
    set_pointScaleType: function wwtlib_TimeSeriesLayer$set_pointScaleType(value) {
        /// <value type="wwtlib.PointScaleTypes"></value>
        if (this.pointScaleType !== value) {
            this.version++;
            this.pointScaleType = value;
        }
        return value;
    },
    
    lineList: null,
    lineList2d: null,
    triangleList: null,
    triangleList2d: null,
    pointList: null,
    bufferIsFlat: false,
    dirty: true,
    
    prepVertexBuffer: function wwtlib_TimeSeriesLayer$prepVertexBuffer(renderContext, opacity) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        return true;
    },
    
    draw: function wwtlib_TimeSeriesLayer$draw(renderContext, opacity, flat) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="flat" type="Boolean">
        /// </param>
        /// <returns type="Boolean"></returns>
        var device = renderContext;
        if (this.bufferIsFlat !== flat) {
            this.cleanUp();
            this.bufferIsFlat = flat;
        }
        if (this.dirty) {
            this.prepVertexBuffer(device, opacity);
        }
        var jNow = wwtlib.SpaceTimeController.get_jNow() - wwtlib.SpaceTimeController.utcToJulian(this.baseDate);
        if (this.triangleList2d != null) {
            this.triangleList2d.decay = this.decay;
            this.triangleList2d.sky = this.get_astronomical();
            this.triangleList2d.timeSeries = this.timeSeries;
            this.triangleList2d.jNow = jNow;
            this.triangleList2d.draw(renderContext, opacity * this.get_opacity(), 1);
        }
        if (this.triangleList != null) {
            this.triangleList.decay = this.decay;
            this.triangleList.sky = this.get_astronomical();
            this.triangleList.timeSeries = this.timeSeries;
            this.triangleList.jNow = jNow;
            this.triangleList.draw(renderContext, opacity * this.get_opacity(), 1);
        }
        if (this.pointList != null) {
            this.pointList.depthBuffered = false;
            this.pointList.decay = this.decay;
            this.pointList.sky = this.get_astronomical();
            this.pointList.timeSeries = this.timeSeries;
            this.pointList.jNow = jNow;
            this.pointList.draw(renderContext, opacity * this.get_opacity(), false);
        }
        if (this.lineList != null) {
            this.lineList.sky = this.get_astronomical();
            this.lineList.decay = this.decay;
            this.lineList.timeSeries = this.timeSeries;
            this.lineList.jNow = jNow;
            this.lineList.drawLines(renderContext, opacity * this.get_opacity());
        }
        if (this.lineList2d != null) {
            this.lineList2d.sky = this.get_astronomical();
            this.lineList2d.decay = this.decay;
            this.lineList2d.timeSeries = this.timeSeries;
            this.lineList2d.showFarSide = this.get_showFarSide();
            this.lineList2d.jNow = jNow;
            this.lineList2d.drawLines(renderContext, opacity * this.get_opacity());
        }
        return true;
    },
    
    cleanUp: function wwtlib_TimeSeriesLayer$cleanUp() {
        if (this.lineList != null) {
            this.lineList.clear();
        }
        if (this.lineList2d != null) {
            this.lineList2d.clear();
        }
        if (this.triangleList2d != null) {
            this.triangleList2d.clear();
        }
        if (this.pointList != null) {
            this.pointList.clear();
        }
        if (this.triangleList != null) {
            this.triangleList.clear();
        }
    },
    
    dynamicUpdate: function wwtlib_TimeSeriesLayer$dynamicUpdate() {
        /// <returns type="Boolean"></returns>
        return false;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Planets

wwtlib.Planets = function wwtlib_Planets() {
    /// <field name="_planetTextures" type="Array" elementType="Texture" static="true">
    /// </field>
    /// <field name="_planetScales" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="_planetDiameters" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="_planetTilts" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="_orbits" type="Array" elementType="Array" static="true">
    /// </field>
    /// <field name="_planetDrawOrder" type="Object" static="true">
    /// </field>
    /// <field name="highPercision" type="Boolean" static="true">
    /// </field>
    /// <field name="showActualSize" type="Boolean" static="true">
    /// </field>
    /// <field name="RC" type="Number" static="true">
    /// </field>
    /// <field name="planetOrbitalYears" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="_planet3dLocations" type="Array" elementType="Vector3d" static="true">
    /// </field>
    /// <field name="planetRotations" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="planetColors" type="Array" elementType="Color" static="true">
    /// </field>
    /// <field name="planetRotationPeriod" type="Array" elementType="Number" static="true">
    /// </field>
    /// <field name="_jNow" type="Number" static="true">
    /// </field>
    /// <field name="_eclipticTilt" type="wwtlib.Matrix3d" static="true">
    /// </field>
    /// <field name="_lastPlanetCenterID" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_orbitalSampleRate" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_obliquity" type="Number" static="true">
    /// </field>
    /// <field name="_drawOrder" type="Object" static="true">
    /// </field>
    /// <field name="_lastUpdate" type="Date" static="true">
    /// </field>
    /// <field name="_earthDiameter" type="Number" static="true">
    /// </field>
    /// <field name="_ringsTriangleLists" type="Array" elementType="Array" static="true">
    /// </field>
    /// <field name="_ringImage" type="Object" domElement="true" static="true">
    /// </field>
    /// <field name="_planetLocations" type="Array" elementType="AstroRaDec" static="true">
    /// </field>
}
wwtlib.Planets.loadPlanetTexture = function wwtlib_Planets$loadPlanetTexture(url) {
    /// <param name="url" type="String">
    /// </param>
    /// <returns type="wwtlib.Texture"></returns>
    var texture = new wwtlib.Texture();
    texture.load(url);
    return texture;
}
wwtlib.Planets.getPlanet3dLocation = function wwtlib_Planets$getPlanet3dLocation(target) {
    /// <param name="target" type="wwtlib.SolarSystemObjects">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    try {
        if (target < 21) {
            return wwtlib.Planets._planet3dLocations[target].copy();
        }
    }
    catch ($e1) {
    }
    return wwtlib.Vector3d.create(0, 0, 0);
}
wwtlib.Planets.getPlanet3dSufaceAltitude = function wwtlib_Planets$getPlanet3dSufaceAltitude(target) {
    /// <param name="target" type="wwtlib.SolarSystemObjects">
    /// </param>
    /// <returns type="Number"></returns>
    try {
        if (target < 21) {
            return wwtlib.Planets.getAdjustedPlanetRadius(target);
        }
    }
    catch ($e1) {
    }
    return 0;
}
wwtlib.Planets.getPlanetTargetPoint = function wwtlib_Planets$getPlanetTargetPoint(target, lat, lng, jNow) {
    /// <param name="target" type="wwtlib.SolarSystemObjects">
    /// </param>
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <param name="jNow" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var temp;
    if (!jNow) {
        temp = wwtlib.Planets.getPlanet3dLocation(target);
    }
    else {
        temp = wwtlib.Planets.getPlanet3dLocationJD(target, jNow);
    }
    temp.add(wwtlib.Coordinates.raDecTo3dAu((lng / 15) + 6, lat, wwtlib.Planets.getPlanet3dSufaceAltitude(target)));
    return temp;
}
wwtlib.Planets.getPlanet3dLocationJD = function wwtlib_Planets$getPlanet3dLocationJD(target, jNow) {
    /// <param name="target" type="wwtlib.SolarSystemObjects">
    /// </param>
    /// <param name="jNow" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    try {
        var result = new wwtlib.Vector3d();
        var centerRaDec = wwtlib.AstroCalc.getPlanet(jNow, 0, 0, 0, -6378149);
        var center = wwtlib.Coordinates.raDecTo3dAu(centerRaDec.RA, centerRaDec.dec, centerRaDec.distance);
        if (target === 19) {
            result = wwtlib.Vector3d.create(-center.x, -center.y, -center.z);
        }
        else {
            var planet = wwtlib.AstroCalc.getPlanet(jNow, target, 0, 0, -6378149);
            result = wwtlib.Coordinates.raDecTo3dAu(planet.RA, planet.dec, planet.distance);
            result.subtract(center);
        }
        result.rotateX(wwtlib.Coordinates.meanObliquityOfEcliptic(jNow) * wwtlib.Planets.RC);
        if (wwtlib.Settings.get_active().get_solarSystemScale() !== 1) {
            switch (target) {
                case 9:
                    var parent = wwtlib.Planets.getPlanet3dLocationJD(19, jNow);
                    result.subtract(parent);
                    result.multiply(wwtlib.Settings.get_active().get_solarSystemScale() / 2);
                    result.add(parent);
                    break;
                case 10:
                case 11:
                case 12:
                case 13:
                    var parent = wwtlib.Planets.getPlanet3dLocationJD(4, jNow);
                    result.subtract(parent);
                    result.multiply(wwtlib.Settings.get_active().get_solarSystemScale());
                    result.add(parent);
                    break;
                default:
                    break;
            }
        }
        return result;
    }
    catch ($e1) {
        return wwtlib.Vector3d.create(0, 0, 0);
    }
}
wwtlib.Planets.getPlanetLocation = function wwtlib_Planets$getPlanetLocation(name) {
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="wwtlib.AstroRaDec"></returns>
    var id = wwtlib.Planets.getPlanetIDFromName(name);
    if (wwtlib.Planets._planetLocations != null) {
        return wwtlib.Planets._planetLocations[id];
    }
    else {
        return wwtlib.AstroCalc.getPlanet(wwtlib.SpaceTimeController.get_jNow(), id, wwtlib.SpaceTimeController.get_location().get_lat(), wwtlib.SpaceTimeController.get_location().get_lng(), wwtlib.SpaceTimeController.get_altitude());
    }
}
wwtlib.Planets.getPlanetLocationJD = function wwtlib_Planets$getPlanetLocationJD(name, jNow) {
    /// <param name="name" type="String">
    /// </param>
    /// <param name="jNow" type="Number">
    /// </param>
    /// <returns type="wwtlib.AstroRaDec"></returns>
    var id = wwtlib.Planets.getPlanetIDFromName(name);
    return wwtlib.AstroCalc.getPlanet(jNow, id, wwtlib.SpaceTimeController.get_location().get_lat(), wwtlib.SpaceTimeController.get_location().get_lng(), wwtlib.SpaceTimeController.get_altitude());
}
wwtlib.Planets.getPlanetIDFromName = function wwtlib_Planets$getPlanetIDFromName(planetName) {
    /// <param name="planetName" type="String">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    switch (planetName) {
        case 'Sun':
            return 0;
        case 'Mercury':
            return 1;
        case 'Venus':
            return 2;
        case 'Mars':
            return 3;
        case 'Jupiter':
            return 4;
        case 'Saturn':
            return 5;
        case 'Uranus':
            return 6;
        case 'Neptune':
            return 7;
        case 'Pluto':
            return 8;
        case 'Moon':
            return 9;
        case 'Io':
            return 10;
        case 'Europa':
            return 11;
        case 'Ganymede':
            return 12;
        case 'Callisto':
            return 13;
        case 'Earth':
            return 19;
        case 'IoShadow':
            return 14;
        case 'EuropaShadow':
            return 15;
        case 'GanymedeShadow':
            return 16;
        case 'CallistoShadow':
            return 17;
        case 'SunEclipsed':
            return 18;
        case 'Custom':
            return 20;
        case 'Undefined':
            return 65536;
        default:
            return -1;
    }
}
wwtlib.Planets.getNameFrom3dId = function wwtlib_Planets$getNameFrom3dId(id) {
    /// <param name="id" type="Number" integer="true">
    /// </param>
    /// <returns type="String"></returns>
    switch (id) {
        case 0:
            return 'Sun';
        case 1:
            return 'Mercury';
        case 2:
            return 'Venus';
        case 3:
            return 'Visible Imagery';
        case 4:
            return 'Jupiter';
        case 5:
            return 'Saturn';
        case 6:
            return 'Uranus';
        case 7:
            return 'Neptune';
        case 8:
            return 'Pluto';
        case 9:
            return 'Moon';
        case 10:
            return 'Io (Jupiter)';
        case 11:
            return 'Europa (Jupiter)';
        case 12:
            return 'Ganymede (Jupiter)';
        case 13:
            return 'Callisto (Jupiter)';
        case 19:
            return 'Bing Maps Aerial';
        default:
            return '';
    }
}
wwtlib.Planets.updatePlanetLocations = function wwtlib_Planets$updatePlanetLocations(threeDee) {
    /// <param name="threeDee" type="Boolean">
    /// </param>
    wwtlib.Planets._jNow = wwtlib.SpaceTimeController.get_jNow();
    if (threeDee) {
        wwtlib.Planets.updateOrbits(0);
    }
    if (wwtlib.Planets._planetDiameters == null) {
        wwtlib.Planets._planetDiameters = new Array(20);
        wwtlib.Planets._planetDiameters[0] = 0.009291568;
        wwtlib.Planets._planetDiameters[1] = 3.25794793734425E-05;
        wwtlib.Planets._planetDiameters[2] = 8.08669220531394E-05;
        wwtlib.Planets._planetDiameters[3] = 4.53785605596396E-05;
        wwtlib.Planets._planetDiameters[4] = 0.000954501;
        wwtlib.Planets._planetDiameters[5] = 0.000802173;
        wwtlib.Planets._planetDiameters[6] = 0.000339564;
        wwtlib.Planets._planetDiameters[7] = 0.000324825;
        wwtlib.Planets._planetDiameters[8] = 1.52007379777805E-05;
        wwtlib.Planets._planetDiameters[9] = 2.32084653538149E-05;
        wwtlib.Planets._planetDiameters[10] = 2.43519298386342E-05;
        wwtlib.Planets._planetDiameters[11] = 2.08692629580609E-05;
        wwtlib.Planets._planetDiameters[12] = 3.51742670356556E-05;
        wwtlib.Planets._planetDiameters[13] = 3.22263666626559E-05;
        wwtlib.Planets._planetDiameters[14] = 2.43519298386342E-05;
        wwtlib.Planets._planetDiameters[15] = 2.08692629580609E-05;
        wwtlib.Planets._planetDiameters[16] = 3.51742670356556E-05;
        wwtlib.Planets._planetDiameters[17] = 3.22263666626559E-05;
        wwtlib.Planets._planetDiameters[18] = 0.009291568 * 2;
        wwtlib.Planets._planetDiameters[19] = 8.55626412117809E-05;
    }
    if (wwtlib.Planets.planetColors == null) {
        var lightYellow = wwtlib.Color.fromArgb(255, 255, 255, 221);
        var orangeRed = wwtlib.Color.fromArgb(255, 255, 68, 0);
        wwtlib.Planets.planetColors = new Array(20);
        wwtlib.Planets.planetColors[0] = wwtlib.Colors.get_yellow();
        wwtlib.Planets.planetColors[1] = wwtlib.Colors.get_white();
        wwtlib.Planets.planetColors[2] = lightYellow;
        wwtlib.Planets.planetColors[3] = orangeRed;
        wwtlib.Planets.planetColors[4] = wwtlib.Color.fromArgb(255, 255, 165, 0);
        wwtlib.Planets.planetColors[5] = wwtlib.Color.fromArgb(255, 184, 134, 11);
        wwtlib.Planets.planetColors[6] = wwtlib.Color.fromArgb(255, 173, 216, 230);
        wwtlib.Planets.planetColors[7] = wwtlib.Colors.get_blue();
        wwtlib.Planets.planetColors[8] = wwtlib.Colors.get_white();
        wwtlib.Planets.planetColors[9] = wwtlib.Colors.get_white();
        wwtlib.Planets.planetColors[10] = wwtlib.Colors.get_white();
        wwtlib.Planets.planetColors[11] = wwtlib.Colors.get_white();
        wwtlib.Planets.planetColors[12] = wwtlib.Colors.get_white();
        wwtlib.Planets.planetColors[13] = wwtlib.Colors.get_white();
        wwtlib.Planets.planetColors[14] = wwtlib.Colors.get_black();
        wwtlib.Planets.planetColors[15] = wwtlib.Colors.get_black();
        wwtlib.Planets.planetColors[16] = wwtlib.Colors.get_black();
        wwtlib.Planets.planetColors[17] = wwtlib.Colors.get_black();
        wwtlib.Planets.planetColors[18] = wwtlib.Colors.get_white();
        wwtlib.Planets.planetColors[19] = wwtlib.Color.fromArgb(255, 173, 216, 230);
    }
    if (wwtlib.Planets._planetTilts == null) {
        wwtlib.Planets._planetTilts = new Array(20);
        wwtlib.Planets._planetTilts[0] = 0;
        wwtlib.Planets._planetTilts[1] = 0.01;
        wwtlib.Planets._planetTilts[2] = 177.4;
        wwtlib.Planets._planetTilts[3] = 25.19;
        wwtlib.Planets._planetTilts[4] = 3.13;
        wwtlib.Planets._planetTilts[5] = 26.73;
        wwtlib.Planets._planetTilts[6] = 97.77;
        wwtlib.Planets._planetTilts[7] = 28.32;
        wwtlib.Planets._planetTilts[8] = 119.61;
        wwtlib.Planets._planetTilts[9] = 23.439;
        wwtlib.Planets._planetTilts[10] = 2.21;
        wwtlib.Planets._planetTilts[11] = 0;
        wwtlib.Planets._planetTilts[12] = -0.33;
        wwtlib.Planets._planetTilts[13] = 0;
        wwtlib.Planets._planetTilts[14] = 0;
        wwtlib.Planets._planetTilts[15] = 0;
        wwtlib.Planets._planetTilts[16] = 0;
        wwtlib.Planets._planetTilts[17] = 0;
        wwtlib.Planets._planetTilts[18] = 0;
        wwtlib.Planets._planetTilts[19] = 23.5;
    }
    wwtlib.Planets._planetTilts[19] = wwtlib.Planets._obliquity / wwtlib.Planets.RC;
    if (wwtlib.Planets.planetRotationPeriod == null) {
        wwtlib.Planets.planetRotationPeriod = new Array(20);
        wwtlib.Planets.planetRotationPeriod[0] = 25.37995;
        wwtlib.Planets.planetRotationPeriod[1] = 58.6462;
        wwtlib.Planets.planetRotationPeriod[2] = -243.0187;
        wwtlib.Planets.planetRotationPeriod[3] = 1.02595675;
        wwtlib.Planets.planetRotationPeriod[4] = 0.41007;
        wwtlib.Planets.planetRotationPeriod[5] = 0.426;
        wwtlib.Planets.planetRotationPeriod[6] = -0.71833;
        wwtlib.Planets.planetRotationPeriod[7] = 0.67125;
        wwtlib.Planets.planetRotationPeriod[8] = -6.38718;
        wwtlib.Planets.planetRotationPeriod[9] = 27.3;
        wwtlib.Planets.planetRotationPeriod[10] = 1.769137786;
        wwtlib.Planets.planetRotationPeriod[11] = 3.551;
        wwtlib.Planets.planetRotationPeriod[12] = 7.155;
        wwtlib.Planets.planetRotationPeriod[13] = 16.69;
        wwtlib.Planets.planetRotationPeriod[14] = 0;
        wwtlib.Planets.planetRotationPeriod[15] = 0;
        wwtlib.Planets.planetRotationPeriod[16] = 0;
        wwtlib.Planets.planetRotationPeriod[17] = 0;
        wwtlib.Planets.planetRotationPeriod[18] = 0;
        wwtlib.Planets.planetRotationPeriod[19] = 0.99726968;
    }
    if (wwtlib.Planets._planetScales == null) {
        wwtlib.Planets._planetScales = new Array(20);
    }
    if (wwtlib.Planets._planet3dLocations == null) {
        wwtlib.Planets._planet3dLocations = new Array(20);
    }
    if (wwtlib.Settings.get_active().get_actualPlanetScale()) {
        wwtlib.Planets._planetScales[0] = 0.5;
        wwtlib.Planets._planetScales[1] = 0.25;
        wwtlib.Planets._planetScales[2] = 0.25;
        wwtlib.Planets._planetScales[3] = 0.25;
        wwtlib.Planets._planetScales[4] = 0.25;
        wwtlib.Planets._planetScales[5] = 0.5;
        wwtlib.Planets._planetScales[6] = 0.25;
        wwtlib.Planets._planetScales[7] = 0.25;
        wwtlib.Planets._planetScales[8] = 0.25;
        wwtlib.Planets._planetScales[9] = 0.25;
        wwtlib.Planets._planetScales[10] = 0.25;
        wwtlib.Planets._planetScales[11] = 0.25;
        wwtlib.Planets._planetScales[12] = 0.25;
        wwtlib.Planets._planetScales[13] = 0.25;
        wwtlib.Planets._planetScales[14] = 0.25;
        wwtlib.Planets._planetScales[15] = 0.25;
        wwtlib.Planets._planetScales[16] = 0.25;
        wwtlib.Planets._planetScales[17] = 0.25;
        wwtlib.Planets._planetScales[18] = 0.5;
        wwtlib.Planets._planetScales[19] = 0.25;
    }
    else {
        for (var i = 0; i < 20; i++) {
            if (i < 10) {
                wwtlib.Planets._planetScales[i] = 0.25;
            }
            else {
                wwtlib.Planets._planetScales[i] = 0.1;
            }
        }
        wwtlib.Planets._planetScales[0] = 0.5;
        wwtlib.Planets._planetScales[5] = 0.5;
        wwtlib.Planets._planetScales[18] = 0.5;
    }
    wwtlib.Planets._planetDrawOrder = {};
    wwtlib.Planets._planetLocations = new Array(20);
    var center = new wwtlib.Vector3d();
    var planetCenter = 0;
    if (planetCenter > -1) {
        var centerRaDec = wwtlib.AstroCalc.getPlanet(wwtlib.Planets._jNow, planetCenter, (threeDee) ? 0 : wwtlib.SpaceTimeController.get_location().get_lat(), (threeDee) ? 0 : wwtlib.SpaceTimeController.get_location().get_lng(), (threeDee) ? -6378149 : wwtlib.SpaceTimeController.get_altitude());
        center = wwtlib.Coordinates.raDecTo3dAu(centerRaDec.RA, centerRaDec.dec, centerRaDec.distance);
    }
    wwtlib.Planets._planet3dLocations[19] = wwtlib.Vector3d.create(-center.x, -center.y, -center.z);
    wwtlib.Planets._planet3dLocations[19].rotateX(wwtlib.Planets._obliquity);
    for (var i = 0; i < 18; i++) {
        wwtlib.Planets._planetLocations[i] = wwtlib.AstroCalc.getPlanet(wwtlib.Planets._jNow, i, (threeDee) ? 0 : wwtlib.SpaceTimeController.get_location().get_lat(), (threeDee) ? 0 : wwtlib.SpaceTimeController.get_location().get_lng(), (threeDee) ? -6378149 : wwtlib.SpaceTimeController.get_altitude());
        wwtlib.Planets._planet3dLocations[i] = wwtlib.Coordinates.raDecTo3dAu(wwtlib.Planets._planetLocations[i].RA, wwtlib.Planets._planetLocations[i].dec, wwtlib.Planets._planetLocations[i].distance);
        wwtlib.Planets._planet3dLocations[i].subtract(center);
        wwtlib.Planets._planet3dLocations[i].rotateX(wwtlib.Planets._obliquity);
        if (wwtlib.Settings.get_active().get_actualPlanetScale()) {
            wwtlib.Planets._planetScales[i] = (2 * Math.atan(0.5 * (wwtlib.Planets._planetDiameters[i] / wwtlib.Planets._planetLocations[i].distance))) / Math.PI * 180;
        }
        if (wwtlib.Settings.get_active().get_solarSystemScale() !== 1) {
            var id = i;
            switch (id) {
                case 9:
                    var parent = wwtlib.Planets._planet3dLocations[19];
                    wwtlib.Planets._planet3dLocations[i].subtract(parent);
                    wwtlib.Planets._planet3dLocations[i].multiply(wwtlib.Settings.get_active().get_solarSystemScale() / 2);
                    wwtlib.Planets._planet3dLocations[i].add(parent);
                    break;
                case 10:
                case 11:
                case 12:
                case 13:
                    var parent = wwtlib.Planets._planet3dLocations[4];
                    wwtlib.Planets._planet3dLocations[i].subtract(parent);
                    wwtlib.Planets._planet3dLocations[i].multiply(wwtlib.Settings.get_active().get_solarSystemScale());
                    wwtlib.Planets._planet3dLocations[i].add(parent);
                    break;
                default:
                    break;
            }
        }
        var finalDistance = -wwtlib.Planets._planetLocations[i].distance;
        while (Object.keyExists(wwtlib.Planets._planetDrawOrder, finalDistance)) {
            finalDistance += 1E-10;
        }
        wwtlib.Planets._planetDrawOrder[finalDistance] = i;
    }
    wwtlib.Planets._planetLocations[18] = wwtlib.Planets._planetLocations[0];
    wwtlib.Planets._planetScales[18] = wwtlib.Planets._planetScales[0] * 2;
    wwtlib.Planets._planetScales[5] = wwtlib.Planets._planetScales[5] * 2;
    wwtlib.Planets._lastUpdate = wwtlib.SpaceTimeController.get_now();
}
wwtlib.Planets.planetsReady = function wwtlib_Planets$planetsReady() {
}
wwtlib.Planets.updateOrbits = function wwtlib_Planets$updateOrbits(planetCenter) {
    /// <param name="planetCenter" type="Number" integer="true">
    /// </param>
    try {
        wwtlib.Planets._obliquity = wwtlib.Coordinates.meanObliquityOfEcliptic(wwtlib.SpaceTimeController.get_jNow()) * wwtlib.Planets.RC;
        if (planetCenter !== wwtlib.Planets._lastPlanetCenterID) {
            wwtlib.Planets._orbits = null;
        }
        wwtlib.Planets._lastPlanetCenterID = planetCenter;
        if (wwtlib.Planets._orbits == null) {
            if (planetCenter < 0) {
                wwtlib.Planets._eclipticTilt = wwtlib.Matrix3d.get_identity();
            }
            else {
                wwtlib.Planets._eclipticTilt = wwtlib.Matrix3d.get_identity();
                wwtlib.Planets._eclipticTilt = wwtlib.Matrix3d._rotationX(wwtlib.Planets._obliquity);
            }
            if (wwtlib.Planets.planetOrbitalYears == null) {
                wwtlib.Planets.planetOrbitalYears = new Array(20);
                wwtlib.Planets.planetOrbitalYears[0] = 1;
                wwtlib.Planets.planetOrbitalYears[1] = 0.241;
                wwtlib.Planets.planetOrbitalYears[2] = 0.615;
                wwtlib.Planets.planetOrbitalYears[3] = 1.881;
                wwtlib.Planets.planetOrbitalYears[4] = 11.87;
                wwtlib.Planets.planetOrbitalYears[5] = 29.45;
                wwtlib.Planets.planetOrbitalYears[6] = 84.07;
                wwtlib.Planets.planetOrbitalYears[7] = 164.9;
                wwtlib.Planets.planetOrbitalYears[8] = 248.1;
                wwtlib.Planets.planetOrbitalYears[9] = 27.3 / 365.25;
                wwtlib.Planets.planetOrbitalYears[10] = 16.6890184 / 365.25;
                wwtlib.Planets.planetOrbitalYears[11] = 3.551181 / 365.25;
                wwtlib.Planets.planetOrbitalYears[12] = 7.15455296 / 365.25;
                wwtlib.Planets.planetOrbitalYears[13] = 16.6890184 / 365.25;
                wwtlib.Planets.planetOrbitalYears[19] = 1;
            }
            if (!wwtlib.Planets.readOrbits()) {
                wwtlib.Planets._orbits = new Array(20);
                for (var i = 1; i < 20; i++) {
                    wwtlib.Planets._orbits[i] = new Array(wwtlib.Planets._orbitalSampleRate);
                    if (i < 9 || i === 19) {
                        for (var j = 0; j < wwtlib.Planets._orbitalSampleRate; j++) {
                            var centerId = planetCenter;
                            var now = wwtlib.Planets._jNow + ((wwtlib.Planets.planetOrbitalYears[i] * 365.25 / wwtlib.Planets._orbitalSampleRate) * (j - (wwtlib.Planets._orbitalSampleRate / 2)));
                            var center = new wwtlib.Vector3d();
                            if (i === 9) {
                                centerId = -1;
                            }
                            else if (i > 9 && i < 14) {
                                centerId = 4;
                            }
                            if (centerId > -1) {
                                var centerRaDec = wwtlib.AstroCalc.getPlanet(now, centerId, 0, 0, -6378149);
                                center = wwtlib.Coordinates.raDecTo3dAu(centerRaDec.RA, centerRaDec.dec, centerRaDec.distance);
                            }
                            if (i !== 19) {
                                var planetRaDec = wwtlib.AstroCalc.getPlanet(now, i, 0, 0, -6378149);
                                wwtlib.Planets._orbits[i][j] = wwtlib.Coordinates.raDecTo3dAu(planetRaDec.RA, planetRaDec.dec, planetRaDec.distance);
                                wwtlib.Planets._orbits[i][j].subtract(center);
                            }
                            else {
                                wwtlib.Planets._orbits[i][j] = wwtlib.Vector3d.create(-center.x, -center.y, -center.z);
                            }
                            wwtlib.Planets._orbits[i][j].rotateX(wwtlib.Planets._obliquity);
                        }
                        wwtlib.Planets._orbits[i][wwtlib.Planets._orbitalSampleRate - 1] = wwtlib.Planets._orbits[i][0];
                    }
                }
                wwtlib.Planets.dumpOrbitsFile();
            }
        }
    }
    finally {
    }
}
wwtlib.Planets.readOrbits = function wwtlib_Planets$readOrbits() {
    /// <returns type="Boolean"></returns>
    return false;
    return true;
}
wwtlib.Planets.dumpOrbitsFile = function wwtlib_Planets$dumpOrbitsFile() {
}
wwtlib.Planets.drawPlanets = function wwtlib_Planets$drawPlanets(renderContext, opacity) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <returns type="Boolean"></returns>
    if (wwtlib.Planets._planetTextures == null) {
        wwtlib.Planets._loadPlanetTextures();
    }
    var elong = wwtlib.Planets._geocentricElongation(wwtlib.Planets._planetLocations[9].RA, wwtlib.Planets._planetLocations[9].dec, wwtlib.Planets._planetLocations[0].RA, wwtlib.Planets._planetLocations[0].dec);
    var raDif = wwtlib.Planets._planetLocations[9].RA - wwtlib.Planets._planetLocations[0].RA;
    if (wwtlib.Planets._planetLocations[9].RA < wwtlib.Planets._planetLocations[0].RA) {
        raDif += 24;
    }
    var phaseAngle = wwtlib.Planets._phaseAngle(elong, wwtlib.Planets._planetLocations[9].distance, wwtlib.Planets._planetLocations[0].distance);
    var limbAngle = wwtlib.Planets._positionAngle(wwtlib.Planets._planetLocations[9].RA, wwtlib.Planets._planetLocations[9].dec, wwtlib.Planets._planetLocations[0].RA, wwtlib.Planets._planetLocations[0].dec);
    if (raDif < 12) {
        phaseAngle += 180;
    }
    var dista = (Math.abs(wwtlib.Planets._planetLocations[9].RA - wwtlib.Planets._planetLocations[0].RA) * 15) * Math.cos(wwtlib.Coordinates.degreesToRadians(wwtlib.Planets._planetLocations[0].dec));
    var distb = Math.abs(wwtlib.Planets._planetLocations[9].dec - wwtlib.Planets._planetLocations[0].dec);
    var sunMoonDist = Math.sqrt(dista * dista + distb * distb);
    var eclipse = false;
    var coronaOpacity = 0;
    var moonEffect = (wwtlib.Planets._planetScales[9] / 2 - sunMoonDist);
    var darkLimb = Math.min(32, parseInt((sunMoonDist * 32)));
    if (moonEffect > (wwtlib.Planets._planetScales[0] / 4)) {
        eclipse = true;
        coronaOpacity = Math.min(1, (moonEffect - (wwtlib.Planets._planetScales[0] / 2)) / 0.001);
        wwtlib.Planets._drawPlanet(renderContext, 18, coronaOpacity);
    }
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.Planets._planetDrawOrder));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var planetId = wwtlib.Planets._planetDrawOrder[key];
        wwtlib.Planets._drawPlanet(renderContext, planetId, 1);
    }
    return true;
}
wwtlib.Planets._loadPlanetTextures = function wwtlib_Planets$_loadPlanetTextures() {
    var baseUrl = 'http://cdn.worldwidetelescope.org/webclient/images/';
    wwtlib.Planets._planetTextures = new Array(20);
    wwtlib.Planets._planetTextures[0] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'sun.jpg');
    wwtlib.Planets._planetTextures[1] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'mercury.jpg');
    wwtlib.Planets._planetTextures[2] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'venus.jpg');
    wwtlib.Planets._planetTextures[3] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'mars.jpg');
    wwtlib.Planets._planetTextures[4] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'jupiter.jpg');
    wwtlib.Planets._planetTextures[5] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'saturn.png');
    wwtlib.Planets._planetTextures[6] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'uranus.jpg');
    wwtlib.Planets._planetTextures[7] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'neptune.jpg');
    wwtlib.Planets._planetTextures[8] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'pluto.jpg');
    wwtlib.Planets._planetTextures[9] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'moon.jpg');
    wwtlib.Planets._planetTextures[10] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'io.jpg');
    wwtlib.Planets._planetTextures[11] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'europa.jpg');
    wwtlib.Planets._planetTextures[12] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'ganymede.jpg');
    wwtlib.Planets._planetTextures[13] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'callisto.jpg');
    wwtlib.Planets._planetTextures[14] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'sun.jpg');
    wwtlib.Planets._planetTextures[15] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'sun.jpg');
    wwtlib.Planets._planetTextures[16] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'sun.jpg');
    wwtlib.Planets._planetTextures[17] = wwtlib.Planets.loadPlanetTexture(baseUrl + 'sun.jpg');
    wwtlib.Planets._planetTextures[18] = wwtlib.Planets.loadPlanetTexture('sunCorona.png');
    wwtlib.Planets._planetTextures[19] = wwtlib.Planets.loadPlanetTexture('earth.jpg');
}
wwtlib.Planets.drawPlanets3D = function wwtlib_Planets$drawPlanets3D(renderContext, opacity, centerPoint) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="centerPoint" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="Boolean"></returns>
    wwtlib.Planets.initPlanetResources(renderContext);
    var distss = wwtlib.UiTools.solarSystemToMeters(renderContext.get_solarSystemCameraDistance());
    var moonFade = Math.min(1, Math.max(wwtlib._util.log10(distss) - 7.3, 0));
    var fade = Math.min(1, Math.max(wwtlib._util.log10(distss) - 8.6, 0));
    if (wwtlib.Settings.get_active().get_solarSystemOrbits() && fade > 0) {
        for (var ii = 1; ii < 10; ii++) {
            var id = ii;
            if (ii === 9) {
                id = 19;
            }
            var angle = Math.atan2(wwtlib.Planets._planet3dLocations[id].z, wwtlib.Planets._planet3dLocations[id].x);
            wwtlib.Planets._drawSingleOrbit(renderContext, wwtlib.Planets.planetColors[id], id, centerPoint, angle, wwtlib.Planets._planet3dLocations[id], fade);
        }
    }
    Object.clearKeys(wwtlib.Planets._drawOrder);
    var camera = renderContext.cameraPosition.copy();
    for (var planetId = 0; planetId < 14; planetId++) {
        if (!wwtlib.Planets._planetLocations[planetId].eclipsed) {
            var distVector = wwtlib.Vector3d.subtractVectors(camera, wwtlib.Vector3d.subtractVectors(wwtlib.Planets._planet3dLocations[planetId], centerPoint));
            if (!Object.keyExists(wwtlib.Planets._drawOrder, distVector.length())) {
                wwtlib.Planets._drawOrder[distVector.length()] = planetId;
            }
        }
    }
    var distVectorEarth = wwtlib.Vector3d.subtractVectors(camera, wwtlib.Vector3d.subtractVectors(wwtlib.Planets._planet3dLocations[19], centerPoint));
    if (!Object.keyExists(wwtlib.Planets._drawOrder, distVectorEarth.length())) {
        wwtlib.Planets._drawOrder[distVectorEarth.length()] = 19;
    }
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.Planets._drawOrder));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var planetId = wwtlib.Planets._drawOrder[key];
        wwtlib.Planets._drawPlanet3d(renderContext, planetId, centerPoint);
    }
    return true;
}
wwtlib.Planets.initPlanetResources = function wwtlib_Planets$initPlanetResources(renderContext) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
}
wwtlib.Planets._drawSingleOrbit = function wwtlib_Planets$_drawSingleOrbit(renderContext, eclipticColor, id, centerPoint, startAngle, planetNow, opacity) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="eclipticColor" type="wwtlib.Color">
    /// </param>
    /// <param name="id" type="Number" integer="true">
    /// </param>
    /// <param name="centerPoint" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="startAngle" type="Number">
    /// </param>
    /// <param name="planetNow" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    if (opacity < 0.01) {
        return;
    }
    if (renderContext.gl == null) {
        var count = wwtlib.Planets._orbitalSampleRate;
        var planetDropped = false;
        var viewPoint = renderContext.get_viewPoint();
        var ctx = renderContext.device;
        ctx.save();
        ctx.strokeStyle = eclipticColor.toString();
        ctx.lineWidth = 2;
        ctx.globalAlpha = 1;
        var point = new wwtlib.Vector3d();
        var pointTest = new wwtlib.Vector3d();
        var lastPoint = new wwtlib.Vector3d();
        var firstPoint = true;
        var translate = wwtlib.Matrix3d.translation(wwtlib.Vector3d.negate(centerPoint));
        var mat = wwtlib.Matrix3d.multiplyMatrix(translate, renderContext.WVP);
        var matWV = wwtlib.Matrix3d.multiplyMatrix(translate, renderContext.WV);
        for (var i = 0; i < count; i++) {
            var pnt = wwtlib.Planets._orbits[id][i];
            var angle = (Math.atan2(wwtlib.Planets._orbits[id][i].z, wwtlib.Planets._orbits[id][i].x) + Math.PI * 2 - startAngle) % (Math.PI * 2);
            var alpha = parseInt((angle / (Math.PI * 2) * 255));
            var alphaD = alpha / 255;
            if (alpha < 2 && !planetDropped) {
                pnt = planetNow;
                alphaD = 1;
            }
            pointTest = matWV.transform(pnt);
            point = mat.transform(pnt);
            if (pointTest.z > 0) {
                if (firstPoint) {
                    firstPoint = false;
                }
                else {
                    ctx.beginPath();
                    ctx.globalAlpha = alphaD * opacity;
                    ctx.moveTo(lastPoint.x, lastPoint.y);
                    ctx.lineTo(point.x, point.y);
                    ctx.stroke();
                }
            }
            lastPoint = point;
        }
        ctx.restore();
    }
    else {
    }
}
wwtlib.Planets.isPlanetInFrustum = function wwtlib_Planets$isPlanetInFrustum(renderContext, rad) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="rad" type="Number">
    /// </param>
    /// <returns type="Boolean"></returns>
    var frustum = renderContext.get_frustum();
    var center = wwtlib.Vector3d.create(0, 0, 0);
    var centerV4 = new wwtlib.Vector4d(0, 0, 0, 1);
    for (var i = 0; i < 6; i++) {
        if (frustum[i].dot(centerV4) + rad < 0) {
            return false;
        }
    }
    return true;
}
wwtlib.Planets._drawPlanet3d = function wwtlib_Planets$_drawPlanet3d(renderContext, planetID, centerPoint) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="planetID" type="Number" integer="true">
    /// </param>
    /// <param name="centerPoint" type="wwtlib.Vector3d">
    /// </param>
    if (planetID === 0) {
    }
    else {
    }
    var radius = wwtlib.Planets.getAdjustedPlanetRadius(planetID);
    var rotationCurrent = 0;
    if (planetID === 19) {
        rotationCurrent = wwtlib.Coordinates.mstFromUTC2(wwtlib.SpaceTimeController.get_now(), 0) / 180 * Math.PI;
    }
    else {
        rotationCurrent = (((wwtlib.Planets._jNow - 2451545) / wwtlib.Planets.planetRotationPeriod[planetID]) * Math.PI * 2) % (Math.PI * 2);
    }
    var matOld = renderContext.get_world();
    var matOldBase = renderContext.get_worldBase();
    var matOldNonRotating = renderContext.get_worldBaseNonRotating();
    var matLocal = renderContext.get_world().clone();
    var matLocalNR = renderContext.get_world().clone();
    var translation = wwtlib.Vector3d.subtractVectors(wwtlib.Planets._planet3dLocations[planetID], centerPoint);
    matLocal.scale(wwtlib.Vector3d.create(radius, radius, radius));
    matLocal._multiply(wwtlib.Matrix3d._rotationY(-rotationCurrent));
    matLocal._multiply(wwtlib.Matrix3d._rotationX((wwtlib.Planets._planetTilts[planetID] * wwtlib.Planets.RC)));
    matLocal._multiply(wwtlib.Matrix3d.translation(translation));
    matLocalNR.scale(wwtlib.Vector3d.create(radius, radius, radius));
    matLocalNR._multiply(wwtlib.Matrix3d._rotationX((wwtlib.Planets._planetTilts[planetID] * wwtlib.Planets.RC)));
    matLocalNR._multiply(wwtlib.Matrix3d.translation(translation));
    renderContext.set_world(matLocal);
    renderContext.set_worldBase(matLocal.clone());
    renderContext.set_worldBaseNonRotating(matLocalNR);
    renderContext.makeFrustum();
    var planetWidth = 1;
    if (planetID === 5) {
        planetWidth = 3;
    }
    if (wwtlib.Planets.isPlanetInFrustum(renderContext, planetWidth)) {
        var sun = wwtlib.Planets._planet3dLocations[0].copy();
        var planet = wwtlib.Planets._planet3dLocations[planetID].copy();
        sun = matOld.transform(sun);
        planet = matOld.transform(planet);
        var sunPosition = wwtlib.Vector3d.subtractVectors(sun, planet);
        sunPosition.normalize();
        renderContext.set_sunPosition(sunPosition);
        var loc = wwtlib.Vector3d.subtractVectors(wwtlib.Planets._planet3dLocations[planetID], centerPoint);
        loc.subtract(renderContext.cameraPosition);
        var dist = loc.length();
        var sizeIndexParam = (2 * Math.atan(0.5 * (radius / dist))) / Math.PI * 180;
        var sizeIndex = 0;
        if (sizeIndexParam > 10.5) {
            sizeIndex = 0;
        }
        else if (sizeIndexParam > 3.9) {
            sizeIndex = 1;
        }
        else if (sizeIndexParam > 0.72) {
            sizeIndex = 2;
        }
        else if (sizeIndexParam > 0.05) {
            sizeIndex = 3;
        }
        else {
            sizeIndex = 4;
        }
        if (planetID === 19 && sizeIndex < 2) {
            var width = wwtlib.Settings.get_active().get_solarSystemScale() * 1E-05;
        }
        if (sizeIndex < 3) {
            var oldLighting = renderContext.lighting;
            if (planetID === 5) {
                renderContext.lighting = false;
                wwtlib.Planets.drawSaturnsRings(renderContext, false, dist);
                renderContext.lighting = oldLighting;
            }
            if (!planetID) {
                renderContext.lighting = false;
            }
            wwtlib.Planets._drawSphere(renderContext, planetID);
            if (planetID === 5) {
                renderContext.lighting = false;
                wwtlib.Planets.drawSaturnsRings(renderContext, true, dist);
            }
            renderContext.lighting = oldLighting;
        }
        else {
            if (!planetID) {
                wwtlib.Planets.drawPointPlanet(renderContext, new wwtlib.Vector3d(), (10 * wwtlib.Planets._planetDiameters[planetID]), wwtlib.Planets.planetColors[planetID], true);
            }
            else if (planetID < 9 || planetID === 19) {
                var size = (800 * wwtlib.Planets._planetDiameters[planetID]);
                wwtlib.Planets.drawPointPlanet(renderContext, new wwtlib.Vector3d(), Math.max(0.05, Math.min(0.1, size)), wwtlib.Planets.planetColors[planetID], true);
            }
            else if (sizeIndexParam > 0.002) {
                var size = (800 * wwtlib.Planets._planetDiameters[planetID]);
                wwtlib.Planets.drawPointPlanet(renderContext, new wwtlib.Vector3d(), Math.max(0.05, Math.min(0.1, size)), wwtlib.Planets.planetColors[planetID], true);
            }
        }
    }
    renderContext.set_world(matOld);
    renderContext.set_worldBase(matOldBase);
    renderContext.set_worldBaseNonRotating(matOldNonRotating);
}
wwtlib.Planets.drawSaturnsRings = function wwtlib_Planets$drawSaturnsRings(renderContext, front, distance) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="front" type="Boolean">
    /// </param>
    /// <param name="distance" type="Number">
    /// </param>
    if (wwtlib.Planets._ringsTriangleLists[0] == null) {
        wwtlib.Planets._ringImage = document.createElement('img');
        var xdomimg = wwtlib.Planets._ringImage;
        xdomimg.crossOrigin = 'anonymous';
        wwtlib.Planets._ringImage.src = '/webclient/images/saturnringsshadow.png';
        wwtlib.Planets._ringsTriangleLists[0] = [];
        wwtlib.Planets._ringsTriangleLists[1] = [];
        var ringSize = 2.25;
        var TopLeft = wwtlib.Vector3d.create(-ringSize, 0, -ringSize);
        var TopRight = wwtlib.Vector3d.create(ringSize, 0, -ringSize);
        var BottomLeft = wwtlib.Vector3d.create(-ringSize, 0, ringSize);
        var BottomRight = wwtlib.Vector3d.create(ringSize, 0, ringSize);
        var center = wwtlib.Vector3d.create(0, 0, 0);
        var leftCenter = wwtlib.Vector3d.create(-ringSize, 0, 0);
        var topCenter = wwtlib.Vector3d.create(0, 0, -ringSize);
        var bottomCenter = wwtlib.Vector3d.create(0, 0, ringSize);
        var rightCenter = wwtlib.Vector3d.create(ringSize, 0, 0);
        var level = 6;
        var vertexList;
        vertexList = [];
        var Width = 1024;
        var Height = 1024;
        vertexList.add(wwtlib.PositionTexture.createPosSize(TopLeft, 0, 0, Width, Height));
        vertexList.add(wwtlib.PositionTexture.createPosSize(TopRight, 1, 0, Width, Height));
        vertexList.add(wwtlib.PositionTexture.createPosSize(BottomLeft, 0, 1, Width, Height));
        vertexList.add(wwtlib.PositionTexture.createPosSize(BottomRight, 1, 1, Width, Height));
        var childTriangleList = [];
        childTriangleList.add(wwtlib._triangle.create(0, 2, 1));
        childTriangleList.add(wwtlib._triangle.create(2, 3, 1));
        var count = 5;
        while (count-- > 1) {
            var newList = [];
            var $enum1 = ss.IEnumerator.getEnumerator(childTriangleList);
            while ($enum1.moveNext()) {
                var tri = $enum1.current;
                tri.subDivideNoNormalize(newList, vertexList);
            }
            childTriangleList = newList;
        }
        var miter = 0.6 / (Width / 256);
        var $enum2 = ss.IEnumerator.getEnumerator(childTriangleList);
        while ($enum2.moveNext()) {
            var tri = $enum2.current;
            var p1 = vertexList[tri.a];
            var p2 = vertexList[tri.b];
            var p3 = vertexList[tri.c];
            wwtlib.Planets._ringsTriangleLists[0].add(wwtlib.RenderTriangle.createWithMiter(p1, p2, p3, wwtlib.Planets._ringImage, level, miter));
        }
    }
    if (renderContext.gl == null) {
        var cam = renderContext.cameraPosition;
        var test = new wwtlib.Vector3d();
        var worldLocal = wwtlib.Matrix3d.multiplyMatrix(wwtlib.Matrix3d._rotationY(Math.atan2(renderContext.get_sunPosition().x, renderContext.get_sunPosition().z)), renderContext.get_worldBaseNonRotating());
        var wv = wwtlib.Matrix3d.multiplyMatrix(worldLocal, renderContext.get_view());
        var wvp = wwtlib.Matrix3d.multiplyMatrix(wv, renderContext.get_projection());
        var Width = renderContext.width;
        var Height = renderContext.height;
        wvp.scale(wwtlib.Vector3d.create(Width / 2, -Height / 2, 1));
        wvp.translate(wwtlib.Vector3d.create(Width / 2, Height / 2, 0));
        var td = 0;
        for (var i = 0; i < 2; i++) {
            var $enum3 = ss.IEnumerator.getEnumerator(wwtlib.Planets._ringsTriangleLists[0]);
            while ($enum3.moveNext()) {
                var tri = $enum3.current;
                test = wv.transform(tri.a.position);
                td = test.length();
                var draw = td > distance;
                if (front) {
                    draw = !draw;
                }
                if (draw) {
                    tri.opacity = 1;
                    tri.draw(renderContext.device, wvp);
                }
            }
            wwtlib.RenderTriangle.cullInside = !wwtlib.RenderTriangle.cullInside;
        }
    }
    else {
    }
}
wwtlib.Planets.drawPointPlanet = function wwtlib_Planets$drawPointPlanet(renderContext, location, size, color, zOrder) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="location" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="size" type="Number">
    /// </param>
    /// <param name="color" type="wwtlib.Color">
    /// </param>
    /// <param name="zOrder" type="Boolean">
    /// </param>
    size = Math.max(2, size);
    var center = location;
    var rad = size / 2;
    var screenSpacePnt = renderContext.WVP.transform(center);
    if (screenSpacePnt.z < 0) {
        return;
    }
    if (!zOrder) {
        if (wwtlib.Vector3d.dot(renderContext.get_viewPoint(), center) < 0.55) {
            return;
        }
    }
    if (renderContext.gl != null) {
    }
    else {
        var ctx = renderContext.device;
        ctx.save();
        ctx.beginPath();
        ctx.arc(screenSpacePnt.x, screenSpacePnt.y, rad, 0, Math.PI * 2, true);
        ctx.lineWidth = 1;
        ctx.fillStyle = color.toString();
        if (true) {
            ctx.fill();
        }
        ctx.globalAlpha = 1;
        ctx.strokeStyle = color.toString();
        ctx.stroke();
        ctx.restore();
    }
}
wwtlib.Planets.getAdjustedPlanetRadius = function wwtlib_Planets$getAdjustedPlanetRadius(planetID) {
    /// <param name="planetID" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    if (planetID > wwtlib.Planets._planetDiameters.length - 1) {
        planetID = 19;
    }
    var diameter = wwtlib.Planets._planetDiameters[planetID];
    var radius = (diameter / 2);
    if (!!planetID) {
        radius = radius * (1 + (3 * (wwtlib.Settings.get_active().get_solarSystemScale() - 1)));
    }
    else {
        radius = radius * (1 + (0.3 * (wwtlib.Settings.get_active().get_solarSystemScale() - 1)));
    }
    return radius;
}
wwtlib.Planets._drawPlanet = function wwtlib_Planets$_drawPlanet(renderContext, planetID, opacity) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="planetID" type="Number" integer="true">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    var planetPosition = wwtlib.Planets._planetLocations[planetID];
    if (((planetID < 14) && wwtlib.Planets._planetScales[planetID] < (renderContext.viewCamera.zoom / 6) / 400)) {
        if (planetID < 10 || ((planetID < 14) && wwtlib.Planets._planetScales[planetID] > (renderContext.viewCamera.zoom / 6) / 6400)) {
            var point = wwtlib.Coordinates.raDecTo3d(planetPosition.RA, planetPosition.dec);
            wwtlib.Planets.drawPointPlanet(renderContext, point, 3, wwtlib.Planets.planetColors[planetID], false);
        }
        return;
    }
    var brush = null;
    if (planetID < 10 || planetID === 18) {
        brush = wwtlib.Planets._planetTextures[planetID].imageElement;
    }
    else if (planetID < 14) {
        if (wwtlib.Planets._planetLocations[planetID].eclipsed) {
            brush = wwtlib.Planets._planetTextures[15].imageElement;
        }
        else {
            if (wwtlib.Settings.get_active().get_showMoonsAsPointSource()) {
                brush = wwtlib.Planets._planetTextures[14].imageElement;
            }
            else {
                brush = wwtlib.Planets._planetTextures[planetID].imageElement;
            }
        }
    }
    else {
        if (!wwtlib.Planets._planetLocations[planetID].shadow) {
            return;
        }
        brush = wwtlib.Planets._planetTextures[15].imageElement;
    }
    var center = wwtlib.Coordinates.raDecTo3d(planetPosition.RA, planetPosition.dec);
    var rad = wwtlib.Planets._planetScales[planetID] / (renderContext.get_fovScale() / 3600) / 2;
    var screenSpacePnt = renderContext.WVP.transform(center);
    if (screenSpacePnt.z < 0) {
        return;
    }
    if (wwtlib.Vector3d.dot(renderContext.get_viewPoint(), center) < 0.55) {
        return;
    }
    if (renderContext.gl != null) {
    }
    else {
        var ctx = renderContext.device;
        ctx.save();
        ctx.globalAlpha = opacity;
        ctx.beginPath();
        ctx.arc(screenSpacePnt.x, screenSpacePnt.y, rad, 0, Math.PI * 2, true);
        ctx.lineWidth = 0;
        ctx.closePath();
        ctx.clip();
        ctx.drawImage(brush, screenSpacePnt.x - rad, screenSpacePnt.y - rad, rad * 2, rad * 2);
        ctx.globalAlpha = 1;
        ctx.restore();
    }
}
wwtlib.Planets._drawPlanetPhase = function wwtlib_Planets$_drawPlanetPhase(renderContext, planetID, phase, angle, dark) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="planetID" type="Number" integer="true">
    /// </param>
    /// <param name="phase" type="Number">
    /// </param>
    /// <param name="angle" type="Number">
    /// </param>
    /// <param name="dark" type="Number" integer="true">
    /// </param>
}
wwtlib.Planets._geocentricElongation = function wwtlib_Planets$_geocentricElongation(ObjectAlpha, ObjectDelta, SunAlpha, SunDelta) {
    /// <param name="ObjectAlpha" type="Number">
    /// </param>
    /// <param name="ObjectDelta" type="Number">
    /// </param>
    /// <param name="SunAlpha" type="Number">
    /// </param>
    /// <param name="SunDelta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    ObjectAlpha = wwtlib.Coordinates.degreesToRadians(ObjectAlpha * 15);
    SunAlpha = wwtlib.Coordinates.degreesToRadians(SunAlpha * 15);
    ObjectDelta = wwtlib.Coordinates.degreesToRadians(ObjectDelta);
    SunDelta = wwtlib.Coordinates.degreesToRadians(SunDelta);
    return wwtlib.Coordinates.radiansToDegrees(Math.acos(Math.sin(SunDelta) * Math.sin(ObjectDelta) + Math.cos(SunDelta) * Math.cos(ObjectDelta) * Math.cos(SunAlpha - ObjectAlpha)));
}
wwtlib.Planets._phaseAngle = function wwtlib_Planets$_phaseAngle(GeocentricElongation, EarthObjectDistance, EarthSunDistance) {
    /// <param name="GeocentricElongation" type="Number">
    /// </param>
    /// <param name="EarthObjectDistance" type="Number">
    /// </param>
    /// <param name="EarthSunDistance" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    GeocentricElongation = wwtlib.Coordinates.degreesToRadians(GeocentricElongation);
    return wwtlib.Coordinates.mapTo0To360Range(wwtlib.Coordinates.radiansToDegrees(Math.atan2(EarthSunDistance * Math.sin(GeocentricElongation), EarthObjectDistance - EarthSunDistance * Math.cos(GeocentricElongation))));
}
wwtlib.Planets._positionAngle = function wwtlib_Planets$_positionAngle(Alpha0, Delta0, Alpha, Delta) {
    /// <param name="Alpha0" type="Number">
    /// </param>
    /// <param name="Delta0" type="Number">
    /// </param>
    /// <param name="Alpha" type="Number">
    /// </param>
    /// <param name="Delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    Alpha0 = wwtlib.Coordinates.hoursToRadians(Alpha0);
    Alpha = wwtlib.Coordinates.hoursToRadians(Alpha);
    Delta0 = wwtlib.Coordinates.degreesToRadians(Delta0);
    Delta = wwtlib.Coordinates.degreesToRadians(Delta);
    return wwtlib.Coordinates.mapTo0To360Range(wwtlib.Coordinates.radiansToDegrees(Math.atan2(Math.cos(Delta0) * Math.sin(Alpha0 - Alpha), Math.sin(Delta0) * Math.cos(Delta) - Math.cos(Delta0) * Math.sin(Delta) * Math.cos(Alpha0 - Alpha))));
}
wwtlib.Planets._drawSphere = function wwtlib_Planets$_drawSphere(renderContext, planetID) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="planetID" type="Number" integer="true">
    /// </param>
    var planetName = wwtlib.Planets.getNameFrom3dId(planetID);
    var planet = wwtlib.WWTControl.singleton.getImagesetByName(planetName);
    if (planet == null) {
        planet = wwtlib.WWTControl.singleton.getImagesetByName('Bing Maps Aerial');
    }
    if (planet != null) {
        renderContext.drawImageSet(planet, 100);
        if (planetID === 19) {
        }
        return;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PlotTile

wwtlib.PlotTile = function wwtlib_PlotTile() {
    /// <field name="_topDown$1" type="Boolean">
    /// </field>
    /// <field name="bounds" type="Array" elementType="PositionTexture">
    /// </field>
    /// <field name="backslash" type="Boolean">
    /// </field>
    /// <field name="_vertexList$1" type="Array">
    /// </field>
    /// <field name="_childTriangleList$1" type="Array" elementType="Array">
    /// </field>
    /// <field name="demArray" type="Array" elementType="Number">
    /// </field>
    /// <field name="_webFile$1" type="wwtlib.WebFile">
    /// </field>
    /// <field name="_stars$1" type="Array">
    /// </field>
    /// <field name="_subDivisionLevel$1" type="Number" integer="true">
    /// </field>
    /// <field name="_subDivided$1" type="Boolean">
    /// </field>
    this._stars$1 = [];
    wwtlib.PlotTile.initializeBase(this);
}
wwtlib.PlotTile.create = function wwtlib_PlotTile$create(level, xc, yc, dataset, parent) {
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="xc" type="Number" integer="true">
    /// </param>
    /// <param name="yc" type="Number" integer="true">
    /// </param>
    /// <param name="dataset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.PlotTile"></returns>
    var temp = new wwtlib.PlotTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = xc;
    temp.tileY = yc;
    temp.dataset = dataset;
    temp._topDown$1 = !dataset.get_bottomsUp();
    if (temp.tileX !== xc) {
        alert('bad');
    }
    if (!!dataset.get_meanRadius()) {
        temp.set__demScaleFactor(dataset.get_meanRadius());
    }
    else {
        if (!dataset.get_dataSetType()) {
            temp.set__demScaleFactor(6371000);
        }
        else {
            temp.set__demScaleFactor(3396010);
        }
    }
    temp.computeBoundingSphere();
    return temp;
}
wwtlib.PlotTile.prototype = {
    _topDown$1: true,
    bounds: null,
    backslash: false,
    _vertexList$1: null,
    _childTriangleList$1: null,
    demArray: null,
    
    computeBoundingSphere: function wwtlib_PlotTile$computeBoundingSphere() {
        this._initializeGrids$1();
        this.topLeft = this.bounds[0 + 3 * 0].position.copy();
        this.bottomRight = this.bounds[2 + 3 * 2].position.copy();
        this.topRight = this.bounds[2 + 3 * 0].position.copy();
        this.bottomLeft = this.bounds[0 + 3 * 2].position.copy();
        this.calcSphere();
    },
    
    renderPart: function wwtlib_PlotTile$renderPart(renderContext, part, opacity, combine) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="part" type="Number" integer="true">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="combine" type="Boolean">
        /// </param>
        if (renderContext.gl != null) {
        }
        else {
            if (!part) {
                var $enum1 = ss.IEnumerator.getEnumerator(this._stars$1);
                while ($enum1.moveNext()) {
                    var star = $enum1.current;
                    var radDec = 25 / Math.pow(1.6, star.magnitude);
                    wwtlib.Planets.drawPointPlanet(renderContext, star.position, radDec, star.col, false);
                }
            }
        }
    },
    
    _webFile$1: null,
    
    requestImage: function wwtlib_PlotTile$requestImage() {
        if (!this.downloading && !this.readyToRender) {
            this.downloading = true;
            this._webFile$1 = new wwtlib.WebFile(wwtlib._util.getProxiedUrl(this.get_URL()));
            this._webFile$1.onStateChange = ss.Delegate.create(this, this.fileStateChange);
            this._webFile$1.send();
        }
    },
    
    fileStateChange: function wwtlib_PlotTile$fileStateChange() {
        if (this._webFile$1.get_state() === 2) {
            this.downloading = false;
            this.readyToRender = false;
            this.errored = true;
            this.requestPending = false;
            wwtlib._tileCache.removeFromQueue(this.get_key(), true);
        }
        else if (this._webFile$1.get_state() === 1) {
            this.texReady = true;
            this.downloading = false;
            this.errored = false;
            this.readyToRender = this.texReady && (this.demReady || !this.demTile);
            this.requestPending = false;
            wwtlib._tileCache.removeFromQueue(this.get_key(), true);
            this._loadData$1(this._webFile$1.getText());
        }
    },
    
    _loadData$1: function wwtlib_PlotTile$_loadData$1(data) {
        /// <param name="data" type="String">
        /// </param>
        var rows = data.replaceAll('\r\n', '\n').split('\n');
        var firstRow = true;
        var type = 0;
        var star = null;
        var $enum1 = ss.IEnumerator.getEnumerator(rows);
        while ($enum1.moveNext()) {
            var row = $enum1.current;
            if (firstRow) {
                firstRow = false;
                continue;
            }
            if (row.trim().length > 5) {
                star = new wwtlib.Star(row);
                star.position = wwtlib.Coordinates.raDecTo3dAu(star.RA, star.dec, 1);
                this._stars$1.add(star);
            }
        }
    },
    
    isPointInTile: function wwtlib_PlotTile$isPointInTile(lat, lng) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (!this.level) {
            return true;
        }
        if (this.level === 1) {
            if ((lng >= 0 && lng <= 90) && (!this.tileX && this.tileY === 1)) {
                return true;
            }
            if ((lng > 90 && lng <= 180) && (this.tileX === 1 && this.tileY === 1)) {
                return true;
            }
            if ((lng < 0 && lng >= -90) && (!this.tileX && !this.tileY)) {
                return true;
            }
            if ((lng < -90 && lng >= -180) && (this.tileX === 1 && !this.tileY)) {
                return true;
            }
            return false;
        }
        if (!this.demReady || this.demData == null) {
            return false;
        }
        var testPoint = wwtlib.Coordinates.geoTo3dDouble(-lat, lng);
        var top = this._isLeftOfHalfSpace$1(this.topLeft.copy(), this.topRight.copy(), testPoint);
        var right = this._isLeftOfHalfSpace$1(this.topRight.copy(), this.bottomRight.copy(), testPoint);
        var bottom = this._isLeftOfHalfSpace$1(this.bottomRight.copy(), this.bottomLeft.copy(), testPoint);
        var left = this._isLeftOfHalfSpace$1(this.bottomLeft.copy(), this.topLeft.copy(), testPoint);
        if (top && right && bottom && left) {
            return true;
        }
        return false;
    },
    
    _isLeftOfHalfSpace$1: function wwtlib_PlotTile$_isLeftOfHalfSpace$1(pntA, pntB, pntTest) {
        /// <param name="pntA" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntB" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntTest" type="wwtlib.Vector3d">
        /// </param>
        /// <returns type="Boolean"></returns>
        pntA.normalize();
        pntB.normalize();
        var cross = wwtlib.Vector3d.cross(pntA, pntB);
        var dot = wwtlib.Vector3d.dot(cross, pntTest);
        return dot < 0;
    },
    
    _initializeGrids$1: function wwtlib_PlotTile$_initializeGrids$1() {
        this._vertexList$1 = [];
        this._childTriangleList$1 = new Array(4);
        this._childTriangleList$1[0] = [];
        this._childTriangleList$1[1] = [];
        this._childTriangleList$1[2] = [];
        this._childTriangleList$1[3] = [];
        this.bounds = new Array(9);
        if (this.level > 0) {
            if (this.parent == null) {
                this.parent = wwtlib._tileCache.getTile(this.level - 1, this.tileX / 2, this.tileY / 2, this.dataset, null);
            }
            var parent = this.parent;
            var xIndex = this.tileX % 2;
            var yIndex = this.tileY % 2;
            if (this.level > 1) {
                this.backslash = parent.backslash;
            }
            else {
                this.backslash = (xIndex === 1 ^ yIndex === 1) === 1;
            }
            this.bounds[0 + 3 * 0] = parent.bounds[xIndex + 3 * yIndex].copy();
            this.bounds[1 + 3 * 0] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * yIndex]);
            this.bounds[2 + 3 * 0] = parent.bounds[xIndex + 1 + 3 * yIndex].copy();
            this.bounds[0 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 3 * (yIndex + 1)]);
            if (this.backslash) {
                this.bounds[1 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
            }
            else {
                this.bounds[1 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 1 + 3 * yIndex], parent.bounds[xIndex + 3 * (yIndex + 1)]);
            }
            this.bounds[2 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 1 + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
            this.bounds[0 + 3 * 2] = parent.bounds[xIndex + 3 * (yIndex + 1)].copy();
            this.bounds[1 + 3 * 2] = this._midpoint$1(parent.bounds[xIndex + 3 * (yIndex + 1)], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
            this.bounds[2 + 3 * 2] = parent.bounds[xIndex + 1 + 3 * (yIndex + 1)].copy();
            this.bounds[0 + 3 * 0].tu = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 0].tv = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 0].tu = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 0].tv = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 0].tu = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 0].tv = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 1].tu = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 1].tv = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 1].tu = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 1].tv = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 1].tu = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 1].tv = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 2].tu = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 2].tv = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 2].tu = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 2].tv = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 2].tu = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 2].tv = 1 * wwtlib.Tile.uvMultiple;
        }
        else {
            this.bounds[0 + 3 * 0] = wwtlib.PositionTexture.create(0, -1, 0, 0, 0);
            this.bounds[1 + 3 * 0] = wwtlib.PositionTexture.create(0, 0, 1, 0.5, 0);
            this.bounds[2 + 3 * 0] = wwtlib.PositionTexture.create(0, -1, 0, 1, 0);
            this.bounds[0 + 3 * 1] = wwtlib.PositionTexture.create(-1, 0, 0, 0, 0.5);
            this.bounds[1 + 3 * 1] = wwtlib.PositionTexture.create(0, 1, 0, 0.5, 0.5);
            this.bounds[2 + 3 * 1] = wwtlib.PositionTexture.create(1, 0, 0, 1, 0.5);
            this.bounds[0 + 3 * 2] = wwtlib.PositionTexture.create(0, -1, 0, 0, 1);
            this.bounds[1 + 3 * 2] = wwtlib.PositionTexture.create(0, 0, -1, 0.5, 1);
            this.bounds[2 + 3 * 2] = wwtlib.PositionTexture.create(0, -1, 0, 1, 1);
        }
    },
    
    _midpoint$1: function wwtlib_PlotTile$_midpoint$1(positionNormalTextured, positionNormalTextured_2) {
        /// <param name="positionNormalTextured" type="wwtlib.PositionTexture">
        /// </param>
        /// <param name="positionNormalTextured_2" type="wwtlib.PositionTexture">
        /// </param>
        /// <returns type="wwtlib.PositionTexture"></returns>
        var a1 = wwtlib.Vector3d.lerp(positionNormalTextured.position, positionNormalTextured_2.position, 0.5);
        var a1uv = wwtlib.Vector2d.lerp(wwtlib.Vector2d.create(positionNormalTextured.tu, positionNormalTextured.tv), wwtlib.Vector2d.create(positionNormalTextured_2.tu, positionNormalTextured_2.tv), 0.5);
        a1.normalize();
        return wwtlib.PositionTexture.createPos(a1, a1uv.x, a1uv.y);
    },
    
    _subDivisionLevel$1: 4,
    _subDivided$1: false,
    
    createGeometry: function wwtlib_PlotTile$createGeometry(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (this.geometryCreated) {
            return true;
        }
        this.geometryCreated = true;
        wwtlib.PlotTile.callBaseMethod(this, 'createGeometry', [ renderContext ]);
        return true;
    },
    
    cleanUp: function wwtlib_PlotTile$cleanUp(removeFromParent) {
        /// <param name="removeFromParent" type="Boolean">
        /// </param>
        wwtlib.PlotTile.callBaseMethod(this, 'cleanUp', [ removeFromParent ]);
        if (this._vertexList$1 != null) {
            this._vertexList$1 = null;
        }
        if (this._childTriangleList$1 != null) {
            this._childTriangleList$1 = null;
        }
        this._subDivided$1 = false;
        this.demArray = null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.RenderContext

wwtlib.RenderContext = function wwtlib_RenderContext() {
    /// <field name="device" type="CanvasContext2D">
    /// </field>
    /// <field name="gl" type="GL">
    /// </field>
    /// <field name="height" type="Number">
    /// </field>
    /// <field name="width" type="Number">
    /// </field>
    /// <field name="lighting" type="Boolean">
    /// </field>
    /// <field name="_viewPoint" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="space" type="Boolean">
    /// </field>
    /// <field name="_FOVMULT" type="Number" static="true">
    /// </field>
    /// <field name="_fovAngle" type="Number">
    /// </field>
    /// <field name="_fovScale" type="Number">
    /// </field>
    /// <field name="_view" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_viewBase" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_projection" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_world" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_worldBase" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_worldBaseNonRotating" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_nominalRadius" type="Number">
    /// </field>
    /// <field name="_sunPosition" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="viewMover" type="wwtlib.IViewMover">
    /// </field>
    /// <field name="viewCamera" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="targetCamera" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="alt" type="Number">
    /// </field>
    /// <field name="az" type="Number">
    /// </field>
    /// <field name="targetAlt" type="Number">
    /// </field>
    /// <field name="targetAz" type="Number">
    /// </field>
    /// <field name="_backgroundImageset" type="wwtlib.Imageset">
    /// </field>
    /// <field name="_foregroundImageset" type="wwtlib.Imageset">
    /// </field>
    /// <field name="_targetHeight" type="Number">
    /// </field>
    /// <field name="targetAltitude" type="Number">
    /// </field>
    /// <field name="back" type="Number" static="true">
    /// </field>
    /// <field name="_galactic" type="Boolean">
    /// </field>
    /// <field name="_galacticMatrix" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_firstTimeInit" type="Boolean">
    /// </field>
    /// <field name="_useSolarSystemTilt" type="Boolean">
    /// </field>
    /// <field name="customTrackingParams" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="_cameraOffset" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_fovLocal" type="Number">
    /// </field>
    /// <field name="perspectiveFov" type="Number">
    /// </field>
    /// <field name="nearPlane" type="Number">
    /// </field>
    /// <field name="_frustumDirty" type="Boolean">
    /// </field>
    /// <field name="_frustum" type="Array" elementType="PlaneD">
    /// </field>
    /// <field name="cameraPosition" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="WVP" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="WV" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_skyColor" type="String">
    /// </field>
    this._viewPoint = new wwtlib.Vector3d();
    this.viewCamera = new wwtlib.CameraParameters();
    this.targetCamera = new wwtlib.CameraParameters();
    this._galacticMatrix = wwtlib.Matrix3d.create(-0.4838350155, -0.0548755604, -0.8734370902, 0, 0.7469822445, 0.4941094279, -0.44482963, 0, 0.4559837762, -0.867666149, -0.1980763734, 0, 0, 0, 0, 1);
    this.customTrackingParams = new wwtlib.CameraParameters();
    this._cameraOffset = new wwtlib.Vector3d();
    this._fovLocal = (Math.PI / 4);
    this.perspectiveFov = Math.PI / 4;
    this._frustum = new Array(6);
    for (var i = 0; i < 6; i++) {
        this._frustum[i] = new wwtlib.PlaneD(0, 0, 0, 0);
    }
}
wwtlib.RenderContext.create = function wwtlib_RenderContext$create(device) {
    /// <param name="device" type="CanvasContext2D">
    /// </param>
    /// <returns type="wwtlib.RenderContext"></returns>
    var temp = new wwtlib.RenderContext();
    temp.device = device;
    temp.viewCamera.zoom = 700;
    temp.viewCamera.target = 65536;
    return temp;
}
wwtlib.RenderContext._getTilesYForLevel = function wwtlib_RenderContext$_getTilesYForLevel(layer, level) {
    /// <param name="layer" type="wwtlib.Imageset">
    /// </param>
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var maxY = 1;
    switch (layer.get_projection()) {
        case 0:
            maxY = Math.pow(2, level);
            break;
        case 1:
            maxY = (Math.pow(2, level) * (180 / layer.get_baseTileDegrees()));
            break;
        case 2:
            maxY = Math.pow(2, level);
            break;
        case 4:
            maxY = 1;
            break;
        default:
            maxY = Math.pow(2, level);
            break;
    }
    return maxY;
}
wwtlib.RenderContext._getTilesXForLevel = function wwtlib_RenderContext$_getTilesXForLevel(layer, level) {
    /// <param name="layer" type="wwtlib.Imageset">
    /// </param>
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var maxX = 1;
    switch (layer.get_projection()) {
        case 6:
        case 3:
            maxX = Math.pow(2, level);
            break;
        case 0:
            maxX = Math.pow(2, level) * parseInt((layer.get_baseTileDegrees() / 360));
            break;
        case 1:
            maxX = Math.pow(2, level) * parseInt((layer.get_baseTileDegrees() / 90));
            maxX = Math.pow(2, level) * parseInt((360 / layer.get_baseTileDegrees()));
            break;
        case 5:
        case 2:
            if (layer.get_widthFactor() === 1) {
                maxX = Math.pow(2, level) * 2;
            }
            else {
                maxX = Math.pow(2, level);
            }
            break;
        case 4:
            maxX = 1;
            break;
        default:
            maxX = Math.pow(2, level) * 2;
            break;
    }
    return maxX;
}
wwtlib.RenderContext.prototype = {
    device: null,
    gl: null,
    height: 0,
    width: 0,
    lighting: false,
    
    save: function wwtlib_RenderContext$save() {
        if (this.gl != null) {
        }
        else {
            this.device.save();
        }
    },
    
    restore: function wwtlib_RenderContext$restore() {
        if (this.gl != null) {
        }
        else {
            this.device.restore();
        }
    },
    
    clear: function wwtlib_RenderContext$clear() {
        if (this.gl != null) {
            this.gl.viewport(0, 0, parseInt(this.width), parseInt(this.height));
            this.gl.clear(16384 | 256);
        }
        else {
            this.device.save();
            this.device.fillStyle = 'black';
            this.device.fillRect(0, 0, this.width, this.height);
            this.device.restore();
        }
    },
    
    get_viewPoint: function wwtlib_RenderContext$get_viewPoint() {
        /// <value type="wwtlib.Vector3d"></value>
        return this._viewPoint;
    },
    
    get_RA: function wwtlib_RenderContext$get_RA() {
        /// <value type="Number"></value>
        return ((((180 - (this.viewCamera.lng - 180)) / 15) % 24) + 48) % 24;
    },
    
    space: false,
    
    rAtoViewLng: function wwtlib_RenderContext$rAtoViewLng(ra) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <returns type="Number"></returns>
        return 180 - (ra / 24 * 360) - 180;
    },
    
    get_dec: function wwtlib_RenderContext$get_dec() {
        /// <value type="Number"></value>
        return this.viewCamera.lat;
    },
    
    _fovAngle: 0,
    
    get_fovAngle: function wwtlib_RenderContext$get_fovAngle() {
        /// <value type="Number"></value>
        return this._fovAngle;
    },
    
    _fovScale: 0,
    
    get_fovScale: function wwtlib_RenderContext$get_fovScale() {
        /// <value type="Number"></value>
        return this._fovScale;
    },
    set_fovScale: function wwtlib_RenderContext$set_fovScale(value) {
        /// <value type="Number"></value>
        this._fovScale = value;
        return value;
    },
    
    _view: null,
    
    get_view: function wwtlib_RenderContext$get_view() {
        /// <value type="wwtlib.Matrix3d"></value>
        return this._view;
    },
    set_view: function wwtlib_RenderContext$set_view(value) {
        /// <value type="wwtlib.Matrix3d"></value>
        this._view = value;
        this._frustumDirty = true;
        return value;
    },
    
    _viewBase: null,
    
    get_viewBase: function wwtlib_RenderContext$get_viewBase() {
        /// <value type="wwtlib.Matrix3d"></value>
        return this._viewBase;
    },
    set_viewBase: function wwtlib_RenderContext$set_viewBase(value) {
        /// <value type="wwtlib.Matrix3d"></value>
        this._viewBase = value;
        return value;
    },
    
    _projection: null,
    
    get_projection: function wwtlib_RenderContext$get_projection() {
        /// <value type="wwtlib.Matrix3d"></value>
        return this._projection;
    },
    set_projection: function wwtlib_RenderContext$set_projection(value) {
        /// <value type="wwtlib.Matrix3d"></value>
        this._projection = value;
        this._frustumDirty = true;
        return value;
    },
    
    _world: null,
    
    get_world: function wwtlib_RenderContext$get_world() {
        /// <value type="wwtlib.Matrix3d"></value>
        return this._world;
    },
    set_world: function wwtlib_RenderContext$set_world(value) {
        /// <value type="wwtlib.Matrix3d"></value>
        this._world = value;
        this._frustumDirty = true;
        return value;
    },
    
    _worldBase: null,
    
    get_worldBase: function wwtlib_RenderContext$get_worldBase() {
        /// <value type="wwtlib.Matrix3d"></value>
        return this._worldBase;
    },
    set_worldBase: function wwtlib_RenderContext$set_worldBase(value) {
        /// <value type="wwtlib.Matrix3d"></value>
        this._worldBase = value;
        return value;
    },
    
    _worldBaseNonRotating: null,
    
    get_worldBaseNonRotating: function wwtlib_RenderContext$get_worldBaseNonRotating() {
        /// <value type="wwtlib.Matrix3d"></value>
        return this._worldBaseNonRotating;
    },
    set_worldBaseNonRotating: function wwtlib_RenderContext$set_worldBaseNonRotating(value) {
        /// <value type="wwtlib.Matrix3d"></value>
        this._worldBaseNonRotating = value;
        return value;
    },
    
    _nominalRadius: 6378137,
    
    get_nominalRadius: function wwtlib_RenderContext$get_nominalRadius() {
        /// <value type="Number"></value>
        return this._nominalRadius;
    },
    set_nominalRadius: function wwtlib_RenderContext$set_nominalRadius(value) {
        /// <value type="Number"></value>
        this._nominalRadius = value;
        return value;
    },
    
    _sunPosition: null,
    
    get_sunPosition: function wwtlib_RenderContext$get_sunPosition() {
        /// <value type="wwtlib.Vector3d"></value>
        return this._sunPosition;
    },
    set_sunPosition: function wwtlib_RenderContext$set_sunPosition(value) {
        /// <value type="wwtlib.Vector3d"></value>
        this._sunPosition = value;
        return value;
    },
    
    viewMover: null,
    
    onTarget: function wwtlib_RenderContext$onTarget(place) {
        /// <param name="place" type="wwtlib.Place">
        /// </param>
        /// <returns type="Boolean"></returns>
        return ((Math.abs(this.viewCamera.lat - this.targetCamera.lat) < 1E-12 && Math.abs(this.viewCamera.lng - this.targetCamera.lng) < 1E-12 && Math.abs(this.viewCamera.zoom - this.targetCamera.zoom) < 1E-12) && this.viewMover == null);
    },
    
    setTexture: function wwtlib_RenderContext$setTexture(texture) {
        /// <param name="texture" type="Object" domElement="true">
        /// </param>
    },
    
    alt: 0,
    az: 0,
    targetAlt: 0,
    targetAz: 0,
    _backgroundImageset: null,
    
    get_backgroundImageset: function wwtlib_RenderContext$get_backgroundImageset() {
        /// <value type="wwtlib.Imageset"></value>
        return this._backgroundImageset;
    },
    set_backgroundImageset: function wwtlib_RenderContext$set_backgroundImageset(value) {
        /// <value type="wwtlib.Imageset"></value>
        this._backgroundImageset = value;
        return value;
    },
    
    _foregroundImageset: null,
    
    get_foregroundImageset: function wwtlib_RenderContext$get_foregroundImageset() {
        /// <value type="wwtlib.Imageset"></value>
        return this._foregroundImageset;
    },
    set_foregroundImageset: function wwtlib_RenderContext$set_foregroundImageset(value) {
        /// <value type="wwtlib.Imageset"></value>
        this._foregroundImageset = value;
        return value;
    },
    
    drawImageSet: function wwtlib_RenderContext$drawImageSet(imageset, opacity) {
        /// <param name="imageset" type="wwtlib.Imageset">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        var maxX = wwtlib.RenderContext._getTilesXForLevel(imageset, imageset.get_baseLevel());
        var maxY = wwtlib.RenderContext._getTilesYForLevel(imageset, imageset.get_baseLevel());
        for (var x = 0; x < maxX; x++) {
            for (var y = 0; y < maxY; y++) {
                var tile = wwtlib._tileCache.getTile(imageset.get_baseLevel(), x, y, imageset, null);
                if (tile != null) {
                    tile.draw3D(this, opacity);
                }
            }
        }
    },
    
    getScaledAltitudeForLatLong: function wwtlib_RenderContext$getScaledAltitudeForLatLong(viewLat, viewLong) {
        /// <param name="viewLat" type="Number">
        /// </param>
        /// <param name="viewLong" type="Number">
        /// </param>
        /// <returns type="Number"></returns>
        var layer = this.get_backgroundImageset();
        if (layer == null) {
            return 0;
        }
        var maxX = wwtlib.RenderContext._getTilesXForLevel(layer, layer.get_baseLevel());
        var maxY = wwtlib.RenderContext._getTilesYForLevel(layer, layer.get_baseLevel());
        for (var x = 0; x < maxX; x++) {
            for (var y = 0; y < maxY; y++) {
                var tile = wwtlib._tileCache.getTile(layer.get_baseLevel(), x, y, layer, null);
                if (tile != null) {
                    if (tile.isPointInTile(viewLat, viewLong)) {
                        return tile.getSurfacePointAltitude(viewLat, viewLong, false);
                    }
                }
            }
        }
        return 0;
    },
    
    _targetHeight: 1,
    targetAltitude: 0,
    
    _setupMatricesLand3d: function wwtlib_RenderContext$_setupMatricesLand3d() {
        this.lighting = false;
        this.space = false;
        wwtlib.RenderTriangle.cullInside = false;
        var WorldMatrix = wwtlib.Matrix3d._rotationY(((this.viewCamera.lng - 90) / 180 * Math.PI));
        WorldMatrix._multiply(wwtlib.Matrix3d._rotationX(((-this.viewCamera.lat) / 180 * Math.PI)));
        this.set_world(WorldMatrix);
        this.set_worldBase(WorldMatrix.clone());
        this._viewPoint = wwtlib.Coordinates.geoTo3d(this.viewCamera.lat, this.viewCamera.lng);
        var distance = 0;
        if (this._backgroundImageset.get_isMandelbrot()) {
            distance = (4 * (this.viewCamera.zoom / 180)) + 1E-41;
        }
        else {
            distance = (4 * (this.viewCamera.zoom / 180)) + 1E-06;
        }
        this._fovAngle = (this.viewCamera.zoom / 343.774) / Math.PI * 180;
        this._fovScale = (this._fovAngle / this.height) * 3600;
        if (this.gl != null) {
            this.targetAltitude = this.getScaledAltitudeForLatLong(this.viewCamera.lat, this.viewCamera.lng);
            var heightNow = 1 + this.targetAltitude;
            this.targetAltitude *= this.get_nominalRadius();
            if (this._targetHeight < heightNow) {
                this._targetHeight = (((this._targetHeight * 2) + heightNow) / 3);
            }
            else {
                this._targetHeight = (((this._targetHeight * 9) + heightNow) / 10);
            }
        }
        else {
            this.targetAltitude = 0;
            this._targetHeight = 1;
        }
        var rotLocal = this.viewCamera.rotation;
        this.cameraPosition = wwtlib.Vector3d.create((Math.sin(rotLocal) * Math.sin(this.viewCamera.angle) * distance), (Math.cos(rotLocal) * Math.sin(this.viewCamera.angle) * distance), (-this._targetHeight - (Math.cos(this.viewCamera.angle) * distance)));
        var cameraTarget = wwtlib.Vector3d.create(0, 0, -this._targetHeight);
        var camHeight = this.cameraPosition.length();
        var lookUp = wwtlib.Vector3d.create(Math.sin(rotLocal) * Math.cos(this.viewCamera.angle), Math.cos(rotLocal) * Math.cos(this.viewCamera.angle), Math.sin(this.viewCamera.angle));
        this.set_view(wwtlib.Matrix3d.lookAtLH(this.cameraPosition, cameraTarget, lookUp));
        this.set_viewBase(this.get_view());
        var back = Math.sqrt((distance + 1) * (distance + 1) - 1);
        back = Math.max(0.5, back);
        var m_nearPlane = distance * 0.05;
        m_nearPlane = distance * 0.05;
        this.set_projection(wwtlib.Matrix3d.perspectiveFovLH((Math.PI / 4), this.width / this.height, m_nearPlane, back));
        this._setMatrixes();
        this.makeFrustum();
    },
    
    _galactic: true,
    _firstTimeInit: false,
    
    setupMatricesSpace3d: function wwtlib_RenderContext$setupMatricesSpace3d(canvasWidth, canvasHeight) {
        /// <param name="canvasWidth" type="Number">
        /// </param>
        /// <param name="canvasHeight" type="Number">
        /// </param>
        this.lighting = false;
        if (!this._firstTimeInit) {
            this._galacticMatrix = wwtlib.Matrix3d.get_identity();
            this._galacticMatrix._multiply(wwtlib.Matrix3d._rotationY(-(270 - (17.7603329867975 * 15)) / 180 * Math.PI));
            this._galacticMatrix._multiply(wwtlib.Matrix3d._rotationX(-(-28.9361739586894) / 180 * Math.PI));
            this._galacticMatrix._multiply(wwtlib.Matrix3d._rotationZ(((31.422052860102) - 90) / 180 * Math.PI));
            this._firstTimeInit = true;
        }
        this.space = true;
        wwtlib.RenderTriangle.cullInside = true;
        var WorldMatrix = wwtlib.Matrix3d.get_identity();
        if (wwtlib.Settings.get_active().get_galacticMode()) {
            WorldMatrix._multiply(this._galacticMatrix);
            WorldMatrix._multiply(wwtlib.Matrix3d._rotationY(this.az / 180 * Math.PI));
            WorldMatrix._multiply(wwtlib.Matrix3d._rotationX(-this.alt / 180 * Math.PI));
            var gPoint = wwtlib.Coordinates.galactictoJ2000(this.az, this.alt);
            this._viewPoint = wwtlib.Coordinates.raDecTo3dAu(gPoint[0] / 15, gPoint[1], 1);
            this.targetCamera.lng = this.rAtoViewLng(gPoint[0] / 15);
            this.targetCamera.lat = gPoint[1];
            this.viewCamera.lat = this.targetCamera.lat;
            this.viewCamera.lng = this.targetCamera.lng;
        }
        else {
            WorldMatrix._multiply(wwtlib.Matrix3d._rotationY(-(this.viewCamera.lng - 90) / 180 * Math.PI));
            WorldMatrix._multiply(wwtlib.Matrix3d._rotationX(-this.viewCamera.lat / 180 * Math.PI));
            this._viewPoint = wwtlib.Coordinates.raDecTo3dAu(this.get_RA(), this.get_dec(), 1);
        }
        var camLocal = this.viewCamera.rotation;
        this._fovAngle = (this.viewCamera.zoom / 343.774) / Math.PI * 180;
        this._fovScale = (this._fovAngle / canvasHeight) * 3600;
        if (wwtlib.Settings.get_active().get_localHorizonMode() && this._backgroundImageset.get_dataSetType() === 2) {
            var zenithAltAz = new wwtlib.Coordinates(0, 0);
            zenithAltAz.set_az(0);
            zenithAltAz.set_alt(0);
            var zenith = wwtlib.Coordinates.horizonToEquitorial(zenithAltAz, wwtlib.SpaceTimeController.get_location(), wwtlib.SpaceTimeController.get_now());
            var raPart = -((zenith.get_RA() - 6) / 24 * (Math.PI * 2));
            var decPart = -(zenith.get_dec() / 360 * (Math.PI * 2));
            var raText = wwtlib.Coordinates.formatDMS(zenith.get_RA());
            WorldMatrix = wwtlib.Matrix3d._rotationY(-raPart - Math.PI);
            WorldMatrix._multiply(wwtlib.Matrix3d._rotationX(decPart));
            if (wwtlib.SpaceTimeController.get_location().get_lat() < 0) {
                WorldMatrix._multiply(wwtlib.Matrix3d._rotationY((this.az / 180 * Math.PI)));
                WorldMatrix._multiply(wwtlib.Matrix3d._rotationX((this.alt / 180 * Math.PI)));
                camLocal += Math.PI;
            }
            else {
                WorldMatrix._multiply(wwtlib.Matrix3d._rotationY(((-this.az) / 180 * Math.PI)));
                WorldMatrix._multiply(wwtlib.Matrix3d._rotationX(((-this.alt) / 180 * Math.PI)));
            }
            var currentRaDec = wwtlib.Coordinates.horizonToEquitorial(wwtlib.Coordinates.fromLatLng(this.alt, this.az), wwtlib.SpaceTimeController.get_location(), wwtlib.SpaceTimeController.get_now());
            this.viewCamera.lat = this.targetCamera.lat = currentRaDec.get_dec();
            this.viewCamera.lng = this.targetCamera.lng = this.rAtoViewLng(currentRaDec.get_RA());
        }
        this.set_world(WorldMatrix);
        this.set_worldBase(WorldMatrix.clone());
        var localZoomFactor = this.viewCamera.zoom;
        var FovAngle = (localZoomFactor / 343.774) / Math.PI * 180;
        this.cameraPosition = wwtlib.Vector3d.create(0, 0, 0);
        this.set_view(wwtlib.Matrix3d.lookAtLH(this.cameraPosition, wwtlib.Vector3d.create(0, 0, -1), wwtlib.Vector3d.create(Math.sin(camLocal), Math.cos(camLocal), 0)));
        this.set_viewBase(this.get_view().clone());
        var m_nearPlane = 0.1;
        this.nearPlane = 0.1;
        this.set_projection(wwtlib.Matrix3d.perspectiveFovLH(localZoomFactor / 343.774, canvasWidth / canvasHeight, 0.1, -2));
        this._setMatrixes();
        this.makeFrustum();
    },
    
    get_solarSystemTrack: function wwtlib_RenderContext$get_solarSystemTrack() {
        /// <value type="wwtlib.SolarSystemObjects"></value>
        return this.viewCamera.target;
    },
    set_solarSystemTrack: function wwtlib_RenderContext$set_solarSystemTrack(value) {
        /// <value type="wwtlib.SolarSystemObjects"></value>
        this.viewCamera.target = value;
        return value;
    },
    
    get_solarSystemCameraDistance: function wwtlib_RenderContext$get_solarSystemCameraDistance() {
        /// <value type="Number"></value>
        return (4 * (this.viewCamera.zoom / 9)) + 1E-06;
    },
    
    get_sandboxMode: function wwtlib_RenderContext$get_sandboxMode() {
        /// <value type="Boolean"></value>
        if (this._backgroundImageset == null) {
            return false;
        }
        return this._backgroundImageset.get_dataSetType() === 5;
    },
    
    get_trackingFrame: function wwtlib_RenderContext$get_trackingFrame() {
        /// <value type="String"></value>
        return this.viewCamera.targetReferenceFrame;
    },
    set_trackingFrame: function wwtlib_RenderContext$set_trackingFrame(value) {
        /// <value type="String"></value>
        this.viewCamera.targetReferenceFrame = value;
        return value;
    },
    
    _useSolarSystemTilt: true,
    
    get_fovLocal: function wwtlib_RenderContext$get_fovLocal() {
        /// <value type="Number"></value>
        return this._fovLocal;
    },
    set_fovLocal: function wwtlib_RenderContext$set_fovLocal(value) {
        /// <value type="Number"></value>
        this._fovLocal = value;
        return value;
    },
    
    setupMatricesSolarSystem: function wwtlib_RenderContext$setupMatricesSolarSystem(forStars) {
        /// <param name="forStars" type="Boolean">
        /// </param>
        this.lighting = wwtlib.Settings.get_active().get_solarSystemLighting();
        this.space = false;
        if (this.get_solarSystemTrack() !== 20 && this.get_solarSystemTrack() !== 65536) {
            this.viewCamera.viewTarget = wwtlib.Planets.getPlanetTargetPoint(this.get_solarSystemTrack(), this.viewCamera.lat, this.viewCamera.lng, 0);
        }
        wwtlib.RenderTriangle.cullInside = false;
        var cameraDistance = this.get_solarSystemCameraDistance();
        var trackingMatrix = wwtlib.Matrix3d.get_identity();
        cameraDistance -= 1E-06;
        var activeTrackingFrame = false;
        this.set_trackingFrame('');
        var center = this.viewCamera.viewTarget;
        var localZoom = this.viewCamera.zoom * 20;
        var lookAt = new wwtlib.Vector3d();
        var viewAdjust = wwtlib.Matrix3d.get_identity();
        viewAdjust._multiply(wwtlib.Matrix3d._rotationX(((-this.viewCamera.lat) / 180 * Math.PI)));
        viewAdjust._multiply(wwtlib.Matrix3d._rotationY(((-this.viewCamera.lng) / 180 * Math.PI)));
        var lookAtAdjust = wwtlib.Matrix3d.get_identity();
        var dome = false;
        var lookUp;
        if (this._useSolarSystemTilt && !this.get_sandboxMode()) {
            var angle = this.viewCamera.angle;
            if (cameraDistance > 0.0008) {
                angle = 0;
            }
            else if (cameraDistance > 1E-05) {
                var val = Math.min(1.903089987, wwtlib._util.log10(cameraDistance) + 5) / 1.903089987;
                angle = angle * Math.max(0, 1 - val);
            }
            this.cameraPosition = wwtlib.Vector3d.create((Math.sin(-this.viewCamera.rotation) * Math.sin(angle) * cameraDistance), (Math.cos(-this.viewCamera.rotation) * Math.sin(angle) * cameraDistance), (Math.cos(angle) * cameraDistance));
            lookUp = wwtlib.Vector3d.create(Math.sin(-this.viewCamera.rotation), Math.cos(-this.viewCamera.rotation), 1E-05);
        }
        else {
            this.cameraPosition = wwtlib.Vector3d.create(0, 0, cameraDistance);
            lookUp = wwtlib.Vector3d.create(Math.sin(-this.viewCamera.rotation), Math.cos(-this.viewCamera.rotation), 0.0001);
        }
        this.cameraPosition = viewAdjust.transform(this.cameraPosition);
        this._cameraOffset = this.cameraPosition.copy();
        var tmp = trackingMatrix.clone();
        tmp.invert();
        this._cameraOffset = wwtlib.Vector3d._transformCoordinate(this._cameraOffset, tmp);
        lookUp = viewAdjust.transform(lookUp);
        this.set_world(wwtlib.Matrix3d.get_identity());
        this.set_worldBase(this.get_world().clone());
        this.set_view(wwtlib.Matrix3d.multiplyMatrix(wwtlib.Matrix3d.multiplyMatrix(trackingMatrix, wwtlib.Matrix3d.lookAtLH(this.cameraPosition, lookAt, lookUp)), lookAtAdjust));
        this.set_viewBase(this.get_view().clone());
        var temp = wwtlib.Vector3d.subtractVectors(lookAt, this.cameraPosition);
        temp.normalize();
        temp = wwtlib.Vector3d._transformCoordinate(temp, trackingMatrix);
        temp.normalize();
        this._viewPoint = temp;
        var radius = wwtlib.Planets.getAdjustedPlanetRadius(this.get_solarSystemTrack());
        if (cameraDistance < radius * 2 && !forStars) {
            this.nearPlane = cameraDistance * 0.03;
            this.nearPlane = Math.max(this.nearPlane, 1E-11);
            wwtlib.RenderContext.back = 1900;
        }
        else {
            if (forStars) {
                wwtlib.RenderContext.back = 900056;
                wwtlib.RenderContext.back = (cameraDistance > 900056) ? cameraDistance * 3 : 900056;
                this.nearPlane = 3E-05;
            }
            else {
                wwtlib.RenderContext.back = (cameraDistance > 1900) ? cameraDistance + 200 : 1900;
                if (wwtlib.Settings.get_active().get_solarSystemScale() < 13) {
                    this.nearPlane = Math.min(cameraDistance * 0.03, 0.01);
                }
                else {
                    this.nearPlane = 0.001;
                }
            }
        }
        this.set_projection(wwtlib.Matrix3d.perspectiveFovLH(this._fovLocal, this.width / this.height, this.nearPlane, wwtlib.RenderContext.back));
        this.perspectiveFov = this._fovLocal;
        this._fovAngle = (this.viewCamera.zoom / 343.774) / Math.PI * 180;
        this._fovScale = (this._fovAngle / this.height) * 3600;
        this._setMatrixes();
        this.makeFrustum();
    },
    
    _setMatrixes: function wwtlib_RenderContext$_setMatrixes() {
    },
    
    nearPlane: 0,
    _frustumDirty: true,
    
    get_frustum: function wwtlib_RenderContext$get_frustum() {
        /// <value type="Array" elementType="PlaneD"></value>
        return this._frustum;
    },
    
    cameraPosition: null,
    WVP: null,
    WV: null,
    
    makeFrustum: function wwtlib_RenderContext$makeFrustum() {
        this.WV = wwtlib.Matrix3d.multiplyMatrix(this.get_world(), this.get_view());
        var viewProjection = wwtlib.Matrix3d.multiplyMatrix(this.WV, this.get_projection());
        this.WVP = viewProjection.clone();
        var inverseWorld = this.get_world().clone();
        inverseWorld.invert();
        this._frustum[0].a = viewProjection.get_m14() + viewProjection.get_m11();
        this._frustum[0].b = viewProjection.get_m24() + viewProjection.get_m21();
        this._frustum[0].c = viewProjection.get_m34() + viewProjection.get_m31();
        this._frustum[0].d = viewProjection.get_m44() + viewProjection.get_m41();
        this._frustum[1].a = viewProjection.get_m14() - viewProjection.get_m11();
        this._frustum[1].b = viewProjection.get_m24() - viewProjection.get_m21();
        this._frustum[1].c = viewProjection.get_m34() - viewProjection.get_m31();
        this._frustum[1].d = viewProjection.get_m44() - viewProjection.get_m41();
        this._frustum[2].a = viewProjection.get_m14() - viewProjection.get_m12();
        this._frustum[2].b = viewProjection.get_m24() - viewProjection.get_m22();
        this._frustum[2].c = viewProjection.get_m34() - viewProjection.get_m32();
        this._frustum[2].d = viewProjection.get_m44() - viewProjection.get_m42();
        this._frustum[3].a = viewProjection.get_m14() + viewProjection.get_m12();
        this._frustum[3].b = viewProjection.get_m24() + viewProjection.get_m22();
        this._frustum[3].c = viewProjection.get_m34() + viewProjection.get_m32();
        this._frustum[3].d = viewProjection.get_m44() + viewProjection.get_m42();
        this._frustum[4].a = viewProjection.get_m13();
        this._frustum[4].b = viewProjection.get_m23();
        this._frustum[4].c = viewProjection.get_m33();
        this._frustum[4].d = viewProjection.get_m43();
        this._frustum[5].a = viewProjection.get_m14() - viewProjection.get_m13();
        this._frustum[5].b = viewProjection.get_m24() - viewProjection.get_m23();
        this._frustum[5].c = viewProjection.get_m34() - viewProjection.get_m33();
        this._frustum[5].d = viewProjection.get_m44() - viewProjection.get_m43();
        for (var i = 0; i < 6; i++) {
            this._frustum[i].normalize();
        }
        this._frustumDirty = false;
        this.WVP.scale(wwtlib.Vector3d.create(this.width / 2, -this.height / 2, 1));
        this.WVP.translate(wwtlib.Vector3d.create(this.width / 2, this.height / 2, 0));
        this._setMatrixes();
    },
    
    _skyColor: 'Blue',
    
    _initGL: function wwtlib_RenderContext$_initGL() {
        if (this.gl == null) {
            return;
        }
        wwtlib.Tile.uvMultiple = 1;
        wwtlib.Tile.demEnabled = true;
        wwtlib.TileShader.init(this);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.RenderTriangle

wwtlib.RenderTriangle = function wwtlib_RenderTriangle() {
    /// <field name="a" type="wwtlib.PositionTexture">
    /// </field>
    /// <field name="b" type="wwtlib.PositionTexture">
    /// </field>
    /// <field name="c" type="wwtlib.PositionTexture">
    /// </field>
    /// <field name="normal" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_texture" type="Object" domElement="true">
    /// </field>
    /// <field name="opacity" type="Number">
    /// </field>
    /// <field name="width" type="Number" static="true">
    /// </field>
    /// <field name="height" type="Number" static="true">
    /// </field>
    /// <field name="expansionInPixels" type="Number">
    /// </field>
    /// <field name="_contractionInPixels" type="Number" static="true">
    /// </field>
    /// <field name="_isOutlined" type="Boolean" static="true">
    /// </field>
    /// <field name="_halfPixel" type="Number" static="true">
    /// </field>
    /// <field name="_almostOne" type="Number" static="true">
    /// </field>
    /// <field name="trianglesRendered" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="trianglesCulled" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="renderingOn" type="Boolean" static="true">
    /// </field>
    /// <field name="tileLevel" type="Number" integer="true">
    /// </field>
    /// <field name="_factor" type="Number" static="true">
    /// </field>
    /// <field name="cullInside" type="Boolean" static="true">
    /// </field>
    /// <field name="_ta" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_tb" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_tc" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_hw" type="Number" static="true">
    /// </field>
    /// <field name="_qw" type="Number" static="true">
    /// </field>
    /// <field name="_hh" type="Number" static="true">
    /// </field>
    /// <field name="_qh" type="Number" static="true">
    /// </field>
    /// <field name="_expandedS0" type="wwtlib.Vector2d">
    /// </field>
    /// <field name="_expandedS1" type="wwtlib.Vector2d">
    /// </field>
    /// <field name="_expandedS2" type="wwtlib.Vector2d">
    /// </field>
    /// <field name="lighting" type="Number">
    /// </field>
    this.a = new wwtlib.PositionTexture();
    this.b = new wwtlib.PositionTexture();
    this.c = new wwtlib.PositionTexture();
    this.normal = new wwtlib.Vector3d();
    this._ta = new wwtlib.Vector3d();
    this._tb = new wwtlib.Vector3d();
    this._tc = new wwtlib.Vector3d();
    this._expandedS0 = new wwtlib.Vector2d();
    this._expandedS1 = new wwtlib.Vector2d();
    this._expandedS2 = new wwtlib.Vector2d();
}
wwtlib.RenderTriangle.create = function wwtlib_RenderTriangle$create(a, b, c, img, level) {
    /// <param name="a" type="wwtlib.PositionTexture">
    /// </param>
    /// <param name="b" type="wwtlib.PositionTexture">
    /// </param>
    /// <param name="c" type="wwtlib.PositionTexture">
    /// </param>
    /// <param name="img" type="Object" domElement="true">
    /// </param>
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <returns type="wwtlib.RenderTriangle"></returns>
    var temp = new wwtlib.RenderTriangle();
    temp.a = a.copy();
    temp.b = b.copy();
    temp.c = c.copy();
    temp._texture = img;
    temp.tileLevel = level;
    temp.makeNormal();
    return temp;
}
wwtlib.RenderTriangle.createWithMiter = function wwtlib_RenderTriangle$createWithMiter(a, b, c, img, level, expansion) {
    /// <param name="a" type="wwtlib.PositionTexture">
    /// </param>
    /// <param name="b" type="wwtlib.PositionTexture">
    /// </param>
    /// <param name="c" type="wwtlib.PositionTexture">
    /// </param>
    /// <param name="img" type="Object" domElement="true">
    /// </param>
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="expansion" type="Number">
    /// </param>
    /// <returns type="wwtlib.RenderTriangle"></returns>
    var temp = new wwtlib.RenderTriangle();
    temp.expansionInPixels = expansion;
    temp.a = a.copy();
    temp.b = b.copy();
    temp.c = c.copy();
    temp._texture = img;
    temp.tileLevel = level;
    temp.makeNormal();
    return temp;
}
wwtlib.RenderTriangle._getMiterPoint = function wwtlib_RenderTriangle$_getMiterPoint(p1, p2, p3, edgeOffset) {
    /// <param name="p1" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="p2" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="p3" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="edgeOffset" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var edge1 = wwtlib.Vector2d.subtractVector(p2, p1);
    var edge2 = wwtlib.Vector2d.subtractVector(p3, p1);
    edge1.normalize();
    edge2.normalize();
    var dir = wwtlib.Vector2d.create(edge1.x + edge2.x, edge1.y + edge2.y);
    dir.normalize();
    var delta = wwtlib.Vector2d.create(edge1.x - edge2.x, edge1.y - edge2.y);
    var sineHalfAngle = delta.get_length() / 2;
    var net = Math.min(2, edgeOffset / sineHalfAngle);
    dir.extend(net);
    return wwtlib.Vector2d.create(p1.x - dir.x, p1.y - dir.y);
}
wwtlib.RenderTriangle._miterPoint = function wwtlib_RenderTriangle$_miterPoint(p1x, p1y, p2x, p2y, p3x, p3y, ExpansionInPixels) {
    /// <param name="p1x" type="Number">
    /// </param>
    /// <param name="p1y" type="Number">
    /// </param>
    /// <param name="p2x" type="Number">
    /// </param>
    /// <param name="p2y" type="Number">
    /// </param>
    /// <param name="p3x" type="Number">
    /// </param>
    /// <param name="p3y" type="Number">
    /// </param>
    /// <param name="ExpansionInPixels" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var e1x = p2x - p1x;
    var e1y = p2y - p1y;
    var e2x = p3x - p1x;
    var e2y = p3y - p1y;
    var length = Math.sqrt(e1x * e1x + e1y * e1y);
    if (!!length) {
        e1x /= length;
        e1y /= length;
    }
    length = Math.sqrt(e2x * e2x + e2y * e2y);
    if (!!length) {
        e2x /= length;
        e2y /= length;
    }
    var dx = e1x + e2x;
    var dy = e1y + e2y;
    length = Math.sqrt(dx * dx + dy * dy);
    if (!!length) {
        dx /= length;
        dy /= length;
    }
    var deltax = e1x - e2x;
    var deltay = e1y - e2y;
    length = Math.sqrt(deltax * deltax + deltay * deltay);
    var sineHalfAngle = length / 2;
    var net = Math.min(2, ExpansionInPixels / sineHalfAngle);
    dx *= net;
    dy *= net;
    return wwtlib.Vector2d.create(p1x - dx, p1y - dy);
}
wwtlib.RenderTriangle._miterPointOut = function wwtlib_RenderTriangle$_miterPointOut(pntOut, p1x, p1y, p2x, p2y, p3x, p3y, ExpansionInPixels) {
    /// <param name="pntOut" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="p1x" type="Number">
    /// </param>
    /// <param name="p1y" type="Number">
    /// </param>
    /// <param name="p2x" type="Number">
    /// </param>
    /// <param name="p2y" type="Number">
    /// </param>
    /// <param name="p3x" type="Number">
    /// </param>
    /// <param name="p3y" type="Number">
    /// </param>
    /// <param name="ExpansionInPixels" type="Number">
    /// </param>
    var e1x = p2x - p1x;
    var e1y = p2y - p1y;
    var e2x = p3x - p1x;
    var e2y = p3y - p1y;
    var length = Math.sqrt(e1x * e1x + e1y * e1y);
    if (!!length) {
        e1x /= length;
        e1y /= length;
    }
    length = Math.sqrt(e2x * e2x + e2y * e2y);
    if (!!length) {
        e2x /= length;
        e2y /= length;
    }
    var dx = e1x + e2x;
    var dy = e1y + e2y;
    length = Math.sqrt(dx * dx + dy * dy);
    if (!!length) {
        dx /= length;
        dy /= length;
    }
    var deltax = e1x - e2x;
    var deltay = e1y - e2y;
    length = Math.sqrt(deltax * deltax + deltay * deltay);
    var sineHalfAngle = length / 2;
    var net = Math.min(2, ExpansionInPixels / sineHalfAngle);
    dx *= net;
    dy *= net;
    pntOut.x = p1x - dx;
    pntOut.y = p1y - dy;
}
wwtlib.RenderTriangle.prototype = {
    
    makeNormal: function wwtlib_RenderTriangle$makeNormal() {
        var a = this.a.position.copy();
        var b = this.b.position.copy();
        var c = this.c.position.copy();
        a.normalize();
        b.normalize();
        c.normalize();
        var x = a.x + b.x + c.x;
        var y = a.y + b.y + c.y;
        var z = a.z + b.z + c.z;
        this.normal = wwtlib.Vector3d.create(x / 3, y / 3, z / 3);
        this.normal.normalize();
    },
    
    _texture: null,
    opacity: 1,
    expansionInPixels: 0.6,
    tileLevel: 0,
    
    _checkBackface: function wwtlib_RenderTriangle$_checkBackface() {
        /// <returns type="Boolean"></returns>
        var ab = wwtlib.Vector3d.subtractVectors(this._ta, this._tb);
        var ac = wwtlib.Vector3d.subtractVectors(this._ta, this._tc);
        var cp = wwtlib.Vector3d.cross(ab, ac);
        cp.normalize();
        return cp.z >= 0;
    },
    
    draw: function wwtlib_RenderTriangle$draw(ctx, wvp) {
        /// <param name="ctx" type="CanvasContext2D">
        /// </param>
        /// <param name="wvp" type="wwtlib.Matrix3d">
        /// </param>
        if (ctx == null) {
            return;
        }
        wvp._transformTo(this.a.position, this._ta);
        wvp._transformTo(this.b.position, this._tb);
        wvp._transformTo(this.c.position, this._tc);
        if (this._checkBackface() === wwtlib.RenderTriangle.cullInside) {
            wwtlib.RenderTriangle.trianglesCulled++;
            return;
        }
        this._drawTriangle(ctx, this._texture, this._ta.x, this._ta.y, this._tb.x, this._tb.y, this._tc.x, this._tc.y, this.a.tu, this.a.tv, this.b.tu, this.b.tv, this.c.tu, this.c.tv);
    },
    
    _drawTriangle: function wwtlib_RenderTriangle$_drawTriangle(ctx, im, x0, y0, x1, y1, x2, y2, sx0, sy0, sx1, sy1, sx2, sy2) {
        /// <param name="ctx" type="CanvasContext2D">
        /// </param>
        /// <param name="im" type="Object" domElement="true">
        /// </param>
        /// <param name="x0" type="Number">
        /// </param>
        /// <param name="y0" type="Number">
        /// </param>
        /// <param name="x1" type="Number">
        /// </param>
        /// <param name="y1" type="Number">
        /// </param>
        /// <param name="x2" type="Number">
        /// </param>
        /// <param name="y2" type="Number">
        /// </param>
        /// <param name="sx0" type="Number">
        /// </param>
        /// <param name="sy0" type="Number">
        /// </param>
        /// <param name="sx1" type="Number">
        /// </param>
        /// <param name="sy1" type="Number">
        /// </param>
        /// <param name="sx2" type="Number">
        /// </param>
        /// <param name="sy2" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (!this.intersects(0, wwtlib.RenderTriangle.width, 0, wwtlib.RenderTriangle.height, x0, y0, x1, y1, x2, y2)) {
            return false;
        }
        wwtlib.RenderTriangle._miterPointOut(this._expandedS0, x0, y0, x1, y1, x2, y2, this.expansionInPixels);
        wwtlib.RenderTriangle._miterPointOut(this._expandedS1, x1, y1, x0, y0, x2, y2, this.expansionInPixels);
        wwtlib.RenderTriangle._miterPointOut(this._expandedS2, x2, y2, x1, y1, x0, y0, this.expansionInPixels);
        x0 = this._expandedS0.x;
        y0 = this._expandedS0.y;
        x1 = this._expandedS1.x;
        y1 = this._expandedS1.y;
        x2 = this._expandedS2.x;
        y2 = this._expandedS2.y;
        ctx.save();
        if (wwtlib.RenderTriangle.renderingOn) {
            ctx.beginPath();
            ctx.moveTo(x0, y0);
            ctx.lineTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.closePath();
            ctx.clip();
        }
        var denom = sx0 * (sy2 - sy1) - sx1 * sy2 + sx2 * sy1 + (sx1 - sx2) * sy0;
        var m11 = -(sy0 * (x2 - x1) - sy1 * x2 + sy2 * x1 + (sy1 - sy2) * x0) / denom;
        var m12 = (sy1 * y2 + sy0 * (y1 - y2) - sy2 * y1 + (sy2 - sy1) * y0) / denom;
        var m21 = (sx0 * (x2 - x1) - sx1 * x2 + sx2 * x1 + (sx1 - sx2) * x0) / denom;
        var m22 = -(sx1 * y2 + sx0 * (y1 - y2) - sx2 * y1 + (sx2 - sx1) * y0) / denom;
        var dx = (sx0 * (sy2 * x1 - sy1 * x2) + sy0 * (sx1 * x2 - sx2 * x1) + (sx2 * sy1 - sx1 * sy2) * x0) / denom;
        var dy = (sx0 * (sy2 * y1 - sy1 * y2) + sy0 * (sx1 * y2 - sx2 * y1) + (sx2 * sy1 - sx1 * sy2) * y0) / denom;
        ctx.transform(m11, m12, m21, m22, dx, dy);
        if (wwtlib.RenderTriangle.renderingOn) {
            ctx.globalAlpha = this.opacity;
            if (this.lighting < 1) {
                ctx.globalAlpha = 1;
                ctx.fillStyle = 'Black';
                ctx.fillRect(0, 0, wwtlib.RenderTriangle.width, wwtlib.RenderTriangle.height);
                ctx.globalAlpha = this.lighting * this.opacity;
            }
            ctx.drawImage(im, 0, 0);
        }
        ctx.restore();
        return true;
    },
    
    lighting: 1,
    
    intersects: function wwtlib_RenderTriangle$intersects(l, r, t, b, x0, y0, x1, y1, x2, y2) {
        /// <param name="l" type="Number">
        /// </param>
        /// <param name="r" type="Number">
        /// </param>
        /// <param name="t" type="Number">
        /// </param>
        /// <param name="b" type="Number">
        /// </param>
        /// <param name="x0" type="Number">
        /// </param>
        /// <param name="y0" type="Number">
        /// </param>
        /// <param name="x1" type="Number">
        /// </param>
        /// <param name="y1" type="Number">
        /// </param>
        /// <param name="x2" type="Number">
        /// </param>
        /// <param name="y2" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (x0 > l && x0 < r && y0 > t && y0 < b) {
            return true;
        }
        if (x1 > l && x1 < r && y1 > t && y1 < b) {
            return true;
        }
        if (x2 > l && x2 < r && y2 > t && y2 < b) {
            return true;
        }
        var h4 = wwtlib.RenderTriangle.height * 4;
        if (this.tileLevel < 4 && ((Math.abs(x0 - x1) > h4) || (Math.abs(y0 - y1) > h4) || (Math.abs(x2 - x1) > h4) || (Math.abs(y2 - y1) > h4) || (Math.abs(x0 - x2) > h4) || (Math.abs(y0 - y2) > h4))) {
            return false;
        }
        return this.lineRectangleIntersect(l, r, t, b, x0, y0, x1, y1) || this.lineRectangleIntersect(l, r, t, b, x1, y1, x2, y2) || this.lineRectangleIntersect(l, r, t, b, x2, y2, x0, y0);
    },
    
    lineRectangleIntersect: function wwtlib_RenderTriangle$lineRectangleIntersect(l, r, t, b, x0, y0, x1, y1) {
        /// <param name="l" type="Number">
        /// </param>
        /// <param name="r" type="Number">
        /// </param>
        /// <param name="t" type="Number">
        /// </param>
        /// <param name="b" type="Number">
        /// </param>
        /// <param name="x0" type="Number">
        /// </param>
        /// <param name="y0" type="Number">
        /// </param>
        /// <param name="x1" type="Number">
        /// </param>
        /// <param name="y1" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        var top_intersection;
        var bottom_intersection;
        var toptrianglepoint;
        var bottomtrianglepoint;
        var m;
        var c;
        m = (y1 - y0) / (x1 - x0);
        c = y0 - (m * x0);
        if (m > 0) {
            top_intersection = (m * l + c);
            bottom_intersection = (m * r + c);
        }
        else {
            top_intersection = (m * r + c);
            bottom_intersection = (m * l + c);
        }
        if (y0 < y1) {
            toptrianglepoint = y0;
            bottomtrianglepoint = y1;
        }
        else {
            toptrianglepoint = y1;
            bottomtrianglepoint = y0;
        }
        var topoverlap;
        var botoverlap;
        topoverlap = (top_intersection > toptrianglepoint) ? top_intersection : toptrianglepoint;
        botoverlap = (bottom_intersection < bottomtrianglepoint) ? bottom_intersection : bottomtrianglepoint;
        return (topoverlap < botoverlap) && (!((botoverlap < t) || (topoverlap > b)));
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ScriptInterface

wwtlib.ScriptInterface = function wwtlib_ScriptInterface() {
    /// <field name="_missedReady" type="Boolean">
    /// </field>
    /// <field name="__ready" type="System.EventHandler`1">
    /// </field>
    /// <field name="__collectionLoaded" type="System.EventHandler`1">
    /// </field>
    /// <field name="__arrived" type="System.EventHandler`1">
    /// </field>
    /// <field name="__clicked" type="System.EventHandler`1">
    /// </field>
    /// <field name="__annotationClicked" type="System.EventHandler`1">
    /// </field>
    /// <field name="__imageryLoaded" type="System.EventHandler`1">
    /// </field>
    /// <field name="__tourReady" type="System.EventHandler`1">
    /// </field>
    /// <field name="__tourEnded" type="System.EventHandler`1">
    /// </field>
    /// <field name="__slideChanged" type="System.EventHandler`1">
    /// </field>
    /// <field name="hideTourFeedback" type="Boolean">
    /// </field>
    /// <field name="_imageFolder" type="wwtlib.Folder">
    /// </field>
    /// <field name="_imageUrl" type="String">
    /// </field>
    /// <field name="_smoothAnimation" type="Boolean">
    /// </field>
    /// <field name="_showCaptions" type="Boolean">
    /// </field>
    /// <field name="settings" type="wwtlib.Settings">
    /// </field>
}
wwtlib.ScriptInterface.prototype = {
    _missedReady: false,
    
    add_ready: function wwtlib_ScriptInterface$add_ready(value) {
        /// <param name="value" type="Function" />
        this.__ready = ss.Delegate.combine(this.__ready, value);
    },
    remove_ready: function wwtlib_ScriptInterface$remove_ready(value) {
        /// <param name="value" type="Function" />
        this.__ready = ss.Delegate.remove(this.__ready, value);
    },
    
    __ready: null,
    
    _fireReady: function wwtlib_ScriptInterface$_fireReady() {
        if (this.__ready != null) {
            this.__ready(this, new ss.EventArgs());
        }
        else {
            this._missedReady = true;
        }
    },
    
    add_collectionLoaded: function wwtlib_ScriptInterface$add_collectionLoaded(value) {
        /// <param name="value" type="Function" />
        this.__collectionLoaded = ss.Delegate.combine(this.__collectionLoaded, value);
    },
    remove_collectionLoaded: function wwtlib_ScriptInterface$remove_collectionLoaded(value) {
        /// <param name="value" type="Function" />
        this.__collectionLoaded = ss.Delegate.remove(this.__collectionLoaded, value);
    },
    
    __collectionLoaded: null,
    
    _fireCollectionLoaded: function wwtlib_ScriptInterface$_fireCollectionLoaded(url) {
        /// <param name="url" type="String">
        /// </param>
        if (this.__collectionLoaded != null) {
            this.__collectionLoaded(this, new wwtlib.CollectionLoadedEventArgs(url));
        }
    },
    
    add_arrived: function wwtlib_ScriptInterface$add_arrived(value) {
        /// <param name="value" type="Function" />
        this.__arrived = ss.Delegate.combine(this.__arrived, value);
    },
    remove_arrived: function wwtlib_ScriptInterface$remove_arrived(value) {
        /// <param name="value" type="Function" />
        this.__arrived = ss.Delegate.remove(this.__arrived, value);
    },
    
    __arrived: null,
    
    add_clicked: function wwtlib_ScriptInterface$add_clicked(value) {
        /// <param name="value" type="Function" />
        this.__clicked = ss.Delegate.combine(this.__clicked, value);
    },
    remove_clicked: function wwtlib_ScriptInterface$remove_clicked(value) {
        /// <param name="value" type="Function" />
        this.__clicked = ss.Delegate.remove(this.__clicked, value);
    },
    
    __clicked: null,
    
    add_annotationClicked: function wwtlib_ScriptInterface$add_annotationClicked(value) {
        /// <param name="value" type="Function" />
        this.__annotationClicked = ss.Delegate.combine(this.__annotationClicked, value);
    },
    remove_annotationClicked: function wwtlib_ScriptInterface$remove_annotationClicked(value) {
        /// <param name="value" type="Function" />
        this.__annotationClicked = ss.Delegate.remove(this.__annotationClicked, value);
    },
    
    __annotationClicked: null,
    
    add_imageryLoaded: function wwtlib_ScriptInterface$add_imageryLoaded(value) {
        /// <param name="value" type="Function" />
        this.__imageryLoaded = ss.Delegate.combine(this.__imageryLoaded, value);
    },
    remove_imageryLoaded: function wwtlib_ScriptInterface$remove_imageryLoaded(value) {
        /// <param name="value" type="Function" />
        this.__imageryLoaded = ss.Delegate.remove(this.__imageryLoaded, value);
    },
    
    __imageryLoaded: null,
    
    add_tourReady: function wwtlib_ScriptInterface$add_tourReady(value) {
        /// <param name="value" type="Function" />
        this.__tourReady = ss.Delegate.combine(this.__tourReady, value);
    },
    remove_tourReady: function wwtlib_ScriptInterface$remove_tourReady(value) {
        /// <param name="value" type="Function" />
        this.__tourReady = ss.Delegate.remove(this.__tourReady, value);
    },
    
    __tourReady: null,
    
    add_tourEnded: function wwtlib_ScriptInterface$add_tourEnded(value) {
        /// <param name="value" type="Function" />
        this.__tourEnded = ss.Delegate.combine(this.__tourEnded, value);
    },
    remove_tourEnded: function wwtlib_ScriptInterface$remove_tourEnded(value) {
        /// <param name="value" type="Function" />
        this.__tourEnded = ss.Delegate.remove(this.__tourEnded, value);
    },
    
    __tourEnded: null,
    
    add_slideChanged: function wwtlib_ScriptInterface$add_slideChanged(value) {
        /// <param name="value" type="Function" />
        this.__slideChanged = ss.Delegate.combine(this.__slideChanged, value);
    },
    remove_slideChanged: function wwtlib_ScriptInterface$remove_slideChanged(value) {
        /// <param name="value" type="Function" />
        this.__slideChanged = ss.Delegate.remove(this.__slideChanged, value);
    },
    
    __slideChanged: null,
    
    _fireTourReady: function wwtlib_ScriptInterface$_fireTourReady() {
        if (this.__tourReady != null) {
            this.__tourReady(this, new ss.EventArgs());
        }
    },
    
    _fireTourEnded: function wwtlib_ScriptInterface$_fireTourEnded() {
        if (this.__tourEnded != null) {
            this.__tourEnded(this, new ss.EventArgs());
        }
    },
    
    _fireImageryLoaded: function wwtlib_ScriptInterface$_fireImageryLoaded() {
        if (this.__imageryLoaded != null) {
            this.__imageryLoaded(this, new ss.EventArgs());
        }
    },
    
    _fireClick: function wwtlib_ScriptInterface$_fireClick(ra, dec) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        if (this.__clicked != null) {
            this.__clicked(this, new wwtlib.ArrivedEventArgs(ra, dec, wwtlib.WWTControl.singleton.renderContext.viewCamera.zoom));
        }
    },
    
    _fireArrived: function wwtlib_ScriptInterface$_fireArrived(ra, dec, zoom) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <param name="zoom" type="Number">
        /// </param>
        if (this.__arrived != null) {
            this.__arrived(this, new wwtlib.ArrivedEventArgs(ra, dec, zoom));
        }
    },
    
    _fireAnnotationclicked: function wwtlib_ScriptInterface$_fireAnnotationclicked(RA, Dec, id) {
        /// <param name="RA" type="Number">
        /// </param>
        /// <param name="Dec" type="Number">
        /// </param>
        /// <param name="id" type="String">
        /// </param>
        try {
            if (this.__annotationClicked != null) {
                this.__annotationClicked(this, new wwtlib.AnnotationClickEventArgs(RA, Dec, id));
            }
        }
        catch ($e1) {
        }
    },
    
    _fireSlideChanged: function wwtlib_ScriptInterface$_fireSlideChanged(caption) {
        /// <param name="caption" type="String">
        /// </param>
        try {
            if (this.__slideChanged != null) {
                this.__slideChanged(this, new wwtlib.SlideChangedEventArgs(caption));
            }
        }
        catch ($e1) {
        }
    },
    
    endInit: function wwtlib_ScriptInterface$endInit() {
        if (this._missedReady) {
            this._fireReady();
        }
    },
    
    gotoRaDecZoom: function wwtlib_ScriptInterface$gotoRaDecZoom(ra, dec, zoom, instant) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <param name="zoom" type="Number">
        /// </param>
        /// <param name="instant" type="Boolean">
        /// </param>
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton.gotoRADecZoom(ra / 15, dec, zoom * 6, instant);
        }
    },
    
    setBackgroundImageByName: function wwtlib_ScriptInterface$setBackgroundImageByName(name) {
        /// <param name="name" type="String">
        /// </param>
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton.setBackgroundImageByName(name);
        }
    },
    
    setForegroundImageByName: function wwtlib_ScriptInterface$setForegroundImageByName(name) {
        /// <param name="name" type="String">
        /// </param>
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton.setForegroundImageByName(name);
            wwtlib.WWTControl.singleton.renderContext.viewCamera.opacity = 100;
        }
    },
    
    setForegroundOpacity: function wwtlib_ScriptInterface$setForegroundOpacity(opacity) {
        /// <param name="opacity" type="Number">
        /// </param>
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton.renderContext.viewCamera.opacity = opacity;
        }
    },
    
    hideUI: function wwtlib_ScriptInterface$hideUI(hide) {
        /// <param name="hide" type="Boolean">
        /// </param>
    },
    
    loadTour: function wwtlib_ScriptInterface$loadTour(url) {
        /// <param name="url" type="String">
        /// </param>
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton.playTour(url);
        }
    },
    
    hideTourFeedback: false,
    
    get_hideTourFeedback: function wwtlib_ScriptInterface$get_hideTourFeedback() {
        /// <value type="Boolean"></value>
        return this.hideTourFeedback;
    },
    set_hideTourFeedback: function wwtlib_ScriptInterface$set_hideTourFeedback(value) {
        /// <value type="Boolean"></value>
        this.hideTourFeedback = value;
        return value;
    },
    
    playTour: function wwtlib_ScriptInterface$playTour() {
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton.playCurrentTour();
        }
    },
    
    stopTour: function wwtlib_ScriptInterface$stopTour() {
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton.stopCurrentTour();
        }
    },
    
    _imageFolder: null,
    _imageUrl: null,
    
    loadImageCollection: function wwtlib_ScriptInterface$loadImageCollection(url) {
        /// <param name="url" type="String">
        /// </param>
        this._imageUrl = url;
        this._imageFolder = new wwtlib.Folder();
        this._imageFolder.loadFromUrl(url, ss.Delegate.create(this, function() {
            wwtlib._wtml.loadImagesets(this._imageFolder);
            this._fireCollectionLoaded(url);
        }));
    },
    
    _imageFileLoaded: function wwtlib_ScriptInterface$_imageFileLoaded() {
        this._fireCollectionLoaded(this._imageUrl);
    },
    
    zoom: function wwtlib_ScriptInterface$zoom(factor) {
        /// <param name="factor" type="Number">
        /// </param>
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton.zoom(factor);
        }
        return;
    },
    
    getRA: function wwtlib_ScriptInterface$getRA() {
        /// <returns type="Number"></returns>
        if (wwtlib.WWTControl.singleton != null) {
            return wwtlib.WWTControl.singleton.renderContext.get_RA();
        }
        return 0;
    },
    
    getDec: function wwtlib_ScriptInterface$getDec() {
        /// <returns type="Number"></returns>
        if (wwtlib.WWTControl.singleton != null) {
            return wwtlib.WWTControl.singleton.renderContext.get_dec();
        }
        return 0;
    },
    
    createFolder: function wwtlib_ScriptInterface$createFolder() {
        /// <returns type="wwtlib.Folder"></returns>
        var folder = new wwtlib.Folder();
        return folder;
    },
    
    createPolygon: function wwtlib_ScriptInterface$createPolygon(fill) {
        /// <param name="fill" type="Boolean">
        /// </param>
        /// <returns type="wwtlib.Poly"></returns>
        var p = new wwtlib.Poly();
        p.set_fill(fill);
        return p;
    },
    
    createPolyLine: function wwtlib_ScriptInterface$createPolyLine(fill) {
        /// <param name="fill" type="Boolean">
        /// </param>
        /// <returns type="wwtlib.PolyLine"></returns>
        return new wwtlib.PolyLine();
    },
    
    createCircle: function wwtlib_ScriptInterface$createCircle(fill) {
        /// <param name="fill" type="Boolean">
        /// </param>
        /// <returns type="wwtlib.Circle"></returns>
        var c = new wwtlib.Circle();
        c.set_fill(fill);
        return c;
    },
    
    addAnnotation: function wwtlib_ScriptInterface$addAnnotation(annotation) {
        /// <param name="annotation" type="wwtlib.Annotation">
        /// </param>
        if (annotation != null && Type.canCast(annotation, wwtlib.Annotation)) {
            if (wwtlib.WWTControl.singleton != null) {
                wwtlib.WWTControl.singleton._addAnnotation(annotation);
            }
        }
    },
    
    removeAnnotation: function wwtlib_ScriptInterface$removeAnnotation(annotation) {
        /// <param name="annotation" type="wwtlib.Annotation">
        /// </param>
        if (annotation != null) {
            if (wwtlib.WWTControl.singleton != null) {
                wwtlib.WWTControl.singleton._removeAnnotation(annotation);
            }
        }
    },
    
    clearAnnotations: function wwtlib_ScriptInterface$clearAnnotations() {
        if (wwtlib.WWTControl.singleton != null) {
            wwtlib.WWTControl.singleton._clearAnnotations();
        }
    },
    
    _smoothAnimation: false,
    
    get_smoothAnimation: function wwtlib_ScriptInterface$get_smoothAnimation() {
        /// <value type="Boolean"></value>
        return this._smoothAnimation;
    },
    set_smoothAnimation: function wwtlib_ScriptInterface$set_smoothAnimation(value) {
        /// <value type="Boolean"></value>
        this._smoothAnimation = value;
        return value;
    },
    
    _showCaptions: true,
    
    get_showCaptions: function wwtlib_ScriptInterface$get_showCaptions() {
        /// <value type="Boolean"></value>
        return this._showCaptions;
    },
    set_showCaptions: function wwtlib_ScriptInterface$set_showCaptions(value) {
        /// <value type="Boolean"></value>
        this._showCaptions = value;
        return value;
    },
    
    loadVOTable: function wwtlib_ScriptInterface$loadVOTable(url, useCurrentView) {
        /// <param name="url" type="String">
        /// </param>
        /// <param name="useCurrentView" type="Boolean">
        /// </param>
    },
    
    get_fov: function wwtlib_ScriptInterface$get_fov() {
        /// <value type="Number"></value>
        if (wwtlib.WWTControl.singleton != null) {
            return wwtlib.WWTControl.singleton.renderContext.viewCamera.zoom / 6;
        }
        return 60;
    },
    
    settings: null
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.SlideChangedEventArgs

wwtlib.SlideChangedEventArgs = function wwtlib_SlideChangedEventArgs(caption) {
    /// <param name="caption" type="String">
    /// </param>
    /// <field name="_caption$1" type="String">
    /// </field>
    wwtlib.SlideChangedEventArgs.initializeBase(this);
    this.set_caption(caption);
}
wwtlib.SlideChangedEventArgs.prototype = {
    _caption$1: null,
    
    get_caption: function wwtlib_SlideChangedEventArgs$get_caption() {
        /// <value type="String"></value>
        return this._caption$1;
    },
    set_caption: function wwtlib_SlideChangedEventArgs$set_caption(value) {
        /// <value type="String"></value>
        this._caption$1 = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ArrivedEventArgs

wwtlib.ArrivedEventArgs = function wwtlib_ArrivedEventArgs(ra, dec, zoom) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <param name="zoom" type="Number">
    /// </param>
    /// <field name="_ra$1" type="Number">
    /// </field>
    /// <field name="_dec$1" type="Number">
    /// </field>
    /// <field name="_zoom$1" type="Number">
    /// </field>
    wwtlib.ArrivedEventArgs.initializeBase(this);
    this.set_RA(ra * 15);
    this.set_dec(dec);
    this.set_zoom(zoom / 6);
}
wwtlib.ArrivedEventArgs.prototype = {
    _ra$1: 0,
    
    get_RA: function wwtlib_ArrivedEventArgs$get_RA() {
        /// <value type="Number"></value>
        return this._ra$1;
    },
    set_RA: function wwtlib_ArrivedEventArgs$set_RA(value) {
        /// <value type="Number"></value>
        this._ra$1 = value;
        return value;
    },
    
    _dec$1: 0,
    
    get_dec: function wwtlib_ArrivedEventArgs$get_dec() {
        /// <value type="Number"></value>
        return this._dec$1;
    },
    set_dec: function wwtlib_ArrivedEventArgs$set_dec(value) {
        /// <value type="Number"></value>
        this._dec$1 = value;
        return value;
    },
    
    _zoom$1: 0,
    
    get_zoom: function wwtlib_ArrivedEventArgs$get_zoom() {
        /// <value type="Number"></value>
        return this._zoom$1;
    },
    set_zoom: function wwtlib_ArrivedEventArgs$set_zoom(value) {
        /// <value type="Number"></value>
        this._zoom$1 = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.AnnotationClickEventArgs

wwtlib.AnnotationClickEventArgs = function wwtlib_AnnotationClickEventArgs(ra, dec, id) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <param name="id" type="String">
    /// </param>
    /// <field name="_ra$1" type="Number">
    /// </field>
    /// <field name="_dec$1" type="Number">
    /// </field>
    /// <field name="_id$1" type="String">
    /// </field>
    wwtlib.AnnotationClickEventArgs.initializeBase(this);
    this.set_RA(ra * 15);
    this.set_dec(dec);
    this.set_id(id);
}
wwtlib.AnnotationClickEventArgs.prototype = {
    _ra$1: 0,
    
    get_RA: function wwtlib_AnnotationClickEventArgs$get_RA() {
        /// <value type="Number"></value>
        return this._ra$1;
    },
    set_RA: function wwtlib_AnnotationClickEventArgs$set_RA(value) {
        /// <value type="Number"></value>
        this._ra$1 = value;
        return value;
    },
    
    _dec$1: 0,
    
    get_dec: function wwtlib_AnnotationClickEventArgs$get_dec() {
        /// <value type="Number"></value>
        return this._dec$1;
    },
    set_dec: function wwtlib_AnnotationClickEventArgs$set_dec(value) {
        /// <value type="Number"></value>
        this._dec$1 = value;
        return value;
    },
    
    _id$1: null,
    
    get_id: function wwtlib_AnnotationClickEventArgs$get_id() {
        /// <value type="String"></value>
        return this._id$1;
    },
    set_id: function wwtlib_AnnotationClickEventArgs$set_id(value) {
        /// <value type="String"></value>
        this._id$1 = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.CollectionLoadedEventArgs

wwtlib.CollectionLoadedEventArgs = function wwtlib_CollectionLoadedEventArgs(url) {
    /// <param name="url" type="String">
    /// </param>
    /// <field name="_url$1" type="String">
    /// </field>
    wwtlib.CollectionLoadedEventArgs.initializeBase(this);
    this._url$1 = url;
}
wwtlib.CollectionLoadedEventArgs.prototype = {
    _url$1: null,
    
    get_url: function wwtlib_CollectionLoadedEventArgs$get_url() {
        /// <value type="String"></value>
        return this._url$1;
    },
    set_url: function wwtlib_CollectionLoadedEventArgs$set_url(value) {
        /// <value type="String"></value>
        this._url$1 = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Settings

wwtlib.Settings = function wwtlib_Settings() {
    /// <field name="_active" type="wwtlib.Settings" static="true">
    /// </field>
    /// <field name="tourSettings" type="wwtlib.ISettings" static="true">
    /// </field>
    /// <field name="autoRepeatTour" type="Boolean">
    /// </field>
    /// <field name="_localHorizonMode" type="Boolean">
    /// </field>
    /// <field name="_galacticMode" type="Boolean">
    /// </field>
    /// <field name="_constellationBoundryColor" type="String">
    /// </field>
    /// <field name="_constellationSelectionColor" type="String">
    /// </field>
    /// <field name="_constellationFigureColor" type="String">
    /// </field>
    /// <field name="_showConstellationFigures" type="Boolean">
    /// </field>
    /// <field name="_showConstellationBoundries" type="Boolean">
    /// </field>
    /// <field name="_showConstellationSelection" type="Boolean">
    /// </field>
    /// <field name="_showCrosshairs" type="Boolean">
    /// </field>
    /// <field name="_crosshairsColor" type="String">
    /// </field>
    /// <field name="_showEcliptic" type="Boolean">
    /// </field>
    /// <field name="_locationLat" type="Number">
    /// </field>
    /// <field name="_locationLng" type="Number">
    /// </field>
    /// <field name="_locationAltitude" type="Number">
    /// </field>
    /// <field name="_showFiledOfView" type="Boolean">
    /// </field>
    /// <field name="_actualPlanetScale" type="Boolean">
    /// </field>
    /// <field name="_fovCamera" type="Number" integer="true">
    /// </field>
    /// <field name="_fovEyepiece" type="Number" integer="true">
    /// </field>
    /// <field name="_fovTelescope" type="Number" integer="true">
    /// </field>
    /// <field name="_showClouds" type="Boolean">
    /// </field>
    /// <field name="_showGrid" type="Boolean">
    /// </field>
    /// <field name="_showHorizon" type="Boolean">
    /// </field>
    /// <field name="_showHorizonPanorama" type="Boolean">
    /// </field>
    /// <field name="_showMoonsAsPointSource" type="Boolean">
    /// </field>
    /// <field name="_showSolarSystem" type="Boolean">
    /// </field>
    /// <field name="_solarSystemStars" type="Boolean">
    /// </field>
    /// <field name="_solarSystemMilkyWay" type="Boolean">
    /// </field>
    /// <field name="_solarSystemCosmos" type="Boolean">
    /// </field>
    /// <field name="_solarSystemOrbits" type="Boolean">
    /// </field>
    /// <field name="_solarSystemOverlays" type="Boolean">
    /// </field>
    /// <field name="_solarSystemLighting" type="Boolean">
    /// </field>
    /// <field name="_solarSystemMultiRes" type="Boolean">
    /// </field>
    /// <field name="_solarSystemScale" type="Number" integer="true">
    /// </field>
    /// <field name="_smoothPan" type="Boolean">
    /// </field>
    /// <field name="_showEquatorialGridText" type="Boolean">
    /// </field>
    /// <field name="_showGalacticGrid" type="Boolean">
    /// </field>
    /// <field name="_showGalacticGridText" type="Boolean">
    /// </field>
    /// <field name="_showEclipticGrid" type="Boolean">
    /// </field>
    /// <field name="_showEclipticGridText" type="Boolean">
    /// </field>
    /// <field name="_showEclipticOverviewText" type="Boolean">
    /// </field>
    /// <field name="_showAltAzGrid" type="Boolean">
    /// </field>
    /// <field name="_showAltAzGridText" type="Boolean">
    /// </field>
    /// <field name="_showPrecessionChart" type="Boolean">
    /// </field>
    /// <field name="_showConstellationPictures" type="Boolean">
    /// </field>
    /// <field name="_showConstellationLabels" type="Boolean">
    /// </field>
    /// <field name="_solarSystemCMB" type="Boolean">
    /// </field>
    /// <field name="_solarSystemMinorPlanets" type="Boolean">
    /// </field>
    /// <field name="_solarSystemPlanets" type="Boolean">
    /// </field>
    /// <field name="_showEarthSky" type="Boolean">
    /// </field>
    /// <field name="_solarSystemMinorOrbits" type="Boolean">
    /// </field>
    /// <field name="_constellationsEnabled" type="String">
    /// </field>
    /// <field name="_constellationFiguresFilter" type="wwtlib.ConstellationFilter">
    /// </field>
    /// <field name="_constellationBoundariesFilter" type="wwtlib.ConstellationFilter">
    /// </field>
    /// <field name="_constellationNamesFilter" type="wwtlib.ConstellationFilter">
    /// </field>
    /// <field name="_constellationArtFilter" type="wwtlib.ConstellationFilter">
    /// </field>
    /// <field name="_showSkyOverlays" type="Boolean">
    /// </field>
    /// <field name="_showConstellations" type="Boolean">
    /// </field>
    /// <field name="_showSkyNode" type="Boolean">
    /// </field>
    /// <field name="_showSkyGrids" type="Boolean">
    /// </field>
    /// <field name="_showSkyOverlaysIn3d" type="Boolean">
    /// </field>
    /// <field name="_earthCutawayView" type="Boolean">
    /// </field>
    /// <field name="_showISSModel" type="Boolean">
    /// </field>
    /// <field name="_milkyWayModel" type="Boolean">
    /// </field>
    /// <field name="_minorPlanetsFilter" type="Number" integer="true">
    /// </field>
    /// <field name="_planetOrbitsFilter" type="Number" integer="true">
    /// </field>
    this._locationLng = -122.0858;
    this._constellationFiguresFilter = new wwtlib.ConstellationFilter();
    this._constellationBoundariesFilter = new wwtlib.ConstellationFilter();
    this._constellationNamesFilter = new wwtlib.ConstellationFilter();
    this._constellationArtFilter = new wwtlib.ConstellationFilter();
}
wwtlib.Settings.get_current = function wwtlib_Settings$get_current() {
    /// <value type="wwtlib.Settings"></value>
    if (wwtlib.Settings._active == null) {
        wwtlib.Settings._active = new wwtlib.Settings();
    }
    return wwtlib.Settings._active;
}
wwtlib.Settings.get_global = function wwtlib_Settings$get_global() {
    /// <value type="wwtlib.Settings"></value>
    if (wwtlib.Settings._active == null) {
        wwtlib.Settings._active = new wwtlib.Settings();
    }
    return wwtlib.Settings._active;
}
wwtlib.Settings.get_active = function wwtlib_Settings$get_active() {
    /// <value type="wwtlib.ISettings"></value>
    if (wwtlib.Settings._active == null) {
        wwtlib.Settings._active = new wwtlib.Settings();
    }
    if (wwtlib.Settings.tourSettings != null) {
        return wwtlib.Settings.tourSettings;
    }
    return wwtlib.Settings._active;
}
wwtlib.Settings.prototype = {
    autoRepeatTour: false,
    _localHorizonMode: false,
    _galacticMode: false,
    _constellationBoundryColor: 'blue',
    _constellationSelectionColor: 'yellow',
    _constellationFigureColor: 'red',
    _showConstellationFigures: true,
    _showConstellationBoundries: true,
    _showConstellationSelection: true,
    _showCrosshairs: true,
    _crosshairsColor: 'white',
    _showEcliptic: false,
    _locationLat: 47.717,
    _locationAltitude: 100,
    _showFiledOfView: false,
    _actualPlanetScale: true,
    _fovCamera: 0,
    _fovEyepiece: 0,
    _fovTelescope: 0,
    _showClouds: false,
    _showGrid: false,
    _showHorizon: true,
    _showHorizonPanorama: false,
    _showMoonsAsPointSource: true,
    _showSolarSystem: true,
    _solarSystemStars: true,
    _solarSystemMilkyWay: true,
    _solarSystemCosmos: true,
    _solarSystemOrbits: true,
    _solarSystemOverlays: true,
    _solarSystemLighting: true,
    _solarSystemMultiRes: true,
    _solarSystemScale: 1,
    _smoothPan: true,
    
    get_constellationFigureColor: function wwtlib_Settings$get_constellationFigureColor() {
        /// <value type="String"></value>
        return this._constellationFigureColor;
    },
    set_constellationFigureColor: function wwtlib_Settings$set_constellationFigureColor(value) {
        /// <value type="String"></value>
        this._constellationFigureColor = value;
        return value;
    },
    
    get_constellationBoundryColor: function wwtlib_Settings$get_constellationBoundryColor() {
        /// <value type="String"></value>
        return this._constellationBoundryColor;
    },
    set_constellationBoundryColor: function wwtlib_Settings$set_constellationBoundryColor(value) {
        /// <value type="String"></value>
        this._constellationBoundryColor = value;
        return value;
    },
    
    get_constellationSelectionColor: function wwtlib_Settings$get_constellationSelectionColor() {
        /// <value type="String"></value>
        return this._constellationSelectionColor;
    },
    set_constellationSelectionColor: function wwtlib_Settings$set_constellationSelectionColor(value) {
        /// <value type="String"></value>
        this._constellationSelectionColor = value;
        return value;
    },
    
    get_showCrosshairs: function wwtlib_Settings$get_showCrosshairs() {
        /// <value type="Boolean"></value>
        return this._showCrosshairs;
    },
    set_showCrosshairs: function wwtlib_Settings$set_showCrosshairs(value) {
        /// <value type="Boolean"></value>
        this._showCrosshairs = value;
        return value;
    },
    
    get_smoothPan: function wwtlib_Settings$get_smoothPan() {
        /// <value type="Boolean"></value>
        return this._smoothPan;
    },
    set_smoothPan: function wwtlib_Settings$set_smoothPan(value) {
        /// <value type="Boolean"></value>
        this._smoothPan = value;
        return value;
    },
    
    get_crosshairsColor: function wwtlib_Settings$get_crosshairsColor() {
        /// <value type="String"></value>
        return this._crosshairsColor;
    },
    set_crosshairsColor: function wwtlib_Settings$set_crosshairsColor(value) {
        /// <value type="String"></value>
        this._crosshairsColor = value;
        return value;
    },
    
    get_actualPlanetScale: function wwtlib_Settings$get_actualPlanetScale() {
        /// <value type="Boolean"></value>
        return this._actualPlanetScale;
    },
    
    get_fovCamera: function wwtlib_Settings$get_fovCamera() {
        /// <value type="Number" integer="true"></value>
        return this._fovCamera;
    },
    
    get_fovEyepiece: function wwtlib_Settings$get_fovEyepiece() {
        /// <value type="Number" integer="true"></value>
        return this._fovEyepiece;
    },
    
    get_fovTelescope: function wwtlib_Settings$get_fovTelescope() {
        /// <value type="Number" integer="true"></value>
        return this._fovTelescope;
    },
    
    get_locationAltitude: function wwtlib_Settings$get_locationAltitude() {
        /// <value type="Number"></value>
        return this._locationAltitude;
    },
    set_locationAltitude: function wwtlib_Settings$set_locationAltitude(value) {
        /// <value type="Number"></value>
        this._locationAltitude = value;
        return value;
    },
    
    get_locationLat: function wwtlib_Settings$get_locationLat() {
        /// <value type="Number"></value>
        return this._locationLat;
    },
    set_locationLat: function wwtlib_Settings$set_locationLat(value) {
        /// <value type="Number"></value>
        this._locationLat = value;
        return value;
    },
    
    get_locationLng: function wwtlib_Settings$get_locationLng() {
        /// <value type="Number"></value>
        return this._locationLng;
    },
    set_locationLng: function wwtlib_Settings$set_locationLng(value) {
        /// <value type="Number"></value>
        this._locationLng = value;
        return value;
    },
    
    get_showClouds: function wwtlib_Settings$get_showClouds() {
        /// <value type="Boolean"></value>
        return this._showClouds;
    },
    
    get_showConstellationBoundries: function wwtlib_Settings$get_showConstellationBoundries() {
        /// <value type="Boolean"></value>
        return this._showConstellationBoundries;
    },
    set_showConstellationBoundries: function wwtlib_Settings$set_showConstellationBoundries(value) {
        /// <value type="Boolean"></value>
        this._showConstellationBoundries = value;
        return value;
    },
    
    get_showConstellationFigures: function wwtlib_Settings$get_showConstellationFigures() {
        /// <value type="Boolean"></value>
        return this._showConstellationFigures;
    },
    set_showConstellationFigures: function wwtlib_Settings$set_showConstellationFigures(value) {
        /// <value type="Boolean"></value>
        this._showConstellationFigures = value;
        return value;
    },
    
    get_showConstellationSelection: function wwtlib_Settings$get_showConstellationSelection() {
        /// <value type="Boolean"></value>
        return this._showConstellationSelection;
    },
    set_showConstellationSelection: function wwtlib_Settings$set_showConstellationSelection(value) {
        /// <value type="Boolean"></value>
        this._showConstellationSelection = value;
        return value;
    },
    
    get_showEcliptic: function wwtlib_Settings$get_showEcliptic() {
        /// <value type="Boolean"></value>
        return this._showEcliptic;
    },
    set_showEcliptic: function wwtlib_Settings$set_showEcliptic(value) {
        /// <value type="Boolean"></value>
        this._showEcliptic = value;
        return value;
    },
    
    get_showElevationModel: function wwtlib_Settings$get_showElevationModel() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_showFieldOfView: function wwtlib_Settings$get_showFieldOfView() {
        /// <value type="Boolean"></value>
        return this._showFiledOfView;
    },
    
    get_showGrid: function wwtlib_Settings$get_showGrid() {
        /// <value type="Boolean"></value>
        return this._showGrid;
    },
    set_showGrid: function wwtlib_Settings$set_showGrid(value) {
        /// <value type="Boolean"></value>
        this._showGrid = value;
        return value;
    },
    
    get_showHorizon: function wwtlib_Settings$get_showHorizon() {
        /// <value type="Boolean"></value>
        return this._showHorizon;
    },
    set_showHorizon: function wwtlib_Settings$set_showHorizon(value) {
        /// <value type="Boolean"></value>
        this._showHorizon = value;
        return value;
    },
    
    get_showHorizonPanorama: function wwtlib_Settings$get_showHorizonPanorama() {
        /// <value type="Boolean"></value>
        return this._showHorizonPanorama;
    },
    
    get_showMoonsAsPointSource: function wwtlib_Settings$get_showMoonsAsPointSource() {
        /// <value type="Boolean"></value>
        return this._showMoonsAsPointSource;
    },
    
    get_showSolarSystem: function wwtlib_Settings$get_showSolarSystem() {
        /// <value type="Boolean"></value>
        return this._showSolarSystem;
    },
    
    get_localHorizonMode: function wwtlib_Settings$get_localHorizonMode() {
        /// <value type="Boolean"></value>
        return this._localHorizonMode;
    },
    set_localHorizonMode: function wwtlib_Settings$set_localHorizonMode(value) {
        /// <value type="Boolean"></value>
        this._localHorizonMode = value;
        return value;
    },
    
    get_galacticMode: function wwtlib_Settings$get_galacticMode() {
        /// <value type="Boolean"></value>
        return this._galacticMode;
    },
    set_galacticMode: function wwtlib_Settings$set_galacticMode(value) {
        /// <value type="Boolean"></value>
        this._galacticMode = value;
        return value;
    },
    
    get_solarSystemStars: function wwtlib_Settings$get_solarSystemStars() {
        /// <value type="Boolean"></value>
        return this._solarSystemStars;
    },
    set_solarSystemStars: function wwtlib_Settings$set_solarSystemStars(value) {
        /// <value type="Boolean"></value>
        this._solarSystemStars = value;
        return value;
    },
    
    get_solarSystemMilkyWay: function wwtlib_Settings$get_solarSystemMilkyWay() {
        /// <value type="Boolean"></value>
        return this._solarSystemMilkyWay;
    },
    set_solarSystemMilkyWay: function wwtlib_Settings$set_solarSystemMilkyWay(value) {
        /// <value type="Boolean"></value>
        this._solarSystemMilkyWay = value;
        return value;
    },
    
    get_solarSystemCosmos: function wwtlib_Settings$get_solarSystemCosmos() {
        /// <value type="Boolean"></value>
        return this._solarSystemCosmos;
    },
    set_solarSystemCosmos: function wwtlib_Settings$set_solarSystemCosmos(value) {
        /// <value type="Boolean"></value>
        this._solarSystemCosmos = value;
        return value;
    },
    
    get_solarSystemOrbits: function wwtlib_Settings$get_solarSystemOrbits() {
        /// <value type="Boolean"></value>
        return this._solarSystemOrbits;
    },
    set_solarSystemOrbits: function wwtlib_Settings$set_solarSystemOrbits(value) {
        /// <value type="Boolean"></value>
        this._solarSystemOrbits = value;
        return value;
    },
    
    get_solarSystemOverlays: function wwtlib_Settings$get_solarSystemOverlays() {
        /// <value type="Boolean"></value>
        return this._solarSystemOverlays;
    },
    set_solarSystemOverlays: function wwtlib_Settings$set_solarSystemOverlays(value) {
        /// <value type="Boolean"></value>
        this._solarSystemOverlays = value;
        return value;
    },
    
    get_solarSystemLighting: function wwtlib_Settings$get_solarSystemLighting() {
        /// <value type="Boolean"></value>
        return this._solarSystemLighting;
    },
    set_solarSystemLighting: function wwtlib_Settings$set_solarSystemLighting(value) {
        /// <value type="Boolean"></value>
        this._solarSystemLighting = value;
        return value;
    },
    
    get_solarSystemMultiRes: function wwtlib_Settings$get_solarSystemMultiRes() {
        /// <value type="Boolean"></value>
        return true;
    },
    set_solarSystemMultiRes: function wwtlib_Settings$set_solarSystemMultiRes(value) {
        /// <value type="Boolean"></value>
        this._solarSystemMultiRes = value;
        return value;
    },
    
    get_solarSystemScale: function wwtlib_Settings$get_solarSystemScale() {
        /// <value type="Number" integer="true"></value>
        return this._solarSystemScale;
    },
    set_solarSystemScale: function wwtlib_Settings$set_solarSystemScale(value) {
        /// <value type="Number" integer="true"></value>
        this._solarSystemScale = value;
        return value;
    },
    
    _showEquatorialGridText: false,
    
    get_showEquatorialGridText: function wwtlib_Settings$get_showEquatorialGridText() {
        /// <value type="Boolean"></value>
        return this._showEquatorialGridText;
    },
    set_showEquatorialGridText: function wwtlib_Settings$set_showEquatorialGridText(value) {
        /// <value type="Boolean"></value>
        this._showEquatorialGridText = value;
        return value;
    },
    
    _showGalacticGrid: false,
    
    get_showGalacticGrid: function wwtlib_Settings$get_showGalacticGrid() {
        /// <value type="Boolean"></value>
        return this._showGalacticGrid;
    },
    set_showGalacticGrid: function wwtlib_Settings$set_showGalacticGrid(value) {
        /// <value type="Boolean"></value>
        this._showGalacticGrid = value;
        return value;
    },
    
    _showGalacticGridText: false,
    
    get_showGalacticGridText: function wwtlib_Settings$get_showGalacticGridText() {
        /// <value type="Boolean"></value>
        return this._showGalacticGridText;
    },
    set_showGalacticGridText: function wwtlib_Settings$set_showGalacticGridText(value) {
        /// <value type="Boolean"></value>
        this._showGalacticGridText = value;
        return value;
    },
    
    _showEclipticGrid: false,
    
    get_showEclipticGrid: function wwtlib_Settings$get_showEclipticGrid() {
        /// <value type="Boolean"></value>
        return this._showEclipticGrid;
    },
    set_showEclipticGrid: function wwtlib_Settings$set_showEclipticGrid(value) {
        /// <value type="Boolean"></value>
        this._showEclipticGrid = value;
        return value;
    },
    
    _showEclipticGridText: false,
    
    get_showEclipticGridText: function wwtlib_Settings$get_showEclipticGridText() {
        /// <value type="Boolean"></value>
        return this._showEclipticGridText;
    },
    set_showEclipticGridText: function wwtlib_Settings$set_showEclipticGridText(value) {
        /// <value type="Boolean"></value>
        this._showEclipticGridText = value;
        return value;
    },
    
    _showEclipticOverviewText: false,
    
    get_showEclipticOverviewText: function wwtlib_Settings$get_showEclipticOverviewText() {
        /// <value type="Boolean"></value>
        return this._showEclipticOverviewText;
    },
    set_showEclipticOverviewText: function wwtlib_Settings$set_showEclipticOverviewText(value) {
        /// <value type="Boolean"></value>
        this._showEclipticOverviewText = value;
        return value;
    },
    
    _showAltAzGrid: false,
    
    get_showAltAzGrid: function wwtlib_Settings$get_showAltAzGrid() {
        /// <value type="Boolean"></value>
        return this._showAltAzGrid;
    },
    set_showAltAzGrid: function wwtlib_Settings$set_showAltAzGrid(value) {
        /// <value type="Boolean"></value>
        this._showAltAzGrid = value;
        return value;
    },
    
    _showAltAzGridText: false,
    
    get_showAltAzGridText: function wwtlib_Settings$get_showAltAzGridText() {
        /// <value type="Boolean"></value>
        return this._showAltAzGridText;
    },
    set_showAltAzGridText: function wwtlib_Settings$set_showAltAzGridText(value) {
        /// <value type="Boolean"></value>
        this._showAltAzGridText = value;
        return value;
    },
    
    _showPrecessionChart: false,
    
    get_showPrecessionChart: function wwtlib_Settings$get_showPrecessionChart() {
        /// <value type="Boolean"></value>
        return this._showPrecessionChart;
    },
    set_showPrecessionChart: function wwtlib_Settings$set_showPrecessionChart(value) {
        /// <value type="Boolean"></value>
        this._showPrecessionChart = value;
        return value;
    },
    
    _showConstellationPictures: false,
    
    get_showConstellationPictures: function wwtlib_Settings$get_showConstellationPictures() {
        /// <value type="Boolean"></value>
        return this._showConstellationPictures;
    },
    set_showConstellationPictures: function wwtlib_Settings$set_showConstellationPictures(value) {
        /// <value type="Boolean"></value>
        this._showConstellationPictures = value;
        return value;
    },
    
    _showConstellationLabels: false,
    
    get_showConstellationLabels: function wwtlib_Settings$get_showConstellationLabels() {
        /// <value type="Boolean"></value>
        return this._showConstellationLabels;
    },
    set_showConstellationLabels: function wwtlib_Settings$set_showConstellationLabels(value) {
        /// <value type="Boolean"></value>
        this._showConstellationLabels = value;
        return value;
    },
    
    _solarSystemCMB: true,
    
    get_solarSystemCMB: function wwtlib_Settings$get_solarSystemCMB() {
        /// <value type="Boolean"></value>
        return this._solarSystemCMB;
    },
    set_solarSystemCMB: function wwtlib_Settings$set_solarSystemCMB(value) {
        /// <value type="Boolean"></value>
        this._solarSystemCMB = value;
        return value;
    },
    
    _solarSystemMinorPlanets: false,
    
    get_solarSystemMinorPlanets: function wwtlib_Settings$get_solarSystemMinorPlanets() {
        /// <value type="Boolean"></value>
        return this._solarSystemMinorPlanets;
    },
    set_solarSystemMinorPlanets: function wwtlib_Settings$set_solarSystemMinorPlanets(value) {
        /// <value type="Boolean"></value>
        this._solarSystemMinorPlanets = value;
        return value;
    },
    
    _solarSystemPlanets: true,
    
    get_solarSystemPlanets: function wwtlib_Settings$get_solarSystemPlanets() {
        /// <value type="Boolean"></value>
        return this._solarSystemPlanets;
    },
    set_solarSystemPlanets: function wwtlib_Settings$set_solarSystemPlanets(value) {
        /// <value type="Boolean"></value>
        this._solarSystemPlanets = value;
        return value;
    },
    
    _showEarthSky: true,
    
    get_showEarthSky: function wwtlib_Settings$get_showEarthSky() {
        /// <value type="Boolean"></value>
        return this._showEarthSky;
    },
    set_showEarthSky: function wwtlib_Settings$set_showEarthSky(value) {
        /// <value type="Boolean"></value>
        this._showEarthSky = value;
        return value;
    },
    
    _solarSystemMinorOrbits: false,
    
    get_solarSystemMinorOrbits: function wwtlib_Settings$get_solarSystemMinorOrbits() {
        /// <value type="Boolean"></value>
        return this._solarSystemMinorOrbits;
    },
    set_solarSystemMinorOrbits: function wwtlib_Settings$set_solarSystemMinorOrbits(value) {
        /// <value type="Boolean"></value>
        this._solarSystemMinorOrbits = value;
        return value;
    },
    
    _constellationsEnabled: '',
    
    get_constellationsEnabled: function wwtlib_Settings$get_constellationsEnabled() {
        /// <value type="String"></value>
        return this._constellationsEnabled;
    },
    set_constellationsEnabled: function wwtlib_Settings$set_constellationsEnabled(value) {
        /// <value type="String"></value>
        this._constellationsEnabled = value;
        return value;
    },
    
    get_constellationFiguresFilter: function wwtlib_Settings$get_constellationFiguresFilter() {
        /// <value type="wwtlib.ConstellationFilter"></value>
        return this._constellationFiguresFilter;
    },
    set_constellationFiguresFilter: function wwtlib_Settings$set_constellationFiguresFilter(value) {
        /// <value type="wwtlib.ConstellationFilter"></value>
        this._constellationFiguresFilter = value;
        return value;
    },
    
    get_constellationBoundariesFilter: function wwtlib_Settings$get_constellationBoundariesFilter() {
        /// <value type="wwtlib.ConstellationFilter"></value>
        return this._constellationBoundariesFilter;
    },
    set_constellationBoundariesFilter: function wwtlib_Settings$set_constellationBoundariesFilter(value) {
        /// <value type="wwtlib.ConstellationFilter"></value>
        this._constellationBoundariesFilter = value;
        return value;
    },
    
    get_constellationNamesFilter: function wwtlib_Settings$get_constellationNamesFilter() {
        /// <value type="wwtlib.ConstellationFilter"></value>
        return this._constellationNamesFilter;
    },
    set_constellationNamesFilter: function wwtlib_Settings$set_constellationNamesFilter(value) {
        /// <value type="wwtlib.ConstellationFilter"></value>
        this._constellationNamesFilter = value;
        return value;
    },
    
    get_constellationArtFilter: function wwtlib_Settings$get_constellationArtFilter() {
        /// <value type="wwtlib.ConstellationFilter"></value>
        return this._constellationArtFilter;
    },
    set_constellationArtFilter: function wwtlib_Settings$set_constellationArtFilter(value) {
        /// <value type="wwtlib.ConstellationFilter"></value>
        this._constellationArtFilter = value;
        return value;
    },
    
    _showSkyOverlays: true,
    
    get_showSkyOverlays: function wwtlib_Settings$get_showSkyOverlays() {
        /// <value type="Boolean"></value>
        return this._showSkyOverlays;
    },
    set_showSkyOverlays: function wwtlib_Settings$set_showSkyOverlays(value) {
        /// <value type="Boolean"></value>
        this._showSkyOverlays = value;
        return value;
    },
    
    _showConstellations: true,
    
    get_showConstellations: function wwtlib_Settings$get_showConstellations() {
        /// <value type="Boolean"></value>
        return this._showConstellations;
    },
    set_showConstellations: function wwtlib_Settings$set_showConstellations(value) {
        /// <value type="Boolean"></value>
        this._showConstellations = value;
        return value;
    },
    
    _showSkyNode: true,
    
    get_showSkyNode: function wwtlib_Settings$get_showSkyNode() {
        /// <value type="Boolean"></value>
        return this._showSkyNode;
    },
    set_showSkyNode: function wwtlib_Settings$set_showSkyNode(value) {
        /// <value type="Boolean"></value>
        this._showSkyNode = value;
        return value;
    },
    
    _showSkyGrids: true,
    
    get_showSkyGrids: function wwtlib_Settings$get_showSkyGrids() {
        /// <value type="Boolean"></value>
        return this._showSkyGrids;
    },
    set_showSkyGrids: function wwtlib_Settings$set_showSkyGrids(value) {
        /// <value type="Boolean"></value>
        this._showSkyGrids = value;
        return value;
    },
    
    _showSkyOverlaysIn3d: true,
    
    get_showSkyOverlaysIn3d: function wwtlib_Settings$get_showSkyOverlaysIn3d() {
        /// <value type="Boolean"></value>
        return this._showSkyOverlaysIn3d;
    },
    set_showSkyOverlaysIn3d: function wwtlib_Settings$set_showSkyOverlaysIn3d(value) {
        /// <value type="Boolean"></value>
        this._showSkyOverlaysIn3d = value;
        return value;
    },
    
    _earthCutawayView: false,
    
    get_earthCutawayView: function wwtlib_Settings$get_earthCutawayView() {
        /// <value type="Boolean"></value>
        return this._earthCutawayView;
    },
    set_earthCutawayView: function wwtlib_Settings$set_earthCutawayView(value) {
        /// <value type="Boolean"></value>
        this._earthCutawayView = value;
        return value;
    },
    
    _showISSModel: false,
    
    get_showISSModel: function wwtlib_Settings$get_showISSModel() {
        /// <value type="Boolean"></value>
        return this._showISSModel;
    },
    set_showISSModel: function wwtlib_Settings$set_showISSModel(value) {
        /// <value type="Boolean"></value>
        this._showISSModel = value;
        return value;
    },
    
    _milkyWayModel: false,
    
    get_milkyWayModel: function wwtlib_Settings$get_milkyWayModel() {
        /// <value type="Boolean"></value>
        return this._milkyWayModel;
    },
    set_milkyWayModel: function wwtlib_Settings$set_milkyWayModel(value) {
        /// <value type="Boolean"></value>
        this._milkyWayModel = value;
        return value;
    },
    
    _minorPlanetsFilter: 255,
    
    get_minorPlanetsFilter: function wwtlib_Settings$get_minorPlanetsFilter() {
        /// <value type="Number" integer="true"></value>
        return this._minorPlanetsFilter;
    },
    set_minorPlanetsFilter: function wwtlib_Settings$set_minorPlanetsFilter(value) {
        /// <value type="Number" integer="true"></value>
        this._minorPlanetsFilter = value;
        return value;
    },
    
    _planetOrbitsFilter: 2147483647,
    
    get_planetOrbitsFilter: function wwtlib_Settings$get_planetOrbitsFilter() {
        /// <value type="Number" integer="true"></value>
        return this._planetOrbitsFilter;
    },
    set_planetOrbitsFilter: function wwtlib_Settings$set_planetOrbitsFilter(value) {
        /// <value type="Number" integer="true"></value>
        this._planetOrbitsFilter = value;
        return value;
    },
    
    getSetting: function wwtlib_Settings$getSetting(type) {
        /// <param name="type" type="wwtlib.StockSkyOverlayTypes">
        /// </param>
        /// <returns type="wwtlib.SettingParameter"></returns>
        return new wwtlib.SettingParameter(false, 1, false, null);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.SkyImageTile

wwtlib.SkyImageTile = function wwtlib_SkyImageTile() {
    /// <field name="matrix" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="pixelCenterX" type="Number">
    /// </field>
    /// <field name="pixelCenterY" type="Number">
    /// </field>
    /// <field name="latCenter" type="Number">
    /// </field>
    /// <field name="lngCenter" type="Number">
    /// </field>
    /// <field name="rotation" type="Number">
    /// </field>
    /// <field name="scaleX" type="Number">
    /// </field>
    /// <field name="scaleY" type="Number">
    /// </field>
    /// <field name="height" type="Number">
    /// </field>
    /// <field name="width" type="Number">
    /// </field>
    /// <field name="_vertexList$1" type="Array">
    /// </field>
    /// <field name="_childTriangleList$1" type="Array">
    /// </field>
    wwtlib.SkyImageTile.initializeBase(this);
}
wwtlib.SkyImageTile.create = function wwtlib_SkyImageTile$create(level, x, y, dataset, parent) {
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="x" type="Number" integer="true">
    /// </param>
    /// <param name="y" type="Number" integer="true">
    /// </param>
    /// <param name="dataset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.SkyImageTile"></returns>
    var temp = new wwtlib.SkyImageTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = x;
    temp.tileY = y;
    temp.dataset = dataset;
    temp._getParameters$1();
    temp.computeMatrix();
    temp.sphereCenter = temp.geoTo3dTan(0, 0);
    temp.radius = 1.25;
    return temp;
}
wwtlib.SkyImageTile.prototype = {
    matrix: null,
    
    computeMatrix: function wwtlib_SkyImageTile$computeMatrix() {
        this.matrix = wwtlib.Matrix3d.get_identity();
        this.matrix._multiply(wwtlib.Matrix3d._rotationX((this.rotation / 180 * Math.PI)));
        this.matrix._multiply(wwtlib.Matrix3d._rotationZ((this.latCenter / 180 * Math.PI)));
        this.matrix._multiply(wwtlib.Matrix3d._rotationY(((360 - this.lngCenter) / 180 * Math.PI)));
    },
    
    pixelCenterX: 0,
    pixelCenterY: 0,
    latCenter: 0,
    lngCenter: 0,
    rotation: 0,
    scaleX: 0.01,
    scaleY: 0.01,
    height: 0,
    width: 0,
    
    _getParameters$1: function wwtlib_SkyImageTile$_getParameters$1() {
        this.pixelCenterX = this.dataset.get_offsetX();
        this.pixelCenterY = this.dataset.get_offsetY();
        this.latCenter = this.dataset.get_centerY();
        this.lngCenter = this.dataset.get_centerX();
        this.rotation = this.dataset.get_rotation();
        this.scaleX = -(this.scaleY = this.dataset.get_baseTileDegrees());
        if (this.dataset.get_bottomsUp()) {
            this.scaleX = -this.scaleX;
            this.rotation = 360 - this.rotation;
        }
    },
    
    geoTo3dTan: function wwtlib_SkyImageTile$geoTo3dTan(lat, lng) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <returns type="wwtlib.Vector3d"></returns>
        lng = -lng;
        var fac1 = this.dataset.get_baseTileDegrees();
        var factor = Math.tan(fac1 * wwtlib.Tile.RC);
        return this.matrix.transform(wwtlib.Vector3d.create(1, (lat / fac1 * factor), (lng / fac1 * factor)));
    },
    
    _vertexList$1: null,
    _childTriangleList$1: null,
    
    createGeometry: function wwtlib_SkyImageTile$createGeometry(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        wwtlib.SkyImageTile.callBaseMethod(this, 'createGeometry', [ renderContext ]);
        if (this.geometryCreated) {
            return true;
        }
        this.geometryCreated = true;
        for (var i = 0; i < 4; i++) {
            this._renderTriangleLists[i] = [];
        }
        this.computeMatrix();
        this.height = this.texture.naturalHeight;
        this.width = this.texture.naturalWidth;
        var latMin = 0 + (this.scaleY * (this.height - this.pixelCenterY));
        var latMax = 0 - (this.scaleY * this.pixelCenterY);
        var lngMin = 0 + (this.scaleX * this.pixelCenterX);
        var lngMax = 0 - (this.scaleX * (this.width - this.pixelCenterX));
        this.topLeft = this.geoTo3dTan(latMin, lngMin);
        this.bottomRight = this.geoTo3dTan(latMax, lngMax);
        this.topRight = this.geoTo3dTan(latMin, lngMax);
        this.bottomLeft = this.geoTo3dTan(latMax, lngMin);
        var topCenter = wwtlib.Vector3d.lerp(this.topLeft, this.topRight, 0.5);
        var bottomCenter = wwtlib.Vector3d.lerp(this.bottomLeft, this.bottomRight, 0.5);
        var center = wwtlib.Vector3d.lerp(topCenter, bottomCenter, 0.5);
        var rightCenter = wwtlib.Vector3d.lerp(this.topRight, this.bottomRight, 0.5);
        var leftCenter = wwtlib.Vector3d.lerp(this.topLeft, this.bottomLeft, 0.5);
        if (renderContext.gl == null) {
            this._vertexList$1 = [];
            this._vertexList$1.add(wwtlib.PositionTexture.createPosSize(this.topLeft, 0, 0, this.width, this.height));
            this._vertexList$1.add(wwtlib.PositionTexture.createPosSize(this.topRight, 1, 0, this.width, this.height));
            this._vertexList$1.add(wwtlib.PositionTexture.createPosSize(this.bottomLeft, 0, 1, this.width, this.height));
            this._vertexList$1.add(wwtlib.PositionTexture.createPosSize(this.bottomRight, 1, 1, this.width, this.height));
            this._childTriangleList$1 = [];
            if (this.dataset.get_bottomsUp()) {
                this._childTriangleList$1.add(wwtlib._triangle.create(0, 1, 2));
                this._childTriangleList$1.add(wwtlib._triangle.create(2, 1, 3));
            }
            else {
                this._childTriangleList$1.add(wwtlib._triangle.create(0, 2, 1));
                this._childTriangleList$1.add(wwtlib._triangle.create(2, 3, 1));
            }
            var count = 3;
            while (count-- > 1) {
                var newList = [];
                var $enum1 = ss.IEnumerator.getEnumerator(this._childTriangleList$1);
                while ($enum1.moveNext()) {
                    var tri = $enum1.current;
                    tri.subDivide(newList, this._vertexList$1);
                }
                this._childTriangleList$1 = newList;
            }
            var miter = 0.6 / (this.width / 256);
            var $enum2 = ss.IEnumerator.getEnumerator(this._childTriangleList$1);
            while ($enum2.moveNext()) {
                var tri = $enum2.current;
                var p1 = this._vertexList$1[tri.a];
                var p2 = this._vertexList$1[tri.b];
                var p3 = this._vertexList$1[tri.c];
                this._renderTriangleLists[0].add(wwtlib.RenderTriangle.createWithMiter(p1, p2, p3, this.texture, this.level, miter));
            }
        }
        else {
            this._vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
            wwtlib.Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
            var f32array = new Float32Array(9 * 5);
            var buffer = f32array;
            var index = 0;
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(bottomCenter, 0.5, 1));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(this.bottomLeft, 0, 1));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(this.bottomRight, 1, 1));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(center, 0.5, 0.5));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(leftCenter, 0, 0.5));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(rightCenter, 1, 0.5));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(topCenter, 0.5, 0));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(this.topLeft, 0, 0));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(this.topRight, 1, 0));
            wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
            for (var i = 0; i < 4; i++) {
                index = 0;
                this.triangleCount = 2;
                var ui16array = new Uint16Array(this.triangleCount * 3);
                var indexArray = ui16array;
                switch (i) {
                    case 0:
                        indexArray[index++] = 7;
                        indexArray[index++] = 4;
                        indexArray[index++] = 6;
                        indexArray[index++] = 4;
                        indexArray[index++] = 3;
                        indexArray[index++] = 6;
                        break;
                    case 1:
                        indexArray[index++] = 6;
                        indexArray[index++] = 5;
                        indexArray[index++] = 8;
                        indexArray[index++] = 6;
                        indexArray[index++] = 3;
                        indexArray[index++] = 5;
                        break;
                    case 2:
                        indexArray[index++] = 4;
                        indexArray[index++] = 0;
                        indexArray[index++] = 3;
                        indexArray[index++] = 4;
                        indexArray[index++] = 1;
                        indexArray[index++] = 0;
                        break;
                    case 3:
                        indexArray[index++] = 3;
                        indexArray[index++] = 2;
                        indexArray[index++] = 5;
                        indexArray[index++] = 3;
                        indexArray[index++] = 0;
                        indexArray[index++] = 2;
                        break;
                }
                this._indexBuffers[i] = wwtlib.Tile.prepDevice.createBuffer();
                wwtlib.Tile.prepDevice.bindBuffer(34963, this._indexBuffers[i]);
                wwtlib.Tile.prepDevice.bufferData(34963, ui16array, 35044);
            }
        }
        return true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Text3dBatch

wwtlib.Text3dBatch = function wwtlib_Text3dBatch(height) {
    /// <param name="height" type="Number" integer="true">
    /// </param>
    /// <field name="height" type="Number" integer="true">
    /// </field>
    /// <field name="items" type="Array">
    /// </field>
    /// <field name="_glyphVersion" type="Number" integer="true">
    /// </field>
    /// <field name="viewTransform" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_glyphCache" type="wwtlib.GlyphCache">
    /// </field>
    /// <field name="_textObject" type="wwtlib.TextObject">
    /// </field>
    /// <field name="_vertexBuffer" type="wwtlib._positionTextureVertexBuffer">
    /// </field>
    /// <field name="_vertCount" type="Number" integer="true">
    /// </field>
    this.items = [];
    this._glyphVersion = -1;
    this.viewTransform = wwtlib.Matrix3d.get_identity();
    this._textObject = new wwtlib.TextObject();
    this.height = (height * 3);
}
wwtlib.Text3dBatch.prototype = {
    height: 128,
    
    add: function wwtlib_Text3dBatch$add(newItem) {
        /// <param name="newItem" type="wwtlib.Text3d">
        /// </param>
        this.items.add(newItem);
    },
    
    draw: function wwtlib_Text3dBatch$draw(renderContext, opacity, color) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="color" type="wwtlib.Color">
        /// </param>
        if (renderContext.gl == null) {
            var viewPoint = wwtlib.Vector3d._transformCoordinate(renderContext.get_viewPoint(), this.viewTransform);
            var drawHeight = (this.height / renderContext.get_fovAngle()) * renderContext.height / 180;
            var $enum1 = ss.IEnumerator.getEnumerator(this.items);
            while ($enum1.moveNext()) {
                var t3d = $enum1.current;
                var screenSpacePnt = renderContext.WVP.transform(t3d.center);
                if (screenSpacePnt.z < 0) {
                    continue;
                }
                if (wwtlib.Vector3d.dot(viewPoint, t3d.center) < 0.55) {
                    continue;
                }
                var screenSpaceTop = renderContext.WVP.transform(t3d.top);
                var rotation = Math.atan2(screenSpacePnt.x - screenSpaceTop.x, screenSpacePnt.y - screenSpaceTop.y);
                var ctx = renderContext.device;
                ctx.save();
                ctx.translate(screenSpacePnt.x, screenSpacePnt.y);
                ctx.rotate(-rotation);
                ctx.globalAlpha = opacity;
                ctx.fillStyle = color.toString();
                ctx.font = 'normal' + ' ' + ((false) ? 'bold' : 'normal') + ' ' + Math.round(drawHeight * 1.2).toString() + 'px ' + 'Arial';
                ctx.textBaseline = 'top';
                var tm = ctx.measureText(t3d.text);
                ctx.fillText(t3d.text, -tm.width / 2, -drawHeight / 2);
                ctx.restore();
            }
        }
        else {
            if (this._glyphCache == null || this._glyphCache.get_version() > this._glyphVersion) {
                this.prepareBatch();
            }
            if (!this._glyphCache.ready) {
                return;
            }
            wwtlib.TextShader.use(renderContext, this._vertexBuffer.vertexBuffer, this._glyphCache.get_texture().texture2d);
            renderContext.gl.drawArrays(4, 0, this._vertexBuffer.count);
        }
    },
    
    _glyphCache: null,
    _vertexBuffer: null,
    
    prepareBatch: function wwtlib_Text3dBatch$prepareBatch() {
        if (this._glyphCache == null) {
            this._glyphCache = wwtlib.GlyphCache.getCache(this.height);
        }
        if (!this._glyphCache.ready) {
            return;
        }
        this._textObject.text = '';
        this._textObject.fontSize = this.height * 0.5;
        var verts = [];
        var $enum1 = ss.IEnumerator.getEnumerator(this.items);
        while ($enum1.moveNext()) {
            var t3d = $enum1.current;
            var text = t3d.text;
            var size = wwtlib.Vector2d.create(1000, 100);
            var factor = 0.6666;
            t3d.width = size.x * t3d.scale * factor;
            t3d.height = size.y * t3d.scale * factor;
            var left = 0;
            var top = 0;
            var fntAdjust = this._textObject.fontSize / 128;
            var charsLeft = text.length;
            for (var i = 0; i < charsLeft; i++) {
                var item = this._glyphCache.getGlyphItem(text.substr(i, 1));
                var position = wwtlib.Rectangle.create(left * t3d.scale * factor, 0 * t3d.scale * factor, item.extents.x * fntAdjust * t3d.scale * factor, item.extents.y * fntAdjust * t3d.scale * factor);
                left += (item.extents.x * fntAdjust);
                t3d.addGlyphPoints(verts, item.size, position, item.uvRect);
            }
        }
        this._vertCount = verts.length;
        this._vertexBuffer = new wwtlib._positionTextureVertexBuffer(this._vertCount);
        var vertBuf = this._vertexBuffer.lock();
        for (var i = 0; i < this._vertCount; i++) {
            vertBuf[i] = verts[i];
        }
        this._vertexBuffer.unlock();
        this._glyphVersion = this._glyphCache.get_version();
    },
    
    _vertCount: 0,
    
    cleanUp: function wwtlib_Text3dBatch$cleanUp() {
        if (this._vertexBuffer != null) {
            this._vertexBuffer = null;
        }
        this.items.clear();
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.GlyphItem

wwtlib.GlyphItem = function wwtlib_GlyphItem(glyph) {
    /// <param name="glyph" type="String">
    /// </param>
    /// <field name="glyph" type="String">
    /// </field>
    /// <field name="uvRect" type="wwtlib.Rectangle">
    /// </field>
    /// <field name="size" type="wwtlib.Vector2d">
    /// </field>
    /// <field name="extents" type="wwtlib.Vector2d">
    /// </field>
    /// <field name="referenceCount" type="Number" integer="true">
    /// </field>
    this.glyph = glyph;
    this.uvRect = new wwtlib.Rectangle();
    this.size = new wwtlib.Vector2d();
    this.referenceCount = 1;
}
wwtlib.GlyphItem.create = function wwtlib_GlyphItem$create(glyph, uv, size, extents) {
    /// <param name="glyph" type="String">
    /// </param>
    /// <param name="uv" type="wwtlib.Rectangle">
    /// </param>
    /// <param name="size" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="extents" type="wwtlib.Vector2d">
    /// </param>
    /// <returns type="wwtlib.GlyphItem"></returns>
    var temp = new wwtlib.GlyphItem(glyph);
    temp.glyph = glyph;
    temp.uvRect = uv;
    temp.size = size;
    temp.extents = extents;
    temp.referenceCount = 1;
    return temp;
}
wwtlib.GlyphItem._fromXML = function wwtlib_GlyphItem$_fromXML(node) {
    /// <param name="node" type="XmlNode">
    /// </param>
    /// <returns type="wwtlib.GlyphItem"></returns>
    var glyph = node.attributes.getNamedItem('Glyph').nodeValue;
    var item = new wwtlib.GlyphItem(glyph);
    item.uvRect = wwtlib.Rectangle.create(parseFloat(node.attributes.getNamedItem('UVLeft').nodeValue), parseFloat(node.attributes.getNamedItem('UVTop').nodeValue), parseFloat(node.attributes.getNamedItem('UVWidth').nodeValue), parseFloat(node.attributes.getNamedItem('UVHeight').nodeValue));
    item.size = wwtlib.Vector2d.create(parseFloat(node.attributes.getNamedItem('SizeWidth').nodeValue), parseFloat(node.attributes.getNamedItem('SizeHeight').nodeValue));
    item.extents = wwtlib.Vector2d.create(parseFloat(node.attributes.getNamedItem('ExtentsWidth').nodeValue), parseFloat(node.attributes.getNamedItem('ExtentsHeight').nodeValue));
    return item;
}
wwtlib.GlyphItem.prototype = {
    
    addRef: function wwtlib_GlyphItem$addRef() {
        this.referenceCount++;
    },
    
    release: function wwtlib_GlyphItem$release() {
        this.referenceCount--;
    },
    
    glyph: null,
    uvRect: null,
    size: null,
    extents: null,
    referenceCount: 0
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.GlyphCache

wwtlib.GlyphCache = function wwtlib_GlyphCache(height) {
    /// <param name="height" type="Number" integer="true">
    /// </param>
    /// <field name="_caches" type="Object" static="true">
    /// </field>
    /// <field name="_texture" type="wwtlib.Texture">
    /// </field>
    /// <field name="_cellHeight" type="Number" integer="true">
    /// </field>
    /// <field name="_gridSize" type="Number" integer="true">
    /// </field>
    /// <field name="_webFile" type="wwtlib.WebFile">
    /// </field>
    /// <field name="ready" type="Boolean">
    /// </field>
    /// <field name="_glyphItems" type="Object">
    /// </field>
    /// <field name="textObject" type="wwtlib.TextObject">
    /// </field>
    /// <field name="_dirty" type="Boolean">
    /// </field>
    /// <field name="_textureDirty" type="Boolean">
    /// </field>
    /// <field name="_version" type="Number" integer="true">
    /// </field>
    /// <field name="_allGlyphs" type="String" static="true">
    /// </field>
    this._glyphItems = {};
    this.textObject = new wwtlib.TextObject();
    this._cellHeight = height;
    this._texture = wwtlib.Planets.loadPlanetTexture('/webclient/images/glyphs1.png');
    this._webFile = new wwtlib.WebFile('/webclient/images/glyphs1.xml');
    this._webFile.onStateChange = ss.Delegate.create(this, this._glyphXmlReady);
    this._webFile.send();
}
wwtlib.GlyphCache.getCache = function wwtlib_GlyphCache$getCache(height) {
    /// <param name="height" type="Number" integer="true">
    /// </param>
    /// <returns type="wwtlib.GlyphCache"></returns>
    if (!Object.keyExists(wwtlib.GlyphCache._caches, height)) {
        wwtlib.GlyphCache._caches[height] = new wwtlib.GlyphCache(height);
    }
    return wwtlib.GlyphCache._caches[height];
}
wwtlib.GlyphCache.cleanUpAll = function wwtlib_GlyphCache$cleanUpAll() {
    Object.clearKeys(wwtlib.GlyphCache._caches);
}
wwtlib.GlyphCache.prototype = {
    _texture: null,
    _cellHeight: 128,
    
    get_height: function wwtlib_GlyphCache$get_height() {
        /// <value type="Number" integer="true"></value>
        return this._cellHeight;
    },
    
    _gridSize: 8,
    _webFile: null,
    
    _glyphXmlReady: function wwtlib_GlyphCache$_glyphXmlReady() {
        if (this._webFile.get_state() === 2) {
            alert(this._webFile.get_message());
        }
        else if (this._webFile.get_state() === 1) {
            this._loadXmlGlyph(this._webFile.getXml());
        }
    },
    
    ready: false,
    
    _loadXmlGlyph: function wwtlib_GlyphCache$_loadXmlGlyph(xml) {
        /// <param name="xml" type="XmlDocument">
        /// </param>
        var nodes = wwtlib._util.selectSingleNode(xml, 'GlyphItems');
        var $enum1 = ss.IEnumerator.getEnumerator(nodes.childNodes);
        while ($enum1.moveNext()) {
            var glyphItem = $enum1.current;
            if (glyphItem.nodeName === 'GlyphItem') {
                var item = wwtlib.GlyphItem._fromXML(glyphItem);
                this._glyphItems[item.glyph] = item;
                wwtlib.GlyphCache._allGlyphs = wwtlib.GlyphCache._allGlyphs + item.glyph;
            }
        }
        this.ready = true;
    },
    
    get_texture: function wwtlib_GlyphCache$get_texture() {
        /// <value type="wwtlib.Texture"></value>
        return this._texture;
    },
    
    _makeTexture: function wwtlib_GlyphCache$_makeTexture() {
        this._calcOrMake(true);
    },
    
    getGlyphItem: function wwtlib_GlyphCache$getGlyphItem(glyph) {
        /// <param name="glyph" type="String">
        /// </param>
        /// <returns type="wwtlib.GlyphItem"></returns>
        if (this._dirty) {
            this._calculateGlyphDetails();
        }
        return this._glyphItems[glyph];
    },
    
    _calculateGlyphDetails: function wwtlib_GlyphCache$_calculateGlyphDetails() {
        this._calcOrMake(false);
    },
    
    _calcOrMake: function wwtlib_GlyphCache$_calcOrMake(makeTexture) {
        /// <param name="makeTexture" type="Boolean">
        /// </param>
    },
    
    _dirty: true,
    _textureDirty: true,
    _version: 0,
    
    get_version: function wwtlib_GlyphCache$get_version() {
        /// <value type="Number" integer="true"></value>
        return this._version;
    },
    set_version: function wwtlib_GlyphCache$set_version(value) {
        /// <value type="Number" integer="true"></value>
        this._version = value;
        return value;
    },
    
    addGlyph: function wwtlib_GlyphCache$addGlyph(glyph) {
        /// <param name="glyph" type="String">
        /// </param>
        if (!Object.keyExists(this._glyphItems, glyph)) {
            var item = new wwtlib.GlyphItem(glyph);
            this._glyphItems[glyph] = item;
            this._dirty = true;
            this._textureDirty = true;
            this._version++;
            wwtlib.GlyphCache._allGlyphs = wwtlib.GlyphCache._allGlyphs + glyph;
        }
        else {
            this._glyphItems[glyph].addRef();
        }
    },
    
    cleanUp: function wwtlib_GlyphCache$cleanUp() {
        this._dirty = true;
        this._texture = null;
    },
    
    dispose: function wwtlib_GlyphCache$dispose() {
        this.cleanUp();
    },
    
    get_dirty: function wwtlib_GlyphCache$get_dirty() {
        /// <value type="Boolean"></value>
        return this._dirty;
    },
    set_dirty: function wwtlib_GlyphCache$set_dirty(value) {
        /// <value type="Boolean"></value>
        this._dirty = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Text3d

wwtlib.Text3d = function wwtlib_Text3d(center, up, text, fontsize, scale) {
    /// <param name="center" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="up" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="text" type="String">
    /// </param>
    /// <param name="fontsize" type="Number">
    /// </param>
    /// <param name="scale" type="Number">
    /// </param>
    /// <field name="rotation" type="Number">
    /// </field>
    /// <field name="tilt" type="Number">
    /// </field>
    /// <field name="bank" type="Number">
    /// </field>
    /// <field name="_rtbMat" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_matInit" type="Boolean">
    /// </field>
    /// <field name="color" type="wwtlib.Color">
    /// </field>
    /// <field name="sky" type="Boolean">
    /// </field>
    /// <field name="center" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="up" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="top" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="scale" type="Number">
    /// </field>
    /// <field name="opacity" type="Number">
    /// </field>
    /// <field name="text" type="String">
    /// </field>
    /// <field name="width" type="Number">
    /// </field>
    /// <field name="height" type="Number">
    /// </field>
    /// <field name="alignment" type="wwtlib.Alignment">
    /// </field>
    this.color = wwtlib.Colors.get_white();
    this.alignment = 0;
    this.text = text;
    this.up = up;
    this.center = center;
    this.scale = scale;
    this.top = wwtlib.Vector3d.addVectors(center, wwtlib.Vector3d.scale(up, scale));
    if (fontsize < 0) {
        this.sky = false;
    }
}
wwtlib.Text3d.prototype = {
    rotation: 0,
    tilt: 0,
    bank: 0,
    _rtbMat: null,
    _matInit: false,
    sky: true,
    center: null,
    up: null,
    top: null,
    scale: 0,
    opacity: 1,
    text: '',
    width: 1,
    height: 1,
    
    addGlyphPoints: function wwtlib_Text3d$addGlyphPoints(pointList, size, position, uv) {
        /// <param name="pointList" type="Array">
        /// </param>
        /// <param name="size" type="wwtlib.Vector2d">
        /// </param>
        /// <param name="position" type="wwtlib.Rectangle">
        /// </param>
        /// <param name="uv" type="wwtlib.Rectangle">
        /// </param>
        var points = new Array(6);
        for (var i = 0; i < 6; i++) {
            points[i] = new wwtlib.PositionTexture();
        }
        var left = wwtlib.Vector3d.cross(this.center, this.up);
        var right = wwtlib.Vector3d.cross(this.up, this.center);
        left.normalize();
        right.normalize();
        this.up.normalize();
        var upTan = wwtlib.Vector3d.cross(this.center, right);
        upTan.normalize();
        if (!this.alignment) {
            left.multiply(this.width - position.get_left() * 2);
            right.multiply(this.width - ((this.width * 2) - position.get_right() * 2));
        }
        else if (this.alignment === 1) {
            left.multiply(-position.get_left() * 2);
            right.multiply(position.get_right() * 2);
        }
        var top = upTan.copy();
        var bottom = wwtlib.Vector3d.subtractVectors(wwtlib.Vector3d.get_empty(), upTan);
        top.multiply(this.height - position.get_top() * 2);
        bottom.multiply(this.height - ((this.height * 2) - position.get_bottom() * 2));
        var ul = this.center.copy();
        ul.add(top);
        if (this.sky) {
            ul.add(left);
        }
        else {
            ul.subtract(left);
        }
        var ur = this.center.copy();
        ur.add(top);
        if (this.sky) {
            ur.add(right);
        }
        else {
            ur.subtract(right);
        }
        var ll = this.center.copy();
        if (this.sky) {
            ll.add(left);
        }
        else {
            ll.subtract(left);
        }
        ll.add(bottom);
        var lr = this.center.copy();
        if (this.sky) {
            lr.add(right);
        }
        else {
            lr.subtract(right);
        }
        lr.add(bottom);
        points[0].position = ul.copy();
        points[0].tu = uv.get_left();
        points[0].tv = uv.get_top();
        points[2].tu = uv.get_left();
        points[2].tv = uv.get_bottom();
        points[2].position = ll.copy();
        points[1].tu = uv.get_right();
        points[1].tv = uv.get_top();
        points[1].position = ur.copy();
        points[3].tu = uv.get_right();
        points[3].tv = uv.get_bottom();
        points[3].position = lr.copy();
        points[5].tu = uv.get_right();
        points[5].tv = uv.get_top();
        points[5].position = ur.copy();
        points[4].tu = uv.get_left();
        points[4].tv = uv.get_bottom();
        points[4].position = ll.copy();
        if (!!this.rotation || !!this.tilt || !!this.bank) {
            if (!this._matInit) {
                var lookAt = wwtlib.Matrix3d.lookAtLH(this.center, new wwtlib.Vector3d(), this.up);
                var lookAtInv = lookAt.clone();
                lookAtInv.invert();
                this._rtbMat = wwtlib.Matrix3d.multiplyMatrix(wwtlib.Matrix3d.multiplyMatrix(wwtlib.Matrix3d.multiplyMatrix(wwtlib.Matrix3d.multiplyMatrix(lookAt, wwtlib.Matrix3d._rotationZ(-this.rotation / 180 * Math.PI)), wwtlib.Matrix3d._rotationX(-this.tilt / 180 * Math.PI)), wwtlib.Matrix3d._rotationY(-this.bank / 180 * Math.PI)), lookAtInv);
                this._matInit = true;
            }
            for (var i = 0; i < 6; i++) {
                points[i].position = wwtlib.Vector3d._transformCoordinate(points[i].position, this._rtbMat);
            }
        }
        pointList.addRange(points);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.SpaceTimeController

wwtlib.SpaceTimeController = function wwtlib_SpaceTimeController() {
    /// <field name="last" type="Date" static="true">
    /// </field>
    /// <field name="_offset" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_now" type="Date" static="true">
    /// </field>
    /// <field name="_syncToClock" type="Boolean" static="true">
    /// </field>
    /// <field name="_timeRate" type="Number" static="true">
    /// </field>
    /// <field name="_location" type="wwtlib.Coordinates" static="true">
    /// </field>
    /// <field name="_altitude" type="Number" static="true">
    /// </field>
}
wwtlib.SpaceTimeController.updateClock = function wwtlib_SpaceTimeController$updateClock() {
    if (wwtlib.SpaceTimeController._syncToClock) {
        var justNow = Date.get_now();
        if (wwtlib.SpaceTimeController._timeRate !== 1) {
            var ts = justNow.getTime() - wwtlib.SpaceTimeController.last.getTime();
            var ticks = (ts * wwtlib.SpaceTimeController._timeRate);
            wwtlib.SpaceTimeController._offset += ticks;
        }
        wwtlib.SpaceTimeController.last = justNow;
        try {
            wwtlib.SpaceTimeController._now = new Date(justNow.getTime() + wwtlib.SpaceTimeController._offset);
        }
        catch ($e1) {
            wwtlib.SpaceTimeController._now = new Date(1, 12, 25, 23, 59, 59);
            wwtlib.SpaceTimeController._offset = wwtlib.SpaceTimeController._now - Date.get_now();
        }
        if (wwtlib.SpaceTimeController._now.getFullYear() > 4000) {
            wwtlib.SpaceTimeController._now = new Date(4000, 12, 31, 23, 59, 59);
            wwtlib.SpaceTimeController._offset = wwtlib.SpaceTimeController._now - Date.get_now();
        }
        if (wwtlib.SpaceTimeController._now.getFullYear() < 1) {
            wwtlib.SpaceTimeController._now = new Date(0, 12, 25, 23, 59, 59);
            wwtlib.SpaceTimeController._offset = wwtlib.SpaceTimeController._now - Date.get_now();
        }
    }
}
wwtlib.SpaceTimeController.getTimeForFutureTime = function wwtlib_SpaceTimeController$getTimeForFutureTime(delta) {
    /// <param name="delta" type="Number">
    /// </param>
    /// <returns type="Date"></returns>
    try {
        if (wwtlib.SpaceTimeController._syncToClock) {
            var future = new Date((wwtlib.SpaceTimeController.get_now().getTime() + (delta * 1000) * wwtlib.SpaceTimeController._timeRate));
            return future;
        }
        else {
            return wwtlib.SpaceTimeController.get_now();
        }
    }
    catch ($e1) {
        return wwtlib.SpaceTimeController.get_now();
    }
}
wwtlib.SpaceTimeController.getJNowForFutureTime = function wwtlib_SpaceTimeController$getJNowForFutureTime(delta) {
    /// <param name="delta" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    try {
        if (wwtlib.SpaceTimeController._syncToClock) {
            var future = new Date(wwtlib.SpaceTimeController.get_now().getTime() + parseInt((delta * 1000 * wwtlib.SpaceTimeController._timeRate)));
            return wwtlib.SpaceTimeController.utcToJulian(future);
        }
        else {
            return wwtlib.SpaceTimeController.utcToJulian(wwtlib.SpaceTimeController.get_now());
        }
    }
    catch ($e1) {
        return wwtlib.SpaceTimeController.utcToJulian(wwtlib.SpaceTimeController.get_now());
    }
}
wwtlib.SpaceTimeController.get_now = function wwtlib_SpaceTimeController$get_now() {
    /// <value type="Date"></value>
    return wwtlib.SpaceTimeController._now;
}
wwtlib.SpaceTimeController.set_now = function wwtlib_SpaceTimeController$set_now(value) {
    /// <value type="Date"></value>
    wwtlib.SpaceTimeController._now = value;
    wwtlib.SpaceTimeController._offset = wwtlib.SpaceTimeController._now - Date.get_now();
    wwtlib.SpaceTimeController.last = Date.get_now();
    return value;
}
wwtlib.SpaceTimeController.syncTime = function wwtlib_SpaceTimeController$syncTime() {
    wwtlib.SpaceTimeController._offset = 0;
    wwtlib.SpaceTimeController._now = Date.get_now();
    wwtlib.SpaceTimeController._syncToClock = true;
}
wwtlib.SpaceTimeController.get_jNow = function wwtlib_SpaceTimeController$get_jNow() {
    /// <value type="Number"></value>
    return wwtlib.SpaceTimeController.utcToJulian(wwtlib.SpaceTimeController.get_now());
}
wwtlib.SpaceTimeController.get_syncToClock = function wwtlib_SpaceTimeController$get_syncToClock() {
    /// <value type="Boolean"></value>
    return wwtlib.SpaceTimeController._syncToClock;
}
wwtlib.SpaceTimeController.set_syncToClock = function wwtlib_SpaceTimeController$set_syncToClock(value) {
    /// <value type="Boolean"></value>
    if (wwtlib.SpaceTimeController._syncToClock !== value) {
        wwtlib.SpaceTimeController._syncToClock = value;
        if (value) {
            wwtlib.SpaceTimeController.last = Date.get_now();
            wwtlib.SpaceTimeController._offset = wwtlib.SpaceTimeController._now - Date.get_now();
        }
        else {
            wwtlib.SpaceTimeController._now = new Date(Date.get_now().getTime() + wwtlib.SpaceTimeController._offset);
        }
    }
    return value;
}
wwtlib.SpaceTimeController.get_timeRate = function wwtlib_SpaceTimeController$get_timeRate() {
    /// <value type="Number"></value>
    return wwtlib.SpaceTimeController._timeRate;
}
wwtlib.SpaceTimeController.set_timeRate = function wwtlib_SpaceTimeController$set_timeRate(value) {
    /// <value type="Number"></value>
    wwtlib.SpaceTimeController._timeRate = value;
    return value;
}
wwtlib.SpaceTimeController.get_altitude = function wwtlib_SpaceTimeController$get_altitude() {
    /// <value type="Number"></value>
    return wwtlib.SpaceTimeController._altitude;
}
wwtlib.SpaceTimeController.set_altitude = function wwtlib_SpaceTimeController$set_altitude(value) {
    /// <value type="Number"></value>
    wwtlib.SpaceTimeController._altitude = value;
    return value;
}
wwtlib.SpaceTimeController.get_location = function wwtlib_SpaceTimeController$get_location() {
    /// <value type="wwtlib.Coordinates"></value>
    wwtlib.SpaceTimeController._location = wwtlib.Coordinates.fromLatLng(wwtlib.Settings.get_active().get_locationLat(), wwtlib.Settings.get_active().get_locationLng());
    wwtlib.SpaceTimeController._altitude = wwtlib.Settings.get_active().get_locationAltitude();
    return wwtlib.SpaceTimeController._location;
}
wwtlib.SpaceTimeController.set_location = function wwtlib_SpaceTimeController$set_location(value) {
    /// <value type="wwtlib.Coordinates"></value>
    if (wwtlib.Settings.get_global().get_locationLat() !== value.get_lat()) {
        wwtlib.Settings.get_global().set_locationLat(value.get_lat());
    }
    if (wwtlib.Settings.get_global().get_locationLng() !== value.get_lng()) {
        wwtlib.Settings.get_global().set_locationLng(value.get_lng());
    }
    wwtlib.SpaceTimeController._location = value;
    return value;
}
wwtlib.SpaceTimeController._twoLineDateToJulian = function wwtlib_SpaceTimeController$_twoLineDateToJulian(p) {
    /// <param name="p" type="String">
    /// </param>
    /// <returns type="Number"></returns>
    var pre1950 = parseInt(p.substring(0, 1)) < 6;
    var year = parseInt(((pre1950) ? ' 20' : '19') + p.substring(0, 2));
    var days = parseFloat(p.substring(2, 3));
    var fraction = parseFloat(p.substr(5));
    var date = new Date(year, 0, 1, 0, 0);
    return wwtlib.SpaceTimeController.utcToJulian(date) + (days - 1 + fraction);
}
wwtlib.SpaceTimeController.utcToJulian = function wwtlib_SpaceTimeController$utcToJulian(utc) {
    /// <param name="utc" type="Date">
    /// </param>
    /// <returns type="Number"></returns>
    var year = utc.getUTCFullYear();
    var month = utc.getUTCMonth() + 1;
    var day = utc.getUTCDate();
    var hour = utc.getUTCHours();
    var minute = utc.getUTCMinutes();
    var second = utc.getUTCSeconds() + utc.getUTCMilliseconds() / 1000;
    var dblDay = day + (hour / 24) + (minute / 1440) + (second / 86400);
    return wwtlib.AstroCalc.getJulianDay(year, month, dblDay);
}
wwtlib.SpaceTimeController.dateToJD = function wwtlib_SpaceTimeController$dateToJD(Year, Month, Day, bGregorianCalendar) {
    /// <param name="Year" type="Number" integer="true">
    /// </param>
    /// <param name="Month" type="Number" integer="true">
    /// </param>
    /// <param name="Day" type="Number">
    /// </param>
    /// <param name="bGregorianCalendar" type="Boolean">
    /// </param>
    /// <returns type="Number"></returns>
    var Y = Year;
    var M = Month;
    if (M < 3) {
        Y = Y - 1;
        M = M + 12;
    }
    var A = 0;
    var B = 0;
    if (bGregorianCalendar) {
        A = parseInt((Y / 100));
        B = 2 - A + parseInt((A / 4));
    }
    return parseInt((365.25 * (Y + 4716))) + parseInt((30.6001 * (M + 1))) + Day + B - 1524.5;
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Star

wwtlib.Star = function wwtlib_Star(input) {
    /// <param name="input" type="String">
    /// </param>
    /// <field name="magnitude" type="Number">
    /// </field>
    /// <field name="RA" type="Number">
    /// </field>
    /// <field name="dec" type="Number">
    /// </field>
    /// <field name="BMV" type="Number">
    /// </field>
    /// <field name="id" type="String">
    /// </field>
    /// <field name="absoluteMagnitude" type="Number">
    /// </field>
    /// <field name="par" type="Number">
    /// </field>
    /// <field name="distance" type="Number">
    /// </field>
    /// <field name="col" type="wwtlib.Color">
    /// </field>
    /// <field name="position" type="wwtlib.Vector3d">
    /// </field>
    var sa = input.split(',');
    this.id = sa[0];
    this.RA = parseFloat(sa[1]) / 15;
    this.dec = parseFloat(sa[2]);
    if (sa.length > 3) {
        try {
            this.magnitude = parseFloat(sa[3]);
        }
        catch ($e1) {
        }
    }
    if (sa.length > 4) {
        try {
            this.col = wwtlib.Color.load(sa[4]);
        }
        catch ($e2) {
        }
    }
}
wwtlib.Star.prototype = {
    magnitude: 0,
    RA: 0,
    dec: 0,
    BMV: 0,
    
    get_name: function wwtlib_Star$get_name() {
        /// <value type="String"></value>
        return 'HIP' + this.id;
    },
    
    get_coordinates: function wwtlib_Star$get_coordinates() {
        /// <value type="wwtlib.Coordinates"></value>
        return wwtlib.Coordinates.fromRaDec(this.RA, this.dec);
    },
    
    id: null,
    absoluteMagnitude: 0,
    par: 0,
    distance: 0,
    col: null,
    position: null,
    
    get_asPlace: function wwtlib_Star$get_asPlace() {
        /// <value type="wwtlib.IPlace"></value>
        var place = wwtlib.Place.create(this.get_name(), this.dec, this.RA, 1, wwtlib.Constellations.containment.findConstellationForPoint(this.RA, this.dec), 4, -1);
        place.set_magnitude(this.magnitude);
        place.set_distance(this.distance);
        return place;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TangentTile

wwtlib.TangentTile = function wwtlib_TangentTile() {
    /// <field name="_topDown$1" type="Boolean">
    /// </field>
    wwtlib.TangentTile.initializeBase(this);
}
wwtlib.TangentTile.create = function wwtlib_TangentTile$create(level, x, y, dataset, parent) {
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="x" type="Number" integer="true">
    /// </param>
    /// <param name="y" type="Number" integer="true">
    /// </param>
    /// <param name="dataset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.TangentTile"></returns>
    var temp = new wwtlib.TangentTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = x;
    temp.tileY = y;
    temp.dataset = dataset;
    temp._topDown$1 = !dataset.get_bottomsUp();
    temp.computeBoundingSphere();
    return temp;
}
wwtlib.TangentTile.prototype = {
    _topDown$1: true,
    
    computeBoundingSphere: function wwtlib_TangentTile$computeBoundingSphere() {
        if (!this._topDown$1) {
            this.computeBoundingSphereBottomsUp();
            return;
        }
        var tileDegrees = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
        var latMin = ((this.dataset.get_baseTileDegrees() / 2 - ((this.tileY) * tileDegrees)) + this.dataset.get_offsetY());
        var latMax = ((this.dataset.get_baseTileDegrees() / 2 - (((this.tileY + 1)) * tileDegrees)) + this.dataset.get_offsetY());
        var lngMin = (((this.tileX * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX());
        var lngMax = (((((this.tileX + 1)) * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX());
        var latCenter = (latMin + latMax) / 2;
        var lngCenter = (lngMin + lngMax) / 2;
        this.sphereCenter = this.geoTo3dTan(latCenter, lngCenter);
        this.topLeft = this.geoTo3dTan(latMin, lngMin);
        this.bottomRight = this.geoTo3dTan(latMax, lngMax);
        this.topRight = this.geoTo3dTan(latMin, lngMax);
        this.bottomLeft = this.geoTo3dTan(latMax, lngMin);
        var distVect = this.geoTo3dTan(latMin, lngMin);
        tileDegrees = lngMax - lngMin;
        distVect.subtract(this.sphereCenter);
        this.sphereRadius = distVect.length();
    },
    
    geoTo3dTan: function wwtlib_TangentTile$geoTo3dTan(lat, lng) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <returns type="wwtlib.Vector3d"></returns>
        lng = -lng;
        var fac1 = this.dataset.get_baseTileDegrees() / 2;
        var factor = Math.tan(fac1 * wwtlib.Tile.RC);
        return this.dataset.get_matrix().transform(wwtlib.Vector3d.create(1, (lat / fac1 * factor), (lng / fac1 * factor)));
    },
    
    computeBoundingSphereBottomsUp: function wwtlib_TangentTile$computeBoundingSphereBottomsUp() {
        var tileDegrees = this.dataset.get_baseTileDegrees() / (Math.pow(2, this.level));
        var latMin = (this.dataset.get_baseTileDegrees() / 2 + (((this.tileY + 1)) * tileDegrees)) + this.dataset.get_offsetY();
        var latMax = (this.dataset.get_baseTileDegrees() / 2 + ((this.tileY) * tileDegrees)) + this.dataset.get_offsetY();
        var lngMin = ((this.tileX * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX();
        var lngMax = ((((this.tileX + 1)) * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX();
        var latCenter = (latMin + latMax) / 2;
        var lngCenter = (lngMin + lngMax) / 2;
        this.topLeft = this.geoTo3dTan(latMin, lngMin);
        this.bottomRight = this.geoTo3dTan(latMax, lngMax);
        this.topRight = this.geoTo3dTan(latMin, lngMax);
        this.bottomLeft = this.geoTo3dTan(latMax, lngMin);
        var distVect = this.topLeft;
        tileDegrees = lngMax - lngMin;
    },
    
    createGeometry: function wwtlib_TangentTile$createGeometry(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        wwtlib.TangentTile.callBaseMethod(this, 'createGeometry', [ renderContext ]);
        if (this.geometryCreated) {
            return true;
        }
        this.geometryCreated = true;
        for (var i = 0; i < 4; i++) {
            this._renderTriangleLists[i] = [];
        }
        var tileDegrees = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
        var latMin = ((this.dataset.get_baseTileDegrees() / 2 - ((this.tileY) * tileDegrees)) + this.dataset.get_offsetY());
        var latMax = ((this.dataset.get_baseTileDegrees() / 2 - (((this.tileY + 1)) * tileDegrees)) + this.dataset.get_offsetY());
        var lngMin = (((this.tileX * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX());
        var lngMax = (((((this.tileX + 1)) * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX());
        var tileDegreesX = lngMax - lngMin;
        var tileDegreesY = latMax - latMin;
        this.topLeft = this.geoTo3dTan(latMin, lngMin);
        this.bottomRight = this.geoTo3dTan(latMax, lngMax);
        this.topRight = this.geoTo3dTan(latMin, lngMax);
        this.bottomLeft = this.geoTo3dTan(latMax, lngMin);
        var latCenter = (latMin + latMax) / 2;
        var lngCenter = (lngMin + lngMax) / 2;
        var center = wwtlib.Vector3d.midPoint(this.topLeft, this.bottomRight);
        var leftCenter = wwtlib.Vector3d.midPoint(this.topLeft, this.bottomLeft);
        var rightCenter = wwtlib.Vector3d.midPoint(this.topRight, this.bottomRight);
        var topCenter = wwtlib.Vector3d.midPoint(this.topLeft, this.topRight);
        var bottomCenter = wwtlib.Vector3d.midPoint(this.bottomLeft, this.bottomRight);
        if (renderContext.gl == null) {
            this._renderTriangleLists[0].add(wwtlib.RenderTriangle.create(wwtlib.PositionTexture.createPos(this.topLeft, 0, 0), wwtlib.PositionTexture.createPos(leftCenter, 0, 0.5), wwtlib.PositionTexture.createPos(topCenter, 0.5, 0), this.texture, this.level));
            this._renderTriangleLists[0].add(wwtlib.RenderTriangle.create(wwtlib.PositionTexture.createPos(leftCenter, 0, 0.5), wwtlib.PositionTexture.createPos(center, 0.5, 0.5), wwtlib.PositionTexture.createPos(topCenter, 0.5, 0), this.texture, this.level));
            this._renderTriangleLists[1].add(wwtlib.RenderTriangle.create(wwtlib.PositionTexture.createPos(topCenter, 0.5, 0), wwtlib.PositionTexture.createPos(rightCenter, 1, 0.5), wwtlib.PositionTexture.createPos(this.topRight, 1, 0), this.texture, this.level));
            this._renderTriangleLists[1].add(wwtlib.RenderTriangle.create(wwtlib.PositionTexture.createPos(topCenter, 0.5, 0), wwtlib.PositionTexture.createPos(center, 0.5, 0.5), wwtlib.PositionTexture.createPos(rightCenter, 1, 0.5), this.texture, this.level));
            this._renderTriangleLists[2].add(wwtlib.RenderTriangle.create(wwtlib.PositionTexture.createPos(leftCenter, 0, 0.5), wwtlib.PositionTexture.createPos(bottomCenter, 0.5, 1), wwtlib.PositionTexture.createPos(center, 0.5, 0.5), this.texture, this.level));
            this._renderTriangleLists[2].add(wwtlib.RenderTriangle.create(wwtlib.PositionTexture.createPos(leftCenter, 0, 0.5), wwtlib.PositionTexture.createPos(this.bottomLeft, 0, 1), wwtlib.PositionTexture.createPos(bottomCenter, 0.5, 1), this.texture, this.level));
            this._renderTriangleLists[3].add(wwtlib.RenderTriangle.create(wwtlib.PositionTexture.createPos(center, 0.5, 0.5), wwtlib.PositionTexture.createPos(this.bottomRight, 1, 1), wwtlib.PositionTexture.createPos(rightCenter, 1, 0.5), this.texture, this.level));
            this._renderTriangleLists[3].add(wwtlib.RenderTriangle.create(wwtlib.PositionTexture.createPos(center, 0.5, 0.5), wwtlib.PositionTexture.createPos(bottomCenter, 0.5, 1), wwtlib.PositionTexture.createPos(this.bottomRight, 1, 1), this.texture, this.level));
        }
        else {
            this._vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
            wwtlib.Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
            var f32array = new Float32Array(9 * 5);
            var buffer = f32array;
            var index = 0;
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(bottomCenter, 0.5, 1));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(this.bottomLeft, 0, 1));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(this.bottomRight, 1, 1));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(center, 0.5, 0.5));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(leftCenter, 0, 0.5));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(rightCenter, 1, 0.5));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(topCenter, 0.5, 0));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(this.topLeft, 0, 0));
            index = this.addVertex(buffer, index, wwtlib.PositionTexture.createPos(this.topRight, 1, 0));
            wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
            for (var i = 0; i < 4; i++) {
                index = 0;
                this.triangleCount = 2;
                var ui16array = new Uint16Array(this.triangleCount * 3);
                var indexArray = ui16array;
                switch (i) {
                    case 0:
                        indexArray[index++] = 7;
                        indexArray[index++] = 4;
                        indexArray[index++] = 6;
                        indexArray[index++] = 4;
                        indexArray[index++] = 3;
                        indexArray[index++] = 6;
                        break;
                    case 1:
                        indexArray[index++] = 6;
                        indexArray[index++] = 5;
                        indexArray[index++] = 8;
                        indexArray[index++] = 6;
                        indexArray[index++] = 3;
                        indexArray[index++] = 5;
                        break;
                    case 2:
                        indexArray[index++] = 4;
                        indexArray[index++] = 0;
                        indexArray[index++] = 3;
                        indexArray[index++] = 4;
                        indexArray[index++] = 1;
                        indexArray[index++] = 0;
                        break;
                    case 3:
                        indexArray[index++] = 3;
                        indexArray[index++] = 2;
                        indexArray[index++] = 5;
                        indexArray[index++] = 3;
                        indexArray[index++] = 0;
                        indexArray[index++] = 2;
                        break;
                }
                this._indexBuffers[i] = wwtlib.Tile.prepDevice.createBuffer();
                wwtlib.Tile.prepDevice.bindBuffer(34963, this._indexBuffers[i]);
                wwtlib.Tile.prepDevice.bufferData(34963, ui16array, 35044);
            }
        }
        return true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Tile

wwtlib.Tile = function wwtlib_Tile() {
    /// <field name="currentRenderGeneration" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_renderTriangleLists" type="Array" elementType="Array">
    /// </field>
    /// <field name="_indexBuffers" type="Array" elementType="WebGLBuffer">
    /// </field>
    /// <field name="_vertexBuffer" type="WebGLBuffer">
    /// </field>
    /// <field name="tileTargetX" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="tileTargetY" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="tileTargetLevel" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="level" type="Number" integer="true">
    /// </field>
    /// <field name="tileX" type="Number" integer="true">
    /// </field>
    /// <field name="tileY" type="Number" integer="true">
    /// </field>
    /// <field name="texture" type="Object" domElement="true">
    /// </field>
    /// <field name="texture2d" type="WebGLTexture">
    /// </field>
    /// <field name="readyToRender" type="Boolean">
    /// </field>
    /// <field name="inViewFrustum" type="Boolean">
    /// </field>
    /// <field name="tilesInView" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="trianglesRendered" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="tilesTouched" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="frustumList" type="Array" static="true">
    /// </field>
    /// <field name="prepDevice" type="GL" static="true">
    /// </field>
    /// <field name="topLeft" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="bottomRight" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="topRight" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="bottomLeft" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="uvMultiple" type="Number" static="true">
    /// </field>
    /// <field name="children" type="Array" elementType="Tile">
    /// </field>
    /// <field name="parent" type="wwtlib.Tile">
    /// </field>
    /// <field name="localCenter" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="renderedAtOrBelowGeneration" type="Number" integer="true">
    /// </field>
    /// <field name="_demScaleFactor" type="Number">
    /// </field>
    /// <field name="demFile" type="Float32Array">
    /// </field>
    /// <field name="demIndex" type="Number" integer="true">
    /// </field>
    /// <field name="demData" type="Array" elementType="Number">
    /// </field>
    /// <field name="demAverage" type="Number">
    /// </field>
    /// <field name="demReady" type="Boolean">
    /// </field>
    /// <field name="texReady" type="Boolean">
    /// </field>
    /// <field name="demTile" type="Boolean">
    /// </field>
    /// <field name="demDownloading" type="Boolean">
    /// </field>
    /// <field name="callCount" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="renderedGeneration" type="Number" integer="true">
    /// </field>
    /// <field name="accomidation" type="Number" integer="true">
    /// </field>
    /// <field name="useAccomidation" type="Boolean" static="true">
    /// </field>
    /// <field name="accessCount" type="Number" integer="true">
    /// </field>
    /// <field name="downloading" type="Boolean">
    /// </field>
    /// <field name="geometryCreated" type="Boolean">
    /// </field>
    /// <field name="demEnabled" type="Boolean" static="true">
    /// </field>
    /// <field name="_isHdTile" type="Boolean">
    /// </field>
    /// <field name="demSize" type="Number" integer="true">
    /// </field>
    /// <field name="maxLevel" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_topLeftScreen" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_bottomRightScreen" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_topRightScreen" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="_bottomLeftScreen" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="meshComplexity" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="imageQuality" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="lastDeepestLevel" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="deepestLevel" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="sphereRadius" type="Number">
    /// </field>
    /// <field name="localOrigin" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="sphereCenter" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="RC" type="Number" static="true">
    /// </field>
    /// <field name="radius" type="Number">
    /// </field>
    /// <field name="triangleCount" type="Number" integer="true">
    /// </field>
    /// <field name="requestHits" type="Number" integer="true">
    /// </field>
    /// <field name="requestPending" type="Boolean">
    /// </field>
    /// <field name="errored" type="Boolean">
    /// </field>
    /// <field name="dataset" type="wwtlib.Imageset">
    /// </field>
    /// <field name="_tileId" type="String">
    /// </field>
    /// <field name="_vertexCount" type="Number" integer="true">
    /// </field>
    /// <field name="_renderChildPart" type="Array" elementType="BlendState">
    /// </field>
    this._renderTriangleLists = new Array(4);
    this._indexBuffers = new Array(4);
    this.children = [ null, null, null, null ];
    this.localCenter = new wwtlib.Vector3d();
    this.demSize = 33 * 33;
    this._topLeftScreen = new wwtlib.Vector3d();
    this._bottomRightScreen = new wwtlib.Vector3d();
    this._topRightScreen = new wwtlib.Vector3d();
    this._bottomLeftScreen = new wwtlib.Vector3d();
    this.sphereCenter = new wwtlib.Vector3d();
    this._renderChildPart = new Array(4);
    for (var i = 0; i < 4; i++) {
        this._renderChildPart[i] = wwtlib.BlendState.create(false, 500);
    }
}
wwtlib.Tile.getFrustumList = function wwtlib_Tile$getFrustumList() {
    /// <returns type="Array"></returns>
    try {
        return wwtlib.Tile.frustumList;
    }
    catch ($e1) {
        return null;
    }
}
wwtlib.Tile.get_subDivisions = function wwtlib_Tile$get_subDivisions() {
    /// <value type="Number" integer="true"></value>
    return 32;
}
wwtlib.Tile.prototype = {
    _vertexBuffer: null,
    
    getIndexBuffer: function wwtlib_Tile$getIndexBuffer(index, accomidation) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <param name="accomidation" type="Number" integer="true">
        /// </param>
        /// <returns type="WebGLBuffer"></returns>
        return this._indexBuffers[index];
    },
    
    level: 0,
    tileX: 0,
    tileY: 0,
    texture: null,
    texture2d: null,
    readyToRender: false,
    inViewFrustum: true,
    topLeft: null,
    bottomRight: null,
    topRight: null,
    bottomLeft: null,
    
    isPointInTile: function wwtlib_Tile$isPointInTile(lat, lng) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    getSurfacePointAltitude: function wwtlib_Tile$getSurfacePointAltitude(lat, lng, meters) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <param name="meters" type="Boolean">
        /// </param>
        /// <returns type="Number"></returns>
        return 0;
    },
    
    parent: null,
    renderedAtOrBelowGeneration: 0,
    
    makeTexture: function wwtlib_Tile$makeTexture() {
        if (wwtlib.Tile.prepDevice != null) {
            try {
                this.texture2d = wwtlib.Tile.prepDevice.createTexture();
                wwtlib.Tile.prepDevice.bindTexture(3553, this.texture2d);
                wwtlib.Tile.prepDevice.texParameteri(3553, 10242, 33071);
                wwtlib.Tile.prepDevice.texParameteri(3553, 10243, 33071);
                wwtlib.Tile.prepDevice.texImage2D(3553, 0, 6408, 6408, 5121, this.texture);
                wwtlib.Tile.prepDevice.texParameteri(3553, 10241, 9985);
                wwtlib.Tile.prepDevice.generateMipmap(3553);
                wwtlib.Tile.prepDevice.bindTexture(3553, null);
            }
            catch ($e1) {
                this.errored = true;
            }
        }
    },
    
    addVertex: function wwtlib_Tile$addVertex(buffer, index, p) {
        /// <param name="buffer" type="Array" elementType="Number">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <param name="p" type="wwtlib.PositionTexture">
        /// </param>
        /// <returns type="Number" integer="true"></returns>
        buffer[index++] = p.position.x;
        buffer[index++] = p.position.y;
        buffer[index++] = p.position.z;
        buffer[index++] = p.tu;
        buffer[index++] = p.tv;
        return index;
    },
    
    geoTo3dWithAlt: function wwtlib_Tile$geoTo3dWithAlt(lat, lng, useLocalCenter, rev) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <param name="useLocalCenter" type="Boolean">
        /// </param>
        /// <param name="rev" type="Boolean">
        /// </param>
        /// <returns type="wwtlib.Vector3d"></returns>
        lat = Math.max(Math.min(90, lat), -90);
        lng = Math.max(Math.min(180, lng), -180);
        if (!wwtlib.Tile.demEnabled || this.demData == null) {
            return this.geoTo3d(lat, lng, useLocalCenter);
        }
        if (rev) {
            lng -= 180;
        }
        var altitude = this.demData[this.demIndex];
        var retVal = this.geoTo3dWithAltitude(lat, lng, altitude, useLocalCenter);
        return retVal;
    },
    
    geoTo3dWithAltitude: function wwtlib_Tile$geoTo3dWithAltitude(lat, lng, altitude, useLocalCenter) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <param name="altitude" type="Number">
        /// </param>
        /// <param name="useLocalCenter" type="Boolean">
        /// </param>
        /// <returns type="wwtlib.Vector3d"></returns>
        var radius = 1 + (altitude / this.get__demScaleFactor());
        var retVal = wwtlib.Vector3d.create((Math.cos(lng * wwtlib.Tile.RC) * Math.cos(lat * wwtlib.Tile.RC) * radius), (Math.sin(lat * wwtlib.Tile.RC) * radius), (Math.sin(lng * wwtlib.Tile.RC) * Math.cos(lat * wwtlib.Tile.RC) * radius));
        if (useLocalCenter) {
            retVal.subtract(this.localCenter);
        }
        return retVal;
    },
    
    _demScaleFactor: 6371000,
    
    get__demScaleFactor: function wwtlib_Tile$get__demScaleFactor() {
        /// <value type="Number"></value>
        return this._demScaleFactor;
    },
    set__demScaleFactor: function wwtlib_Tile$set__demScaleFactor(value) {
        /// <value type="Number"></value>
        this._demScaleFactor = value;
        return value;
    },
    
    requestImage: function wwtlib_Tile$requestImage() {
        if (!this.downloading && !this.readyToRender) {
            this.downloading = true;
            this.texture = document.createElement('img');
            var xdomimg = this.texture;
            this.texture.addEventListener('load', ss.Delegate.create(this, function(e) {
                this.texReady = true;
                this.downloading = false;
                this.errored = false;
                this.readyToRender = this.texReady && (this.demReady || !this.demTile);
                this.requestPending = false;
                wwtlib._tileCache.removeFromQueue(this.get_key(), true);
                this.makeTexture();
            }), false);
            this.texture.addEventListener('error', ss.Delegate.create(this, function(e) {
                this.downloading = false;
                this.readyToRender = false;
                this.errored = true;
                this.requestPending = false;
                wwtlib._tileCache.removeFromQueue(this.get_key(), true);
            }), false);
            xdomimg.crossOrigin = 'anonymous';
            this.texture.src = this.get_URL().replaceAll('cdn.', 'www.');
        }
    },
    
    demFile: null,
    demIndex: 0,
    demData: null,
    demAverage: 0,
    demReady: false,
    texReady: false,
    demTile: false,
    demDownloading: false,
    
    createDemFromParent: function wwtlib_Tile$createDemFromParent() {
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    _loadDemData: function wwtlib_Tile$_loadDemData() {
        /// <returns type="Boolean"></returns>
        if (this.demFile == null) {
            return this.createDemFromParent();
        }
        this.demData = this.demFile;
        if (this.demFile.length !== 1089 && this.demFile.length !== 513) {
            return this.createDemFromParent();
        }
        var total = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this.demData);
        while ($enum1.moveNext()) {
            var fv = $enum1.current;
            total += fv;
        }
        this.demAverage /= this.demData.length;
        return true;
    },
    
    requestDem: function wwtlib_Tile$requestDem() {
        if (!this.readyToRender && !this.demDownloading) {
            this.demTile = true;
            this.demDownloading = true;
            wwtlib.Tile.callCount++;
            var xhr = new XMLHttpRequest();
            xhr.addEventListener('load', ss.Delegate.create(this, function(e) {
                this.demReady = true;
                this.demDownloading = false;
                this.readyToRender = this.texReady && (this.demReady || !this.demTile);
                this.requestPending = false;
                try {
                    this.demFile = new Float32Array(xhr.response);
                }
                catch ($e1) {
                }
                wwtlib._tileCache.removeFromQueue(this.get_key(), true);
            }), false);
            xhr.addEventListener('error', ss.Delegate.create(this, function(e) {
                this.demDownloading = false;
                this.demReady = false;
                this.readyToRender = false;
                this.errored = true;
                this.requestPending = false;
                wwtlib._tileCache.removeFromQueue(this.get_key(), true);
            }), false);
            xhr.open('GET', this.get_demURL(), true);
            xhr.responseType = 'arraybuffer';
            xhr.send();
        }
    },
    
    draw3D: function wwtlib_Tile$draw3D(renderContext, opacity) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        this.renderedGeneration = wwtlib.Tile.currentRenderGeneration;
        wwtlib.Tile.tilesTouched++;
        this.accessCount = wwtlib._tileCache.accessID++;
        if (this.errored) {
            return false;
        }
        var xMax = 2;
        this.inViewFrustum = true;
        if (!this.readyToRender) {
            wwtlib._tileCache.addTileToQueue(this);
            return false;
        }
        var transitioning = false;
        var childIndex = 0;
        var yOffset = 0;
        if (this.dataset.get_mercator() || this.dataset.get_bottomsUp()) {
            yOffset = 1;
        }
        var xOffset = 0;
        var anythingToRender = false;
        var childRendered = false;
        for (var y1 = 0; y1 < 2; y1++) {
            for (var x1 = 0; x1 < xMax; x1++) {
                if (this.level < this.dataset.get_levels()) {
                    if (this.children[childIndex] == null) {
                        this.children[childIndex] = wwtlib._tileCache.getTile(this.level + 1, this.tileX * 2 + ((x1 + xOffset) % 2), this.tileY * 2 + ((y1 + yOffset) % 2), this.dataset, this);
                    }
                    if (this.children[childIndex].isTileInFrustum(renderContext.get_frustum())) {
                        this.inViewFrustum = true;
                        if (this.children[childIndex].isTileBigEnough(renderContext)) {
                            this._renderChildPart[childIndex].set_targetState(!this.children[childIndex].draw3D(renderContext, opacity));
                            if (this._renderChildPart[childIndex].get_targetState()) {
                                childRendered = true;
                            }
                        }
                        else {
                            this._renderChildPart[childIndex].set_targetState(true);
                        }
                    }
                    else {
                        this._renderChildPart[childIndex].set_targetState(this._renderChildPart[childIndex].set_state(false));
                    }
                    if (this._renderChildPart[childIndex].get_targetState() !== this._renderChildPart[childIndex].get_state()) {
                        transitioning = true;
                    }
                }
                else {
                    this._renderChildPart[childIndex].set_state(true);
                }
                if (!!this._renderChildPart[childIndex].get_state()) {
                    anythingToRender = true;
                }
                childIndex++;
            }
        }
        if (childRendered || anythingToRender) {
            this.renderedAtOrBelowGeneration = wwtlib.Tile.currentRenderGeneration;
            if (this.parent != null) {
                this.parent.renderedAtOrBelowGeneration = this.renderedAtOrBelowGeneration;
            }
        }
        if (!anythingToRender) {
            return true;
        }
        if (!this.createGeometry(renderContext)) {
            return false;
        }
        wwtlib.Tile.tilesInView++;
        this.accomidation = this._computeAccomidation();
        for (var i = 0; i < 4; i++) {
            if (this._renderChildPart[i].get_targetState()) {
                this.renderPart(renderContext, i, (opacity / 100), false);
            }
        }
        return true;
    },
    
    renderedGeneration: 0,
    accomidation: 0,
    
    _computeAccomidation: function wwtlib_Tile$_computeAccomidation() {
        /// <returns type="Number" integer="true"></returns>
        var accVal = 0;
        if (!wwtlib.Tile.useAccomidation) {
            return 0;
        }
        var top = wwtlib._tileCache.getCachedTile(this.level, this.tileX, this.tileY + 1, this.dataset, this);
        if (top == null || top.renderedAtOrBelowGeneration < wwtlib.Tile.currentRenderGeneration - 2) {
            accVal += 1;
        }
        var right = wwtlib._tileCache.getCachedTile(this.level, this.tileX + 1, this.tileY, this.dataset, this);
        if (right == null || right.renderedAtOrBelowGeneration < wwtlib.Tile.currentRenderGeneration - 2) {
            accVal += 2;
        }
        var bottom = wwtlib._tileCache.getCachedTile(this.level, this.tileX, this.tileY - 1, this.dataset, this);
        if (bottom == null || bottom.renderedAtOrBelowGeneration < wwtlib.Tile.currentRenderGeneration - 2) {
            accVal += 4;
        }
        var left = wwtlib._tileCache.getCachedTile(this.level, this.tileX - 1, this.tileY, this.dataset, this);
        if (left == null || left.renderedAtOrBelowGeneration < wwtlib.Tile.currentRenderGeneration - 2) {
            accVal += 8;
        }
        return accVal;
    },
    
    renderPart: function wwtlib_Tile$renderPart(renderContext, part, opacity, combine) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="part" type="Number" integer="true">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        /// <param name="combine" type="Boolean">
        /// </param>
        if (wwtlib.Tile.prepDevice == null) {
            var lighting = renderContext.lighting && renderContext.get_sunPosition() != null;
            var $enum1 = ss.IEnumerator.getEnumerator(this._renderTriangleLists[part]);
            while ($enum1.moveNext()) {
                var tri = $enum1.current;
                tri.opacity = opacity;
                if (lighting) {
                    var norm = tri.normal.copy();
                    renderContext.get_world().multiplyVector(norm);
                    norm.normalize();
                    var light = wwtlib.Vector3d.dot(norm, renderContext.get_sunPosition());
                    if (light < 0) {
                        light = 0;
                    }
                    else {
                        light = Math.min(1, (light * 1));
                    }
                    tri.lighting = light;
                }
                else {
                    tri.lighting = 1;
                }
                tri.draw(renderContext.device, renderContext.WVP);
            }
        }
        else {
            wwtlib.TileShader.use(renderContext, this._vertexBuffer, this.getIndexBuffer(part, this.accomidation), this.texture2d);
            renderContext.gl.drawElements(4, this.triangleCount * 3, 5123, 0);
        }
    },
    
    cleanUp: function wwtlib_Tile$cleanUp(removeFromParent) {
        /// <param name="removeFromParent" type="Boolean">
        /// </param>
        this.readyToRender = false;
        this.demData = null;
        this.demFile = null;
        this.demDownloading = false;
        this.texReady = false;
        this.demReady = false;
        this.errored = false;
        if (this.texture != null) {
            this.texture = null;
        }
        this._renderTriangleLists = new Array(4);
        this.geometryCreated = false;
        if (removeFromParent && this.parent != null) {
            this.parent.removeChild(this);
            this.parent = null;
        }
        if (wwtlib.Tile.prepDevice != null) {
            var $enum1 = ss.IEnumerator.getEnumerator(this._indexBuffers);
            while ($enum1.moveNext()) {
                var buf = $enum1.current;
                wwtlib.Tile.prepDevice.deleteBuffer(buf);
            }
            this._indexBuffers = new Array(4);
            if (this._vertexBuffer != null) {
                wwtlib.Tile.prepDevice.deleteBuffer(this._vertexBuffer);
                this._vertexBuffer = null;
            }
            if (this.texture2d != null) {
                wwtlib.Tile.prepDevice.deleteTexture(this.texture2d);
                this.texture2d = null;
            }
        }
    },
    
    removeChild: function wwtlib_Tile$removeChild(child) {
        /// <param name="child" type="wwtlib.Tile">
        /// </param>
        for (var i = 0; i < 4; i++) {
            if (this.children[i] === child) {
                this.children[i] = null;
                return;
            }
        }
    },
    
    accessCount: 0,
    downloading: false,
    geometryCreated: false,
    
    createGeometry: function wwtlib_Tile$createGeometry(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (wwtlib.Tile.demEnabled && this.demReady && this.demData == null) {
            if (!this._loadDemData()) {
                return false;
            }
        }
        if (wwtlib.Tile.demEnabled && this.demData == null) {
            return false;
        }
        this.readyToRender = true;
        return true;
    },
    
    calcSphere: function wwtlib_Tile$calcSphere() {
        var corners = new Array(4);
        corners[0] = this.topLeft;
        corners[1] = this.bottomRight;
        corners[2] = this.topRight;
        corners[3] = this.bottomLeft;
        var result = wwtlib.ConvexHull.findEnclosingSphere(corners);
        this.sphereCenter = result.center;
        this.sphereRadius = result.radius;
    },
    
    _isHdTile: false,
    
    isTileBigEnough: function wwtlib_Tile$isTileBigEnough(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        var wvp = renderContext.WVP;
        wvp._transformTo(this.topLeft, this._topLeftScreen);
        wvp._transformTo(this.bottomRight, this._bottomRightScreen);
        wvp._transformTo(this.topRight, this._topRightScreen);
        wvp._transformTo(this.bottomLeft, this._bottomLeftScreen);
        var top = this._topLeftScreen;
        top.subtract(this._topRightScreen);
        var topLength = top.length();
        var bottom = this._bottomLeftScreen;
        bottom.subtract(this._bottomRightScreen);
        var bottomLength = bottom.length();
        var left = this._bottomLeftScreen;
        left.subtract(this._topLeftScreen);
        var leftLength = left.length();
        var right = this._bottomRightScreen;
        right.subtract(this._topRightScreen);
        var rightLength = right.length();
        var lengthMax = Math.max(Math.max(rightLength, leftLength), Math.max(bottomLength, topLength));
        if (lengthMax < 300) {
            return false;
        }
        else {
            wwtlib.Tile.deepestLevel = (this.level > wwtlib.Tile.deepestLevel) ? this.level : wwtlib.Tile.deepestLevel;
        }
        return true;
    },
    
    isTileInFrustum: function wwtlib_Tile$isTileInFrustum(frustum) {
        /// <param name="frustum" type="Array" elementType="PlaneD">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (this.level < 2 && (!this.dataset.get_projection() || this.dataset.get_projection() === 3)) {
        }
        this.inViewFrustum = false;
        var centerV4 = new wwtlib.Vector4d(this.sphereCenter.x, this.sphereCenter.y, this.sphereCenter.z, 1);
        for (var i = 0; i < 6; i++) {
            if (frustum[i].dot(centerV4) < -this.sphereRadius) {
                return false;
            }
        }
        this.inViewFrustum = true;
        return true;
    },
    
    sphereRadius: 0,
    
    get_sphereRadius: function wwtlib_Tile$get_sphereRadius() {
        /// <value type="Number"></value>
        return this.sphereRadius;
    },
    
    localOrigin: null,
    
    get_sphereCenter: function wwtlib_Tile$get_sphereCenter() {
        /// <value type="wwtlib.Vector3d"></value>
        return this.sphereCenter;
    },
    
    radius: 1,
    
    geoTo3d: function wwtlib_Tile$geoTo3d(lat, lng, useLocalCenter) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <param name="useLocalCenter" type="Boolean">
        /// </param>
        /// <returns type="wwtlib.Vector3d"></returns>
        if (this.dataset.get_dataSetType() === 3) {
            var retVal = wwtlib.Vector3d.create(-(Math.cos(lng * wwtlib.Tile.RC) * Math.cos(lat * wwtlib.Tile.RC) * this.radius), (Math.sin(lat * wwtlib.Tile.RC) * this.radius), (Math.sin(lng * wwtlib.Tile.RC) * Math.cos(lat * wwtlib.Tile.RC) * this.radius));
            return retVal;
        }
        else {
            lng -= 180;
            var retVal = wwtlib.Vector3d.create((Math.cos(lng * wwtlib.Tile.RC) * Math.cos(lat * wwtlib.Tile.RC) * this.radius), (Math.sin(lat * wwtlib.Tile.RC) * this.radius), (Math.sin(lng * wwtlib.Tile.RC) * Math.cos(lat * wwtlib.Tile.RC) * this.radius));
            return retVal;
        }
    },
    
    triangleCount: 0,
    
    onCreateVertexBuffer: function wwtlib_Tile$onCreateVertexBuffer(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ss.EventArgs">
        /// </param>
    },
    
    requestHits: 0,
    requestPending: false,
    errored: false,
    dataset: null,
    
    get_dataset: function wwtlib_Tile$get_dataset() {
        /// <value type="wwtlib.Imageset"></value>
        return this.dataset;
    },
    set_dataset: function wwtlib_Tile$set_dataset(value) {
        /// <value type="wwtlib.Imageset"></value>
        this.dataset = value;
        return value;
    },
    
    get_key: function wwtlib_Tile$get_key() {
        /// <value type="String"></value>
        return this.dataset.get_imageSetID().toString() + '\\' + this.level.toString() + '\\' + this.tileY.toString() + '_' + this.tileX.toString();
    },
    
    get_URL: function wwtlib_Tile$get_URL() {
        /// <value type="String"></value>
        var returnUrl = this.dataset.get_url();
        if (this.dataset.get_url().indexOf('{1}') > -1) {
            if (!this.dataset.get_projection() && !String.isNullOrEmpty(this.dataset.get_quadTreeTileMap())) {
                returnUrl = String.format(this.dataset.get_url(), this.getServerID(), this.getTileID());
                if (returnUrl.indexOf('virtualearth.net') > -1) {
                    returnUrl += '&n=z';
                }
                return returnUrl;
            }
            else {
                return String.format(this.dataset.get_url(), this.dataset.get_imageSetID(), this.level, this.tileX, this.tileY);
            }
        }
        returnUrl = returnUrl.replaceAll('{X}', this.tileX.toString());
        returnUrl = returnUrl.replaceAll('{Y}', this.tileY.toString());
        returnUrl = returnUrl.replaceAll('{L}', this.level.toString());
        var hash = 0;
        if (returnUrl.indexOf('{S:0}') > -1) {
            hash = 0;
            returnUrl = returnUrl.replaceAll('{S:0}', '{S}');
        }
        if (returnUrl.indexOf('{S:1}') > -1) {
            hash = 1;
            returnUrl = returnUrl.replaceAll('{S:1}', '{S}');
        }
        if (returnUrl.indexOf('{S:2}') > -1) {
            hash = 2;
            returnUrl = returnUrl.replaceAll('{S:2}', '{S}');
        }
        if (returnUrl.indexOf('{S:3}') > -1) {
            hash = 3;
            returnUrl = returnUrl.replaceAll('{S:3}', '{S}');
        }
        if (returnUrl.indexOf('a{S}') > -1) {
            returnUrl = returnUrl.replaceAll('a{S}', 'r{S}');
        }
        if (returnUrl.indexOf('h{S}') > -1) {
            returnUrl = returnUrl.replaceAll('h{S}', 'r{S}');
        }
        if (returnUrl.indexOf('http://r{S}.ortho.tiles.virtualearth.net') > -1) {
            returnUrl = returnUrl.replaceAll('http://r{S}.ortho.tiles.virtualearth.net', 'http://ecn.t{S}.tiles.virtualearth.net');
        }
        var id = this.getTileID();
        var server = '';
        if (!id.length) {
            server = hash.toString();
        }
        else {
            server = id.substr(id.length - 1, 1);
        }
        returnUrl = returnUrl.replaceAll('{Q}', id);
        returnUrl = returnUrl.replaceAll('{S}', server);
        if (returnUrl.indexOf('virtualearth.net') > -1) {
            returnUrl += '&n=z';
        }
        return returnUrl;
    },
    
    get_demURL: function wwtlib_Tile$get_demURL() {
        /// <value type="String"></value>
        if (!this.dataset.get_projection()) {
            var baseUrl = 'http://cdn.worldwidetelescope.org/wwtweb/demtile.aspx?q={0},{1},{2},M';
            if (!String.isNullOrEmpty(this.dataset.get_demUrl())) {
                baseUrl = this.dataset.get_demUrl();
            }
        }
        if (this.dataset.get_demUrl().indexOf('{1}') > -1) {
            return String.format(this.dataset.get_demUrl() + '&new', this.level, this.tileX, this.tileY);
        }
        var returnUrl = this.dataset.get_demUrl();
        returnUrl = returnUrl.replaceAll('{X}', this.tileX.toString());
        returnUrl = returnUrl.replaceAll('{Y}', this.tileY.toString());
        returnUrl = returnUrl.replaceAll('{L}', this.level.toString());
        var hash = 0;
        if (returnUrl.indexOf('{S:0}') > -1) {
            hash = 0;
            returnUrl = returnUrl.replaceAll('{S:0}', '{S}');
        }
        if (returnUrl.indexOf('{S:1}') > -1) {
            hash = 1;
            returnUrl = returnUrl.replaceAll('{S:1}', '{S}');
        }
        if (returnUrl.indexOf('{S:2}') > -1) {
            hash = 2;
            returnUrl = returnUrl.replaceAll('{S:2}', '{S}');
        }
        if (returnUrl.indexOf('{S:3}') > -1) {
            hash = 3;
            returnUrl = returnUrl.replaceAll('{S:3}', '{S}');
        }
        var id = this.getTileID();
        var server = '';
        if (!id.length) {
            server = hash.toString();
        }
        else {
            server = id.substr(id.length - 1, 1);
        }
        returnUrl = returnUrl.replaceAll('{Q}', id);
        returnUrl = returnUrl.replaceAll('{S}', server);
        return returnUrl;
    },
    
    getServerID: function wwtlib_Tile$getServerID() {
        /// <returns type="Number" integer="true"></returns>
        var server = (this.tileX & 1) + ((this.tileY & 1) << 1);
        return server;
    },
    
    _tileId: null,
    
    getTileID: function wwtlib_Tile$getTileID() {
        /// <returns type="String"></returns>
        if (this._tileId != null) {
            return this._tileId;
        }
        var netLevel = this.level;
        var netX = this.tileX;
        var netY = this.tileY;
        if (this.dataset.get_projection() === 1) {
            netLevel++;
        }
        var tileMap = this.dataset.get_quadTreeTileMap();
        if (!String.isNullOrEmpty(tileMap)) {
            var sb = new ss.StringBuilder();
            for (var i = netLevel; i > 0; --i) {
                var mask = 1 << (i - 1);
                var val = 0;
                if (!!(netX & mask)) {
                    val = 1;
                }
                if (!!(netY & mask)) {
                    val += 2;
                }
                sb.append(tileMap.substr(val, 1));
            }
            this._tileId = sb.toString();
            return this._tileId;
        }
        else {
            this._tileId = '0';
            return this._tileId;
        }
    },
    
    _vertexCount: 0,
    
    get_vertexCount: function wwtlib_Tile$get_vertexCount() {
        /// <value type="Number" integer="true"></value>
        return this._vertexCount;
    },
    set_vertexCount: function wwtlib_Tile$set_vertexCount(value) {
        /// <value type="Number" integer="true"></value>
        this._vertexCount = value;
        return value;
    },
    
    _renderChildPart: null
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._tileCache

wwtlib._tileCache = function wwtlib__tileCache() {
    /// <field name="_queue" type="Object" static="true">
    /// </field>
    /// <field name="_tiles" type="Object" static="true">
    /// </field>
    /// <field name="_maxDownloadCount" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="openThreads" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="readyToRenderCount" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="maxTileCacheSize" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="maxReadyToRenderSize" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="accessID" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_maxTotalToPurge" type="Number" integer="true" static="true">
    /// </field>
}
wwtlib._tileCache.getTile = function wwtlib__tileCache$getTile(level, x, y, dataset, parent) {
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="x" type="Number" integer="true">
    /// </param>
    /// <param name="y" type="Number" integer="true">
    /// </param>
    /// <param name="dataset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.Tile"></returns>
    var retTile = null;
    var tileKey = wwtlib.Imageset.getTileKey(dataset, level, x, y);
    if (!Object.keyExists(wwtlib._tileCache._tiles, tileKey)) {
        retTile = wwtlib.Imageset.getNewTile(dataset, level, x, y, parent);
        wwtlib._tileCache._tiles[tileKey] = retTile;
    }
    else {
        retTile = wwtlib._tileCache._tiles[tileKey];
    }
    var p = 0;
    return retTile;
}
wwtlib._tileCache.getCachedTile = function wwtlib__tileCache$getCachedTile(level, x, y, dataset, parent) {
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="x" type="Number" integer="true">
    /// </param>
    /// <param name="y" type="Number" integer="true">
    /// </param>
    /// <param name="dataset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.Tile"></returns>
    if (level < dataset.get_baseLevel()) {
        return null;
    }
    var retTile = null;
    var tileKey = wwtlib.Imageset.getTileKey(dataset, level, x, y);
    try {
        if (!Object.keyExists(wwtlib._tileCache._tiles, tileKey)) {
            return null;
        }
        else {
            retTile = wwtlib._tileCache._tiles[tileKey];
        }
    }
    catch ($e1) {
    }
    return retTile;
}
wwtlib._tileCache.getReadyToRenderTileCount = function wwtlib__tileCache$getReadyToRenderTileCount() {
    /// <returns type="Number" integer="true"></returns>
    var notReadyCullList = [];
    var readyCullList = [];
    try {
        try {
            var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib._tileCache._tiles));
            while ($enum1.moveNext()) {
                var key = $enum1.current;
                var tile = wwtlib._tileCache._tiles[key];
                if (tile.renderedGeneration < (wwtlib.Tile.currentRenderGeneration - 10) && !(tile.requestPending || tile.downloading)) {
                    if (tile.readyToRender) {
                        readyCullList.add(tile);
                    }
                    else {
                        notReadyCullList.add(tile);
                    }
                }
            }
        }
        catch ($e2) {
        }
        return readyCullList.length;
    }
    catch ($e3) {
        return -1;
    }
}
wwtlib._tileCache.processQueue = function wwtlib__tileCache$processQueue(renderContext) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    while (Object.getKeyCount(wwtlib._tileCache._queue) > 0 && wwtlib._tileCache.openThreads > 0) {
        var minDistance = 100000;
        var overlayTile = false;
        var maxKey = null;
        var level = 1000;
        var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib._tileCache._queue));
        while ($enum1.moveNext()) {
            var key = $enum1.current;
            var t = wwtlib._tileCache._queue[key];
            if (!t.requestPending && t.inViewFrustum) {
                var vectTemp = wwtlib.Vector3d.makeCopy(t.get_sphereCenter());
                vectTemp._transformByMatrics(renderContext.get_world());
                if (renderContext.space) {
                    vectTemp.subtract(wwtlib.Vector3d.create(0, 0, -1));
                }
                else {
                    vectTemp.subtract(renderContext.cameraPosition);
                }
                var distTemp = Math.max(0, vectTemp.length() - t.get_sphereRadius());
                var thisIsOverlay = (t.get_dataset().get_projection() === 2) || (t.get_dataset().get_projection() === 5);
                if (distTemp < minDistance && (!overlayTile || thisIsOverlay)) {
                    minDistance = distTemp;
                    maxKey = t.get_key();
                    level = t.level;
                    overlayTile = thisIsOverlay;
                }
            }
        }
        if (maxKey != null) {
            var workTile = wwtlib._tileCache._queue[maxKey];
            workTile.requestPending = true;
            wwtlib._tileCache.openThreads--;
            if (wwtlib._tileCache.openThreads < 0) {
                wwtlib._tileCache.openThreads = 0;
            }
            workTile.requestImage();
            if (workTile.get_dataset().get_elevationModel()) {
                workTile.requestDem();
            }
        }
        else {
            return;
        }
    }
}
wwtlib._tileCache.addTileToQueue = function wwtlib__tileCache$addTileToQueue(tile) {
    /// <param name="tile" type="wwtlib.Tile">
    /// </param>
    /// <returns type="Boolean"></returns>
    var hitValue;
    hitValue = 256;
    if (!tile.downloading && !tile.readyToRender) {
        if (Object.keyExists(wwtlib._tileCache._queue, tile.get_key())) {
            wwtlib._tileCache._queue[tile.get_key()].requestHits += hitValue;
        }
        else {
            tile.requestHits = hitValue;
            wwtlib._tileCache._queue[tile.get_key()] = tile;
        }
    }
    return true;
}
wwtlib._tileCache.removeFromQueue = function wwtlib__tileCache$removeFromQueue(key, complete) {
    /// <param name="key" type="String">
    /// </param>
    /// <param name="complete" type="Boolean">
    /// </param>
    if (complete) {
        var workTile = wwtlib._tileCache._queue[key];
        if (workTile != null) {
            workTile.requestPending = false;
            delete wwtlib._tileCache._queue[workTile.get_key()];
        }
        wwtlib._tileCache.openThreads++;
    }
    delete wwtlib._tileCache._queue[key];
}
wwtlib._tileCache.clearCache = function wwtlib__tileCache$clearCache() {
    Object.clearKeys(wwtlib._tileCache._tiles);
}
wwtlib._tileCache.purgeQueue = function wwtlib__tileCache$purgeQueue() {
    Object.clearKeys(wwtlib._tileCache._queue);
}
wwtlib._tileCache.purgeLRU = function wwtlib__tileCache$purgeLRU() {
    if (Object.getKeyCount(wwtlib._tileCache._tiles) < wwtlib._tileCache.maxReadyToRenderSize) {
        return;
    }
    var notReadyCullList = [];
    var readyCullList = [];
    try {
        try {
            var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib._tileCache._tiles));
            while ($enum1.moveNext()) {
                var key = $enum1.current;
                var tile = wwtlib._tileCache._tiles[key];
                if (tile.renderedGeneration < (wwtlib.Tile.currentRenderGeneration - 10) && !(tile.requestPending || tile.downloading)) {
                    if (tile.readyToRender) {
                        readyCullList.add(tile);
                    }
                    else {
                        notReadyCullList.add(tile);
                    }
                }
            }
        }
        catch ($e2) {
        }
        wwtlib._tileCache.readyToRenderCount = readyCullList.length;
        if (readyCullList.length > wwtlib._tileCache.maxReadyToRenderSize) {
            readyCullList.sort(function(t1, t2) {
                return (t2.accessCount < t1.accessCount) ? 1 : ((t2.accessCount === t1.accessCount) ? 0 : -1);
            });
            var totalToPurge = readyCullList.length - wwtlib._tileCache.maxReadyToRenderSize;
            var $enum3 = ss.IEnumerator.getEnumerator(readyCullList);
            while ($enum3.moveNext()) {
                var tile = $enum3.current;
                if (totalToPurge < 1) {
                    break;
                }
                tile.cleanUp(false);
                totalToPurge--;
            }
        }
        if (Object.getKeyCount(wwtlib._tileCache._tiles) < wwtlib._tileCache.maxTileCacheSize) {
            return;
        }
        if (notReadyCullList.length > wwtlib._tileCache.maxTileCacheSize) {
            notReadyCullList.sort(function(t1, t2) {
                return (t2.accessCount < t1.accessCount) ? 1 : ((t2.accessCount === t1.accessCount) ? 0 : -1);
            });
            var totalToPurge = notReadyCullList.length - wwtlib._tileCache.maxTileCacheSize;
            if (totalToPurge > 20) {
                totalToPurge = 20;
            }
            var $enum4 = ss.IEnumerator.getEnumerator(notReadyCullList);
            while ($enum4.moveNext()) {
                var tile = $enum4.current;
                if (totalToPurge < 1) {
                    break;
                }
                tile.cleanUp(true);
                delete wwtlib._tileCache._tiles[tile.get_key()];
                totalToPurge--;
            }
        }
    }
    catch ($e5) {
    }
    finally {
    }
    return;
}
wwtlib._tileCache.decimateQueue = function wwtlib__tileCache$decimateQueue() {
    var list = [];
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib._tileCache._queue));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var t = wwtlib._tileCache._queue[key];
        if (!t.requestPending) {
            t.requestHits = t.requestHits / 2;
            try {
                if (t.requestHits < 2) {
                    list.add(t);
                }
                else if (!t.inViewFrustum) {
                    list.add(t);
                }
            }
            catch ($e2) {
            }
        }
    }
    var $enum3 = ss.IEnumerator.getEnumerator(list);
    while ($enum3.moveNext()) {
        var t = $enum3.current;
        delete wwtlib._tileCache._queue[t.get_key()];
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ToastTile

wwtlib.ToastTile = function wwtlib_ToastTile() {
    /// <field name="_topDown$1" type="Boolean">
    /// </field>
    /// <field name="bounds" type="Array" elementType="PositionTexture">
    /// </field>
    /// <field name="backslash" type="Boolean">
    /// </field>
    /// <field name="_vertexList$1" type="Array">
    /// </field>
    /// <field name="_childTriangleList$1" type="Array" elementType="Array">
    /// </field>
    /// <field name="demArray" type="Array" elementType="Number">
    /// </field>
    /// <field name="slashIndexBuffer" type="Array" elementType="WebGLBuffer" static="true">
    /// </field>
    /// <field name="backSlashIndexBuffer" type="Array" elementType="WebGLBuffer" static="true">
    /// </field>
    /// <field name="rootIndexBuffer" type="Array" elementType="WebGLBuffer" static="true">
    /// </field>
    /// <field name="_subDivisionLevel$1" type="Number" integer="true">
    /// </field>
    /// <field name="_subDivided$1" type="Boolean">
    /// </field>
    /// <field name="_slashXIndex$1" type="Array" elementType="Number" elementInteger="true" static="true">
    /// </field>
    /// <field name="_slashYIndex$1" type="Array" elementType="Number" elementInteger="true" static="true">
    /// </field>
    /// <field name="_backslashXIndex$1" type="Array" elementType="Number" elementInteger="true" static="true">
    /// </field>
    /// <field name="_backslashYIndex$1" type="Array" elementType="Number" elementInteger="true" static="true">
    /// </field>
    /// <field name="_tempSlashXIndex$1" type="Array" elementType="Number" elementInteger="true">
    /// </field>
    /// <field name="_tempSlashYIndex$1" type="Array" elementType="Number" elementInteger="true">
    /// </field>
    /// <field name="_tempBackslashXIndex$1" type="Array" elementType="Number" elementInteger="true">
    /// </field>
    /// <field name="_tempBackslashYIndex$1" type="Array" elementType="Number" elementInteger="true">
    /// </field>
    wwtlib.ToastTile.initializeBase(this);
}
wwtlib.ToastTile._cloneArray$1 = function wwtlib_ToastTile$_cloneArray$1(indexArray) {
    /// <param name="indexArray" type="Array" elementType="Number" elementInteger="true">
    /// </param>
    /// <returns type="Array" elementType="Number" elementInteger="true"></returns>
    var count = indexArray.length;
    var ui16array = new Uint16Array(count);
    var indexArrayNew = ui16array;
    for (var i = 0; i < count; i++) {
        indexArrayNew[i] = indexArray[i];
    }
    return indexArrayNew;
}
wwtlib.ToastTile.create = function wwtlib_ToastTile$create(level, xc, yc, dataset, parent) {
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="xc" type="Number" integer="true">
    /// </param>
    /// <param name="yc" type="Number" integer="true">
    /// </param>
    /// <param name="dataset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.ToastTile"></returns>
    var temp = new wwtlib.ToastTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = xc;
    temp.tileY = yc;
    temp.dataset = dataset;
    temp._topDown$1 = !dataset.get_bottomsUp();
    if (temp.tileX !== xc) {
        alert('bad');
    }
    if (!!dataset.get_meanRadius()) {
        temp.set__demScaleFactor(dataset.get_meanRadius());
    }
    else {
        if (!dataset.get_dataSetType()) {
            temp.set__demScaleFactor(6371000);
        }
        else {
            temp.set__demScaleFactor(3396010);
        }
    }
    temp.computeBoundingSphere();
    return temp;
}
wwtlib.ToastTile.prototype = {
    _topDown$1: true,
    bounds: null,
    backslash: false,
    _vertexList$1: null,
    _childTriangleList$1: null,
    demArray: null,
    
    computeBoundingSphere: function wwtlib_ToastTile$computeBoundingSphere() {
        this._initializeGrids$1();
        this.topLeft = this.bounds[0 + 3 * 0].position.copy();
        this.bottomRight = this.bounds[2 + 3 * 2].position.copy();
        this.topRight = this.bounds[2 + 3 * 0].position.copy();
        this.bottomLeft = this.bounds[0 + 3 * 2].position.copy();
        this.calcSphere();
    },
    
    getIndexBuffer: function wwtlib_ToastTile$getIndexBuffer(index, accomidation) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <param name="accomidation" type="Number" integer="true">
        /// </param>
        /// <returns type="WebGLBuffer"></returns>
        if (!this.level) {
            return wwtlib.ToastTile.rootIndexBuffer[index];
        }
        if (this.backslash) {
            return wwtlib.ToastTile.backSlashIndexBuffer[index * 16 + accomidation];
        }
        else {
            return wwtlib.ToastTile.slashIndexBuffer[index * 16 + accomidation];
        }
    },
    
    _processIndexBuffer$1: function wwtlib_ToastTile$_processIndexBuffer$1(indexArray, part) {
        /// <param name="indexArray" type="Array" elementType="Number" elementInteger="true">
        /// </param>
        /// <param name="part" type="Number" integer="true">
        /// </param>
        if (!this.level) {
            wwtlib.ToastTile.rootIndexBuffer[part] = wwtlib.Tile.prepDevice.createBuffer();
            wwtlib.Tile.prepDevice.bindBuffer(34963, wwtlib.ToastTile.rootIndexBuffer[part]);
            wwtlib.Tile.prepDevice.bufferData(34963, indexArray, 35044);
            return;
        }
        for (var a = 0; a < 16; a++) {
            var partArray = wwtlib.ToastTile._cloneArray$1(indexArray);
            this._processAccomindations$1(partArray, a);
            if (this.backslash) {
                wwtlib.ToastTile.backSlashIndexBuffer[part * 16 + a] = wwtlib.Tile.prepDevice.createBuffer();
                wwtlib.Tile.prepDevice.bindBuffer(34963, wwtlib.ToastTile.backSlashIndexBuffer[part * 16 + a]);
                wwtlib.Tile.prepDevice.bufferData(34963, partArray, 35044);
            }
            else {
                wwtlib.ToastTile.slashIndexBuffer[part * 16 + a] = wwtlib.Tile.prepDevice.createBuffer();
                wwtlib.Tile.prepDevice.bindBuffer(34963, wwtlib.ToastTile.slashIndexBuffer[part * 16 + a]);
                wwtlib.Tile.prepDevice.bufferData(34963, partArray, 35044);
            }
        }
    },
    
    _processAccomindations$1: function wwtlib_ToastTile$_processAccomindations$1(indexArray, a) {
        /// <param name="indexArray" type="Array" elementType="Number" elementInteger="true">
        /// </param>
        /// <param name="a" type="Number" integer="true">
        /// </param>
        var map = {};
        var gridMap = {};
        var $enum1 = ss.IEnumerator.getEnumerator(indexArray);
        while ($enum1.moveNext()) {
            var index = $enum1.current;
            var vert = this._vertexList$1[index];
            var arrayX = parseInt((vert.tu * 16 + 0.5));
            var arrayY = parseInt((vert.tv * 16 + 0.5));
            var ii = (arrayY << 8) + arrayX;
            if (!Object.keyExists(gridMap, ii)) {
                gridMap[ii] = index;
            }
        }
        var sections = 16;
        if ((a & 1) === 1) {
            for (var x = 1; x < sections; x += 2) {
                var y = sections;
                var key = (y << 8) + x;
                var val = (y << 8) + x + 1;
                if (Object.keyExists(gridMap, key)) {
                    map[gridMap[key]] = gridMap[val];
                }
            }
        }
        if ((a & 2) === 2) {
            for (var y = 1; y < sections; y += 2) {
                var x = sections;
                var key = (y << 8) + x;
                var val = ((y + 1) << 8) + x;
                if (Object.keyExists(gridMap, key)) {
                    map[gridMap[key]] = gridMap[val];
                }
            }
        }
        if ((a & 4) === 4) {
            for (var x = 1; x < sections; x += 2) {
                var y = 0;
                var key = (y << 8) + x;
                var val = (y << 8) + x + 1;
                if (Object.keyExists(gridMap, key)) {
                    map[gridMap[key]] = gridMap[val];
                }
            }
        }
        if ((a & 8) === 8) {
            for (var y = 1; y < sections; y += 2) {
                var x = 0;
                var key = (y << 8) + x;
                var val = ((y + 1) << 8) + x;
                if (Object.keyExists(gridMap, key)) {
                    map[gridMap[key]] = gridMap[val];
                }
            }
        }
        if (!Object.getKeyCount(map)) {
            return;
        }
        for (var i = 0; i < indexArray.length; i++) {
            if (Object.keyExists(map, indexArray[i])) {
                indexArray[i] = map[indexArray[i]];
            }
        }
    },
    
    calculateFullSphere: function wwtlib_ToastTile$calculateFullSphere(list) {
        /// <param name="list" type="Array" elementType="Vector3d">
        /// </param>
        var result = wwtlib.ConvexHull.findEnclosingSphere(list);
        this.sphereCenter = result.center;
        this.sphereRadius = result.radius;
    },
    
    isPointInTile: function wwtlib_ToastTile$isPointInTile(lat, lng) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (!this.level) {
            return true;
        }
        if (this.level === 1) {
            if ((lng >= 0 && lng <= 90) && (!this.tileX && this.tileY === 1)) {
                return true;
            }
            if ((lng > 90 && lng <= 180) && (this.tileX === 1 && this.tileY === 1)) {
                return true;
            }
            if ((lng < 0 && lng >= -90) && (!this.tileX && !this.tileY)) {
                return true;
            }
            if ((lng < -90 && lng >= -180) && (this.tileX === 1 && !this.tileY)) {
                return true;
            }
            return false;
        }
        if (!this.demReady || this.demData == null) {
            return false;
        }
        var testPoint = wwtlib.Coordinates.geoTo3dDouble(-lat, lng);
        var top = this._isLeftOfHalfSpace$1(this.topLeft.copy(), this.topRight.copy(), testPoint);
        var right = this._isLeftOfHalfSpace$1(this.topRight.copy(), this.bottomRight.copy(), testPoint);
        var bottom = this._isLeftOfHalfSpace$1(this.bottomRight.copy(), this.bottomLeft.copy(), testPoint);
        var left = this._isLeftOfHalfSpace$1(this.bottomLeft.copy(), this.topLeft.copy(), testPoint);
        if (top && right && bottom && left) {
            return true;
        }
        return false;
    },
    
    _isLeftOfHalfSpace$1: function wwtlib_ToastTile$_isLeftOfHalfSpace$1(pntA, pntB, pntTest) {
        /// <param name="pntA" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntB" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="pntTest" type="wwtlib.Vector3d">
        /// </param>
        /// <returns type="Boolean"></returns>
        pntA.normalize();
        pntB.normalize();
        var cross = wwtlib.Vector3d.cross(pntA, pntB);
        var dot = wwtlib.Vector3d.dot(cross, pntTest);
        return dot < 0;
    },
    
    getSurfacePointAltitude: function wwtlib_ToastTile$getSurfacePointAltitude(lat, lng, meters) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <param name="meters" type="Boolean">
        /// </param>
        /// <returns type="Number"></returns>
        if (this.level < wwtlib.Tile.lastDeepestLevel) {
            for (var ii = 0; ii < 4; ii++) {
                var child = this.children[ii];
                if (child != null) {
                    if (child.isPointInTile(lat, lng)) {
                        var retVal = child.getSurfacePointAltitude(lat, lng, meters);
                        if (!!retVal) {
                            return retVal;
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        wwtlib.Tile.tileTargetLevel = this.level;
        wwtlib.Tile.tileTargetX = this.tileX;
        wwtlib.Tile.tileTargetY = this.tileY;
        var testPoint = wwtlib.Coordinates.geoTo3dDouble(-lat, lng);
        testPoint = wwtlib.Vector3d.subtractVectors(new wwtlib.Vector3d(), testPoint);
        var uv = wwtlib._distanceCalc.getUVFromInnerPoint(this.topLeft.copy(), this.topRight.copy(), this.bottomLeft.copy(), this.bottomRight.copy(), testPoint.copy());
        var uud = Math.max(0, Math.min(16, (uv.x * 16)));
        var vvd = Math.max(0, Math.min(16, (uv.y * 16)));
        var uu = Math.max(0, Math.min(15, parseInt((uv.x * 16))));
        var vv = Math.max(0, Math.min(15, parseInt((uv.y * 16))));
        var ha = uud - uu;
        var va = vvd - vv;
        if (this.demArray != null) {
            var ul = this.demArray[uu + 17 * vv];
            var ur = this.demArray[(uu + 1) + 17 * vv];
            var ll = this.demArray[uu + 17 * (vv + 1)];
            var lr = this.demArray[(uu + 1) + 17 * (vv + 1)];
            var top = ul * (1 - ha) + ha * ur;
            var bottom = ll * (1 - ha) + ha * lr;
            var val = top * (1 - va) + va * bottom;
            return val / this.get__demScaleFactor();
        }
        return this.demAverage / this.get__demScaleFactor();
    },
    
    _initializeGrids$1: function wwtlib_ToastTile$_initializeGrids$1() {
        this._vertexList$1 = [];
        this._childTriangleList$1 = new Array(4);
        this._childTriangleList$1[0] = [];
        this._childTriangleList$1[1] = [];
        this._childTriangleList$1[2] = [];
        this._childTriangleList$1[3] = [];
        this.bounds = new Array(9);
        if (this.level > 0) {
            if (this.parent == null) {
                this.parent = wwtlib._tileCache.getTile(this.level - 1, this.tileX / 2, this.tileY / 2, this.dataset, null);
            }
            var parent = this.parent;
            var xIndex = this.tileX % 2;
            var yIndex = this.tileY % 2;
            if (this.level > 1) {
                this.backslash = parent.backslash;
            }
            else {
                this.backslash = (xIndex === 1 ^ yIndex === 1) === 1;
            }
            this.bounds[0 + 3 * 0] = parent.bounds[xIndex + 3 * yIndex].copy();
            this.bounds[1 + 3 * 0] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * yIndex]);
            this.bounds[2 + 3 * 0] = parent.bounds[xIndex + 1 + 3 * yIndex].copy();
            this.bounds[0 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 3 * (yIndex + 1)]);
            if (this.backslash) {
                this.bounds[1 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
            }
            else {
                this.bounds[1 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 1 + 3 * yIndex], parent.bounds[xIndex + 3 * (yIndex + 1)]);
            }
            this.bounds[2 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 1 + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
            this.bounds[0 + 3 * 2] = parent.bounds[xIndex + 3 * (yIndex + 1)].copy();
            this.bounds[1 + 3 * 2] = this._midpoint$1(parent.bounds[xIndex + 3 * (yIndex + 1)], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
            this.bounds[2 + 3 * 2] = parent.bounds[xIndex + 1 + 3 * (yIndex + 1)].copy();
            this.bounds[0 + 3 * 0].tu = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 0].tv = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 0].tu = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 0].tv = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 0].tu = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 0].tv = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 1].tu = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 1].tv = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 1].tu = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 1].tv = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 1].tu = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 1].tv = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 2].tu = 0 * wwtlib.Tile.uvMultiple;
            this.bounds[0 + 3 * 2].tv = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 2].tu = 0.5 * wwtlib.Tile.uvMultiple;
            this.bounds[1 + 3 * 2].tv = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 2].tu = 1 * wwtlib.Tile.uvMultiple;
            this.bounds[2 + 3 * 2].tv = 1 * wwtlib.Tile.uvMultiple;
            this._vertexList$1.add(this.bounds[0 + 3 * 0]);
            this._vertexList$1.add(this.bounds[1 + 3 * 0]);
            this._vertexList$1.add(this.bounds[2 + 3 * 0]);
            this._vertexList$1.add(this.bounds[0 + 3 * 1]);
            this._vertexList$1.add(this.bounds[1 + 3 * 1]);
            this._vertexList$1.add(this.bounds[2 + 3 * 1]);
            this._vertexList$1.add(this.bounds[0 + 3 * 2]);
            this._vertexList$1.add(this.bounds[1 + 3 * 2]);
            this._vertexList$1.add(this.bounds[2 + 3 * 2]);
            if (this.backslash) {
                this._childTriangleList$1[0].add(wwtlib._triangle.create(4, 1, 0));
                this._childTriangleList$1[0].add(wwtlib._triangle.create(3, 4, 0));
                this._childTriangleList$1[1].add(wwtlib._triangle.create(5, 2, 1));
                this._childTriangleList$1[1].add(wwtlib._triangle.create(4, 5, 1));
                this._childTriangleList$1[2].add(wwtlib._triangle.create(7, 4, 3));
                this._childTriangleList$1[2].add(wwtlib._triangle.create(6, 7, 3));
                this._childTriangleList$1[3].add(wwtlib._triangle.create(8, 5, 4));
                this._childTriangleList$1[3].add(wwtlib._triangle.create(7, 8, 4));
            }
            else {
                this._childTriangleList$1[0].add(wwtlib._triangle.create(3, 1, 0));
                this._childTriangleList$1[0].add(wwtlib._triangle.create(4, 1, 3));
                this._childTriangleList$1[1].add(wwtlib._triangle.create(4, 2, 1));
                this._childTriangleList$1[1].add(wwtlib._triangle.create(5, 2, 4));
                this._childTriangleList$1[2].add(wwtlib._triangle.create(6, 4, 3));
                this._childTriangleList$1[2].add(wwtlib._triangle.create(7, 4, 6));
                this._childTriangleList$1[3].add(wwtlib._triangle.create(7, 5, 4));
                this._childTriangleList$1[3].add(wwtlib._triangle.create(8, 5, 7));
            }
        }
        else {
            this.bounds[0 + 3 * 0] = wwtlib.PositionTexture.create(0, -1, 0, 0, 0);
            this.bounds[1 + 3 * 0] = wwtlib.PositionTexture.create(0, 0, 1, 0.5, 0);
            this.bounds[2 + 3 * 0] = wwtlib.PositionTexture.create(0, -1, 0, 1, 0);
            this.bounds[0 + 3 * 1] = wwtlib.PositionTexture.create(-1, 0, 0, 0, 0.5);
            this.bounds[1 + 3 * 1] = wwtlib.PositionTexture.create(0, 1, 0, 0.5, 0.5);
            this.bounds[2 + 3 * 1] = wwtlib.PositionTexture.create(1, 0, 0, 1, 0.5);
            this.bounds[0 + 3 * 2] = wwtlib.PositionTexture.create(0, -1, 0, 0, 1);
            this.bounds[1 + 3 * 2] = wwtlib.PositionTexture.create(0, 0, -1, 0.5, 1);
            this.bounds[2 + 3 * 2] = wwtlib.PositionTexture.create(0, -1, 0, 1, 1);
            this._vertexList$1.add(this.bounds[0 + 3 * 0]);
            this._vertexList$1.add(this.bounds[1 + 3 * 0]);
            this._vertexList$1.add(this.bounds[2 + 3 * 0]);
            this._vertexList$1.add(this.bounds[0 + 3 * 1]);
            this._vertexList$1.add(this.bounds[1 + 3 * 1]);
            this._vertexList$1.add(this.bounds[2 + 3 * 1]);
            this._vertexList$1.add(this.bounds[0 + 3 * 2]);
            this._vertexList$1.add(this.bounds[1 + 3 * 2]);
            this._vertexList$1.add(this.bounds[2 + 3 * 2]);
            this._childTriangleList$1[0].add(wwtlib._triangle.create(3, 1, 0));
            this._childTriangleList$1[0].add(wwtlib._triangle.create(4, 1, 3));
            this._childTriangleList$1[1].add(wwtlib._triangle.create(5, 2, 1));
            this._childTriangleList$1[1].add(wwtlib._triangle.create(4, 5, 1));
            this._childTriangleList$1[2].add(wwtlib._triangle.create(7, 4, 3));
            this._childTriangleList$1[2].add(wwtlib._triangle.create(6, 7, 3));
            this._childTriangleList$1[3].add(wwtlib._triangle.create(7, 5, 4));
            this._childTriangleList$1[3].add(wwtlib._triangle.create(8, 5, 7));
        }
    },
    
    _midpoint$1: function wwtlib_ToastTile$_midpoint$1(positionNormalTextured, positionNormalTextured_2) {
        /// <param name="positionNormalTextured" type="wwtlib.PositionTexture">
        /// </param>
        /// <param name="positionNormalTextured_2" type="wwtlib.PositionTexture">
        /// </param>
        /// <returns type="wwtlib.PositionTexture"></returns>
        var a1 = wwtlib.Vector3d.lerp(positionNormalTextured.position, positionNormalTextured_2.position, 0.5);
        var a1uv = wwtlib.Vector2d.lerp(wwtlib.Vector2d.create(positionNormalTextured.tu, positionNormalTextured.tv), wwtlib.Vector2d.create(positionNormalTextured_2.tu, positionNormalTextured_2.tv), 0.5);
        a1.normalize();
        return wwtlib.PositionTexture.createPos(a1, a1uv.x, a1uv.y);
    },
    
    _subDivisionLevel$1: 4,
    _subDivided$1: false,
    
    createGeometry: function wwtlib_ToastTile$createGeometry(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (this.geometryCreated) {
            return true;
        }
        this.geometryCreated = true;
        wwtlib.ToastTile.callBaseMethod(this, 'createGeometry', [ renderContext ]);
        if (!this._subDivided$1) {
            if (this._vertexList$1 == null) {
                this._initializeGrids$1();
            }
            if (wwtlib.Tile.uvMultiple === 256) {
                if (!this.dataset.get_dataSetType() || this.dataset.get_dataSetType() === 1) {
                    this._subDivisionLevel$1 = Math.min(5, Math.max(0, 5 - this.level));
                }
                else {
                    this._subDivisionLevel$1 = Math.min(5, Math.max(0, 5 - this.level));
                }
            }
            else {
                if (this.demTile && this.level > 1) {
                    this.demArray = new Array(17 * 17);
                    this.demSize = 17 * 17;
                    if (this.backslash) {
                        if (wwtlib.ToastTile._backslashYIndex$1 == null) {
                            this._tempBackslashYIndex$1 = new Array(this.demSize);
                            this._tempBackslashXIndex$1 = new Array(this.demSize);
                        }
                    }
                    else {
                        if (wwtlib.ToastTile._slashYIndex$1 == null) {
                            this._tempSlashYIndex$1 = new Array(this.demSize);
                            this._tempSlashXIndex$1 = new Array(this.demSize);
                        }
                    }
                }
            }
            for (var i = 0; i < 4; i++) {
                var count = this._subDivisionLevel$1;
                while (count-- > 1) {
                    var newList = [];
                    var $enum1 = ss.IEnumerator.getEnumerator(this._childTriangleList$1[i]);
                    while ($enum1.moveNext()) {
                        var tri = $enum1.current;
                        tri.subDivide(newList, this._vertexList$1);
                    }
                    this._childTriangleList$1[i] = newList;
                }
            }
            if (renderContext.gl == null) {
                for (var i = 0; i < 4; i++) {
                    this._renderTriangleLists[i] = [];
                    var $enum2 = ss.IEnumerator.getEnumerator(this._childTriangleList$1[i]);
                    while ($enum2.moveNext()) {
                        var tri = $enum2.current;
                        var p1 = this._vertexList$1[tri.c];
                        var p2 = this._vertexList$1[tri.b];
                        var p3 = this._vertexList$1[tri.a];
                        this._renderTriangleLists[i].add(wwtlib.RenderTriangle.create(p1, p2, p3, this.texture, this.level));
                    }
                }
            }
            else {
                this._vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
                wwtlib.Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
                var f32array = new Float32Array(this._vertexList$1.length * 5);
                var buffer = f32array;
                var index = 0;
                var $enum3 = ss.IEnumerator.getEnumerator(this._vertexList$1);
                while ($enum3.moveNext()) {
                    var pt = $enum3.current;
                    if (this.demTile) {
                        index = this.addVertex(buffer, index, this._getMappedVertex(pt));
                        this.demIndex++;
                    }
                    else {
                        index = this.addVertex(buffer, index, pt);
                    }
                }
                if (this.demTile) {
                    if (this.backslash) {
                        if (this._tempBackslashXIndex$1 != null) {
                            wwtlib.ToastTile._backslashXIndex$1 = this._tempBackslashXIndex$1;
                            wwtlib.ToastTile._backslashYIndex$1 = this._tempBackslashYIndex$1;
                            this._tempBackslashXIndex$1 = null;
                            this._tempBackslashYIndex$1 = null;
                        }
                    }
                    else {
                        if (this._tempSlashYIndex$1 != null) {
                            wwtlib.ToastTile._slashXIndex$1 = this._tempSlashXIndex$1;
                            wwtlib.ToastTile._slashYIndex$1 = this._tempSlashYIndex$1;
                            this._tempSlashYIndex$1 = null;
                            this._tempSlashXIndex$1 = null;
                        }
                    }
                }
                wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
                for (var i = 0; i < 4; i++) {
                    this.triangleCount = this._childTriangleList$1[i].length;
                    if (this.getIndexBuffer(i, 0) == null) {
                        var ui16array = new Uint16Array(this.triangleCount * 3);
                        var indexArray = ui16array;
                        index = 0;
                        var $enum4 = ss.IEnumerator.getEnumerator(this._childTriangleList$1[i]);
                        while ($enum4.moveNext()) {
                            var tri = $enum4.current;
                            indexArray[index++] = tri.c;
                            indexArray[index++] = tri.b;
                            indexArray[index++] = tri.a;
                        }
                        this._processIndexBuffer$1(indexArray, i);
                    }
                }
            }
            this._subDivided$1 = true;
        }
        return true;
    },
    
    _tempSlashXIndex$1: null,
    _tempSlashYIndex$1: null,
    _tempBackslashXIndex$1: null,
    _tempBackslashYIndex$1: null,
    
    _getMappedVertex: function wwtlib_ToastTile$_getMappedVertex(vert) {
        /// <param name="vert" type="wwtlib.PositionTexture">
        /// </param>
        /// <returns type="wwtlib.PositionTexture"></returns>
        var vertOut = new wwtlib.PositionTexture();
        var latLng = wwtlib.Coordinates.cartesianToSpherical2(vert.position);
        if (latLng.get_lng() < -180) {
            latLng.set_lng(latLng.get_lng() + 360);
        }
        if (latLng.get_lng() > 180) {
            latLng.set_lng(latLng.get_lng() - 360);
        }
        if (this.level > 1) {
            var arrayX = parseInt((vert.tu * 16 + 0.5));
            var arrayY = parseInt((vert.tv * 16 + 0.5));
            this.demArray[arrayX + arrayY * 17] = this.demData[this.demIndex];
            if (this.backslash) {
                if (this._tempBackslashYIndex$1 != null) {
                    this._tempBackslashXIndex$1[this.demIndex] = arrayX;
                    this._tempBackslashYIndex$1[this.demIndex] = arrayY;
                }
            }
            else {
                if (this._tempSlashYIndex$1 != null) {
                    this._tempSlashXIndex$1[this.demIndex] = arrayX;
                    this._tempSlashYIndex$1[this.demIndex] = arrayY;
                }
            }
        }
        var pos = this.geoTo3dWithAlt(latLng.get_lat(), latLng.get_lng(), false, false);
        vertOut.tu = vert.tu;
        vertOut.tv = vert.tv;
        pos.subtract(this.localCenter);
        vertOut.position = pos;
        return vertOut;
    },
    
    cleanUp: function wwtlib_ToastTile$cleanUp(removeFromParent) {
        /// <param name="removeFromParent" type="Boolean">
        /// </param>
        wwtlib.ToastTile.callBaseMethod(this, 'cleanUp', [ removeFromParent ]);
        if (this._vertexList$1 != null) {
            this._vertexList$1 = null;
        }
        if (this._childTriangleList$1 != null) {
            this._childTriangleList$1 = null;
        }
        this._subDivided$1 = false;
        this.demArray = null;
    },
    
    _getDemSample$1: function wwtlib_ToastTile$_getDemSample$1(xc, yc) {
        /// <param name="xc" type="Number" integer="true">
        /// </param>
        /// <param name="yc" type="Number" integer="true">
        /// </param>
        /// <returns type="Number"></returns>
        return this.demArray[(16 - yc) * 17 + xc];
    },
    
    createDemFromParent: function wwtlib_ToastTile$createDemFromParent() {
        /// <returns type="Boolean"></returns>
        var parent = Type.safeCast(this.parent, wwtlib.ToastTile);
        if (parent == null) {
            return false;
        }
        var offsetX = (((this.tileX % 2) === 1) ? 8 : 0);
        var offsetY = ((!(this.tileY % 2)) ? 8 : 0);
        this.demArray = new Array(17 * 17);
        for (var yy1 = 0; yy1 < 17; yy1 += 2) {
            var copy = true;
            for (var xx1 = 0; xx1 < 17; xx1++) {
                if (copy) {
                    this.demArray[(16 - yy1) * 17 + xx1] = parent._getDemSample$1((xx1 / 2) + offsetX, (yy1 / 2) + offsetY);
                }
                else {
                    this.demArray[(16 - yy1) * 17 + xx1] = ((parent._getDemSample$1((xx1 / 2) + offsetX, (yy1 / 2) + offsetY) + parent._getDemSample$1(((xx1 / 2) + offsetX) + 1, (yy1 / 2) + offsetY)) / 2);
                }
                copy = !copy;
            }
        }
        for (var yy2 = 1; yy2 < 17; yy2 += 2) {
            for (var xx2 = 0; xx2 < 17; xx2++) {
                this.demArray[(16 - yy2) * 17 + xx2] = ((this._getDemSample$1(xx2, yy2 - 1) + this._getDemSample$1(xx2, yy2 + 1)) / 2);
            }
        }
        this.demData = new Array(this.demSize);
        for (var i = 0; i < this.demSize; i++) {
            if (this.backslash) {
                this.demData[i] = this.demArray[wwtlib.ToastTile._backslashXIndex$1[i] + wwtlib.ToastTile._backslashYIndex$1[i] * 17];
            }
            else {
                this.demData[i] = this.demArray[wwtlib.ToastTile._slashXIndex$1[i] + wwtlib.ToastTile._slashYIndex$1[i] * 17];
            }
            this.demAverage += this.demData[i];
        }
        this.demAverage /= this.demData.length;
        this.demReady = true;
        return true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._distanceCalc

wwtlib._distanceCalc = function wwtlib__distanceCalc() {
}
wwtlib._distanceCalc.lineToPoint = function wwtlib__distanceCalc$lineToPoint(l0, l1, p) {
    /// <param name="l0" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="l1" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="p" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="Number"></returns>
    var v = wwtlib.Vector3d.subtractVectors(l1, l0);
    var w = wwtlib.Vector3d.subtractVectors(p, l0);
    var dist = wwtlib.Vector3d.cross(w, v).length() / v.length();
    return dist;
}
wwtlib._distanceCalc.getUVFromInnerPoint = function wwtlib__distanceCalc$getUVFromInnerPoint(ul, ur, ll, lr, pnt) {
    /// <param name="ul" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="ur" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="ll" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="lr" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="pnt" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    ul.normalize();
    ur.normalize();
    ll.normalize();
    lr.normalize();
    pnt.normalize();
    var dUpper = wwtlib._distanceCalc.lineToPoint(ul, ur, pnt);
    var dLower = wwtlib._distanceCalc.lineToPoint(ll, lr, pnt);
    var dVert = dUpper + dLower;
    var dRight = wwtlib._distanceCalc.lineToPoint(ur, lr, pnt);
    var dLeft = wwtlib._distanceCalc.lineToPoint(ul, ll, pnt);
    var dHoriz = dRight + dLeft;
    return wwtlib.Vector2d.create(dLeft / dHoriz, dUpper / dVert);
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Tour

wwtlib.Tour = function wwtlib_Tour() {
    /// <field name="userLevel" type="wwtlib.UserLevel">
    /// </field>
    /// <field name="title" type="String">
    /// </field>
    /// <field name="taxonomy" type="String">
    /// </field>
    /// <field name="organizationName" type="String">
    /// </field>
    /// <field name="organizationUrl" type="String">
    /// </field>
    /// <field name="id" type="String">
    /// </field>
    /// <field name="description" type="String">
    /// </field>
    /// <field name="classification" type="wwtlib.Classification">
    /// </field>
    /// <field name="authorEmail" type="String">
    /// </field>
    /// <field name="author" type="String">
    /// </field>
    /// <field name="tourDuration" type="String">
    /// </field>
    /// <field name="authorURL" type="String">
    /// </field>
    /// <field name="averageRating" type="Number">
    /// </field>
    /// <field name="lengthInSecs" type="Number">
    /// </field>
    /// <field name="tourAttributionAndCredits" type="String">
    /// </field>
    /// <field name="authorImageUrl" type="String">
    /// </field>
    /// <field name="keywords" type="String">
    /// </field>
    /// <field name="relatedTours" type="String">
    /// </field>
    /// <field name="_thumbnail" type="Object" domElement="true">
    /// </field>
    /// <field name="_thumbnailUrlField" type="String">
    /// </field>
    /// <field name="_tourUrl" type="String">
    /// </field>
    /// <field name="_bounds" type="wwtlib.Rectangle">
    /// </field>
}
wwtlib.Tour._fromXml = function wwtlib_Tour$_fromXml(child) {
    /// <param name="child" type="XmlNode">
    /// </param>
    /// <returns type="wwtlib.Tour"></returns>
    var temp = new wwtlib.Tour();
    if (child.attributes.getNamedItem('ID') != null) {
        temp.id = child.attributes.getNamedItem('ID').nodeValue;
    }
    if (child.attributes.getNamedItem('TourUrl') != null) {
        temp._tourUrl = child.attributes.getNamedItem('TourUrl').nodeValue;
    }
    if (child.attributes.getNamedItem('Title') != null) {
        temp.title = child.attributes.getNamedItem('Title').nodeValue;
    }
    if (child.attributes.getNamedItem('Description') != null) {
        temp.description = child.attributes.getNamedItem('Description').nodeValue;
    }
    if (child.attributes.getNamedItem('Classification') != null) {
        switch (child.attributes.getNamedItem('Classification').nodeValue) {
            case 'Star':
                temp.classification = 1;
                break;
            case 'Supernova':
                temp.classification = 2;
                break;
            case 'BlackHole':
                temp.classification = 4;
                break;
            case 'NeutronStar':
                temp.classification = 8;
                break;
            case 'DoubleStar':
                temp.classification = 16;
                break;
            case 'MultipleStars':
                temp.classification = 32;
                break;
            case 'Asterism':
                temp.classification = 64;
                break;
            case 'Constellation':
                temp.classification = 128;
                break;
            case 'OpenCluster':
                temp.classification = 256;
                break;
            case 'GlobularCluster':
                temp.classification = 512;
                break;
            case 'NebulousCluster':
                temp.classification = 1024;
                break;
            case 'Nebula':
                temp.classification = 2048;
                break;
            case 'EmissionNebula':
                temp.classification = 4096;
                break;
            case 'PlanetaryNebula':
                temp.classification = 8192;
                break;
            case 'ReflectionNebula':
                temp.classification = 16384;
                break;
            case 'DarkNebula':
                temp.classification = 32768;
                break;
            case 'GiantMolecularCloud':
                temp.classification = 65536;
                break;
            case 'SupernovaRemnant':
                temp.classification = 131072;
                break;
            case 'InterstellarDust':
                temp.classification = 262144;
                break;
            case 'Quasar':
                temp.classification = 524288;
                break;
            case 'Galaxy':
                temp.classification = 1048576;
                break;
            case 'SpiralGalaxy':
                temp.classification = 2097152;
                break;
            case 'IrregularGalaxy':
                temp.classification = 4194304;
                break;
            case 'EllipticalGalaxy':
                temp.classification = 8388608;
                break;
            case 'Knot':
                temp.classification = 16777216;
                break;
            case 'PlateDefect':
                temp.classification = 33554432;
                break;
            case 'ClusterOfGalaxies':
                temp.classification = 67108864;
                break;
            case 'OtherNGC':
                temp.classification = 134217728;
                break;
            case 'Unidentified':
                temp.classification = 268435456;
                break;
            case 'SolarSystem':
                temp.classification = 536870912;
                break;
            case 'Unfiltered':
                temp.classification = 1073741823;
                break;
            case 'Stellar':
                temp.classification = 63;
                break;
            case 'StellarGroupings':
                temp.classification = 2032;
                break;
            case 'Nebulae':
                temp.classification = 523264;
                break;
            case 'Galactic':
                temp.classification = 133693440;
                break;
            case 'Other':
                temp.classification = 436207616;
                break;
            default:
                break;
        }
    }
    if (child.attributes.getNamedItem('AuthorEmail') != null) {
        temp.authorEmail = child.attributes.getNamedItem('AuthorEmail').nodeValue;
    }
    if (child.attributes.getNamedItem('Author') != null) {
        temp.author = child.attributes.getNamedItem('Author').nodeValue;
    }
    if (child.attributes.getNamedItem('AuthorURL') != null) {
        temp.authorURL = child.attributes.getNamedItem('AuthorURL').nodeValue;
    }
    if (child.attributes.getNamedItem('AuthorImageUrl') != null) {
        temp.authorImageUrl = child.attributes.getNamedItem('AuthorImageUrl').nodeValue;
    }
    if (child.attributes.getNamedItem('AverageRating') != null) {
        temp.averageRating = parseFloat(child.attributes.getNamedItem('AverageRating').nodeValue);
    }
    if (child.attributes.getNamedItem('LengthInSecs') != null) {
        temp.lengthInSecs = parseFloat(child.attributes.getNamedItem('LengthInSecs').nodeValue);
    }
    if (child.attributes.getNamedItem('OrganizationUrl') != null) {
        temp.organizationUrl = child.attributes.getNamedItem('OrganizationUrl').nodeValue;
    }
    if (child.attributes.getNamedItem('OrganizationName') != null) {
        temp.organizationName = child.attributes.getNamedItem('OrganizationName').nodeValue;
    }
    if (child.attributes.getNamedItem('RelatedTours') != null) {
        temp.relatedTours = child.attributes.getNamedItem('RelatedTours').nodeValue;
    }
    if (child.attributes.getNamedItem('Keywords') != null) {
        temp.keywords = child.attributes.getNamedItem('Keywords').nodeValue;
    }
    return temp;
}
wwtlib.Tour.prototype = {
    userLevel: 0,
    title: null,
    taxonomy: null,
    organizationName: null,
    organizationUrl: null,
    id: null,
    description: null,
    classification: 0,
    authorEmail: null,
    author: null,
    tourDuration: null,
    authorURL: null,
    averageRating: 0,
    lengthInSecs: 0,
    tourAttributionAndCredits: null,
    authorImageUrl: null,
    keywords: null,
    relatedTours: null,
    
    get_name: function wwtlib_Tour$get_name() {
        /// <value type="String"></value>
        return this.title;
    },
    
    _thumbnail: null,
    
    get_thumbnail: function wwtlib_Tour$get_thumbnail() {
        /// <value type="Object" domElement="true"></value>
        return this._thumbnail;
    },
    set_thumbnail: function wwtlib_Tour$set_thumbnail(value) {
        /// <value type="Object" domElement="true"></value>
        this._thumbnail = value;
        return value;
    },
    
    _thumbnailUrlField: '',
    
    get_thumbnailUrl: function wwtlib_Tour$get_thumbnailUrl() {
        /// <value type="String"></value>
        if (!String.isNullOrEmpty(this._thumbnailUrlField)) {
            return this._thumbnailUrlField;
        }
        else {
            return String.format('http://cdn.worldwidetelescope.org/wwtweb/GetTourThumbnail.aspx?GUID={0}', this.id);
        }
    },
    set_thumbnailUrl: function wwtlib_Tour$set_thumbnailUrl(value) {
        /// <value type="String"></value>
        this._thumbnailUrlField = value;
        return value;
    },
    
    _tourUrl: null,
    
    get_tourUrl: function wwtlib_Tour$get_tourUrl() {
        /// <value type="String"></value>
        if (String.isNullOrEmpty(this._tourUrl)) {
            return String.format('http://cdn.worldwidetelescope.org/wwtweb/GetTour.aspx?GUID={0}', this.id);
        }
        else {
            return this._tourUrl;
        }
    },
    set_tourUrl: function wwtlib_Tour$set_tourUrl(value) {
        /// <value type="String"></value>
        this._tourUrl = value;
        return value;
    },
    
    _bounds: null,
    
    get_bounds: function wwtlib_Tour$get_bounds() {
        /// <value type="wwtlib.Rectangle"></value>
        return this._bounds;
    },
    set_bounds: function wwtlib_Tour$set_bounds(value) {
        /// <value type="wwtlib.Rectangle"></value>
        this._bounds = value;
        return value;
    },
    
    get_isImage: function wwtlib_Tour$get_isImage() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isTour: function wwtlib_Tour$get_isTour() {
        /// <value type="Boolean"></value>
        return true;
    },
    
    get_isFolder: function wwtlib_Tour$get_isFolder() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isCloudCommunityItem: function wwtlib_Tour$get_isCloudCommunityItem() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_readOnly: function wwtlib_Tour$get_readOnly() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_children: function wwtlib_Tour$get_children() {
        /// <value type="Array"></value>
        return [];
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.SettingParameter

wwtlib.SettingParameter = function wwtlib_SettingParameter(edgeTrigger, opacity, targetState, filter) {
    /// <param name="edgeTrigger" type="Boolean">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="targetState" type="Boolean">
    /// </param>
    /// <param name="filter" type="wwtlib.ConstellationFilter">
    /// </param>
    /// <field name="targetState" type="Boolean">
    /// </field>
    /// <field name="edgeTrigger" type="Boolean">
    /// </field>
    /// <field name="opacity" type="Number">
    /// </field>
    /// <field name="filter" type="wwtlib.ConstellationFilter">
    /// </field>
    this.edgeTrigger = edgeTrigger;
    this.opacity = opacity;
    this.targetState = targetState;
    this.filter = filter;
}
wwtlib.SettingParameter.prototype = {
    targetState: false,
    edgeTrigger: false,
    opacity: 0,
    filter: null
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Overlay

wwtlib.Overlay = function wwtlib_Overlay() {
    /// <field name="clipboardFormat" type="String" static="true">
    /// </field>
    /// <field name="isDesignTimeOnly" type="Boolean">
    /// </field>
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="nextId" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="RC" type="Number" static="true">
    /// </field>
    /// <field name="id" type="String">
    /// </field>
    /// <field name="_owner" type="wwtlib.TourStop">
    /// </field>
    /// <field name="_url" type="String">
    /// </field>
    /// <field name="_linkID" type="String">
    /// </field>
    /// <field name="_animate" type="Boolean">
    /// </field>
    /// <field name="_tweenFactor" type="Number">
    /// </field>
    /// <field name="_endX" type="Number">
    /// </field>
    /// <field name="_endY" type="Number">
    /// </field>
    /// <field name="_endOpacity" type="Number">
    /// </field>
    /// <field name="_endColor" type="wwtlib.Color">
    /// </field>
    /// <field name="_endWidth" type="Number">
    /// </field>
    /// <field name="_endHeight" type="Number">
    /// </field>
    /// <field name="_endRotationAngle" type="Number">
    /// </field>
    /// <field name="_anchor" type="wwtlib.OverlayAnchor">
    /// </field>
    /// <field name="_x" type="Number">
    /// </field>
    /// <field name="_y" type="Number">
    /// </field>
    /// <field name="_width" type="Number">
    /// </field>
    /// <field name="_height" type="Number">
    /// </field>
    /// <field name="_color" type="wwtlib.Color">
    /// </field>
    /// <field name="_opacity" type="Number">
    /// </field>
    /// <field name="_rotationAngle" type="Number">
    /// </field>
    /// <field name="currentRotation" type="Number">
    /// </field>
    /// <field name="texture" type="Object" domElement="true">
    /// </field>
    /// <field name="_bounds" type="wwtlib.Rectangle">
    /// </field>
    /// <field name="_interpolationType" type="wwtlib.InterpolationType">
    /// </field>
    this.id = (wwtlib.Overlay.nextId++).toString();
    this._endColor = new wwtlib.Color();
    this._color = wwtlib.Colors.get_white();
    this._interpolationType = 5;
}
wwtlib.Overlay._fromXml = function wwtlib_Overlay$_fromXml(owner, overlay) {
    /// <param name="owner" type="wwtlib.TourStop">
    /// </param>
    /// <param name="overlay" type="XmlNode">
    /// </param>
    /// <returns type="wwtlib.Overlay"></returns>
    if (overlay.attributes == null) {
        return null;
    }
    if (overlay.attributes.getNamedItem('Type') == null) {
        return null;
    }
    var overlayClassName = overlay.attributes.getNamedItem('Type').nodeValue;
    var overLayType = overlayClassName.replaceAll('TerraViewer.', '');
    var newOverlay = null;
    switch (overLayType) {
        case 'AudioOverlay':
            newOverlay = new wwtlib.AudioOverlay();
            break;
        case 'BitmapOverlay':
            newOverlay = new wwtlib.BitmapOverlay();
            break;
        case 'FlipBookOverlay':
            newOverlay = new wwtlib.FlipbookOverlay();
            break;
        case 'ShapeOverlay':
            newOverlay = new wwtlib.ShapeOverlay();
            break;
        case 'TextOverlay':
            newOverlay = new wwtlib.TextOverlay();
            break;
        default:
            return null;
    }
    newOverlay._owner = owner;
    newOverlay._initOverlayFromXml(overlay);
    return newOverlay;
}
wwtlib.Overlay.prototype = {
    isDesignTimeOnly: false,
    _name: null,
    
    get_name: function wwtlib_Overlay$get_name() {
        /// <value type="String"></value>
        return this._name;
    },
    set_name: function wwtlib_Overlay$set_name(value) {
        /// <value type="String"></value>
        this._name = value;
        return value;
    },
    
    _owner: null,
    
    get_owner: function wwtlib_Overlay$get_owner() {
        /// <value type="wwtlib.TourStop"></value>
        return this._owner;
    },
    set_owner: function wwtlib_Overlay$set_owner(value) {
        /// <value type="wwtlib.TourStop"></value>
        this._owner = value;
        return value;
    },
    
    _url: '',
    
    get_url: function wwtlib_Overlay$get_url() {
        /// <value type="String"></value>
        return this._url;
    },
    set_url: function wwtlib_Overlay$set_url(value) {
        /// <value type="String"></value>
        this._url = value;
        return value;
    },
    
    _linkID: '',
    
    get_linkID: function wwtlib_Overlay$get_linkID() {
        /// <value type="String"></value>
        return this._linkID;
    },
    set_linkID: function wwtlib_Overlay$set_linkID(value) {
        /// <value type="String"></value>
        this._linkID = value;
        return value;
    },
    
    play: function wwtlib_Overlay$play() {
    },
    
    pause: function wwtlib_Overlay$pause() {
    },
    
    stop: function wwtlib_Overlay$stop() {
    },
    
    seek: function wwtlib_Overlay$seek(time) {
        /// <param name="time" type="Number">
        /// </param>
    },
    
    draw3D: function wwtlib_Overlay$draw3D(renderContext, designTime) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="designTime" type="Boolean">
        /// </param>
    },
    
    cleanUp: function wwtlib_Overlay$cleanUp() {
        if (this.texture != null) {
            this.texture = null;
        }
    },
    
    initializeTexture: function wwtlib_Overlay$initializeTexture() {
    },
    
    cleanUpGeometry: function wwtlib_Overlay$cleanUpGeometry() {
        this.currentRotation = 0;
    },
    
    initiaizeGeometry: function wwtlib_Overlay$initiaizeGeometry() {
    },
    
    updateRotation: function wwtlib_Overlay$updateRotation() {
    },
    
    _animate: false,
    
    get_animate: function wwtlib_Overlay$get_animate() {
        /// <value type="Boolean"></value>
        return this._animate;
    },
    set_animate: function wwtlib_Overlay$set_animate(value) {
        /// <value type="Boolean"></value>
        if (this._animate !== value) {
            this._animate = value;
            if (this._animate) {
                this._endX = this._x;
                this._endY = this._y;
                this._endRotationAngle = this._rotationAngle;
                this._endColor = this._color;
                this._endWidth = this._width;
                this._endHeight = this._height;
                this.cleanUpGeometry();
            }
            else {
                this._endX = this._x = this.get_x();
                this._endY = this._y = this.get_y();
                this._endRotationAngle = this._rotationAngle = this.get_rotationAngle();
                this._endColor = this._color = this.get_color();
                this._endWidth = this._width = this.get_width();
                this._endHeight = this._height = this.get_height();
                this.cleanUpGeometry();
                this._tweenFactor = 0;
            }
        }
        return value;
    },
    
    _tweenFactor: 0,
    
    get_tweenFactor: function wwtlib_Overlay$get_tweenFactor() {
        /// <value type="Number"></value>
        return this._tweenFactor;
    },
    set_tweenFactor: function wwtlib_Overlay$set_tweenFactor(value) {
        /// <value type="Number"></value>
        if (!this._animate) {
            this._tweenFactor = 0;
        }
        else {
            if (this._tweenFactor !== value) {
                this._tweenFactor = value;
                this.cleanUpGeometry();
            }
        }
        return value;
    },
    
    _endX: 0,
    _endY: 0,
    _endOpacity: 0,
    _endWidth: 0,
    _endHeight: 0,
    _endRotationAngle: 0,
    _anchor: 0,
    
    get_anchor: function wwtlib_Overlay$get_anchor() {
        /// <value type="wwtlib.OverlayAnchor"></value>
        return this._anchor;
    },
    set_anchor: function wwtlib_Overlay$set_anchor(value) {
        /// <value type="wwtlib.OverlayAnchor"></value>
        this._anchor = value;
        return value;
    },
    
    get_position: function wwtlib_Overlay$get_position() {
        /// <value type="wwtlib.Vector2d"></value>
        return wwtlib.Vector2d.create(this.get_x(), this.get_y());
    },
    set_position: function wwtlib_Overlay$set_position(value) {
        /// <value type="wwtlib.Vector2d"></value>
        this.set_x(value.x);
        this.set_y(value.y);
        return value;
    },
    
    _x: 0,
    
    get_x: function wwtlib_Overlay$get_x() {
        /// <value type="Number"></value>
        return (this._x * (1 - this._tweenFactor)) + (this._endX * this._tweenFactor);
    },
    set_x: function wwtlib_Overlay$set_x(value) {
        /// <value type="Number"></value>
        if (this._tweenFactor < 0.5) {
            if (this._x !== value) {
                this._x = value;
                this.cleanUpGeometry();
            }
        }
        else {
            if (this._endX !== value) {
                this._endX = value;
                this.cleanUpGeometry();
            }
        }
        return value;
    },
    
    _y: 0,
    
    get_y: function wwtlib_Overlay$get_y() {
        /// <value type="Number"></value>
        return (this._y * (1 - this._tweenFactor)) + (this._endY * this._tweenFactor);
    },
    set_y: function wwtlib_Overlay$set_y(value) {
        /// <value type="Number"></value>
        if (this._tweenFactor < 0.5) {
            if (this._y !== value) {
                this._y = value;
                this.cleanUpGeometry();
            }
        }
        else {
            if (this._endY !== value) {
                this._endY = value;
                this.cleanUpGeometry();
            }
        }
        return value;
    },
    
    _width: 0,
    
    get_width: function wwtlib_Overlay$get_width() {
        /// <value type="Number"></value>
        return (this._width * (1 - this._tweenFactor)) + (this._endWidth * this._tweenFactor);
    },
    set_width: function wwtlib_Overlay$set_width(value) {
        /// <value type="Number"></value>
        if (value < 5 && !!value) {
            value = 5;
        }
        if (this._tweenFactor < 0.5) {
            if (this._width !== value) {
                this._width = value;
                this.cleanUpGeometry();
            }
        }
        else {
            if (this._endWidth !== value) {
                this._endWidth = value;
                this.cleanUpGeometry();
            }
        }
        return value;
    },
    
    _height: 0,
    
    get_height: function wwtlib_Overlay$get_height() {
        /// <value type="Number"></value>
        return (this._height * (1 - this._tweenFactor)) + (this._endHeight * this._tweenFactor);
    },
    set_height: function wwtlib_Overlay$set_height(value) {
        /// <value type="Number"></value>
        if (value < 5 && !!value) {
            value = 5;
        }
        if (this._tweenFactor < 0.5) {
            if (this._height !== value) {
                this._height = value;
                this.cleanUpGeometry();
            }
        }
        else {
            if (this._endHeight !== value) {
                this._endHeight = value;
                this.cleanUpGeometry();
            }
        }
        return value;
    },
    
    get_color: function wwtlib_Overlay$get_color() {
        /// <value type="wwtlib.Color"></value>
        var red = parseInt(((this._color.r * (1 - this._tweenFactor)) + (this._endColor.r * this._tweenFactor)));
        var green = parseInt(((this._color.g * (1 - this._tweenFactor)) + (this._endColor.g * this._tweenFactor)));
        var blue = parseInt(((this._color.b * (1 - this._tweenFactor)) + (this._endColor.b * this._tweenFactor)));
        var alpha = parseInt(((this._color.a * (1 - this._tweenFactor)) + (this._endColor.a * this._tweenFactor)));
        return wwtlib.Color.fromArgb(Math.max(0, Math.min(255, alpha)), Math.max(0, Math.min(255, red)), Math.max(0, Math.min(255, green)), Math.max(0, Math.min(255, blue)));
    },
    set_color: function wwtlib_Overlay$set_color(value) {
        /// <value type="wwtlib.Color"></value>
        if (this._tweenFactor < 0.5) {
            if (this._color !== value) {
                this._color = value;
                this.cleanUpGeometry();
            }
        }
        else {
            if (this._endColor !== value) {
                this._endColor = value;
                this.cleanUpGeometry();
            }
        }
        return value;
    },
    
    _opacity: 0.5,
    
    get_opacity: function wwtlib_Overlay$get_opacity() {
        /// <value type="Number"></value>
        return this.get_color().a / 255;
    },
    set_opacity: function wwtlib_Overlay$set_opacity(value) {
        /// <value type="Number"></value>
        var col = this.get_color();
        this.set_color(wwtlib.Color.fromArgb(Math.min(255, parseInt((value * 255))), col.r, col.g, col.b));
        this._opacity = value;
        return value;
    },
    
    _rotationAngle: 0,
    currentRotation: 0,
    
    get_rotationAngle: function wwtlib_Overlay$get_rotationAngle() {
        /// <value type="Number"></value>
        return (this._rotationAngle * (1 - this._tweenFactor)) + (this._endRotationAngle * this._tweenFactor);
    },
    set_rotationAngle: function wwtlib_Overlay$set_rotationAngle(value) {
        /// <value type="Number"></value>
        if (this._tweenFactor < 0.5) {
            if (this._rotationAngle !== value) {
                this._rotationAngle = value;
                this.cleanUpGeometry();
            }
        }
        else {
            if (this._endRotationAngle !== value) {
                this._endRotationAngle = value;
                this.cleanUpGeometry();
            }
        }
        return value;
    },
    
    texture: null,
    
    hitTest: function wwtlib_Overlay$hitTest(pntTest) {
        /// <param name="pntTest" type="wwtlib.Vector2d">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    _bounds: null,
    
    get_bounds: function wwtlib_Overlay$get_bounds() {
        /// <value type="wwtlib.Rectangle"></value>
        return this._bounds;
    },
    set_bounds: function wwtlib_Overlay$set_bounds(value) {
        /// <value type="wwtlib.Rectangle"></value>
        this._bounds = value;
        return value;
    },
    
    get_interpolationType: function wwtlib_Overlay$get_interpolationType() {
        /// <value type="wwtlib.InterpolationType"></value>
        return this._interpolationType;
    },
    set_interpolationType: function wwtlib_Overlay$set_interpolationType(value) {
        /// <value type="wwtlib.InterpolationType"></value>
        this._interpolationType = value;
        return value;
    },
    
    _initOverlayFromXml: function wwtlib_Overlay$_initOverlayFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        this.id = node.attributes.getNamedItem('Id').nodeValue;
        this.set_name(node.attributes.getNamedItem('Name').nodeValue);
        this._x = parseFloat(node.attributes.getNamedItem('X').nodeValue);
        this._y = parseFloat(node.attributes.getNamedItem('Y').nodeValue);
        this._width = parseFloat(node.attributes.getNamedItem('Width').nodeValue);
        this._height = parseFloat(node.attributes.getNamedItem('Height').nodeValue);
        this._rotationAngle = parseFloat(node.attributes.getNamedItem('Rotation').nodeValue);
        this._color = wwtlib.Color.load(node.attributes.getNamedItem('Color').nodeValue);
        if (node.attributes.getNamedItem('Url') != null) {
            this.set_url(node.attributes.getNamedItem('Url').nodeValue);
        }
        if (node.attributes.getNamedItem('LinkID') != null) {
            this.set_linkID(node.attributes.getNamedItem('LinkID').nodeValue);
        }
        if (node.attributes.getNamedItem('Animate') != null) {
            this._animate = Boolean.parse(node.attributes.getNamedItem('Animate').nodeValue);
            if (this._animate) {
                this._endX = parseFloat(node.attributes.getNamedItem('EndX').nodeValue);
                this._endY = parseFloat(node.attributes.getNamedItem('EndY').nodeValue);
                this._endColor = wwtlib.Color.load(node.attributes.getNamedItem('EndColor').nodeValue);
                this._endWidth = parseFloat(node.attributes.getNamedItem('EndWidth').nodeValue);
                this._endHeight = parseFloat(node.attributes.getNamedItem('EndHeight').nodeValue);
                this._endRotationAngle = parseFloat(node.attributes.getNamedItem('EndRotation').nodeValue);
                if (node.attributes.getNamedItem('InterpolationType') != null) {
                    switch (node.attributes.getNamedItem('InterpolationType').nodeValue) {
                        case 'Linear':
                            this.set_interpolationType(0);
                            break;
                        case 'EaseIn':
                            this.set_interpolationType(1);
                            break;
                        case 'EaseOut':
                            this.set_interpolationType(2);
                            break;
                        case 'EaseInOut':
                            this.set_interpolationType(3);
                            break;
                        case 'Exponential':
                            this.set_interpolationType(4);
                            break;
                        case 'Default':
                            this.set_interpolationType(5);
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        this.initializeFromXml(node);
    },
    
    initializeFromXml: function wwtlib_Overlay$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
    },
    
    toString: function wwtlib_Overlay$toString() {
        /// <returns type="String"></returns>
        return this.get_name();
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.BitmapOverlay

wwtlib.BitmapOverlay = function wwtlib_BitmapOverlay() {
    /// <field name="_filename$1" type="String">
    /// </field>
    /// <field name="_textureReady$1" type="Boolean">
    /// </field>
    /// <field name="_imageBrush$1" type="Object" domElement="true">
    /// </field>
    wwtlib.BitmapOverlay.initializeBase(this);
}
wwtlib.BitmapOverlay.create = function wwtlib_BitmapOverlay$create(renderContext, owner, image) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="owner" type="wwtlib.TourStop">
    /// </param>
    /// <param name="image" type="Object" domElement="true">
    /// </param>
    /// <returns type="wwtlib.BitmapOverlay"></returns>
    var temp = new wwtlib.BitmapOverlay();
    temp.set_owner(owner);
    temp._filename$1 = (wwtlib.Overlay.nextId++).toString() + '.png';
    temp.set_name(owner.getNextDefaultName('Image'));
    temp.set_x(0);
    temp.set_y(0);
    return temp;
}
wwtlib.BitmapOverlay.prototype = {
    _filename$1: null,
    
    copy: function wwtlib_BitmapOverlay$copy(owner) {
        /// <param name="owner" type="wwtlib.TourStop">
        /// </param>
        /// <returns type="wwtlib.BitmapOverlay"></returns>
        var newBmpOverlay = new wwtlib.BitmapOverlay();
        newBmpOverlay.set_owner(owner);
        newBmpOverlay._filename$1 = this._filename$1;
        newBmpOverlay.set_x(this.get_x());
        newBmpOverlay.set_y(this.get_y());
        newBmpOverlay.set_width(this.get_width());
        newBmpOverlay.set_height(this.get_height());
        newBmpOverlay.set_color(this.get_color());
        newBmpOverlay.set_opacity(this.get_opacity());
        newBmpOverlay.set_rotationAngle(this.get_rotationAngle());
        newBmpOverlay.set_name(this.get_name() + ' - Copy');
        return newBmpOverlay;
    },
    
    cleanUp: function wwtlib_BitmapOverlay$cleanUp() {
        this.texture = null;
    },
    
    _textureReady$1: false,
    
    initializeTexture: function wwtlib_BitmapOverlay$initializeTexture() {
        try {
            this.texture = this.get_owner().get_owner().getCachedTexture(this._filename$1, ss.Delegate.create(this, function() {
                this._textureReady$1 = true;
            }));
            if (!this.get_width() && !this.get_height()) {
            }
        }
        catch ($e1) {
        }
    },
    
    _imageBrush$1: null,
    
    draw3D: function wwtlib_BitmapOverlay$draw3D(renderContext, designTime) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="designTime" type="Boolean">
        /// </param>
        if (this.texture == null) {
            this.initializeTexture();
        }
        if (!this._textureReady$1) {
            return;
        }
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.globalAlpha = this.get_opacity();
        ctx.drawImage(this.texture, -this.get_width() / 2, -this.get_height() / 2, this.get_width(), this.get_height());
        ctx.restore();
    },
    
    initializeFromXml: function wwtlib_BitmapOverlay$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        var bitmap = wwtlib._util.selectSingleNode(node, 'Bitmap');
        this._filename$1 = bitmap.attributes.getNamedItem('Filename').nodeValue;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TextOverlay

wwtlib.TextOverlay = function wwtlib_TextOverlay() {
    /// <field name="textObject" type="wwtlib.TextObject">
    /// </field>
    wwtlib.TextOverlay.initializeBase(this);
}
wwtlib.TextOverlay.prototype = {
    textObject: null,
    
    get_color: function wwtlib_TextOverlay$get_color() {
        /// <value type="wwtlib.Color"></value>
        return wwtlib.TextOverlay.callBaseMethod(this, 'get_color');
    },
    set_color: function wwtlib_TextOverlay$set_color(value) {
        /// <value type="wwtlib.Color"></value>
        if (this.textObject.forgroundColor !== value) {
            this.textObject.forgroundColor = value;
            wwtlib.TextOverlay.callBaseMethod(this, 'set_color', [ value ]);
            this.cleanUp();
        }
        return value;
    },
    
    draw3D: function wwtlib_TextOverlay$draw3D(renderContext, designTime) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="designTime" type="Boolean">
        /// </param>
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.globalAlpha = this.get_opacity();
        ctx.fillStyle = this.textObject.forgroundColor.toString();
        ctx.font = ((this.textObject.italic) ? 'italic' : 'normal') + ' ' + ((this.textObject.bold) ? 'bold' : 'normal') + ' ' + Math.round(this.textObject.fontSize * 1.2).toString() + 'px ' + this.textObject.fontName;
        ctx.textBaseline = 'top';
        var text = this.textObject.text;
        if (text.indexOf('{$') > -1) {
            if (text.indexOf('{$DATE}') > -1) {
                var date = wwtlib.SpaceTimeController.get_now().format('yyyy/MM/dd');
                text = text.replaceAll('{$DATE}', date);
            }
            if (text.indexOf('{$TIME}') > -1) {
                var time = wwtlib.SpaceTimeController.get_now().format('HH:mm:ss');
                text = text.replaceAll('{$TIME}', time);
            }
            text = text.replaceAll('{$LAT}', wwtlib.Coordinates.formatDMS(wwtlib.WWTControl.singleton.renderContext.viewCamera.lat));
            text = text.replaceAll('{$LNG}', wwtlib.Coordinates.formatDMS(wwtlib.WWTControl.singleton.renderContext.viewCamera.lat));
            text = text.replaceAll('{$RA}', wwtlib.Coordinates.formatDMS(wwtlib.WWTControl.singleton.renderContext.viewCamera.get_RA()));
            text = text.replaceAll('{$DEC}', wwtlib.Coordinates.formatDMS(wwtlib.WWTControl.singleton.renderContext.viewCamera.get_dec()));
            text = text.replaceAll('{$FOV}', wwtlib.Coordinates.formatDMS(wwtlib.WWTControl.singleton.renderContext.get_fovAngle()));
        }
        var lines = text.split('\n');
        var baseline = -(this.get_height() / 2);
        var lineSpace = this.textObject.fontSize * 1.7;
        var $enum1 = ss.IEnumerator.getEnumerator(lines);
        while ($enum1.moveNext()) {
            var line = $enum1.current;
            var parts = wwtlib._util.getWrappedText(ctx, line, this.get_width());
            var $enum2 = ss.IEnumerator.getEnumerator(parts);
            while ($enum2.moveNext()) {
                var part = $enum2.current;
                ctx.fillText(part, -this.get_width() / 2, baseline);
                baseline += lineSpace;
            }
        }
        ctx.restore();
    },
    
    initializeTexture: function wwtlib_TextOverlay$initializeTexture() {
    },
    
    initializeFromXml: function wwtlib_TextOverlay$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        var text = wwtlib._util.selectSingleNode(node, 'Text');
        this.textObject = wwtlib.TextObject._fromXml(wwtlib._util.selectSingleNode(text, 'TextObject'));
    },
    
    initiaizeGeometry: function wwtlib_TextOverlay$initiaizeGeometry() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ShapeOverlay

wwtlib.ShapeOverlay = function wwtlib_ShapeOverlay() {
    /// <field name="_shapeType$1" type="wwtlib.ShapeType">
    /// </field>
    this._shapeType$1 = 1;
    wwtlib.ShapeOverlay.initializeBase(this);
}
wwtlib.ShapeOverlay.prototype = {
    
    get_shapeType: function wwtlib_ShapeOverlay$get_shapeType() {
        /// <value type="wwtlib.ShapeType"></value>
        return this._shapeType$1;
    },
    set_shapeType: function wwtlib_ShapeOverlay$set_shapeType(value) {
        /// <value type="wwtlib.ShapeType"></value>
        this._shapeType$1 = value;
        this.cleanUpGeometry();
        return value;
    },
    
    draw3D: function wwtlib_ShapeOverlay$draw3D(renderContext, designTime) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="designTime" type="Boolean">
        /// </param>
        switch (this._shapeType$1) {
            case 0:
                this._createCircleGeometry$1(renderContext);
                break;
            case 1:
                this._createRectGeometry$1(renderContext);
                break;
            case 6:
                this._createOpenRectGeometry$1(renderContext);
                break;
            case 2:
                this._createStarGeometry$1(renderContext);
                break;
            case 3:
                this._createDonutGeometry$1(renderContext);
                break;
            case 4:
                this._createArrowGeometry$1(renderContext);
                break;
            case 5:
                this._createLineGeometry$1(renderContext);
                break;
            default:
                break;
        }
    },
    
    initiaizeGeometry: function wwtlib_ShapeOverlay$initiaizeGeometry() {
    },
    
    _createLineGeometry$1: function wwtlib_ShapeOverlay$_createLineGeometry$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        var ctx = renderContext.device;
        ctx.save();
        var radius = this.get_width() / 2;
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.moveTo(-radius, 0);
        ctx.lineTo(radius, 0);
        ctx.lineWidth = 9;
        ctx.strokeStyle = this.get_color().toString();
        ctx.globalAlpha = this.get_opacity();
        ctx.stroke();
        ctx.restore();
    },
    
    _createOpenRectGeometry$1: function wwtlib_ShapeOverlay$_createOpenRectGeometry$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.beginPath();
        ctx.moveTo(-this.get_width() / 2, -this.get_height() / 2);
        ctx.lineTo(this.get_width() / 2, -this.get_height() / 2);
        ctx.lineTo(this.get_width() / 2, this.get_height() / 2);
        ctx.lineTo(-this.get_width() / 2, this.get_height() / 2);
        ctx.closePath();
        ctx.lineWidth = 9;
        ctx.strokeStyle = this.get_color().toString();
        ctx.globalAlpha = this.get_opacity();
        ctx.stroke();
        ctx.restore();
    },
    
    _createRectGeometry$1: function wwtlib_ShapeOverlay$_createRectGeometry$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.beginPath();
        ctx.moveTo(-this.get_width() / 2, -this.get_height() / 2);
        ctx.lineTo(this.get_width() / 2, -this.get_height() / 2);
        ctx.lineTo(this.get_width() / 2, this.get_height() / 2);
        ctx.lineTo(-this.get_width() / 2, this.get_height() / 2);
        ctx.closePath();
        ctx.lineWidth = 0;
        ctx.fillStyle = this.get_color().toString();
        ctx.globalAlpha = this.get_opacity();
        ctx.fill();
        ctx.restore();
    },
    
    _createStarGeometry$1: function wwtlib_ShapeOverlay$_createStarGeometry$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.beginPath();
        var centerX = 0;
        var centerY = 0;
        var radius = this.get_width() / 2;
        var radiansPerSegment = (Math.PI * 2) / 5;
        var first = true;
        for (var i = 0; i < 5; i++) {
            var rads = i * radiansPerSegment - (Math.PI / 2);
            if (first) {
                first = false;
                ctx.moveTo(centerX + Math.cos(rads) * (this.get_width() / 2), centerY + Math.sin(rads) * (this.get_height() / 2));
            }
            else {
                ctx.lineTo(centerX + Math.cos(rads) * (this.get_width() / 2), centerY + Math.sin(rads) * (this.get_height() / 2));
            }
            var rads2 = i * radiansPerSegment + (radiansPerSegment / 2) - (Math.PI / 2);
            ctx.lineTo(centerX + Math.cos(rads2) * (this.get_width() / 5.3), centerY + Math.sin(rads2) * (this.get_height() / 5.3));
        }
        ctx.closePath();
        ctx.lineWidth = 0;
        ctx.fillStyle = this.get_color().toString();
        ctx.globalAlpha = this.get_opacity();
        ctx.fill();
        ctx.restore();
    },
    
    _createArrowGeometry$1: function wwtlib_ShapeOverlay$_createArrowGeometry$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.beginPath();
        ctx.moveTo((-(this.get_width() / 2)), (-(this.get_height() / 4)));
        ctx.lineTo((this.get_width() / 4), (-(this.get_height() / 4)));
        ctx.lineTo((this.get_width() / 4), (-(this.get_height() / 2)));
        ctx.lineTo((this.get_width() / 2), 0);
        ctx.lineTo((this.get_width() / 4), (this.get_height() / 2));
        ctx.lineTo((this.get_width() / 4), (this.get_height() / 4));
        ctx.lineTo((-(this.get_width() / 2)), (this.get_height() / 4));
        ctx.closePath();
        ctx.lineWidth = 0;
        ctx.fillStyle = this.get_color().toString();
        ctx.globalAlpha = this.get_opacity();
        ctx.fill();
        ctx.restore();
    },
    
    _createDonutGeometry$1: function wwtlib_ShapeOverlay$_createDonutGeometry$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.scale(1, this.get_height() / this.get_width());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.beginPath();
        ctx.arc(0, 0, this.get_width() / 2, 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.lineWidth = 9;
        ctx.strokeStyle = this.get_color().toString();
        ctx.globalAlpha = this.get_opacity();
        ctx.stroke();
        ctx.restore();
    },
    
    _createCircleGeometry$1: function wwtlib_ShapeOverlay$_createCircleGeometry$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        var ctx = renderContext.device;
        ctx.save();
        ctx.scale(1, this.get_width() / this.get_height());
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * wwtlib.Overlay.RC);
        ctx.beginPath();
        ctx.arc(0, 0, this.get_width(), 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.lineWidth = 0;
        ctx.fillStyle = this.get_color().toString();
        ctx.globalAlpha = this.get_opacity();
        ctx.fill();
        ctx.restore();
    },
    
    initializeTexture: function wwtlib_ShapeOverlay$initializeTexture() {
    },
    
    cleanUpGeometry: function wwtlib_ShapeOverlay$cleanUpGeometry() {
        wwtlib.ShapeOverlay.callBaseMethod(this, 'cleanUpGeometry');
        this.cleanUp();
    },
    
    initializeFromXml: function wwtlib_ShapeOverlay$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        var shape = wwtlib._util.selectSingleNode(node, 'Shape');
        switch (shape.attributes.getNamedItem('ShapeType').nodeValue) {
            case 'Circle':
                this._shapeType$1 = 0;
                break;
            case 'Rectagle':
                this._shapeType$1 = 1;
                break;
            case 'Star':
                this._shapeType$1 = 2;
                break;
            case 'Donut':
                this._shapeType$1 = 3;
                break;
            case 'Arrow':
                this._shapeType$1 = 4;
                break;
            case 'Line':
                this._shapeType$1 = 5;
                break;
            case 'OpenRectagle':
            default:
                this._shapeType$1 = 6;
                break;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.AudioOverlay

wwtlib.AudioOverlay = function wwtlib_AudioOverlay() {
    /// <field name="_filename$1" type="String">
    /// </field>
    /// <field name="_audio$1" type="Object" domElement="true">
    /// </field>
    /// <field name="_volume$1" type="Number" integer="true">
    /// </field>
    /// <field name="_mute$1" type="Boolean">
    /// </field>
    /// <field name="_position$1" type="Number">
    /// </field>
    /// <field name="_audioReady$1" type="Boolean">
    /// </field>
    /// <field name="_trackType$1" type="wwtlib.AudioType">
    /// </field>
    this._trackType$1 = 0;
    wwtlib.AudioOverlay.initializeBase(this);
    this.isDesignTimeOnly = true;
}
wwtlib.AudioOverlay.prototype = {
    _filename$1: null,
    _audio$1: null,
    _volume$1: 100,
    _mute$1: false,
    
    get_mute: function wwtlib_AudioOverlay$get_mute() {
        /// <value type="Boolean"></value>
        return this._mute$1;
    },
    set_mute: function wwtlib_AudioOverlay$set_mute(value) {
        /// <value type="Boolean"></value>
        this._mute$1 = value;
        this.set_volume(this.get_volume());
        return value;
    },
    
    get_volume: function wwtlib_AudioOverlay$get_volume() {
        /// <value type="Number" integer="true"></value>
        return this._volume$1;
    },
    set_volume: function wwtlib_AudioOverlay$set_volume(value) {
        /// <value type="Number" integer="true"></value>
        this._volume$1 = value;
        if (this._audio$1 != null) {
            this._audio$1.volume = (this._mute$1) ? 0 : (this._volume$1 / 100);
        }
        return value;
    },
    
    play: function wwtlib_AudioOverlay$play() {
        if (this._audio$1 == null) {
            this.initializeTexture();
        }
        if (this._audio$1 != null && this._audioReady$1) {
            this._audio$1.play();
            this.set_volume(this.get_volume());
        }
    },
    
    pause: function wwtlib_AudioOverlay$pause() {
        if (this._audio$1 == null) {
            this.initializeTexture();
        }
        if (this._audio$1 != null && this._audioReady$1) {
            this._audio$1.pause();
        }
    },
    
    stop: function wwtlib_AudioOverlay$stop() {
        if (this._audio$1 == null) {
            this.initializeTexture();
        }
        if (this._audio$1 != null && this._audioReady$1) {
            this._audio$1.pause();
        }
    },
    
    _position$1: 0,
    
    seek: function wwtlib_AudioOverlay$seek(time) {
        /// <param name="time" type="Number">
        /// </param>
        this._position$1 = time;
        if (this._audio$1 == null) {
            this.initializeTexture();
        }
        if (this._audioReady$1) {
            if (this._audio$1.duration < time) {
                this._audio$1.pause();
            }
            else {
                this._audio$1.currentTime = this._position$1;
            }
        }
    },
    
    _audioReady$1: false,
    
    initializeTexture: function wwtlib_AudioOverlay$initializeTexture() {
        if (this._audio$1 == null) {
            this._audio$1 = document.createElement('audio');
            this._audio$1.src = this.get_owner().get_owner().getFileStream(this._filename$1);
            this._audio$1.addEventListener('canplaythrough', ss.Delegate.create(this, function() {
                this._audioReady$1 = true;
                this._audio_MediaOpened$1();
                this._audio$1.play();
            }), false);
        }
    },
    
    cleanUp: function wwtlib_AudioOverlay$cleanUp() {
        wwtlib.AudioOverlay.callBaseMethod(this, 'cleanUp');
        if (this._audio$1 != null) {
            this._audio$1.pause();
            this._audio$1.src = null;
            this._audio$1 = null;
        }
    },
    
    _audio_MediaOpened$1: function wwtlib_AudioOverlay$_audio_MediaOpened$1() {
        this._audio$1.currentTime = this._position$1;
        this._audio$1.volume = (this._mute$1) ? 0 : (this._volume$1 / 100);
    },
    
    get_trackType: function wwtlib_AudioOverlay$get_trackType() {
        /// <value type="wwtlib.AudioType"></value>
        return this._trackType$1;
    },
    set_trackType: function wwtlib_AudioOverlay$set_trackType(value) {
        /// <value type="wwtlib.AudioType"></value>
        this._trackType$1 = value;
        return value;
    },
    
    initializeFromXml: function wwtlib_AudioOverlay$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        var audio = wwtlib._util.selectSingleNode(node, 'Audio');
        this._filename$1 = audio.attributes.getNamedItem('Filename').nodeValue;
        if (audio.attributes.getNamedItem('Volume') != null) {
            this._volume$1 = parseInt(audio.attributes.getNamedItem('Volume').nodeValue);
        }
        if (audio.attributes.getNamedItem('Mute') != null) {
            this._mute$1 = Boolean.parse(audio.attributes.getNamedItem('Mute').nodeValue);
        }
        if (audio.attributes.getNamedItem('TrackType') != null) {
            switch (audio.attributes.getNamedItem('TrackType').nodeValue) {
                case 'Music':
                    this._trackType$1 = 0;
                    break;
                case 'Voice':
                default:
                    this._trackType$1 = 1;
                    break;
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.FlipbookOverlay

wwtlib.FlipbookOverlay = function wwtlib_FlipbookOverlay() {
    /// <field name="_filename$1" type="String">
    /// </field>
    /// <field name="_loopType$1" type="wwtlib.LoopTypes">
    /// </field>
    /// <field name="_startFrame$1" type="Number" integer="true">
    /// </field>
    /// <field name="_framesList$1" type="Array">
    /// </field>
    /// <field name="_frameSequence$1" type="String">
    /// </field>
    /// <field name="_frames$1" type="Number" integer="true">
    /// </field>
    /// <field name="_framesX$1" type="Number" integer="true">
    /// </field>
    /// <field name="_framesY$1" type="Number" integer="true">
    /// </field>
    /// <field name="_textureReady$1" type="Boolean">
    /// </field>
    /// <field name="_currentFrame$1" type="Number" integer="true">
    /// </field>
    /// <field name="_cellHeight$1" type="Number" integer="true">
    /// </field>
    /// <field name="_cellWidth$1" type="Number" integer="true">
    /// </field>
    /// <field name="_timeStart$1" type="Date">
    /// </field>
    /// <field name="_playing$1" type="Boolean">
    /// </field>
    this._loopType$1 = 1;
    this._framesList$1 = [];
    this._timeStart$1 = Date.get_now();
    wwtlib.FlipbookOverlay.initializeBase(this);
}
wwtlib.FlipbookOverlay.prototype = {
    _filename$1: null,
    
    get_loopType: function wwtlib_FlipbookOverlay$get_loopType() {
        /// <value type="wwtlib.LoopTypes"></value>
        return this._loopType$1;
    },
    set_loopType: function wwtlib_FlipbookOverlay$set_loopType(value) {
        /// <value type="wwtlib.LoopTypes"></value>
        this._loopType$1 = value;
        return value;
    },
    
    _startFrame$1: 0,
    
    get_startFrame: function wwtlib_FlipbookOverlay$get_startFrame() {
        /// <value type="Number" integer="true"></value>
        return this._startFrame$1;
    },
    set_startFrame: function wwtlib_FlipbookOverlay$set_startFrame(value) {
        /// <value type="Number" integer="true"></value>
        this._startFrame$1 = value;
        return value;
    },
    
    _frameSequence$1: null,
    
    get_frameSequence: function wwtlib_FlipbookOverlay$get_frameSequence() {
        /// <value type="String"></value>
        return this._frameSequence$1;
    },
    set_frameSequence: function wwtlib_FlipbookOverlay$set_frameSequence(value) {
        /// <value type="String"></value>
        if (this._frameSequence$1 !== value) {
            this._frameSequence$1 = value;
            this._framesList$1 = [];
            if (!String.isNullOrEmpty(this._frameSequence$1)) {
                try {
                    var parts = this._frameSequence$1.split(',');
                    var $enum1 = ss.IEnumerator.getEnumerator(parts);
                    while ($enum1.moveNext()) {
                        var part = $enum1.current;
                        var x = parseInt(part.trim());
                        this._framesList$1.add(x);
                    }
                }
                catch ($e2) {
                }
            }
        }
        return value;
    },
    
    _frames$1: 1,
    
    get_frames: function wwtlib_FlipbookOverlay$get_frames() {
        /// <value type="Number" integer="true"></value>
        return this._frames$1;
    },
    set_frames: function wwtlib_FlipbookOverlay$set_frames(value) {
        /// <value type="Number" integer="true"></value>
        this._frames$1 = value;
        return value;
    },
    
    _framesX$1: 8,
    
    get_framesX: function wwtlib_FlipbookOverlay$get_framesX() {
        /// <value type="Number" integer="true"></value>
        return this._framesX$1;
    },
    set_framesX: function wwtlib_FlipbookOverlay$set_framesX(value) {
        /// <value type="Number" integer="true"></value>
        this._framesX$1 = value;
        return value;
    },
    
    _framesY$1: 8,
    
    get_framesY: function wwtlib_FlipbookOverlay$get_framesY() {
        /// <value type="Number" integer="true"></value>
        return this._framesY$1;
    },
    set_framesY: function wwtlib_FlipbookOverlay$set_framesY(value) {
        /// <value type="Number" integer="true"></value>
        this._framesY$1 = value;
        return value;
    },
    
    copy: function wwtlib_FlipbookOverlay$copy(owner) {
        /// <param name="owner" type="wwtlib.TourStop">
        /// </param>
        /// <returns type="wwtlib.FlipbookOverlay"></returns>
        var newFlipbookOverlay = new wwtlib.FlipbookOverlay();
        newFlipbookOverlay.set_owner(owner);
        newFlipbookOverlay._filename$1 = this._filename$1;
        newFlipbookOverlay.set_x(this.get_x());
        newFlipbookOverlay.set_y(this.get_y());
        newFlipbookOverlay.set_width(this.get_width());
        newFlipbookOverlay.set_height(this.get_height());
        newFlipbookOverlay.set_color(this.get_color());
        newFlipbookOverlay.set_opacity(this.get_opacity());
        newFlipbookOverlay.set_rotationAngle(this.get_rotationAngle());
        newFlipbookOverlay.set_name(this.get_name() + ' - Copy');
        newFlipbookOverlay.set_startFrame(this.get_startFrame());
        newFlipbookOverlay.set_frames(this.get_frames());
        newFlipbookOverlay.set_loopType(this.get_loopType());
        newFlipbookOverlay.set_frameSequence(this.get_frameSequence());
        newFlipbookOverlay.set_framesX(this.get_framesX());
        newFlipbookOverlay.set_framesY(this.get_framesY());
        return newFlipbookOverlay;
    },
    
    cleanUp: function wwtlib_FlipbookOverlay$cleanUp() {
        this.texture = null;
    },
    
    _textureReady$1: false,
    
    initializeTexture: function wwtlib_FlipbookOverlay$initializeTexture() {
        try {
            var colorKey = this._filename$1.toLowerCase().endsWith('.jpg');
            this.texture = this.get_owner().get_owner().getCachedTexture(this._filename$1, ss.Delegate.create(this, function() {
                this._textureReady$1 = true;
            }));
        }
        catch ($e1) {
        }
    },
    
    initializeFromXml: function wwtlib_FlipbookOverlay$initializeFromXml(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        var flipbook = wwtlib._util.selectSingleNode(node, 'Flipbook');
        this._filename$1 = flipbook.attributes.getNamedItem('Filename').nodeValue;
        this._frames$1 = parseInt(flipbook.attributes.getNamedItem('Frames').nodeValue);
        switch (flipbook.attributes.getNamedItem('Loop').nodeValue) {
            case 'Loop':
                this._loopType$1 = 0;
                break;
            case 'UpDown':
                this._loopType$1 = 1;
                break;
            case 'Down':
                this._loopType$1 = 2;
                break;
            case 'UpDownOnce':
                this._loopType$1 = 3;
                break;
            case 'Once':
                this._loopType$1 = 4;
                break;
            case 'Begin':
                this._loopType$1 = 5;
                break;
            case 'End':
                this._loopType$1 = 6;
                break;
            default:
                break;
        }
        if (flipbook.attributes.getNamedItem('FramesX') != null) {
            this.set_framesX(parseInt(flipbook.attributes.getNamedItem('FramesX').nodeValue));
        }
        if (flipbook.attributes.getNamedItem('FramesY') != null) {
            this.set_framesY(parseInt(flipbook.attributes.getNamedItem('FramesY').nodeValue));
        }
        if (flipbook.attributes.getNamedItem('StartFrame') != null) {
            this.set_startFrame(parseInt(flipbook.attributes.getNamedItem('StartFrame').nodeValue));
        }
        if (flipbook.attributes.getNamedItem('FrameSequence') != null) {
            this.set_frameSequence(flipbook.attributes.getNamedItem('FrameSequence').nodeValue);
        }
    },
    
    _currentFrame$1: 0,
    _cellHeight$1: 256,
    _cellWidth$1: 256,
    _playing$1: true,
    
    play: function wwtlib_FlipbookOverlay$play() {
        this._playing$1 = true;
        this._timeStart$1 = Date.get_now();
    },
    
    pause: function wwtlib_FlipbookOverlay$pause() {
        this._playing$1 = false;
    },
    
    stop: function wwtlib_FlipbookOverlay$stop() {
        this._playing$1 = false;
        this._currentFrame$1 = 0;
    },
    
    initiaizeGeometry: function wwtlib_FlipbookOverlay$initiaizeGeometry() {
        var frameCount = this._frames$1;
        if (!String.isNullOrEmpty(this._frameSequence$1)) {
            frameCount = this._framesList$1.length;
        }
        if (this._playing$1) {
            var ts = Date.get_now() - this._timeStart$1;
            switch (this._loopType$1) {
                case 0:
                    this._currentFrame$1 = parseInt(((ts / 1000 * 24) % frameCount)) + this._startFrame$1;
                    break;
                case 1:
                    this._currentFrame$1 = Math.abs(parseInt(((ts / 1000 * 24 + frameCount) % (frameCount * 2 - 1))) - (frameCount - 1)) + this._startFrame$1;
                    if (this._currentFrame$1 < 0 || this._currentFrame$1 > frameCount - 1) {
                        var p = 0;
                    }
                    break;
                case 2:
                    this._currentFrame$1 = Math.max(0, frameCount - parseInt(((ts / 1000 * 24) % frameCount))) + this._startFrame$1;
                    break;
                case 3:
                    var temp = Math.min(ts / 1000 * 24, frameCount * 2 + 1) + frameCount;
                    this._currentFrame$1 = Math.abs((temp % (frameCount * 2 - 1)) - (frameCount - 1)) + this._startFrame$1;
                    break;
                case 4:
                    this._currentFrame$1 = Math.min(frameCount - 1, parseInt((ts / 1000 * 24)));
                    break;
                case 5:
                    this._currentFrame$1 = this._startFrame$1;
                    break;
                case 6:
                    this._currentFrame$1 = (frameCount - 1) + this._startFrame$1;
                    break;
                default:
                    this._currentFrame$1 = this._startFrame$1;
                    break;
            }
        }
        if (!String.isNullOrEmpty(this._frameSequence$1)) {
            if (this._currentFrame$1 < this._framesList$1.length && this._currentFrame$1 > -1) {
                this._currentFrame$1 = this._framesList$1[this._currentFrame$1];
            }
            else {
                this._currentFrame$1 = 0;
            }
        }
        this.currentRotation = 0;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TextObject

wwtlib.TextObject = function wwtlib_TextObject() {
    /// <field name="text" type="String">
    /// </field>
    /// <field name="bold" type="Boolean">
    /// </field>
    /// <field name="italic" type="Boolean">
    /// </field>
    /// <field name="underline" type="Boolean">
    /// </field>
    /// <field name="fontSize" type="Number">
    /// </field>
    /// <field name="fontName" type="String">
    /// </field>
    /// <field name="forgroundColor" type="wwtlib.Color">
    /// </field>
    /// <field name="backgroundColor" type="wwtlib.Color">
    /// </field>
    /// <field name="borderStyle" type="wwtlib.TextBorderStyle">
    /// </field>
}
wwtlib.TextObject.create = function wwtlib_TextObject$create(text, bold, italic, underline, fontSize, fontName, forgroundColor, backgroundColor, borderStyle) {
    /// <param name="text" type="String">
    /// </param>
    /// <param name="bold" type="Boolean">
    /// </param>
    /// <param name="italic" type="Boolean">
    /// </param>
    /// <param name="underline" type="Boolean">
    /// </param>
    /// <param name="fontSize" type="Number">
    /// </param>
    /// <param name="fontName" type="String">
    /// </param>
    /// <param name="forgroundColor" type="wwtlib.Color">
    /// </param>
    /// <param name="backgroundColor" type="wwtlib.Color">
    /// </param>
    /// <param name="borderStyle" type="wwtlib.TextBorderStyle">
    /// </param>
    /// <returns type="wwtlib.TextObject"></returns>
    var temp = new wwtlib.TextObject();
    temp.text = text;
    temp.bold = bold;
    temp.italic = italic;
    temp.underline = underline;
    temp.fontSize = fontSize;
    temp.fontName = fontName;
    temp.forgroundColor = forgroundColor;
    temp.backgroundColor = backgroundColor;
    temp.borderStyle = borderStyle;
    return temp;
}
wwtlib.TextObject._fromXml = function wwtlib_TextObject$_fromXml(node) {
    /// <param name="node" type="XmlNode">
    /// </param>
    /// <returns type="wwtlib.TextObject"></returns>
    var newTextObject = new wwtlib.TextObject();
    newTextObject.text = wwtlib._util.getInnerText(node);
    newTextObject.borderStyle = 0;
    newTextObject.bold = Boolean.parse(node.attributes.getNamedItem('Bold').nodeValue);
    newTextObject.italic = Boolean.parse(node.attributes.getNamedItem('Italic').nodeValue);
    newTextObject.underline = Boolean.parse(node.attributes.getNamedItem('Underline').nodeValue);
    newTextObject.fontSize = parseFloat(node.attributes.getNamedItem('FontSize').nodeValue);
    newTextObject.fontName = node.attributes.getNamedItem('FontName').nodeValue;
    newTextObject.forgroundColor = wwtlib.Color.load(node.attributes.getNamedItem('ForgroundColor').nodeValue);
    newTextObject.backgroundColor = wwtlib.Color.load(node.attributes.getNamedItem('BackgroundColor').nodeValue);
    if (node.attributes.getNamedItem('BorderStyle') != null) {
        switch (node.attributes.getNamedItem('BorderStyle').nodeValue) {
            case 'None':
                newTextObject.borderStyle = 0;
                break;
            case 'Tight':
                newTextObject.borderStyle = 1;
                break;
            case 'Small':
                newTextObject.borderStyle = 2;
                break;
            case 'Medium':
                newTextObject.borderStyle = 3;
                break;
            case 'Large':
                newTextObject.borderStyle = 4;
                break;
            default:
                break;
        }
    }
    return newTextObject;
}
wwtlib.TextObject.prototype = {
    text: null,
    bold: false,
    italic: false,
    underline: false,
    fontSize: 0,
    fontName: null,
    forgroundColor: null,
    backgroundColor: null,
    borderStyle: 0,
    
    toString: function wwtlib_TextObject$toString() {
        /// <returns type="String"></returns>
        return this.text;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TourDocument

wwtlib.TourDocument = function wwtlib_TourDocument() {
    /// <field name="_tourDirty" type="Number" integer="true">
    /// </field>
    /// <field name="_workingDirectory" type="String">
    /// </field>
    /// <field name="url" type="String">
    /// </field>
    /// <field name="_webFile" type="wwtlib.WebFile">
    /// </field>
    /// <field name="_callMe" type="Function">
    /// </field>
    /// <field name="_tagId" type="String">
    /// </field>
    /// <field name="_representativeThumbnailTourstop" type="Number" integer="true">
    /// </field>
    /// <field name="_id" type="String">
    /// </field>
    /// <field name="_title" type="String">
    /// </field>
    /// <field name="_runTime" type="Number" integer="true">
    /// </field>
    /// <field name="_lastDirtyCheck" type="Number" integer="true">
    /// </field>
    /// <field name="_description" type="String">
    /// </field>
    /// <field name="_attributesAndCredits" type="String">
    /// </field>
    /// <field name="_authorEmailOther" type="String">
    /// </field>
    /// <field name="_authorEmail" type="String">
    /// </field>
    /// <field name="_authorUrl" type="String">
    /// </field>
    /// <field name="_authorPhone" type="String">
    /// </field>
    /// <field name="_authorContactText" type="String">
    /// </field>
    /// <field name="_orgName" type="String">
    /// </field>
    /// <field name="_orgUrl" type="String">
    /// </field>
    /// <field name="_author" type="String">
    /// </field>
    /// <field name="_authorImageUrl" type="String">
    /// </field>
    /// <field name="_authorImage" type="Object" domElement="true">
    /// </field>
    /// <field name="_organizationUrl" type="String">
    /// </field>
    /// <field name="_filename" type="String">
    /// </field>
    /// <field name="_level" type="wwtlib.UserLevel">
    /// </field>
    /// <field name="_type" type="wwtlib.Classification">
    /// </field>
    /// <field name="_taxonomy" type="String">
    /// </field>
    /// <field name="_keywords" type="String">
    /// </field>
    /// <field name="_objects" type="String">
    /// </field>
    /// <field name="_editMode" type="Boolean">
    /// </field>
    /// <field name="explicitTourLinks" type="Array">
    /// </field>
    /// <field name="implicitTourLinks" type="Array">
    /// </field>
    /// <field name="_tourStops" type="Array">
    /// </field>
    /// <field name="_currentTourstopIndex" type="Number" integer="true">
    /// </field>
    /// <field name="_textureList" type="Object">
    /// </field>
    /// <field name="dontCleanUpTempFiles" type="Boolean">
    /// </field>
    this.explicitTourLinks = [];
    this.implicitTourLinks = [];
    this._tourStops = [];
    this._currentTourstopIndex = -1;
    this._id = wwtlib.Guid.newGuid().toString();
}
wwtlib.TourDocument.get_baseWorkingDirectory = function wwtlib_TourDocument$get_baseWorkingDirectory() {
    /// <value type="String"></value>
    return '';
}
wwtlib.TourDocument.fromUrl = function wwtlib_TourDocument$fromUrl(url, callMe) {
    /// <param name="url" type="String">
    /// </param>
    /// <param name="callMe" type="Function">
    /// </param>
    /// <returns type="wwtlib.TourDocument"></returns>
    var temp = new wwtlib.TourDocument();
    temp.url = url;
    temp._callMe = callMe;
    temp._webFile = new wwtlib.WebFile(wwtlib._util.getTourComponent(url, 'master'));
    temp._webFile.onStateChange = ss.Delegate.create(temp, temp._loadXmlDocument);
    temp._webFile.send();
    return temp;
}
wwtlib.TourDocument.prototype = {
    _tourDirty: 0,
    
    get_tourDirty: function wwtlib_TourDocument$get_tourDirty() {
        /// <value type="Boolean"></value>
        return this._tourDirty > 0;
    },
    set_tourDirty: function wwtlib_TourDocument$set_tourDirty(value) {
        /// <value type="Boolean"></value>
        if (value) {
            this._tourDirty++;
        }
        else {
            this._tourDirty = 0;
        }
        return value;
    },
    
    _workingDirectory: '',
    
    get_workingDirectory: function wwtlib_TourDocument$get_workingDirectory() {
        /// <value type="String"></value>
        if (String.isNullOrEmpty(this._workingDirectory)) {
            this._workingDirectory = wwtlib.TourDocument.get_baseWorkingDirectory() + this._id + '\\';
        }
        return this._workingDirectory;
    },
    set_workingDirectory: function wwtlib_TourDocument$set_workingDirectory(value) {
        /// <value type="String"></value>
        this._workingDirectory = value;
        return value;
    },
    
    url: '',
    _webFile: null,
    _callMe: null,
    
    _loadXmlDocument: function wwtlib_TourDocument$_loadXmlDocument() {
        if (this._webFile.get_state() === 2) {
            alert(this._webFile.get_message());
        }
        else if (this._webFile.get_state() === 1) {
            this.fromXml(this._webFile.getXml());
            this._callMe();
        }
    },
    
    fromXml: function wwtlib_TourDocument$fromXml(doc) {
        /// <param name="doc" type="XmlDocument">
        /// </param>
        var root = wwtlib._util.selectSingleNode(doc, 'Tour');
        this._id = root.attributes.getNamedItem('ID').nodeValue;
        this.set_title(root.attributes.getNamedItem('Title').nodeValue);
        this.set_author(root.attributes.getNamedItem('Author').nodeValue);
        if (root.attributes.getNamedItem('Descirption') != null) {
            this.set_description(root.attributes.getNamedItem('Descirption').nodeValue);
        }
        if (root.attributes.getNamedItem('AuthorEmail') != null) {
            this._authorEmail = root.attributes.getNamedItem('AuthorEmail').nodeValue;
        }
        if (root.attributes.getNamedItem('Keywords') != null) {
            this.set_keywords(root.attributes.getNamedItem('Keywords').nodeValue);
        }
        if (root.attributes.getNamedItem('OrganizationName') != null) {
            this.set_orgName(root.attributes.getNamedItem('OrganizationName').nodeValue);
        }
        this._organizationUrl = root.attributes.getNamedItem('OrganizationUrl').nodeValue;
        switch (root.attributes.getNamedItem('UserLevel').nodeValue) {
            case 'Beginner':
                this._level = 0;
                break;
            case 'Intermediate':
                this._level = 1;
                break;
            case 'Advanced':
                this._level = 2;
                break;
            case 'Educator':
                this._level = 3;
                break;
            case 'Professional':
                this._level = 4;
                break;
            default:
                break;
        }
        switch (root.attributes.getNamedItem('Classification').nodeValue) {
            case 'Star':
                this._type = 1;
                break;
            case 'Supernova':
                this._type = 2;
                break;
            case 'BlackHole':
                this._type = 4;
                break;
            case 'NeutronStar':
                this._type = 8;
                break;
            case 'DoubleStar':
                this._type = 16;
                break;
            case 'MultipleStars':
                this._type = 32;
                break;
            case 'Asterism':
                this._type = 64;
                break;
            case 'Constellation':
                this._type = 128;
                break;
            case 'OpenCluster':
                this._type = 256;
                break;
            case 'GlobularCluster':
                this._type = 512;
                break;
            case 'NebulousCluster':
                this._type = 1024;
                break;
            case 'Nebula':
                this._type = 2048;
                break;
            case 'EmissionNebula':
                this._type = 4096;
                break;
            case 'PlanetaryNebula':
                this._type = 8192;
                break;
            case 'ReflectionNebula':
                this._type = 16384;
                break;
            case 'DarkNebula':
                this._type = 32768;
                break;
            case 'GiantMolecularCloud':
                this._type = 65536;
                break;
            case 'SupernovaRemnant':
                this._type = 131072;
                break;
            case 'InterstellarDust':
                this._type = 262144;
                break;
            case 'Quasar':
                this._type = 524288;
                break;
            case 'Galaxy':
                this._type = 1048576;
                break;
            case 'SpiralGalaxy':
                this._type = 2097152;
                break;
            case 'IrregularGalaxy':
                this._type = 4194304;
                break;
            case 'EllipticalGalaxy':
                this._type = 8388608;
                break;
            case 'Knot':
                this._type = 16777216;
                break;
            case 'PlateDefect':
                this._type = 33554432;
                break;
            case 'ClusterOfGalaxies':
                this._type = 67108864;
                break;
            case 'OtherNGC':
                this._type = 134217728;
                break;
            case 'Unidentified':
                this._type = 268435456;
                break;
            case 'SolarSystem':
                this._type = 536870912;
                break;
            case 'Unfiltered':
                this._type = 1073741823;
                break;
            case 'Stellar':
                this._type = 63;
                break;
            case 'StellarGroupings':
                this._type = 2032;
                break;
            case 'Nebulae':
                this._type = 523264;
                break;
            case 'Galactic':
                this._type = 133693440;
                break;
            case 'Other':
                this._type = 436207616;
                break;
            default:
                break;
        }
        this._taxonomy = root.attributes.getNamedItem('Taxonomy').nodeValue;
        var TourStops = wwtlib._util.selectSingleNode(root, 'TourStops');
        var $enum1 = ss.IEnumerator.getEnumerator(TourStops.childNodes);
        while ($enum1.moveNext()) {
            var tourStop = $enum1.current;
            if (tourStop.nodeName === 'TourStop') {
                this.addTourStop(wwtlib.TourStop._fromXml(this, tourStop));
            }
        }
        var Frames = wwtlib._util.selectSingleNode(root, 'ReferenceFrames');
        if (Frames != null) {
            var $enum2 = ss.IEnumerator.getEnumerator(Frames.childNodes);
            while ($enum2.moveNext()) {
                var frame = $enum2.current;
                if (frame.nodeName === 'ReferenceFrame') {
                    var newFrame = new wwtlib.ReferenceFrame();
                    newFrame.initializeFromXml(frame);
                    if (!Object.keyExists(wwtlib.LayerManager.get_allMaps(), newFrame.name)) {
                        var map = new wwtlib.LayerMap(newFrame.name, 18);
                        map.frame = newFrame;
                        map.loadedFromTour = true;
                        wwtlib.LayerManager.get_allMaps()[newFrame.name] = map;
                    }
                }
            }
            wwtlib.LayerManager.connectAllChildren();
            wwtlib.LayerManager.loadTree();
        }
        var Layers = wwtlib._util.selectSingleNode(root, 'Layers');
        if (Layers != null) {
            var $enum3 = ss.IEnumerator.getEnumerator(Layers.childNodes);
            while ($enum3.moveNext()) {
                var layer = $enum3.current;
                if (layer.nodeName === 'Layer') {
                    var newLayer = wwtlib.Layer._fromXml(layer, true);
                    if (newLayer != null) {
                        var fileName = String.format('{0}.txt', newLayer.id.toString());
                        if (Object.keyExists(wwtlib.LayerManager.get_layerList(), newLayer.id)) {
                            wwtlib.LayerManager.deleteLayerByID(newLayer.id, true, false);
                        }
                        try {
                            newLayer.loadedFromTour = true;
                            newLayer.loadData(this.getFileStream(fileName));
                            wwtlib.LayerManager.add(newLayer, false);
                        }
                        catch ($e4) {
                        }
                    }
                }
            }
            wwtlib.LayerManager.loadTree();
        }
        this._tourDirty = 0;
    },
    
    _tagId: null,
    
    get_tagId: function wwtlib_TourDocument$get_tagId() {
        /// <value type="String"></value>
        return this._tagId;
    },
    set_tagId: function wwtlib_TourDocument$set_tagId(value) {
        /// <value type="String"></value>
        this._tagId = value;
        return value;
    },
    
    get_authorThumbnailFilename: function wwtlib_TourDocument$get_authorThumbnailFilename() {
        /// <value type="String"></value>
        return 'Author.Png';
    },
    
    _representativeThumbnailTourstop: 0,
    
    get_tourThumbnailFilename: function wwtlib_TourDocument$get_tourThumbnailFilename() {
        /// <value type="String"></value>
        if (this._representativeThumbnailTourstop < this._tourStops.length) {
            return this._tourStops[this._representativeThumbnailTourstop].get_tourStopThumbnailFilename();
        }
        else {
            return null;
        }
    },
    
    _id: null,
    
    get_id: function wwtlib_TourDocument$get_id() {
        /// <value type="String"></value>
        return this._id;
    },
    set_id: function wwtlib_TourDocument$set_id(value) {
        /// <value type="String"></value>
        this._id = value;
        return value;
    },
    
    _title: null,
    
    get_title: function wwtlib_TourDocument$get_title() {
        /// <value type="String"></value>
        return this._title;
    },
    set_title: function wwtlib_TourDocument$set_title(value) {
        /// <value type="String"></value>
        this._title = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _runTime: 0,
    _lastDirtyCheck: 0,
    
    get_runTime: function wwtlib_TourDocument$get_runTime() {
        /// <value type="Number" integer="true"></value>
        if (!this._runTime || this._lastDirtyCheck !== this._tourDirty) {
            this._runTime = this._calculateRunTime();
            this._lastDirtyCheck = this._tourDirty;
        }
        return this._runTime;
    },
    
    _description: null,
    
    get_description: function wwtlib_TourDocument$get_description() {
        /// <value type="String"></value>
        return this._description;
    },
    set_description: function wwtlib_TourDocument$set_description(value) {
        /// <value type="String"></value>
        this._description = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _attributesAndCredits: null,
    
    get_attributesAndCredits: function wwtlib_TourDocument$get_attributesAndCredits() {
        /// <value type="String"></value>
        return this._attributesAndCredits;
    },
    set_attributesAndCredits: function wwtlib_TourDocument$set_attributesAndCredits(value) {
        /// <value type="String"></value>
        this._attributesAndCredits = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _authorEmailOther: null,
    
    get_authorEmailOther: function wwtlib_TourDocument$get_authorEmailOther() {
        /// <value type="String"></value>
        return this._authorEmailOther;
    },
    set_authorEmailOther: function wwtlib_TourDocument$set_authorEmailOther(value) {
        /// <value type="String"></value>
        this._authorEmailOther = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _authorEmail: null,
    
    get_authorEmail: function wwtlib_TourDocument$get_authorEmail() {
        /// <value type="String"></value>
        return this._authorEmail;
    },
    set_authorEmail: function wwtlib_TourDocument$set_authorEmail(value) {
        /// <value type="String"></value>
        this._authorEmail = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _authorUrl: null,
    
    get_authorUrl: function wwtlib_TourDocument$get_authorUrl() {
        /// <value type="String"></value>
        return this._authorUrl;
    },
    set_authorUrl: function wwtlib_TourDocument$set_authorUrl(value) {
        /// <value type="String"></value>
        this._authorUrl = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _authorPhone: null,
    
    get_authorPhone: function wwtlib_TourDocument$get_authorPhone() {
        /// <value type="String"></value>
        return this._authorPhone;
    },
    set_authorPhone: function wwtlib_TourDocument$set_authorPhone(value) {
        /// <value type="String"></value>
        this._authorPhone = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _authorContactText: null,
    
    get_authorContactText: function wwtlib_TourDocument$get_authorContactText() {
        /// <value type="String"></value>
        return this._authorContactText;
    },
    set_authorContactText: function wwtlib_TourDocument$set_authorContactText(value) {
        /// <value type="String"></value>
        this._authorContactText = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _orgName: 'None',
    
    get_orgName: function wwtlib_TourDocument$get_orgName() {
        /// <value type="String"></value>
        return this._orgName;
    },
    set_orgName: function wwtlib_TourDocument$set_orgName(value) {
        /// <value type="String"></value>
        this._orgName = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _orgUrl: null,
    
    get_orgUrl: function wwtlib_TourDocument$get_orgUrl() {
        /// <value type="String"></value>
        return this._orgUrl;
    },
    set_orgUrl: function wwtlib_TourDocument$set_orgUrl(value) {
        /// <value type="String"></value>
        this._orgUrl = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _author: null,
    
    get_author: function wwtlib_TourDocument$get_author() {
        /// <value type="String"></value>
        return this._author;
    },
    set_author: function wwtlib_TourDocument$set_author(value) {
        /// <value type="String"></value>
        this._author = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _authorImageUrl: null,
    
    get_authorImageUrl: function wwtlib_TourDocument$get_authorImageUrl() {
        /// <value type="String"></value>
        return this._authorImageUrl;
    },
    set_authorImageUrl: function wwtlib_TourDocument$set_authorImageUrl(value) {
        /// <value type="String"></value>
        this._authorImageUrl = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _authorImage: null,
    
    get_authorImage: function wwtlib_TourDocument$get_authorImage() {
        /// <value type="Object" domElement="true"></value>
        return this._authorImage;
    },
    set_authorImage: function wwtlib_TourDocument$set_authorImage(value) {
        /// <value type="Object" domElement="true"></value>
        this._authorImage = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _organizationUrl: null,
    
    get_organizationUrl: function wwtlib_TourDocument$get_organizationUrl() {
        /// <value type="String"></value>
        return this._organizationUrl;
    },
    set_organizationUrl: function wwtlib_TourDocument$set_organizationUrl(value) {
        /// <value type="String"></value>
        this._organizationUrl = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _filename: null,
    
    get_fileName: function wwtlib_TourDocument$get_fileName() {
        /// <value type="String"></value>
        return this._filename;
    },
    set_fileName: function wwtlib_TourDocument$set_fileName(value) {
        /// <value type="String"></value>
        this._filename = value;
        return value;
    },
    
    _level: 0,
    
    get_level: function wwtlib_TourDocument$get_level() {
        /// <value type="wwtlib.UserLevel"></value>
        return this._level;
    },
    set_level: function wwtlib_TourDocument$set_level(value) {
        /// <value type="wwtlib.UserLevel"></value>
        this._level = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _type: 0,
    
    get_type: function wwtlib_TourDocument$get_type() {
        /// <value type="wwtlib.Classification"></value>
        return this._type;
    },
    set_type: function wwtlib_TourDocument$set_type(value) {
        /// <value type="wwtlib.Classification"></value>
        this._type = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _taxonomy: '',
    
    get_taxonomy: function wwtlib_TourDocument$get_taxonomy() {
        /// <value type="String"></value>
        return this._taxonomy;
    },
    set_taxonomy: function wwtlib_TourDocument$set_taxonomy(value) {
        /// <value type="String"></value>
        this._taxonomy = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _keywords: '',
    
    get_keywords: function wwtlib_TourDocument$get_keywords() {
        /// <value type="String"></value>
        return this._keywords;
    },
    set_keywords: function wwtlib_TourDocument$set_keywords(value) {
        /// <value type="String"></value>
        this._keywords = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _objects: '',
    
    get_objects: function wwtlib_TourDocument$get_objects() {
        /// <value type="String"></value>
        return this._objects;
    },
    set_objects: function wwtlib_TourDocument$set_objects(value) {
        /// <value type="String"></value>
        this._objects = value;
        this.set_tourDirty(true);
        return value;
    },
    
    _editMode: false,
    
    get_editMode: function wwtlib_TourDocument$get_editMode() {
        /// <value type="Boolean"></value>
        return this._editMode;
    },
    set_editMode: function wwtlib_TourDocument$set_editMode(value) {
        /// <value type="Boolean"></value>
        this._editMode = value;
        return value;
    },
    
    get_tourStops: function wwtlib_TourDocument$get_tourStops() {
        /// <value type="Array"></value>
        return this._tourStops;
    },
    set_tourStops: function wwtlib_TourDocument$set_tourStops(value) {
        /// <value type="Array"></value>
        this._tourStops = value;
        return value;
    },
    
    get_currentTourstopIndex: function wwtlib_TourDocument$get_currentTourstopIndex() {
        /// <value type="Number" integer="true"></value>
        return this._currentTourstopIndex;
    },
    set_currentTourstopIndex: function wwtlib_TourDocument$set_currentTourstopIndex(value) {
        /// <value type="Number" integer="true"></value>
        this._currentTourstopIndex = value;
        return value;
    },
    
    addTourStop: function wwtlib_TourDocument$addTourStop(ts) {
        /// <param name="ts" type="wwtlib.TourStop">
        /// </param>
        ts.set_owner(this);
        this.get_tourStops().add(ts);
        this._currentTourstopIndex = this._tourStops.length - 1;
        this.set_tourDirty(true);
    },
    
    insertTourStop: function wwtlib_TourDocument$insertTourStop(ts) {
        /// <param name="ts" type="wwtlib.TourStop">
        /// </param>
        ts.set_owner(this);
        if (this._currentTourstopIndex > -1) {
            this.get_tourStops().insert(this._currentTourstopIndex, ts);
        }
        else {
            this.get_tourStops().add(ts);
            this._currentTourstopIndex = this._tourStops.length - 1;
        }
        this.set_tourDirty(true);
    },
    
    insertAfterTourStop: function wwtlib_TourDocument$insertAfterTourStop(ts) {
        /// <param name="ts" type="wwtlib.TourStop">
        /// </param>
        ts.set_owner(this);
        if (this._currentTourstopIndex > -1 || this._currentTourstopIndex < this.get_tourStops().length) {
            this.get_tourStops().insert(this._currentTourstopIndex + 1, ts);
        }
        else {
            this.get_tourStops().add(ts);
            this._currentTourstopIndex = this._tourStops.length - 1;
        }
        this.set_tourDirty(true);
    },
    
    removeTourStop: function wwtlib_TourDocument$removeTourStop(ts) {
        /// <param name="ts" type="wwtlib.TourStop">
        /// </param>
        this._tourStops.remove(ts);
        if (this._currentTourstopIndex > this._tourStops.length - 1) {
            this._currentTourstopIndex--;
        }
        this.set_tourDirty(true);
    },
    
    _calculateRunTime: function wwtlib_TourDocument$_calculateRunTime() {
        /// <returns type="Number" integer="true"></returns>
        var totalTime = 0;
        for (var i = 0; i < this._tourStops.length; i++) {
            totalTime += this._tourStops[i].get_duration();
            if (i > 0) {
                switch (this._tourStops[i].get__transition()) {
                    case 0:
                        if (this._tourStops[i].get_target().get_backgroundImageset() == null || (this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() === this._tourStops[i].get_target().get_backgroundImageset().get_dataSetType() && ((this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() !== 4) || (this._tourStops[i - 1].get_target().get_target() === this._tourStops[i].get_target().get_target())))) {
                            var start = (this._tourStops[i - 1].get_endTarget() == null) ? this._tourStops[i - 1].get_target().get_camParams() : this._tourStops[i - 1].get_endTarget().get_camParams();
                            var slew = wwtlib._viewMoverSlew.create(start, this._tourStops[i].get_target().get_camParams());
                            totalTime += slew.get_moveTime() * 1000;
                        }
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                    default:
                        break;
                }
            }
        }
        return parseInt(totalTime);
    },
    
    elapsedTimeTillTourstop: function wwtlib_TourDocument$elapsedTimeTillTourstop(index) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <returns type="Number"></returns>
        if (!index && index >= this._tourStops.length) {
            return 0;
        }
        var totalTime = 0;
        for (var i = 0; i < index; i++) {
            totalTime += this._tourStops[i].get_duration();
            if (i > 0) {
                switch (this._tourStops[i].get__transition()) {
                    case 0:
                        var start = (this._tourStops[i - 1].get_endTarget() == null) ? this._tourStops[i - 1].get_target().get_camParams() : this._tourStops[i - 1].get_endTarget().get_camParams();
                        if (this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() === this._tourStops[i].get_target().get_backgroundImageset().get_dataSetType() && ((this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() !== 4) || (this._tourStops[i - 1].get_target().get_target() === this._tourStops[i].get_target().get_target()))) {
                            var slew = wwtlib._viewMoverSlew.create(start, this._tourStops[i].get_target().get_camParams());
                            totalTime += slew.get_moveTime() * 1000;
                        }
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                    default:
                        break;
                }
            }
        }
        return totalTime / 1000;
    },
    
    elapsedTimeSinceLastMaster: function wwtlib_TourDocument$elapsedTimeSinceLastMaster(index) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <returns type="wwtlib.MasterTime"></returns>
        var masterOut = null;
        if (!index && index >= this._tourStops.length) {
            return null;
        }
        var totalTime = 0;
        for (var i = 0; i < index; i++) {
            if (this._tourStops[i].get_masterSlide()) {
                totalTime = 0;
                masterOut = this._tourStops[i];
            }
            totalTime += this._tourStops[i].get_duration();
            if (i > 0) {
                switch (this._tourStops[i].get__transition()) {
                    case 0:
                        var start = (this._tourStops[i - 1].get_endTarget() == null) ? this._tourStops[i - 1].get_target().get_camParams() : this._tourStops[i - 1].get_endTarget().get_camParams();
                        if (this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() === this._tourStops[i].get_target().get_backgroundImageset().get_dataSetType() && ((this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() !== 4) || (this._tourStops[i - 1].get_target().get_target() === this._tourStops[i].get_target().get_target()))) {
                            var slew = wwtlib._viewMoverSlew.create(start, this._tourStops[i].get_target().get_camParams());
                            totalTime += slew.get_moveTime() * 1000;
                        }
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                    default:
                        break;
                }
            }
        }
        return new wwtlib.MasterTime(masterOut, totalTime / 1000);
    },
    
    getMasterSlideForIndex: function wwtlib_TourDocument$getMasterSlideForIndex(index) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <returns type="wwtlib.TourStop"></returns>
        var master = -1;
        for (var i = 0; i < index; i++) {
            if (this._tourStops[i].get_masterSlide()) {
                master = i;
            }
        }
        if (master === -1) {
            return null;
        }
        return this._tourStops[master];
    },
    
    getTourStopIndexByID: function wwtlib_TourDocument$getTourStopIndexByID(id) {
        /// <param name="id" type="String">
        /// </param>
        /// <returns type="Number" integer="true"></returns>
        if (!id || id === 'Next') {
            return this._currentTourstopIndex++;
        }
        var index = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this._tourStops);
        while ($enum1.moveNext()) {
            var stop = $enum1.current;
            if (stop.get_id() === id) {
                return index;
            }
            index++;
        }
        return -1;
    },
    
    cleanUp: function wwtlib_TourDocument$cleanUp() {
        var $enum1 = ss.IEnumerator.getEnumerator(this.get_tourStops());
        while ($enum1.moveNext()) {
            var stop = $enum1.current;
            stop.cleanUp();
        }
        if (this._textureList != null) {
            Object.clearKeys(this._textureList);
        }
    },
    
    _textureList: null,
    
    getCachedTexture: function wwtlib_TourDocument$getCachedTexture(filename, callMe) {
        /// <param name="filename" type="String">
        /// </param>
        /// <param name="callMe" type="Function">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        if (this._textureList == null) {
            this._textureList = {};
        }
        if (Object.keyExists(this._textureList, filename)) {
            callMe();
            return this._textureList[filename];
        }
        var texture = document.createElement('img');
        texture.src = this.getFileStream(filename);
        texture.addEventListener('load', function() {
            callMe();
        }, false);
        this._textureList[filename] = texture;
        return texture;
    },
    
    getFileStream: function wwtlib_TourDocument$getFileStream(filename) {
        /// <param name="filename" type="String">
        /// </param>
        /// <returns type="String"></returns>
        return wwtlib._util.getTourComponent(this.url, filename);
    },
    
    get_currentTourStop: function wwtlib_TourDocument$get_currentTourStop() {
        /// <value type="wwtlib.TourStop"></value>
        if (this._currentTourstopIndex > -1) {
            return this.get_tourStops()[this._currentTourstopIndex];
        }
        else {
            return null;
        }
    },
    set_currentTourStop: function wwtlib_TourDocument$set_currentTourStop(value) {
        /// <value type="wwtlib.TourStop"></value>
        var i = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this.get_tourStops());
        while ($enum1.moveNext()) {
            var stop = $enum1.current;
            if (stop === value) {
                if (this._currentTourstopIndex > -1) {
                    this.get_tourStops()[this._currentTourstopIndex].cleanUp();
                }
                this._currentTourstopIndex = i;
                break;
            }
            i++;
        }
        return value;
    },
    
    dontCleanUpTempFiles: false,
    
    clearTempFiles: function wwtlib_TourDocument$clearTempFiles() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TourPlayer

wwtlib.TourPlayer = function wwtlib_TourPlayer() {
    /// <field name="_overlayBlend" type="wwtlib.BlendState">
    /// </field>
    /// <field name="_playerState" type="wwtlib.BlendState">
    /// </field>
    /// <field name="_middleHover" type="Boolean">
    /// </field>
    /// <field name="_leftHover" type="Boolean">
    /// </field>
    /// <field name="_rightHover" type="Boolean">
    /// </field>
    /// <field name="_middleDown" type="Boolean">
    /// </field>
    /// <field name="_leftDown" type="Boolean">
    /// </field>
    /// <field name="_rightDown" type="Boolean">
    /// </field>
    /// <field name="_top" type="Number">
    /// </field>
    /// <field name="_center" type="Number">
    /// </field>
    /// <field name="_lastHit" type="Date">
    /// </field>
    /// <field name="_buttonNextDisabled" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonNextHover" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonNextNormal" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonNextPressed" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPauseDisabled" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPauseHover" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPauseNormal" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPausePressed" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPlayDisabled" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPlayHover" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPlayNormal" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPlayPressed" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPreviousDisabled" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPreviousHover" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPreviousNormal" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonPreviousPressed" type="Object" domElement="true">
    /// </field>
    /// <field name="_imageCount" type="Number" integer="true">
    /// </field>
    /// <field name="_imageLoadCount" type="Number" integer="true">
    /// </field>
    /// <field name="_imagesLoaded" type="Boolean">
    /// </field>
    /// <field name="_downloading" type="Boolean">
    /// </field>
    /// <field name="_tour" type="wwtlib.TourDocument">
    /// </field>
    /// <field name="_playing" type="Boolean" static="true">
    /// </field>
    /// <field name="_onTarget" type="Boolean">
    /// </field>
    /// <field name="_slideStartTime" type="Date">
    /// </field>
    /// <field name="_currentMasterSlide" type="wwtlib.TourStop">
    /// </field>
    /// <field name="__tourEnded" type="Function" static="true">
    /// </field>
    /// <field name="_switchedToFullScreen" type="Boolean" static="true">
    /// </field>
    /// <field name="_callStack" type="Array">
    /// </field>
    /// <field name="noRestoreUIOnStop" type="Boolean" static="true">
    /// </field>
    this._overlayBlend = wwtlib.BlendState.create(false, 1000);
    this._playerState = wwtlib.BlendState.create(false, 2000);
    this._lastHit = Date.get_now();
    this._callStack = [];
}
wwtlib.TourPlayer.get_playing = function wwtlib_TourPlayer$get_playing() {
    /// <value type="Boolean"></value>
    return wwtlib.TourPlayer._playing;
}
wwtlib.TourPlayer.set_playing = function wwtlib_TourPlayer$set_playing(value) {
    /// <value type="Boolean"></value>
    wwtlib.TourPlayer._playing = value;
    return value;
}
wwtlib.TourPlayer.add_tourEnded = function wwtlib_TourPlayer$add_tourEnded(value) {
    /// <param name="value" type="Function" />
    wwtlib.TourPlayer.__tourEnded = ss.Delegate.combine(wwtlib.TourPlayer.__tourEnded, value);
}
wwtlib.TourPlayer.remove_tourEnded = function wwtlib_TourPlayer$remove_tourEnded(value) {
    /// <param name="value" type="Function" />
    wwtlib.TourPlayer.__tourEnded = ss.Delegate.remove(wwtlib.TourPlayer.__tourEnded, value);
}
wwtlib.TourPlayer.prototype = {
    
    render: function wwtlib_TourPlayer$render(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        if (this._tour == null || this._tour.get_currentTourStop() == null || !wwtlib.TourPlayer._playing) {
            return;
        }
        renderContext.save();
        this.updateSlideStates();
        if (!this._onTarget) {
            this._slideStartTime = Date.get_now();
            if (renderContext.onTarget(this.get_tour().get_currentTourStop().get_target())) {
                this._onTarget = true;
                this._overlayBlend.set_state(!this.get_tour().get_currentTourStop().get_fadeInOverlays());
                this._overlayBlend.set_targetState(true);
                if (this._tour.get_currentTourStop().get_musicTrack() != null) {
                    this._tour.get_currentTourStop().get_musicTrack().play();
                }
                if (this._tour.get_currentTourStop().get_voiceTrack() != null) {
                    this._tour.get_currentTourStop().get_voiceTrack().play();
                }
                var caption = '';
                var $enum1 = ss.IEnumerator.getEnumerator(this._tour.get_currentTourStop().get_overlays());
                while ($enum1.moveNext()) {
                    var overlay = $enum1.current;
                    if (overlay.get_name().toLowerCase() === 'caption') {
                        var text = Type.safeCast(overlay, wwtlib.TextOverlay);
                        if (text != null) {
                            caption = text.textObject.text;
                        }
                    }
                    overlay.play();
                }
                if (this._tour.get_currentTourStop().get_endTarget() != null && this._tour.get_currentTourStop().get_endTarget().get_zoomLevel() !== -1) {
                    if (this._tour.get_currentTourStop().get_target().get_type() === 4) {
                    }
                    renderContext.viewMover = new wwtlib.ViewMoverKenBurnsStyle(this._tour.get_currentTourStop().get_target().get_camParams(), this._tour.get_currentTourStop().get_endTarget().get_camParams(), this._tour.get_currentTourStop().get_duration() / 1000, this._tour.get_currentTourStop().get_startTime(), this._tour.get_currentTourStop().get_endTime(), this._tour.get_currentTourStop().get_interpolationType());
                }
                wwtlib.Settings.tourSettings = this._tour.get_currentTourStop();
                wwtlib.SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
                wwtlib.SpaceTimeController.set_syncToClock(false);
                wwtlib.WWTControl.scriptInterface._fireSlideChanged(caption);
            }
        }
        if (renderContext.gl != null) {
            return;
        }
        renderContext.device.scale(renderContext.height / 1116, renderContext.height / 1116);
        var aspectOrig = 1920 / 1116;
        var aspectNow = renderContext.width / renderContext.height;
        renderContext.device.translate(-((1920 - (aspectNow * 1116)) / 2), 0);
        if (this._currentMasterSlide != null) {
            var $enum2 = ss.IEnumerator.getEnumerator(this._currentMasterSlide.get_overlays());
            while ($enum2.moveNext()) {
                var overlay = $enum2.current;
                overlay.set_tweenFactor(1);
                overlay.draw3D(renderContext, false);
            }
        }
        if (this._onTarget) {
            var $enum3 = ss.IEnumerator.getEnumerator(this._tour.get_currentTourStop().get_overlays());
            while ($enum3.moveNext()) {
                var overlay = $enum3.current;
                if (overlay.get_name().toLowerCase() !== 'caption' || wwtlib.WWTControl.scriptInterface.get_showCaptions()) {
                    overlay.set_tweenFactor(wwtlib.CameraParameters.easeCurve(this._tour.get_currentTourStop().get_tweenPosition(), (overlay.get_interpolationType() === 5) ? this._tour.get_currentTourStop().get_interpolationType() : overlay.get_interpolationType()));
                    overlay.draw3D(renderContext, false);
                }
            }
        }
        else {
            var i = 0;
        }
        renderContext.restore();
        this._drawPlayerControls(renderContext);
    },
    
    _middleHover: false,
    _leftHover: false,
    _rightHover: false,
    _middleDown: false,
    _leftDown: false,
    _rightDown: false,
    _top: 1,
    _center: 1,
    
    _drawPlayerControls: function wwtlib_TourPlayer$_drawPlayerControls(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        this._loadImages();
        if (!this._imagesLoaded) {
            return;
        }
        if (this._playerState.get_state()) {
            var span = Date.get_now() - this._lastHit;
            if (span > 7000) {
                this._playerState.set_targetState(false);
            }
            var ctx = renderContext.device;
            ctx.save();
            ctx.globalAlpha = this._playerState.get_opacity();
            this._top = renderContext.height - 60;
            this._center = renderContext.width / 2;
            var left = (this._leftDown) ? this._buttonPreviousPressed : ((this._leftHover) ? this._buttonPreviousHover : this._buttonPreviousNormal);
            var middle = (wwtlib.TourPlayer.get_playing()) ? ((this._middleDown) ? this._buttonPausePressed : ((this._middleHover) ? this._buttonPauseHover : this._buttonPauseNormal)) : ((this._middleDown) ? this._buttonPlayPressed : ((this._middleHover) ? this._buttonPlayHover : this._buttonPlayNormal));
            var right = (this._rightDown) ? this._buttonNextPressed : ((this._rightHover) ? this._buttonNextHover : this._buttonNextNormal);
            ctx.drawImage(left, this._center - 110, this._top);
            ctx.drawImage(right, this._center, this._top);
            ctx.drawImage(middle, this._center - 32, this._top - 4);
            ctx.restore();
        }
    },
    
    _hitTextPlayerControls: function wwtlib_TourPlayer$_hitTextPlayerControls(point, click, act) {
        /// <param name="point" type="wwtlib.Vector2d">
        /// </param>
        /// <param name="click" type="Boolean">
        /// </param>
        /// <param name="act" type="Boolean">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (click) {
            this._leftDown = false;
            this._rightDown = false;
            this._middleDown = false;
        }
        else {
            this._leftHover = false;
            this._rightHover = false;
            this._middleHover = false;
        }
        if (point.y < (this._top - 2)) {
            return false;
        }
        if (point.x < (this._center - 32) && point.x > (this._center - 105)) {
            if (click) {
                this._leftDown = true;
            }
            else {
                this._leftHover = true;
            }
            if (act) {
                this._playPreviousSlide();
                this._lastHit = Date.get_now();
            }
            return true;
        }
        if (point.x < (this._center + 105) && point.x > (this._center + 32)) {
            if (click) {
                this._rightDown = true;
            }
            else {
                this._rightHover = true;
            }
            if (act) {
                this._playNextSlide();
                this._lastHit = Date.get_now();
            }
            return true;
        }
        if (point.x < (this._center + 32) && point.x > (this._center - 32)) {
            if (click) {
                this._middleDown = true;
            }
            else {
                this._middleHover = true;
            }
            if (act) {
                this.pauseTour();
                this._lastHit = Date.get_now();
            }
            return true;
        }
        return false;
    },
    
    _buttonNextDisabled: null,
    _buttonNextHover: null,
    _buttonNextNormal: null,
    _buttonNextPressed: null,
    _buttonPauseDisabled: null,
    _buttonPauseHover: null,
    _buttonPauseNormal: null,
    _buttonPausePressed: null,
    _buttonPlayDisabled: null,
    _buttonPlayHover: null,
    _buttonPlayNormal: null,
    _buttonPlayPressed: null,
    _buttonPreviousDisabled: null,
    _buttonPreviousHover: null,
    _buttonPreviousNormal: null,
    _buttonPreviousPressed: null,
    
    _loadImages: function wwtlib_TourPlayer$_loadImages() {
        if (!this._imagesLoaded && !this._downloading) {
            this._buttonNextDisabled = this._loadImageElement('images/button_next_disabled.png');
            this._buttonNextHover = this._loadImageElement('images/button_next_hover.png');
            this._buttonNextNormal = this._loadImageElement('images/button_next_normal.png');
            this._buttonNextPressed = this._loadImageElement('images/button_next_pressed.png');
            this._buttonPauseDisabled = this._loadImageElement('images/button_pause_disabled.png');
            this._buttonPauseHover = this._loadImageElement('images/button_pause_hover.png');
            this._buttonPauseNormal = this._loadImageElement('images/button_pause_normal.png');
            this._buttonPausePressed = this._loadImageElement('images/button_pause_pressed.png');
            this._buttonPlayDisabled = this._loadImageElement('images/button_play_disabled.png');
            this._buttonPlayHover = this._loadImageElement('images/button_play_hover.png');
            this._buttonPlayNormal = this._loadImageElement('images/button_play_normal.png');
            this._buttonPlayPressed = this._loadImageElement('images/button_play_pressed.png');
            this._buttonPreviousDisabled = this._loadImageElement('images/button_previous_disabled.png');
            this._buttonPreviousHover = this._loadImageElement('images/button_previous_hover.png');
            this._buttonPreviousNormal = this._loadImageElement('images/button_previous_normal.png');
            this._buttonPreviousPressed = this._loadImageElement('images/button_previous_pressed.png');
        }
    },
    
    _imageCount: 0,
    _imageLoadCount: 0,
    _imagesLoaded: false,
    _downloading: false,
    
    _loadImageElement: function wwtlib_TourPlayer$_loadImageElement(url) {
        /// <param name="url" type="String">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        this._imageCount++;
        this._imagesLoaded = false;
        this._downloading = true;
        var temp = document.createElement('img');
        temp.src = url;
        temp.addEventListener('load', ss.Delegate.create(this, function(e) {
            this._imageLoadCount++;
            if (this._imageLoadCount === this._imageCount) {
                this._downloading = false;
                this._imagesLoaded = true;
            }
        }), false);
        return temp;
    },
    
    _tour: null,
    
    get_tour: function wwtlib_TourPlayer$get_tour() {
        /// <value type="wwtlib.TourDocument"></value>
        return this._tour;
    },
    set_tour: function wwtlib_TourPlayer$set_tour(value) {
        /// <value type="wwtlib.TourDocument"></value>
        this._tour = value;
        return value;
    },
    
    _onTarget: false,
    _slideStartTime: null,
    _currentMasterSlide: null,
    
    nextSlide: function wwtlib_TourPlayer$nextSlide() {
        if (this._tour.get_currentTourStop() != null) {
            if (!this._tour.get_currentTourStop().get_masterSlide()) {
                if (this._tour.get_currentTourStop().get_musicTrack() != null) {
                    this._tour.get_currentTourStop().get_musicTrack().stop();
                }
                if (this._tour.get_currentTourStop().get_voiceTrack() != null) {
                    this._tour.get_currentTourStop().get_voiceTrack().stop();
                }
                var $enum1 = ss.IEnumerator.getEnumerator(this._tour.get_currentTourStop().get_overlays());
                while ($enum1.moveNext()) {
                    var overlay = $enum1.current;
                    overlay.stop();
                }
            }
            else {
                this._currentMasterSlide = this._tour.get_currentTourStop();
            }
        }
        if (this._tour.get_currentTourstopIndex() < (this._tour.get_tourStops().length - 1)) {
            if (this._tour.get_currentTourStop().get_endTarget() != null) {
                wwtlib.WWTControl.singleton.gotoTargetFull(false, true, this._tour.get_currentTourStop().get_endTarget().get_camParams(), this._tour.get_currentTourStop().get_target().get_studyImageset(), this._tour.get_currentTourStop().get_target().get_backgroundImageset());
                wwtlib.WWTControl.singleton.set__mover(null);
            }
            this._onTarget = false;
            if (this._tour.get_currentTourStop().get_isLinked()) {
                switch (this._tour.get_currentTourStop().get_nextSlide()) {
                    case 'Return':
                        if (this._callStack.length > 0) {
                            this._playFromTourstop(this._tour.get_tourStops()[this._callStack.pop()]);
                        }
                        else {
                            this._tour.set_currentTourstopIndex(this._tour.get_tourStops().length - 1);
                        }
                        break;
                    default:
                        this._playFromTourstop(this._tour.get_tourStops()[this._tour.getTourStopIndexByID(this._tour.get_currentTourStop().get_nextSlide())]);
                        break;
                }
            }
            else {
                this._tour.set_currentTourstopIndex(this._tour.get_currentTourstopIndex() + 1) - 1;
            }
            if (this._currentMasterSlide != null && this._tour.get_currentTourStop().get_masterSlide()) {
                if (this._currentMasterSlide.get_musicTrack() != null) {
                    this._currentMasterSlide.get_musicTrack().stop();
                }
                if (this._currentMasterSlide.get_voiceTrack() != null) {
                    this._currentMasterSlide.get_voiceTrack().stop();
                }
                var $enum2 = ss.IEnumerator.getEnumerator(this._currentMasterSlide.get_overlays());
                while ($enum2.moveNext()) {
                    var overlay = $enum2.current;
                    overlay.stop();
                }
                this._currentMasterSlide = null;
            }
            wwtlib.WWTControl.singleton.gotoTarget(this._tour.get_currentTourStop().get_target(), false, false, false);
            this._slideStartTime = Date.get_now();
            wwtlib.Settings.tourSettings = this._tour.get_currentTourStop();
            wwtlib.SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
            wwtlib.SpaceTimeController.set_syncToClock(false);
        }
        else {
            this._stopMaster();
            wwtlib.TourPlayer._playing = false;
            if (wwtlib.Settings.get_current().autoRepeatTour) {
                this._tour.set_currentTourstopIndex(-1);
                this.play();
            }
            else {
                wwtlib.WWTControl.singleton._freezeView();
                if (wwtlib.TourPlayer.__tourEnded != null) {
                    wwtlib.TourPlayer.__tourEnded(this, new ss.EventArgs());
                }
                this.showEndTourPopup();
                wwtlib.WWTControl.singleton._hideUI(false);
                wwtlib.WWTControl.scriptInterface._fireTourEnded();
            }
        }
    },
    
    _stopMaster: function wwtlib_TourPlayer$_stopMaster() {
        if (this._currentMasterSlide != null) {
            if (this._currentMasterSlide.get_musicTrack() != null) {
                this._currentMasterSlide.get_musicTrack().stop();
            }
            if (this._currentMasterSlide.get_voiceTrack() != null) {
                this._currentMasterSlide.get_voiceTrack().stop();
            }
            var $enum1 = ss.IEnumerator.getEnumerator(this._currentMasterSlide.get_overlays());
            while ($enum1.moveNext()) {
                var overlay = $enum1.current;
                overlay.stop();
            }
            this._currentMasterSlide = null;
        }
    },
    
    showEndTourPopup: function wwtlib_TourPlayer$showEndTourPopup() {
    },
    
    play: function wwtlib_TourPlayer$play() {
        if (this._tour == null) {
            return;
        }
        if (wwtlib.TourPlayer._playing) {
            this.stop(true);
        }
        else {
            wwtlib.TourPlayer._playing = true;
        }
        wwtlib.WWTControl.singleton._hideUI(true);
        wwtlib.TourPlayer._playing = true;
        if (this._tour.get_tourStops().length > 0) {
            this._onTarget = false;
            if (this._tour.get_currentTourstopIndex() === -1) {
                this._tour.set_currentTourStop(this._tour.get_tourStops()[0]);
            }
            if (this._tour.get_currentTourstopIndex() > 0) {
                this._playMasterForCurrent();
            }
            wwtlib.WWTControl.singleton.gotoTarget(this._tour.get_currentTourStop().get_target(), false, true, false);
        }
        this._slideStartTime = Date.get_now();
        wwtlib.TourPlayer._playing = true;
    },
    
    _playMasterForCurrent: function wwtlib_TourPlayer$_playMasterForCurrent() {
        if (!this._tour.get_currentTourStop().get_masterSlide()) {
            var currentMaster = this._tour.elapsedTimeSinceLastMaster(this._tour.get_currentTourstopIndex());
            if (currentMaster != null && this._currentMasterSlide != null) {
                var elapsed = currentMaster.durration;
                this._currentMasterSlide = currentMaster.master;
                if (this._currentMasterSlide.get_musicTrack() != null) {
                    this._currentMasterSlide.get_musicTrack().play();
                    this._currentMasterSlide.get_musicTrack().seek(elapsed);
                }
                if (this._currentMasterSlide.get_voiceTrack() != null) {
                    this._currentMasterSlide.get_voiceTrack().play();
                    this._currentMasterSlide.get_voiceTrack().seek(elapsed);
                }
                var $enum1 = ss.IEnumerator.getEnumerator(this._currentMasterSlide.get_overlays());
                while ($enum1.moveNext()) {
                    var overlay = $enum1.current;
                    overlay.play();
                    overlay.seek(elapsed);
                }
            }
        }
    },
    
    stop: function wwtlib_TourPlayer$stop(noSwitchBackFullScreen) {
        /// <param name="noSwitchBackFullScreen" type="Boolean">
        /// </param>
        if (wwtlib.TourPlayer._switchedToFullScreen && !noSwitchBackFullScreen) {
        }
        wwtlib.Settings.tourSettings = null;
        wwtlib.TourPlayer._playing = false;
        if (this._tour.get_currentTourStop() != null) {
            if (this._tour.get_currentTourStop().get_musicTrack() != null) {
                this._tour.get_currentTourStop().get_musicTrack().stop();
            }
            if (this._tour.get_currentTourStop().get_voiceTrack() != null) {
                this._tour.get_currentTourStop().get_voiceTrack().stop();
            }
            var $enum1 = ss.IEnumerator.getEnumerator(this._tour.get_currentTourStop().get_overlays());
            while ($enum1.moveNext()) {
                var overlay = $enum1.current;
                overlay.stop();
            }
        }
        if (this._currentMasterSlide != null) {
            if (this._currentMasterSlide.get_musicTrack() != null) {
                this._currentMasterSlide.get_musicTrack().stop();
            }
            if (this._currentMasterSlide.get_voiceTrack() != null) {
                this._currentMasterSlide.get_voiceTrack().stop();
            }
            var $enum2 = ss.IEnumerator.getEnumerator(this._currentMasterSlide.get_overlays());
            while ($enum2.moveNext()) {
                var overlay = $enum2.current;
                overlay.stop();
            }
        }
        wwtlib.WWTControl.singleton._hideUI(wwtlib.TourPlayer.noRestoreUIOnStop);
    },
    
    updateSlideStates: function wwtlib_TourPlayer$updateSlideStates() {
        var slideElapsedTime = Date.get_now() - this._slideStartTime;
        if (slideElapsedTime > this._tour.get_currentTourStop().get_duration() && wwtlib.TourPlayer._playing) {
            this.nextSlide();
        }
        slideElapsedTime = Date.get_now() - this._slideStartTime;
        this._tour.get_currentTourStop().set_tweenPosition((slideElapsedTime / this._tour.get_currentTourStop().get_duration()));
    },
    
    updateTweenPosition: function wwtlib_TourPlayer$updateTweenPosition(tween) {
        /// <param name="tween" type="Number">
        /// </param>
        /// <returns type="Number"></returns>
        var slideElapsedTime = Date.get_now() - this._slideStartTime;
        if (tween > -1) {
            return this._tour.get_currentTourStop().set_tweenPosition(Math.min(1, tween));
        }
        else {
            return this._tour.get_currentTourStop().set_tweenPosition(Math.min(1, (slideElapsedTime / this._tour.get_currentTourStop().get_duration())));
        }
    },
    
    close: function wwtlib_TourPlayer$close() {
        if (this._tour != null) {
            if (wwtlib.TourPlayer.get_playing()) {
                this.stop(wwtlib.TourPlayer._switchedToFullScreen);
            }
            this._tour = null;
        }
    },
    
    mouseDown: function wwtlib_TourPlayer$mouseDown(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ElementEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        var location;
        location = this.pointToView(wwtlib.Vector2d.create(e.offsetX, e.offsetY));
        if (this._tour == null || this._tour.get_currentTourStop() == null) {
            return false;
        }
        for (var i = this._tour.get_currentTourStop().get_overlays().length - 1; i >= 0; i--) {
            if (this._tour.get_currentTourStop().get_overlays()[i].hitTest(location)) {
                if (!String.isNullOrEmpty(this._tour.get_currentTourStop().get_overlays()[i].get_url())) {
                    var linkItem = this._tour.get_currentTourStop().get_overlays()[i];
                    wwtlib._util._openUrl(linkItem.get_url(), true);
                    return true;
                }
                if (!String.isNullOrEmpty(this._tour.get_currentTourStop().get_overlays()[i].get_linkID())) {
                    this._callStack.push(this._tour.get_currentTourstopIndex());
                    this._playFromTourstop(this._tour.get_tourStops()[this._tour.getTourStopIndexByID(this._tour.get_currentTourStop().get_overlays()[i].get_linkID())]);
                    return true;
                }
            }
        }
        if (this._playerState.get_state()) {
            return this._hitTextPlayerControls(wwtlib.Vector2d.create(e.offsetX, e.offsetY), true, true);
        }
        else {
            this._playerState.set_targetState(true);
            this._lastHit = Date.get_now();
        }
        return false;
    },
    
    mouseUp: function wwtlib_TourPlayer$mouseUp(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ElementEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (this._leftDown || this._rightDown || this._middleDown) {
            this._leftDown = false;
            this._rightDown = false;
            this._middleDown = false;
            return true;
        }
        return false;
    },
    
    mouseMove: function wwtlib_TourPlayer$mouseMove(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ElementEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        var location;
        try {
            location = this.pointToView(wwtlib.Vector2d.create(e.offsetX, e.offsetY));
        }
        catch ($e1) {
            return false;
        }
        if (this._tour == null || this._tour.get_currentTourStop() == null) {
            return false;
        }
        for (var i = this._tour.get_currentTourStop().get_overlays().length - 1; i >= 0; i--) {
            if (this._tour.get_currentTourStop().get_overlays()[i].hitTest(location) && (!String.isNullOrEmpty(this._tour.get_currentTourStop().get_overlays()[i].get_url()) || !String.isNullOrEmpty(this._tour.get_currentTourStop().get_overlays()[i].get_linkID()))) {
                return true;
            }
        }
        if (this._playerState.get_state()) {
            return this._hitTextPlayerControls(wwtlib.Vector2d.create(e.offsetX, e.offsetY), false, false);
        }
        return false;
    },
    
    mouseClick: function wwtlib_TourPlayer$mouseClick(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ElementEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    click: function wwtlib_TourPlayer$click(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ElementEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    mouseDoubleClick: function wwtlib_TourPlayer$mouseDoubleClick(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ElementEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    keyDown: function wwtlib_TourPlayer$keyDown(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ElementEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        switch (e.keyCode) {
            case 27:
                this.stop(wwtlib.TourPlayer._switchedToFullScreen);
                wwtlib.WWTControl.singleton._closeTour();
                return true;
            case 32:
                this.pauseTour();
                return true;
            case 39:
                this._playNextSlide();
                return true;
            case 37:
                this._playPreviousSlide();
                return true;
            case 35:
                if (this._tour.get_tourStops().length > 0) {
                    this._playFromTourstop(this._tour.get_tourStops()[this._tour.get_tourStops().length - 1]);
                }
                return true;
            case 36:
                if (this._tour.get_tourStops().length > 0) {
                    this._playFromTourstop(this._tour.get_tourStops()[0]);
                }
                return true;
        }
        return false;
    },
    
    _playNextSlide: function wwtlib_TourPlayer$_playNextSlide() {
        if ((this._tour.get_currentTourstopIndex() < this._tour.get_tourStops().length - 1) && this._tour.get_tourStops().length > 0) {
            this._playFromTourstop(this._tour.get_tourStops()[this._tour.get_currentTourstopIndex() + 1]);
        }
    },
    
    _playPreviousSlide: function wwtlib_TourPlayer$_playPreviousSlide() {
        if (this._tour.get_currentTourstopIndex() > 0) {
            this._playFromTourstop(this._tour.get_tourStops()[this._tour.get_currentTourstopIndex() - 1]);
        }
    },
    
    _playFromTourstop: function wwtlib_TourPlayer$_playFromTourstop(tourStop) {
        /// <param name="tourStop" type="wwtlib.TourStop">
        /// </param>
        this.stop(true);
        this._tour.set_currentTourStop(tourStop);
        wwtlib.WWTControl.singleton.gotoTarget(this._tour.get_currentTourStop().get_target(), false, true, false);
        wwtlib.SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
        wwtlib.SpaceTimeController.set_syncToClock(false);
        this.play();
    },
    
    pauseTour: function wwtlib_TourPlayer$pauseTour() {
        if (wwtlib.TourPlayer._playing) {
            this.stop(wwtlib.TourPlayer._switchedToFullScreen);
            wwtlib.WWTControl.singleton._freezeView();
        }
        else {
            this.play();
        }
    },
    
    keyUp: function wwtlib_TourPlayer$keyUp(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="ElementEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    hover: function wwtlib_TourPlayer$hover(pnt) {
        /// <param name="pnt" type="wwtlib.Vector2d">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (wwtlib.TourPlayer._playing) {
            return true;
        }
        return false;
    },
    
    pointToView: function wwtlib_TourPlayer$pointToView(pnt) {
        /// <param name="pnt" type="wwtlib.Vector2d">
        /// </param>
        /// <returns type="wwtlib.Vector2d"></returns>
        var clientHeight = wwtlib.WWTControl.singleton.canvas.height;
        var clientWidth = wwtlib.WWTControl.singleton.canvas.width;
        var viewWidth = (clientWidth / clientHeight) * 1116;
        var x = ((pnt.x) / (clientWidth) * viewWidth) - ((viewWidth - 1920) / 2);
        var y = (pnt.y) / clientHeight * 1116;
        return wwtlib.Vector2d.create(x, y);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.MasterTime

wwtlib.MasterTime = function wwtlib_MasterTime(master, durration) {
    /// <param name="master" type="wwtlib.TourStop">
    /// </param>
    /// <param name="durration" type="Number">
    /// </param>
    /// <field name="master" type="wwtlib.TourStop">
    /// </field>
    /// <field name="durration" type="Number">
    /// </field>
    this.master = master;
    this.durration = durration;
}
wwtlib.MasterTime.prototype = {
    master: null,
    durration: 0
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.TourStop

wwtlib.TourStop = function wwtlib_TourStop() {
    /// <field name="clipboardFormat" type="String" static="true">
    /// </field>
    /// <field name="_tourStopType" type="wwtlib.ImageSetType">
    /// </field>
    /// <field name="_keyFramed" type="Boolean">
    /// </field>
    /// <field name="_tweenPosition" type="Number">
    /// </field>
    /// <field name="_owner" type="wwtlib.TourDocument">
    /// </field>
    /// <field name="_transition" type="wwtlib._transitionType">
    /// </field>
    /// <field name="_nextSlide" type="String">
    /// </field>
    /// <field name="_fadeInOverlays" type="Boolean">
    /// </field>
    /// <field name="_masterSlide" type="Boolean">
    /// </field>
    /// <field name="_id" type="String">
    /// </field>
    /// <field name="_description" type="String">
    /// </field>
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="_duration" type="Number" integer="true">
    /// </field>
    /// <field name="_target" type="wwtlib.Place">
    /// </field>
    /// <field name="_endTarget" type="wwtlib.Place">
    /// </field>
    /// <field name="_interpolationType" type="wwtlib.InterpolationType">
    /// </field>
    /// <field name="_hasLocation" type="Boolean">
    /// </field>
    /// <field name="_hasTime" type="Boolean">
    /// </field>
    /// <field name="_startTime" type="Date">
    /// </field>
    /// <field name="_endTime" type="Date">
    /// </field>
    /// <field name="_actualPlanetScale" type="Boolean">
    /// </field>
    /// <field name="_locationAltitude" type="Number">
    /// </field>
    /// <field name="_locationLat" type="Number">
    /// </field>
    /// <field name="_locationLng" type="Number">
    /// </field>
    /// <field name="_showClouds" type="Boolean">
    /// </field>
    /// <field name="_showConstellationBoundries" type="Boolean">
    /// </field>
    /// <field name="_showConstellationFigures" type="Boolean">
    /// </field>
    /// <field name="_showConstellationSelection" type="Boolean">
    /// </field>
    /// <field name="_showEcliptic" type="Boolean">
    /// </field>
    /// <field name="_showElevationModel" type="Boolean">
    /// </field>
    /// <field name="_showFieldOfView" type="Boolean">
    /// </field>
    /// <field name="_showGrid" type="Boolean">
    /// </field>
    /// <field name="_showHorizon" type="Boolean">
    /// </field>
    /// <field name="_showHorizonPanorama" type="Boolean">
    /// </field>
    /// <field name="_showMoonsAsPointSource" type="Boolean">
    /// </field>
    /// <field name="_showSolarSystem" type="Boolean">
    /// </field>
    /// <field name="_fovTelescope" type="Number" integer="true">
    /// </field>
    /// <field name="_fovEyepiece" type="Number" integer="true">
    /// </field>
    /// <field name="_fovCamera" type="Number" integer="true">
    /// </field>
    /// <field name="_localHorizonMode" type="Boolean">
    /// </field>
    /// <field name="_galacticMode" type="Boolean">
    /// </field>
    /// <field name="_solarSystemStars" type="Boolean">
    /// </field>
    /// <field name="_solarSystemMilkyWay" type="Boolean">
    /// </field>
    /// <field name="_solarSystemCosmos" type="Boolean">
    /// </field>
    /// <field name="_solarSystemOrbits" type="Boolean">
    /// </field>
    /// <field name="_solarSystemOverlays" type="Boolean">
    /// </field>
    /// <field name="_solarSystemLighting" type="Boolean">
    /// </field>
    /// <field name="_solarSystemScale" type="Number" integer="true">
    /// </field>
    /// <field name="_solarSystemMultiRes" type="Boolean">
    /// </field>
    /// <field name="_showEquatorialGridText" type="Boolean">
    /// </field>
    /// <field name="_showGalacticGrid" type="Boolean">
    /// </field>
    /// <field name="_showGalacticGridText" type="Boolean">
    /// </field>
    /// <field name="_showEclipticGrid" type="Boolean">
    /// </field>
    /// <field name="_showEclipticGridText" type="Boolean">
    /// </field>
    /// <field name="_showEclipticOverviewText" type="Boolean">
    /// </field>
    /// <field name="_showAltAzGrid" type="Boolean">
    /// </field>
    /// <field name="_showAltAzGridText" type="Boolean">
    /// </field>
    /// <field name="_showPrecessionChart" type="Boolean">
    /// </field>
    /// <field name="_showConstellationPictures" type="Boolean">
    /// </field>
    /// <field name="_showConstellationLabels" type="Boolean">
    /// </field>
    /// <field name="_solarSystemCMB" type="Boolean">
    /// </field>
    /// <field name="_solarSystemMinorPlanets" type="Boolean">
    /// </field>
    /// <field name="_solarSystemPlanets" type="Boolean">
    /// </field>
    /// <field name="_showEarthSky" type="Boolean">
    /// </field>
    /// <field name="_solarSystemMinorOrbits" type="Boolean">
    /// </field>
    /// <field name="_constellationsEnabled" type="String">
    /// </field>
    /// <field name="_constellationFiguresFilter" type="wwtlib.ConstellationFilter">
    /// </field>
    /// <field name="_constellationBoundariesFilter" type="wwtlib.ConstellationFilter">
    /// </field>
    /// <field name="_constellationNamesFilter" type="wwtlib.ConstellationFilter">
    /// </field>
    /// <field name="_constellationArtFilter" type="wwtlib.ConstellationFilter">
    /// </field>
    /// <field name="_showSkyOverlays" type="Boolean">
    /// </field>
    /// <field name="_showConstellations" type="Boolean">
    /// </field>
    /// <field name="_showSkyNode" type="Boolean">
    /// </field>
    /// <field name="_showSkyGrids" type="Boolean">
    /// </field>
    /// <field name="_showSkyOverlaysIn3d" type="Boolean">
    /// </field>
    /// <field name="_earthCutawayView" type="Boolean">
    /// </field>
    /// <field name="_showISSModel" type="Boolean">
    /// </field>
    /// <field name="_milkyWayModel" type="Boolean">
    /// </field>
    /// <field name="_minorPlanetsFilter" type="Number" integer="true">
    /// </field>
    /// <field name="_planetOrbitsFilter" type="Number" integer="true">
    /// </field>
    /// <field name="_thumbnailString" type="String">
    /// </field>
    /// <field name="_thumbnail" type="Object" domElement="true">
    /// </field>
    /// <field name="layers" type="Object">
    /// </field>
    /// <field name="_overlays" type="Array">
    /// </field>
    /// <field name="_musicTrack" type="wwtlib.AudioOverlay">
    /// </field>
    /// <field name="_voiceTrack" type="wwtlib.AudioOverlay">
    /// </field>
    this._transition = 0;
    this._interpolationType = 0;
    this._startTime = wwtlib.SpaceTimeController.get_now();
    this._endTime = wwtlib.SpaceTimeController.get_now();
    this._actualPlanetScale = wwtlib.Settings.get_current().get_actualPlanetScale();
    this._locationAltitude = wwtlib.Settings.get_current().get_locationAltitude();
    this._locationLat = wwtlib.Settings.get_current().get_locationLat();
    this._locationLng = wwtlib.Settings.get_current().get_locationLng();
    this._showClouds = wwtlib.Settings.get_current().get_showClouds();
    this._showConstellationBoundries = wwtlib.Settings.get_current().get_showConstellationBoundries();
    this._showConstellationFigures = wwtlib.Settings.get_current().get_showConstellationFigures();
    this._showConstellationSelection = wwtlib.Settings.get_current().get_showConstellationSelection();
    this._showEcliptic = wwtlib.Settings.get_current().get_showEcliptic();
    this._showElevationModel = wwtlib.Settings.get_current().get_showElevationModel();
    this._showFieldOfView = wwtlib.Settings.get_current().get_showFieldOfView();
    this._showGrid = wwtlib.Settings.get_current().get_showGrid();
    this._showHorizon = wwtlib.Settings.get_current().get_showHorizon();
    this._showHorizonPanorama = wwtlib.Settings.get_current().get_showHorizonPanorama();
    this._showMoonsAsPointSource = wwtlib.Settings.get_current().get_showMoonsAsPointSource();
    this._showSolarSystem = wwtlib.Settings.get_current().get_showSolarSystem();
    this._fovTelescope = wwtlib.Settings.get_current().get_fovTelescope();
    this._fovEyepiece = wwtlib.Settings.get_current().get_fovEyepiece();
    this._fovCamera = wwtlib.Settings.get_current().get_fovCamera();
    this._localHorizonMode = wwtlib.Settings.get_current().get_localHorizonMode();
    this._galacticMode = wwtlib.Settings.get_current().get_galacticMode();
    this._solarSystemStars = wwtlib.Settings.get_current().get_solarSystemStars();
    this._solarSystemMilkyWay = wwtlib.Settings.get_current().get_solarSystemMilkyWay();
    this._solarSystemCosmos = wwtlib.Settings.get_current().get_solarSystemCosmos();
    this._solarSystemOrbits = wwtlib.Settings.get_current().get_solarSystemOrbits();
    this._solarSystemOverlays = wwtlib.Settings.get_current().get_solarSystemOverlays();
    this._solarSystemLighting = wwtlib.Settings.get_current().get_solarSystemLighting();
    this._solarSystemScale = wwtlib.Settings.get_current().get_solarSystemScale();
    this._solarSystemMultiRes = wwtlib.Settings.get_current().get_solarSystemMultiRes();
    this._showEquatorialGridText = wwtlib.Settings.get_current().get_showEquatorialGridText();
    this._showGalacticGrid = wwtlib.Settings.get_current().get_showGalacticGrid();
    this._showGalacticGridText = wwtlib.Settings.get_current().get_showGalacticGridText();
    this._showEclipticGrid = wwtlib.Settings.get_current().get_showEclipticGrid();
    this._showEclipticGridText = wwtlib.Settings.get_current().get_showEclipticGridText();
    this._showEclipticOverviewText = wwtlib.Settings.get_current().get_showEclipticOverviewText();
    this._showAltAzGrid = wwtlib.Settings.get_current().get_showAltAzGrid();
    this._showAltAzGridText = wwtlib.Settings.get_current().get_showAltAzGridText();
    this._showPrecessionChart = wwtlib.Settings.get_current().get_showPrecessionChart();
    this._showConstellationPictures = wwtlib.Settings.get_current().get_showConstellationPictures();
    this._showConstellationLabels = wwtlib.Settings.get_current().get_showConstellationLabels();
    this._solarSystemCMB = wwtlib.Settings.get_current().get_solarSystemCMB();
    this._solarSystemMinorPlanets = wwtlib.Settings.get_current().get_solarSystemMinorPlanets();
    this._solarSystemPlanets = wwtlib.Settings.get_current().get_solarSystemPlanets();
    this._showEarthSky = wwtlib.Settings.get_current().get_showEarthSky();
    this._solarSystemMinorOrbits = wwtlib.Settings.get_current().get_solarSystemMinorOrbits();
    this._constellationFiguresFilter = wwtlib.Settings.get_current().get_constellationFiguresFilter().clone();
    this._constellationBoundariesFilter = wwtlib.Settings.get_current().get_constellationBoundariesFilter().clone();
    this._constellationNamesFilter = wwtlib.Settings.get_current().get_constellationNamesFilter().clone();
    this._constellationArtFilter = wwtlib.Settings.get_current().get_constellationArtFilter().clone();
    this._showSkyOverlays = wwtlib.Settings.get_current().get_showSkyOverlays();
    this._showConstellations = wwtlib.Settings.get_current().get_showConstellations();
    this._showSkyNode = wwtlib.Settings.get_current().get_showSkyNode();
    this._showSkyGrids = wwtlib.Settings.get_current().get_showSkyGrids();
    this._showSkyOverlaysIn3d = wwtlib.Settings.get_current().get_showSkyOverlaysIn3d();
    this._earthCutawayView = wwtlib.Settings.get_current().get_earthCutawayView();
    this._showISSModel = wwtlib.Settings.get_current().get_showISSModel();
    this._milkyWayModel = wwtlib.Settings.get_current().get_milkyWayModel();
    this._minorPlanetsFilter = wwtlib.Settings.get_current().get_minorPlanetsFilter();
    this._planetOrbitsFilter = wwtlib.Settings.get_current().get_planetOrbitsFilter();
    this.layers = {};
    this._overlays = [];
    this._id = wwtlib.Guid.newGuid().toString();
}
wwtlib.TourStop._fromXml = function wwtlib_TourStop$_fromXml(owner, tourStop) {
    /// <param name="owner" type="wwtlib.TourDocument">
    /// </param>
    /// <param name="tourStop" type="XmlNode">
    /// </param>
    /// <returns type="wwtlib.TourStop"></returns>
    var newTourStop = new wwtlib.TourStop();
    newTourStop._owner = owner;
    newTourStop.set_id(tourStop.attributes.getNamedItem('Id').nodeValue);
    newTourStop.set_name(tourStop.attributes.getNamedItem('Name').nodeValue);
    newTourStop.set_description(tourStop.attributes.getNamedItem('Description').nodeValue);
    newTourStop._thumbnailString = tourStop.attributes.getNamedItem('Thumbnail').nodeValue;
    newTourStop._duration = wwtlib._util.parseTimeSpan(tourStop.attributes.getNamedItem('Duration').nodeValue);
    if (tourStop.attributes.getNamedItem('Master') != null) {
        newTourStop._masterSlide = Boolean.parse(tourStop.attributes.getNamedItem('Master').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('NextSlide') != null) {
        newTourStop._nextSlide = tourStop.attributes.getNamedItem('NextSlide').nodeValue;
    }
    if (tourStop.attributes.getNamedItem('InterpolationType') != null) {
        switch (tourStop.attributes.getNamedItem('InterpolationType').nodeValue) {
            case 'Linear':
                newTourStop.set_interpolationType(0);
                break;
            case 'EaseIn':
                newTourStop.set_interpolationType(1);
                break;
            case 'EaseOut':
                newTourStop.set_interpolationType(2);
                break;
            case 'EaseInOut':
                newTourStop.set_interpolationType(3);
                break;
            case 'Exponential':
                newTourStop.set_interpolationType(4);
                break;
            case 'Default':
                newTourStop.set_interpolationType(5);
                break;
            default:
                newTourStop.set_interpolationType(0);
                break;
        }
    }
    newTourStop._fadeInOverlays = true;
    if (tourStop.attributes.getNamedItem('FadeInOverlays') != null) {
        newTourStop._fadeInOverlays = Boolean.parse(tourStop.attributes.getNamedItem('FadeInOverlays').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('Transition') != null) {
        switch (tourStop.attributes.getNamedItem('Transition').nodeValue) {
            case 'Slew':
                newTourStop._transition = 0;
                break;
            case 'Instant':
                newTourStop._transition = 1;
                break;
            case 'CrossFade':
                newTourStop._transition = 2;
                break;
            case 'FadeToBlack':
                newTourStop._transition = 3;
                break;
            default:
                break;
        }
    }
    if (tourStop.attributes.getNamedItem('HasLocation') != null) {
        newTourStop._hasLocation = Boolean.parse(tourStop.attributes.getNamedItem('HasLocation').nodeValue);
    }
    if (newTourStop._hasLocation) {
        if (tourStop.attributes.getNamedItem('LocationAltitude') != null) {
            newTourStop._locationAltitude = parseFloat(tourStop.attributes.getNamedItem('LocationAltitude').nodeValue);
        }
        if (tourStop.attributes.getNamedItem('LocationLat') != null) {
            newTourStop._locationLat = parseFloat(tourStop.attributes.getNamedItem('LocationLat').nodeValue);
        }
        if (tourStop.attributes.getNamedItem('LocationLng') != null) {
            newTourStop._locationLng = parseFloat(tourStop.attributes.getNamedItem('LocationLng').nodeValue);
        }
    }
    if (tourStop.attributes.getNamedItem('HasTime') != null) {
        newTourStop._hasTime = Boolean.parse(tourStop.attributes.getNamedItem('HasTime').nodeValue);
        if (newTourStop._hasTime) {
            if (tourStop.attributes.getNamedItem('StartTime') != null) {
                newTourStop._startTime = Date.parseDate(tourStop.attributes.getNamedItem('StartTime').nodeValue);
            }
            if (tourStop.attributes.getNamedItem('EndTime') != null) {
                newTourStop._endTime = Date.parseDate(tourStop.attributes.getNamedItem('EndTime').nodeValue);
            }
        }
    }
    if (tourStop.attributes.getNamedItem('ActualPlanetScale') != null) {
        newTourStop._actualPlanetScale = Boolean.parse(tourStop.attributes.getNamedItem('ActualPlanetScale').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowClouds') != null) {
        newTourStop._showClouds = Boolean.parse(tourStop.attributes.getNamedItem('ShowClouds').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationBoundries') != null) {
        newTourStop._showConstellationBoundries = Boolean.parse(tourStop.attributes.getNamedItem('ShowConstellationBoundries').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationFigures') != null) {
        newTourStop._showConstellationFigures = Boolean.parse(tourStop.attributes.getNamedItem('ShowConstellationFigures').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationSelection') != null) {
        newTourStop._showConstellationSelection = Boolean.parse(tourStop.attributes.getNamedItem('ShowConstellationSelection').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEcliptic') != null) {
        newTourStop._showEcliptic = Boolean.parse(tourStop.attributes.getNamedItem('ShowEcliptic').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowElevationModel') != null) {
        newTourStop._showElevationModel = Boolean.parse(tourStop.attributes.getNamedItem('ShowElevationModel').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowFieldOfView') != null) {
        newTourStop._showFieldOfView = Boolean.parse(tourStop.attributes.getNamedItem('ShowFieldOfView').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowGrid') != null) {
        newTourStop._showGrid = Boolean.parse(tourStop.attributes.getNamedItem('ShowGrid').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowHorizon') != null) {
        newTourStop._showHorizon = Boolean.parse(tourStop.attributes.getNamedItem('ShowHorizon').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowHorizonPanorama') != null) {
        newTourStop._showHorizonPanorama = Boolean.parse(tourStop.attributes.getNamedItem('ShowHorizonPanorama').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowMoonsAsPointSource') != null) {
        newTourStop._showMoonsAsPointSource = Boolean.parse(tourStop.attributes.getNamedItem('ShowMoonsAsPointSource').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowSolarSystem') != null) {
        newTourStop._showSolarSystem = Boolean.parse(tourStop.attributes.getNamedItem('ShowSolarSystem').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('FovTelescope') != null) {
        newTourStop._fovTelescope = parseInt(tourStop.attributes.getNamedItem('FovTelescope').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('FovEyepiece') != null) {
        newTourStop._fovEyepiece = parseInt(tourStop.attributes.getNamedItem('FovEyepiece').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('FovCamera') != null) {
        newTourStop._fovCamera = parseInt(tourStop.attributes.getNamedItem('FovCamera').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('LocalHorizonMode') != null) {
        newTourStop._localHorizonMode = Boolean.parse(tourStop.attributes.getNamedItem('LocalHorizonMode').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('GalacticMode') != null) {
        newTourStop._galacticMode = Boolean.parse(tourStop.attributes.getNamedItem('GalacticMode').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemStars') != null) {
        newTourStop._solarSystemStars = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemStars').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemMilkyWay') != null) {
        newTourStop._solarSystemMilkyWay = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemMilkyWay').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemCosmos') != null) {
        newTourStop._solarSystemCosmos = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemCosmos').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemOrbits') != null) {
        newTourStop._solarSystemOrbits = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemOrbits').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemOverlays') != null) {
        newTourStop._solarSystemOverlays = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemOverlays').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemLighting') != null) {
        newTourStop._solarSystemLighting = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemLighting').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemScale') != null) {
        newTourStop._solarSystemScale = parseInt(tourStop.attributes.getNamedItem('SolarSystemScale').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemMultiRes') != null) {
        newTourStop._solarSystemMultiRes = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemMultiRes').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEquatorialGridText') != null) {
        newTourStop._showEquatorialGridText = Boolean.parse(tourStop.attributes.getNamedItem('ShowEquatorialGridText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowGalacticGrid') != null) {
        newTourStop._showGalacticGrid = Boolean.parse(tourStop.attributes.getNamedItem('ShowGalacticGrid').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowGalacticGridText') != null) {
        newTourStop._showGalacticGridText = Boolean.parse(tourStop.attributes.getNamedItem('ShowGalacticGridText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEclipticGrid') != null) {
        newTourStop._showEclipticGrid = Boolean.parse(tourStop.attributes.getNamedItem('ShowEclipticGrid').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEclipticGridText') != null) {
        newTourStop._showEclipticGridText = Boolean.parse(tourStop.attributes.getNamedItem('ShowEclipticGridText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEclipticOverviewText') != null) {
        newTourStop._showEclipticOverviewText = Boolean.parse(tourStop.attributes.getNamedItem('ShowEclipticOverviewText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowAltAzGrid') != null) {
        newTourStop._showAltAzGrid = Boolean.parse(tourStop.attributes.getNamedItem('ShowAltAzGrid').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowAltAzGridText') != null) {
        newTourStop._showAltAzGridText = Boolean.parse(tourStop.attributes.getNamedItem('ShowAltAzGridText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowPrecessionChart') != null) {
        newTourStop._showPrecessionChart = Boolean.parse(tourStop.attributes.getNamedItem('ShowPrecessionChart').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationPictures') != null) {
        newTourStop._showConstellationPictures = Boolean.parse(tourStop.attributes.getNamedItem('ShowConstellationPictures').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationLabels') != null) {
        newTourStop._showConstellationLabels = Boolean.parse(tourStop.attributes.getNamedItem('ShowConstellationLabels').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemCMB') != null) {
        newTourStop._solarSystemCMB = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemCMB').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemMinorPlanets') != null) {
        newTourStop._solarSystemMinorPlanets = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemMinorPlanets').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemPlanets') != null) {
        newTourStop._solarSystemPlanets = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemPlanets').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEarthSky') != null) {
        newTourStop._showEarthSky = Boolean.parse(tourStop.attributes.getNamedItem('ShowEarthSky').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemMinorOrbits') != null) {
        newTourStop._solarSystemMinorOrbits = Boolean.parse(tourStop.attributes.getNamedItem('SolarSystemMinorOrbits').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowSkyOverlays') != null) {
        newTourStop._showSkyOverlays = Boolean.parse(tourStop.attributes.getNamedItem('ShowSkyOverlays').nodeValue);
    }
    else {
        newTourStop._showSkyOverlays = true;
    }
    if (tourStop.attributes.getNamedItem('ShowConstellations') != null) {
        newTourStop._showConstellations = Boolean.parse(tourStop.attributes.getNamedItem('ShowConstellations').nodeValue);
    }
    else {
        newTourStop._showConstellations = true;
    }
    if (tourStop.attributes.getNamedItem('ShowSkyNode') != null) {
        newTourStop._showSkyNode = Boolean.parse(tourStop.attributes.getNamedItem('ShowSkyNode').nodeValue);
    }
    else {
        newTourStop._showSkyNode = true;
    }
    if (tourStop.attributes.getNamedItem('ShowSkyGrids') != null) {
        newTourStop._showSkyGrids = Boolean.parse(tourStop.attributes.getNamedItem('ShowSkyGrids').nodeValue);
    }
    else {
        newTourStop._showSkyGrids = true;
    }
    if (tourStop.attributes.getNamedItem('ShowSkyOverlaysIn3d') != null) {
        newTourStop._showSkyOverlaysIn3d = Boolean.parse(tourStop.attributes.getNamedItem('ShowSkyOverlaysIn3d').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('EarthCutawayView') != null) {
        newTourStop._earthCutawayView = Boolean.parse(tourStop.attributes.getNamedItem('EarthCutawayView').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowISSModel') != null) {
        newTourStop._showISSModel = Boolean.parse(tourStop.attributes.getNamedItem('ShowISSModel').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('MilkyWayModel') != null) {
        newTourStop._milkyWayModel = Boolean.parse(tourStop.attributes.getNamedItem('MilkyWayModel').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ConstellationBoundariesFilter') != null) {
        newTourStop._constellationBoundariesFilter = wwtlib.ConstellationFilter.parse(tourStop.attributes.getNamedItem('ConstellationBoundariesFilter').nodeValue);
    }
    else {
        newTourStop._constellationBoundariesFilter = wwtlib.ConstellationFilter.get_allConstellation();
    }
    if (tourStop.attributes.getNamedItem('ConstellationBoundariesFilter') != null) {
        newTourStop._constellationFiguresFilter = wwtlib.ConstellationFilter.parse(tourStop.attributes.getNamedItem('ConstellationBoundariesFilter').nodeValue);
    }
    else {
        newTourStop._constellationFiguresFilter = new wwtlib.ConstellationFilter();
    }
    if (tourStop.attributes.getNamedItem('ConstellationNamesFilter') != null) {
        newTourStop._constellationNamesFilter = wwtlib.ConstellationFilter.parse(tourStop.attributes.getNamedItem('ConstellationNamesFilter').nodeValue);
    }
    else {
        newTourStop._constellationNamesFilter = new wwtlib.ConstellationFilter();
    }
    if (tourStop.attributes.getNamedItem('ConstellationArtFilter') != null) {
        newTourStop._constellationArtFilter = wwtlib.ConstellationFilter.parse(tourStop.attributes.getNamedItem('ConstellationArtFilter').nodeValue);
    }
    else {
        newTourStop._constellationArtFilter = new wwtlib.ConstellationFilter();
    }
    if (tourStop.attributes.getNamedItem('MinorPlanetsFilter') != null) {
        newTourStop._minorPlanetsFilter = parseInt(tourStop.attributes.getNamedItem('MinorPlanetsFilter').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('PlanetOrbitsFilter') != null) {
        newTourStop._planetOrbitsFilter = parseInt(tourStop.attributes.getNamedItem('PlanetOrbitsFilter').nodeValue);
    }
    var place = wwtlib._util.selectSingleNode(tourStop, 'Place');
    newTourStop._target = wwtlib.Place._fromXml(place);
    var endTarget = wwtlib._util.selectSingleNode(tourStop, 'EndTarget');
    if (endTarget != null) {
        newTourStop._endTarget = wwtlib.Place._fromXml(endTarget);
    }
    var overlays = wwtlib._util.selectSingleNode(tourStop, 'Overlays');
    var $enum1 = ss.IEnumerator.getEnumerator(overlays.childNodes);
    while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        newTourStop.addOverlay(wwtlib.Overlay._fromXml(newTourStop, overlay));
    }
    var musicNode = wwtlib._util.selectSingleNode(tourStop, 'MusicTrack');
    if (musicNode != null) {
        newTourStop._musicTrack = wwtlib.Overlay._fromXml(newTourStop, wwtlib._util.selectSingleNode(musicNode, 'Overlay'));
    }
    var voiceNode = wwtlib._util.selectSingleNode(tourStop, 'VoiceTrack');
    if (voiceNode != null) {
        newTourStop._voiceTrack = wwtlib.Overlay._fromXml(newTourStop, wwtlib._util.selectSingleNode(voiceNode, 'Overlay'));
    }
    return newTourStop;
}
wwtlib.TourStop.prototype = {
    _tourStopType: 0,
    _keyFramed: false,
    
    get_keyFramed: function wwtlib_TourStop$get_keyFramed() {
        /// <value type="Boolean"></value>
        return this._keyFramed;
    },
    
    get_tourStopType: function wwtlib_TourStop$get_tourStopType() {
        /// <value type="wwtlib.ImageSetType"></value>
        if (this._target.get_backgroundImageset() != null) {
            return this._target.get_backgroundImageset().get_dataSetType();
        }
        else {
            return this._tourStopType;
        }
    },
    set_tourStopType: function wwtlib_TourStop$set_tourStopType(value) {
        /// <value type="wwtlib.ImageSetType"></value>
        if (this._target.get_backgroundImageset() != null) {
            if (this._target.get_backgroundImageset().get_dataSetType() !== value) {
                this._target.set_backgroundImageset(null);
            }
        }
        this._tourStopType = value;
        return value;
    },
    
    _tweenPosition: 0,
    
    get_tweenPosition: function wwtlib_TourStop$get_tweenPosition() {
        /// <value type="Number"></value>
        return this._tweenPosition;
    },
    set_tweenPosition: function wwtlib_TourStop$set_tweenPosition(value) {
        /// <value type="Number"></value>
        if (this._tweenPosition !== value) {
            this._tweenPosition = Math.max(0, Math.min(1, value));
            this.updateTweenPosition();
        }
        return value;
    },
    
    updateTweenPosition: function wwtlib_TourStop$updateTweenPosition() {
        if (this.get_keyFramed()) {
        }
    },
    
    _owner: null,
    
    get_owner: function wwtlib_TourStop$get_owner() {
        /// <value type="wwtlib.TourDocument"></value>
        return this._owner;
    },
    set_owner: function wwtlib_TourStop$set_owner(value) {
        /// <value type="wwtlib.TourDocument"></value>
        this._owner = value;
        return value;
    },
    
    get__transition: function wwtlib_TourStop$get__transition() {
        /// <value type="wwtlib._transitionType"></value>
        return this._transition;
    },
    set__transition: function wwtlib_TourStop$set__transition(value) {
        /// <value type="wwtlib._transitionType"></value>
        if (this._transition !== value) {
            this._transition = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _nextSlide: 'Next',
    
    get_nextSlide: function wwtlib_TourStop$get_nextSlide() {
        /// <value type="String"></value>
        return this._nextSlide;
    },
    set_nextSlide: function wwtlib_TourStop$set_nextSlide(value) {
        /// <value type="String"></value>
        this._nextSlide = value;
        return value;
    },
    
    get_isLinked: function wwtlib_TourStop$get_isLinked() {
        /// <value type="Boolean"></value>
        if (this._nextSlide == null || this._nextSlide === 'Next' || !this._nextSlide) {
            return false;
        }
        return true;
    },
    
    _fadeInOverlays: false,
    
    get_fadeInOverlays: function wwtlib_TourStop$get_fadeInOverlays() {
        /// <value type="Boolean"></value>
        return this._fadeInOverlays;
    },
    set_fadeInOverlays: function wwtlib_TourStop$set_fadeInOverlays(value) {
        /// <value type="Boolean"></value>
        this._fadeInOverlays = value;
        return value;
    },
    
    _masterSlide: false,
    
    get_masterSlide: function wwtlib_TourStop$get_masterSlide() {
        /// <value type="Boolean"></value>
        return this._masterSlide;
    },
    set_masterSlide: function wwtlib_TourStop$set_masterSlide(value) {
        /// <value type="Boolean"></value>
        if (this._masterSlide !== value) {
            this._masterSlide = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _id: null,
    
    get_id: function wwtlib_TourStop$get_id() {
        /// <value type="String"></value>
        return this._id;
    },
    set_id: function wwtlib_TourStop$set_id(value) {
        /// <value type="String"></value>
        this._id = value;
        if (this._owner != null) {
            this._owner.set_tourDirty(true);
        }
        return value;
    },
    
    toString: function wwtlib_TourStop$toString() {
        /// <returns type="String"></returns>
        if (this._target != null) {
            return this.get_target().get_name();
        }
        else {
            return this._description;
        }
    },
    
    _description: null,
    
    get_description: function wwtlib_TourStop$get_description() {
        /// <value type="String"></value>
        return this._description;
    },
    set_description: function wwtlib_TourStop$set_description(value) {
        /// <value type="String"></value>
        if (this._description !== value) {
            this._description = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _name: null,
    
    get_name: function wwtlib_TourStop$get_name() {
        /// <value type="String"></value>
        if (this._target != null) {
            return this._target.get_name();
        }
        return this._name;
    },
    set_name: function wwtlib_TourStop$set_name(value) {
        /// <value type="String"></value>
        if (this._name !== value) {
            this._name = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _duration: 10000,
    
    get_duration: function wwtlib_TourStop$get_duration() {
        /// <value type="Number" integer="true"></value>
        return this._duration;
    },
    set_duration: function wwtlib_TourStop$set_duration(value) {
        /// <value type="Number" integer="true"></value>
        if (this._duration !== value) {
            this._duration = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _target: null,
    
    get_target: function wwtlib_TourStop$get_target() {
        /// <value type="wwtlib.Place"></value>
        return this._target;
    },
    set_target: function wwtlib_TourStop$set_target(value) {
        /// <value type="wwtlib.Place"></value>
        if (this._target !== value) {
            this._target = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _endTarget: null,
    
    get_endTarget: function wwtlib_TourStop$get_endTarget() {
        /// <value type="wwtlib.Place"></value>
        return this._endTarget;
    },
    set_endTarget: function wwtlib_TourStop$set_endTarget(value) {
        /// <value type="wwtlib.Place"></value>
        if (this._endTarget !== value) {
            this._endTarget = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    get_interpolationType: function wwtlib_TourStop$get_interpolationType() {
        /// <value type="wwtlib.InterpolationType"></value>
        return this._interpolationType;
    },
    set_interpolationType: function wwtlib_TourStop$set_interpolationType(value) {
        /// <value type="wwtlib.InterpolationType"></value>
        this._interpolationType = value;
        return value;
    },
    
    _hasLocation: true,
    
    get_hasLocation: function wwtlib_TourStop$get_hasLocation() {
        /// <value type="Boolean"></value>
        return this._hasTime;
    },
    set_hasLocation: function wwtlib_TourStop$set_hasLocation(value) {
        /// <value type="Boolean"></value>
        if (this._hasLocation !== value) {
            this._hasLocation = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _hasTime: true,
    
    get_hasTime: function wwtlib_TourStop$get_hasTime() {
        /// <value type="Boolean"></value>
        return this._hasTime;
    },
    set_hasTime: function wwtlib_TourStop$set_hasTime(value) {
        /// <value type="Boolean"></value>
        if (this._hasTime !== value) {
            this._hasTime = this._hasLocation = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    get_startTime: function wwtlib_TourStop$get_startTime() {
        /// <value type="Date"></value>
        return this._startTime;
    },
    set_startTime: function wwtlib_TourStop$set_startTime(value) {
        /// <value type="Date"></value>
        this._startTime = value;
        if (this._startTime !== value) {
            this._startTime = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    get_endTime: function wwtlib_TourStop$get_endTime() {
        /// <value type="Date"></value>
        return this._endTime;
    },
    set_endTime: function wwtlib_TourStop$set_endTime(value) {
        /// <value type="Date"></value>
        if (this._endTime !== value) {
            this._endTime = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _constellationsEnabled: '',
    
    captureSettings: function wwtlib_TourStop$captureSettings() {
        this._startTime = wwtlib.SpaceTimeController.get_now();
        this._actualPlanetScale = wwtlib.Settings.get_current().get_actualPlanetScale();
        this._locationAltitude = wwtlib.Settings.get_current().get_locationAltitude();
        this._locationLat = wwtlib.Settings.get_current().get_locationLat();
        this._locationLng = wwtlib.Settings.get_current().get_locationLng();
        this._showClouds = wwtlib.Settings.get_current().get_showClouds();
        this._showConstellationBoundries = wwtlib.Settings.get_current().get_showConstellationBoundries();
        this._showConstellationFigures = wwtlib.Settings.get_current().get_showConstellationFigures();
        this._showConstellationSelection = wwtlib.Settings.get_current().get_showConstellationSelection();
        this._showEcliptic = wwtlib.Settings.get_current().get_showEcliptic();
        this._showElevationModel = wwtlib.Settings.get_current().get_showElevationModel();
        this._showFieldOfView = wwtlib.Settings.get_current().get_showFieldOfView();
        this._showGrid = wwtlib.Settings.get_current().get_showGrid();
        this._showHorizon = wwtlib.Settings.get_current().get_showHorizon();
        this._showHorizonPanorama = wwtlib.Settings.get_current().get_showHorizonPanorama();
        this._showMoonsAsPointSource = wwtlib.Settings.get_current().get_showMoonsAsPointSource();
        this._showSolarSystem = wwtlib.Settings.get_current().get_showSolarSystem();
        this._fovTelescope = wwtlib.Settings.get_current().get_fovTelescope();
        this._fovEyepiece = wwtlib.Settings.get_current().get_fovEyepiece();
        this._fovCamera = wwtlib.Settings.get_current().get_fovCamera();
        this._localHorizonMode = wwtlib.Settings.get_current().get_localHorizonMode();
        this._galacticMode = wwtlib.Settings.get_current().get_galacticMode();
        this._solarSystemStars = wwtlib.Settings.get_current().get_solarSystemStars();
        this._solarSystemMilkyWay = wwtlib.Settings.get_current().get_solarSystemMilkyWay();
        this._solarSystemCosmos = wwtlib.Settings.get_current().get_solarSystemCosmos();
        this._solarSystemOrbits = wwtlib.Settings.get_current().get_solarSystemOrbits();
        this._solarSystemOverlays = wwtlib.Settings.get_current().get_solarSystemOverlays();
        this._solarSystemLighting = wwtlib.Settings.get_current().get_solarSystemLighting();
        this._solarSystemScale = wwtlib.Settings.get_current().get_solarSystemScale();
        this._solarSystemMultiRes = wwtlib.Settings.get_current().get_solarSystemMultiRes();
        this._showEquatorialGridText = wwtlib.Settings.get_current().get_showEquatorialGridText();
        this._showGalacticGrid = wwtlib.Settings.get_current().get_showGalacticGrid();
        this._showGalacticGridText = wwtlib.Settings.get_current().get_showGalacticGridText();
        this._showEclipticGrid = wwtlib.Settings.get_current().get_showEclipticGrid();
        this._showEclipticGridText = wwtlib.Settings.get_current().get_showEclipticGridText();
        this._showEclipticOverviewText = wwtlib.Settings.get_current().get_showEclipticOverviewText();
        this._showAltAzGrid = wwtlib.Settings.get_current().get_showAltAzGrid();
        this._showAltAzGridText = wwtlib.Settings.get_current().get_showAltAzGridText();
        this._showPrecessionChart = wwtlib.Settings.get_current().get_showPrecessionChart();
        this._showConstellationPictures = wwtlib.Settings.get_current().get_showConstellationPictures();
        this._showConstellationLabels = wwtlib.Settings.get_current().get_showConstellationLabels();
        this._solarSystemCMB = wwtlib.Settings.get_current().get_solarSystemCMB();
        this._solarSystemMinorPlanets = wwtlib.Settings.get_current().get_solarSystemMinorPlanets();
        this._solarSystemPlanets = wwtlib.Settings.get_current().get_solarSystemPlanets();
        this._showEarthSky = wwtlib.Settings.get_current().get_showEarthSky();
        this._solarSystemMinorOrbits = wwtlib.Settings.get_current().get_solarSystemMinorOrbits();
        this._constellationFiguresFilter = wwtlib.Settings.get_current().get_constellationFiguresFilter().clone();
        this._constellationBoundariesFilter = wwtlib.Settings.get_current().get_constellationBoundariesFilter().clone();
        this._constellationNamesFilter = wwtlib.Settings.get_current().get_constellationNamesFilter().clone();
        this._constellationArtFilter = wwtlib.Settings.get_current().get_constellationArtFilter().clone();
        this._showSkyOverlays = wwtlib.Settings.get_current().get_showSkyOverlays();
        this._showConstellations = wwtlib.Settings.get_current().get_showConstellations();
        this._showSkyNode = wwtlib.Settings.get_current().get_showSkyNode();
        this._showSkyGrids = wwtlib.Settings.get_current().get_showSkyGrids();
        this._showSkyOverlaysIn3d = wwtlib.Settings.get_current().get_showSkyOverlaysIn3d();
        this._earthCutawayView = wwtlib.Settings.get_current().get_earthCutawayView();
        this._showISSModel = wwtlib.Settings.get_current().get_showISSModel();
        this._milkyWayModel = wwtlib.Settings.get_current().get_milkyWayModel();
        this._minorPlanetsFilter = wwtlib.Settings.get_current().get_minorPlanetsFilter();
        this._planetOrbitsFilter = wwtlib.Settings.get_current().get_planetOrbitsFilter();
    },
    
    get_solarSystemStars: function wwtlib_TourStop$get_solarSystemStars() {
        /// <value type="Boolean"></value>
        return this._solarSystemStars;
    },
    
    get_solarSystemMultiRes: function wwtlib_TourStop$get_solarSystemMultiRes() {
        /// <value type="Boolean"></value>
        return this._solarSystemMultiRes;
    },
    
    get_solarSystemMilkyWay: function wwtlib_TourStop$get_solarSystemMilkyWay() {
        /// <value type="Boolean"></value>
        return this._solarSystemMilkyWay;
    },
    
    get_solarSystemCosmos: function wwtlib_TourStop$get_solarSystemCosmos() {
        /// <value type="Boolean"></value>
        return this._solarSystemCosmos;
    },
    
    get_solarSystemOrbits: function wwtlib_TourStop$get_solarSystemOrbits() {
        /// <value type="Boolean"></value>
        return this._solarSystemOrbits;
    },
    
    get_solarSystemOverlays: function wwtlib_TourStop$get_solarSystemOverlays() {
        /// <value type="Boolean"></value>
        return this._solarSystemOverlays;
    },
    
    get_solarSystemLighting: function wwtlib_TourStop$get_solarSystemLighting() {
        /// <value type="Boolean"></value>
        return this._solarSystemLighting;
    },
    
    get_solarSystemScale: function wwtlib_TourStop$get_solarSystemScale() {
        /// <value type="Number" integer="true"></value>
        return this._solarSystemScale;
    },
    
    get_actualPlanetScale: function wwtlib_TourStop$get_actualPlanetScale() {
        /// <value type="Boolean"></value>
        return this._actualPlanetScale;
    },
    
    get_fovCamera: function wwtlib_TourStop$get_fovCamera() {
        /// <value type="Number" integer="true"></value>
        return this._fovCamera;
    },
    
    get_fovEyepiece: function wwtlib_TourStop$get_fovEyepiece() {
        /// <value type="Number" integer="true"></value>
        return this._fovEyepiece;
    },
    
    get_fovTelescope: function wwtlib_TourStop$get_fovTelescope() {
        /// <value type="Number" integer="true"></value>
        return this._fovTelescope;
    },
    
    get_locationAltitude: function wwtlib_TourStop$get_locationAltitude() {
        /// <value type="Number"></value>
        if (this._hasTime) {
            return this._locationAltitude;
        }
        else {
            return wwtlib.Settings.get_current().get_locationAltitude();
        }
    },
    
    get_locationLat: function wwtlib_TourStop$get_locationLat() {
        /// <value type="Number"></value>
        if (this._hasTime) {
            return this._locationLat;
        }
        else {
            return wwtlib.Settings.get_current().get_locationLat();
        }
    },
    
    get_locationLng: function wwtlib_TourStop$get_locationLng() {
        /// <value type="Number"></value>
        if (this._hasTime) {
            return this._locationLng;
        }
        else {
            return wwtlib.Settings.get_current().get_locationLng();
        }
    },
    
    get_showClouds: function wwtlib_TourStop$get_showClouds() {
        /// <value type="Boolean"></value>
        return this._showClouds;
    },
    
    get_showConstellationBoundries: function wwtlib_TourStop$get_showConstellationBoundries() {
        /// <value type="Boolean"></value>
        return this._showConstellationBoundries;
    },
    
    get_showConstellationFigures: function wwtlib_TourStop$get_showConstellationFigures() {
        /// <value type="Boolean"></value>
        return this._showConstellationFigures;
    },
    
    get_showConstellationSelection: function wwtlib_TourStop$get_showConstellationSelection() {
        /// <value type="Boolean"></value>
        return this._showConstellationSelection;
    },
    
    get_showEcliptic: function wwtlib_TourStop$get_showEcliptic() {
        /// <value type="Boolean"></value>
        return this._showEcliptic;
    },
    
    get_showElevationModel: function wwtlib_TourStop$get_showElevationModel() {
        /// <value type="Boolean"></value>
        return this._showElevationModel;
    },
    
    get_showFieldOfView: function wwtlib_TourStop$get_showFieldOfView() {
        /// <value type="Boolean"></value>
        return this._showFieldOfView;
    },
    
    get_showGrid: function wwtlib_TourStop$get_showGrid() {
        /// <value type="Boolean"></value>
        return this._showGrid;
    },
    
    get_showHorizon: function wwtlib_TourStop$get_showHorizon() {
        /// <value type="Boolean"></value>
        return this._showHorizon;
    },
    
    get_showHorizonPanorama: function wwtlib_TourStop$get_showHorizonPanorama() {
        /// <value type="Boolean"></value>
        return this._showHorizonPanorama;
    },
    
    get_showMoonsAsPointSource: function wwtlib_TourStop$get_showMoonsAsPointSource() {
        /// <value type="Boolean"></value>
        return this._showMoonsAsPointSource;
    },
    
    get_showSolarSystem: function wwtlib_TourStop$get_showSolarSystem() {
        /// <value type="Boolean"></value>
        return this._showSolarSystem;
    },
    
    get_localHorizonMode: function wwtlib_TourStop$get_localHorizonMode() {
        /// <value type="Boolean"></value>
        return this._localHorizonMode;
    },
    
    get_galacticMode: function wwtlib_TourStop$get_galacticMode() {
        /// <value type="Boolean"></value>
        return this._galacticMode;
    },
    
    _thumbnailString: '',
    _thumbnail: null,
    
    get_thumbnail: function wwtlib_TourStop$get_thumbnail() {
        /// <value type="Object" domElement="true"></value>
        if (this._target != null && this._thumbnail == null) {
            return null;
        }
        return this._thumbnail;
    },
    set_thumbnail: function wwtlib_TourStop$set_thumbnail(value) {
        /// <value type="Object" domElement="true"></value>
        this._thumbnail = value;
        if (this._owner != null) {
            this._owner.set_tourDirty(true);
        }
        return value;
    },
    
    get_overlays: function wwtlib_TourStop$get_overlays() {
        /// <value type="Array"></value>
        return this._overlays;
    },
    
    _musicTrack: null,
    
    get_musicTrack: function wwtlib_TourStop$get_musicTrack() {
        /// <value type="wwtlib.AudioOverlay"></value>
        return this._musicTrack;
    },
    set_musicTrack: function wwtlib_TourStop$set_musicTrack(value) {
        /// <value type="wwtlib.AudioOverlay"></value>
        if (this._musicTrack !== value) {
            this._musicTrack = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    _voiceTrack: null,
    
    get_voiceTrack: function wwtlib_TourStop$get_voiceTrack() {
        /// <value type="wwtlib.AudioOverlay"></value>
        return this._voiceTrack;
    },
    set_voiceTrack: function wwtlib_TourStop$set_voiceTrack(value) {
        /// <value type="wwtlib.AudioOverlay"></value>
        if (this._voiceTrack !== value) {
            this._voiceTrack = value;
            if (this._owner != null) {
                this._owner.set_tourDirty(true);
            }
        }
        return value;
    },
    
    addOverlay: function wwtlib_TourStop$addOverlay(overlay) {
        /// <param name="overlay" type="wwtlib.Overlay">
        /// </param>
        if (overlay == null) {
            return;
        }
        overlay.set_owner(this);
        this._overlays.add(overlay);
        if (this._owner != null) {
            this._owner.set_tourDirty(true);
        }
    },
    
    removeOverlay: function wwtlib_TourStop$removeOverlay(overlay) {
        /// <param name="overlay" type="wwtlib.Overlay">
        /// </param>
        this._overlays.remove(overlay);
        if (this._owner != null) {
            this._owner.set_tourDirty(true);
        }
    },
    
    cleanUp: function wwtlib_TourStop$cleanUp() {
        var $enum1 = ss.IEnumerator.getEnumerator(this.get_overlays());
        while ($enum1.moveNext()) {
            var overlay = $enum1.current;
            overlay.cleanUp();
        }
        if (this._voiceTrack != null) {
            this._voiceTrack.cleanUp();
        }
        if (this._musicTrack != null) {
            this._musicTrack.cleanUp();
        }
    },
    
    sendToBack: function wwtlib_TourStop$sendToBack(target) {
        /// <param name="target" type="wwtlib.Overlay">
        /// </param>
        this._overlays.remove(target);
        this._overlays.insert(0, target);
        if (this._owner != null) {
            this._owner.set_tourDirty(true);
        }
    },
    
    bringToFront: function wwtlib_TourStop$bringToFront(target) {
        /// <param name="target" type="wwtlib.Overlay">
        /// </param>
        this._overlays.remove(target);
        this._overlays.add(target);
        if (this._owner != null) {
            this._owner.set_tourDirty(true);
        }
    },
    
    bringForward: function wwtlib_TourStop$bringForward(target) {
        /// <param name="target" type="wwtlib.Overlay">
        /// </param>
        var index = this._overlays.indexOf(target);
        if (index < this._overlays.length - 1) {
            this._overlays.remove(target);
            this._overlays.insert(index + 1, target);
        }
        if (this._owner != null) {
            this._owner.set_tourDirty(true);
        }
    },
    
    sendBackward: function wwtlib_TourStop$sendBackward(target) {
        /// <param name="target" type="wwtlib.Overlay">
        /// </param>
        var index = this._overlays.indexOf(target);
        if (index > 0) {
            this._overlays.remove(target);
            this._overlays.insert(index - 1, target);
        }
        if (this._owner != null) {
            this._owner.set_tourDirty(true);
        }
    },
    
    getNextOverlay: function wwtlib_TourStop$getNextOverlay(current) {
        /// <param name="current" type="wwtlib.Overlay">
        /// </param>
        /// <returns type="wwtlib.Overlay"></returns>
        if (current == null) {
            if (this._overlays.length > 0) {
                return this._overlays[0];
            }
            else {
                return null;
            }
        }
        var index = this._overlays.indexOf(current);
        if (index < this._overlays.length - 1) {
            return this._overlays[index + 1];
        }
        else {
            return this._overlays[0];
        }
    },
    
    getPerviousOverlay: function wwtlib_TourStop$getPerviousOverlay(current) {
        /// <param name="current" type="wwtlib.Overlay">
        /// </param>
        /// <returns type="wwtlib.Overlay"></returns>
        if (current == null) {
            if (this._overlays.length > 0) {
                return this._overlays[0];
            }
            else {
                return null;
            }
        }
        var index = this._overlays.indexOf(current);
        if (index > 0) {
            return this._overlays[index - 1];
        }
        else {
            return this._overlays[this._overlays.length - 1];
        }
    },
    
    getOverlayById: function wwtlib_TourStop$getOverlayById(id) {
        /// <param name="id" type="String">
        /// </param>
        /// <returns type="wwtlib.Overlay"></returns>
        var $enum1 = ss.IEnumerator.getEnumerator(this._overlays);
        while ($enum1.moveNext()) {
            var ol = $enum1.current;
            if (ol.id === id) {
                return ol;
            }
        }
        return null;
    },
    
    get_tourStopThumbnailFilename: function wwtlib_TourStop$get_tourStopThumbnailFilename() {
        /// <value type="String"></value>
        return String.format('{0}.thumb.png', this._id);
    },
    
    getNextDefaultName: function wwtlib_TourStop$getNextDefaultName(baseName) {
        /// <param name="baseName" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var suffixId = 1;
        var $enum1 = ss.IEnumerator.getEnumerator(this._overlays);
        while ($enum1.moveNext()) {
            var overlay = $enum1.current;
            if (overlay.get_name().startsWith(baseName)) {
                var id = 0;
                try {
                    id = parseInt(overlay.get_name().substr(baseName.length));
                }
                catch ($e2) {
                }
                if (id >= suffixId) {
                    suffixId = id + 1;
                }
            }
        }
        return String.format('{0} {1}', baseName, suffixId);
    },
    
    _updateLayerOpacity: function wwtlib_TourStop$_updateLayerOpacity() {
        if (!this.get_keyFramed()) {
        }
        else {
            this.updateTweenPosition();
        }
    },
    
    get_showEquatorialGridText: function wwtlib_TourStop$get_showEquatorialGridText() {
        /// <value type="Boolean"></value>
        return this._showEquatorialGridText;
    },
    set_showEquatorialGridText: function wwtlib_TourStop$set_showEquatorialGridText(value) {
        /// <value type="Boolean"></value>
        this._showEquatorialGridText = value;
        return value;
    },
    
    get_showGalacticGrid: function wwtlib_TourStop$get_showGalacticGrid() {
        /// <value type="Boolean"></value>
        return this._showGalacticGrid;
    },
    set_showGalacticGrid: function wwtlib_TourStop$set_showGalacticGrid(value) {
        /// <value type="Boolean"></value>
        this._showGalacticGrid = value;
        return value;
    },
    
    get_showGalacticGridText: function wwtlib_TourStop$get_showGalacticGridText() {
        /// <value type="Boolean"></value>
        return this._showGalacticGridText;
    },
    set_showGalacticGridText: function wwtlib_TourStop$set_showGalacticGridText(value) {
        /// <value type="Boolean"></value>
        this._showGalacticGridText = value;
        return value;
    },
    
    get_showEclipticGrid: function wwtlib_TourStop$get_showEclipticGrid() {
        /// <value type="Boolean"></value>
        return this._showEclipticGrid;
    },
    set_showEclipticGrid: function wwtlib_TourStop$set_showEclipticGrid(value) {
        /// <value type="Boolean"></value>
        this._showEclipticGrid = value;
        return value;
    },
    
    get_showEclipticGridText: function wwtlib_TourStop$get_showEclipticGridText() {
        /// <value type="Boolean"></value>
        return this._showEclipticGridText;
    },
    set_showEclipticGridText: function wwtlib_TourStop$set_showEclipticGridText(value) {
        /// <value type="Boolean"></value>
        this._showEclipticGridText = value;
        return value;
    },
    
    get_showEclipticOverviewText: function wwtlib_TourStop$get_showEclipticOverviewText() {
        /// <value type="Boolean"></value>
        return this._showEclipticOverviewText;
    },
    set_showEclipticOverviewText: function wwtlib_TourStop$set_showEclipticOverviewText(value) {
        /// <value type="Boolean"></value>
        this._showEclipticOverviewText = value;
        return value;
    },
    
    get_showAltAzGrid: function wwtlib_TourStop$get_showAltAzGrid() {
        /// <value type="Boolean"></value>
        return this._showAltAzGrid;
    },
    set_showAltAzGrid: function wwtlib_TourStop$set_showAltAzGrid(value) {
        /// <value type="Boolean"></value>
        this._showAltAzGrid = value;
        return value;
    },
    
    get_showAltAzGridText: function wwtlib_TourStop$get_showAltAzGridText() {
        /// <value type="Boolean"></value>
        return this._showAltAzGridText;
    },
    set_showAltAzGridText: function wwtlib_TourStop$set_showAltAzGridText(value) {
        /// <value type="Boolean"></value>
        this._showAltAzGridText = value;
        return value;
    },
    
    get_showPrecessionChart: function wwtlib_TourStop$get_showPrecessionChart() {
        /// <value type="Boolean"></value>
        return this._showPrecessionChart;
    },
    set_showPrecessionChart: function wwtlib_TourStop$set_showPrecessionChart(value) {
        /// <value type="Boolean"></value>
        this._showPrecessionChart = value;
        return value;
    },
    
    get_showConstellationPictures: function wwtlib_TourStop$get_showConstellationPictures() {
        /// <value type="Boolean"></value>
        return this._showConstellationPictures;
    },
    set_showConstellationPictures: function wwtlib_TourStop$set_showConstellationPictures(value) {
        /// <value type="Boolean"></value>
        this._showConstellationPictures = value;
        return value;
    },
    
    get_showConstellationLabels: function wwtlib_TourStop$get_showConstellationLabels() {
        /// <value type="Boolean"></value>
        return this._showConstellationLabels;
    },
    set_showConstellationLabels: function wwtlib_TourStop$set_showConstellationLabels(value) {
        /// <value type="Boolean"></value>
        this._showConstellationLabels = value;
        return value;
    },
    
    get_solarSystemCMB: function wwtlib_TourStop$get_solarSystemCMB() {
        /// <value type="Boolean"></value>
        return this._solarSystemCMB;
    },
    set_solarSystemCMB: function wwtlib_TourStop$set_solarSystemCMB(value) {
        /// <value type="Boolean"></value>
        this._solarSystemCMB = value;
        return value;
    },
    
    get_solarSystemMinorPlanets: function wwtlib_TourStop$get_solarSystemMinorPlanets() {
        /// <value type="Boolean"></value>
        return this._solarSystemMinorPlanets;
    },
    set_solarSystemMinorPlanets: function wwtlib_TourStop$set_solarSystemMinorPlanets(value) {
        /// <value type="Boolean"></value>
        this._solarSystemMinorPlanets = value;
        return value;
    },
    
    get_solarSystemPlanets: function wwtlib_TourStop$get_solarSystemPlanets() {
        /// <value type="Boolean"></value>
        return this._solarSystemPlanets;
    },
    set_solarSystemPlanets: function wwtlib_TourStop$set_solarSystemPlanets(value) {
        /// <value type="Boolean"></value>
        this._solarSystemPlanets = value;
        return value;
    },
    
    get_showEarthSky: function wwtlib_TourStop$get_showEarthSky() {
        /// <value type="Boolean"></value>
        return this._showEarthSky;
    },
    set_showEarthSky: function wwtlib_TourStop$set_showEarthSky(value) {
        /// <value type="Boolean"></value>
        this._showEarthSky = value;
        return value;
    },
    
    get_solarSystemMinorOrbits: function wwtlib_TourStop$get_solarSystemMinorOrbits() {
        /// <value type="Boolean"></value>
        return this._solarSystemMinorOrbits;
    },
    set_solarSystemMinorOrbits: function wwtlib_TourStop$set_solarSystemMinorOrbits(value) {
        /// <value type="Boolean"></value>
        this._solarSystemMinorOrbits = value;
        return value;
    },
    
    get_constellationsEnabled: function wwtlib_TourStop$get_constellationsEnabled() {
        /// <value type="String"></value>
        return this._constellationsEnabled;
    },
    set_constellationsEnabled: function wwtlib_TourStop$set_constellationsEnabled(value) {
        /// <value type="String"></value>
        this._constellationsEnabled = value;
        return value;
    },
    
    get_constellationFiguresFilter: function wwtlib_TourStop$get_constellationFiguresFilter() {
        /// <value type="wwtlib.ConstellationFilter"></value>
        return this._constellationFiguresFilter;
    },
    set_constellationFiguresFilter: function wwtlib_TourStop$set_constellationFiguresFilter(value) {
        /// <value type="wwtlib.ConstellationFilter"></value>
        this._constellationFiguresFilter = value;
        return value;
    },
    
    get_constellationBoundariesFilter: function wwtlib_TourStop$get_constellationBoundariesFilter() {
        /// <value type="wwtlib.ConstellationFilter"></value>
        return this._constellationBoundariesFilter;
    },
    set_constellationBoundariesFilter: function wwtlib_TourStop$set_constellationBoundariesFilter(value) {
        /// <value type="wwtlib.ConstellationFilter"></value>
        this._constellationBoundariesFilter = value;
        return value;
    },
    
    get_constellationNamesFilter: function wwtlib_TourStop$get_constellationNamesFilter() {
        /// <value type="wwtlib.ConstellationFilter"></value>
        return this._constellationNamesFilter;
    },
    set_constellationNamesFilter: function wwtlib_TourStop$set_constellationNamesFilter(value) {
        /// <value type="wwtlib.ConstellationFilter"></value>
        this._constellationNamesFilter = value;
        return value;
    },
    
    get_constellationArtFilter: function wwtlib_TourStop$get_constellationArtFilter() {
        /// <value type="wwtlib.ConstellationFilter"></value>
        return this._constellationArtFilter;
    },
    set_constellationArtFilter: function wwtlib_TourStop$set_constellationArtFilter(value) {
        /// <value type="wwtlib.ConstellationFilter"></value>
        this._constellationArtFilter = value;
        return value;
    },
    
    get_showSkyOverlays: function wwtlib_TourStop$get_showSkyOverlays() {
        /// <value type="Boolean"></value>
        return this._showSkyOverlays;
    },
    set_showSkyOverlays: function wwtlib_TourStop$set_showSkyOverlays(value) {
        /// <value type="Boolean"></value>
        this._showSkyOverlays = value;
        return value;
    },
    
    get_showConstellations: function wwtlib_TourStop$get_showConstellations() {
        /// <value type="Boolean"></value>
        return this._showConstellations;
    },
    set_showConstellations: function wwtlib_TourStop$set_showConstellations(value) {
        /// <value type="Boolean"></value>
        this._showConstellations = value;
        return value;
    },
    
    get_showSkyNode: function wwtlib_TourStop$get_showSkyNode() {
        /// <value type="Boolean"></value>
        return this._showSkyNode;
    },
    set_showSkyNode: function wwtlib_TourStop$set_showSkyNode(value) {
        /// <value type="Boolean"></value>
        this._showSkyNode = value;
        return value;
    },
    
    get_showSkyGrids: function wwtlib_TourStop$get_showSkyGrids() {
        /// <value type="Boolean"></value>
        return this._showSkyGrids;
    },
    set_showSkyGrids: function wwtlib_TourStop$set_showSkyGrids(value) {
        /// <value type="Boolean"></value>
        this._showSkyGrids = value;
        return value;
    },
    
    get_showSkyOverlaysIn3d: function wwtlib_TourStop$get_showSkyOverlaysIn3d() {
        /// <value type="Boolean"></value>
        return this._showSkyOverlaysIn3d;
    },
    set_showSkyOverlaysIn3d: function wwtlib_TourStop$set_showSkyOverlaysIn3d(value) {
        /// <value type="Boolean"></value>
        this._showSkyOverlaysIn3d = value;
        return value;
    },
    
    get_earthCutawayView: function wwtlib_TourStop$get_earthCutawayView() {
        /// <value type="Boolean"></value>
        return this._earthCutawayView;
    },
    set_earthCutawayView: function wwtlib_TourStop$set_earthCutawayView(value) {
        /// <value type="Boolean"></value>
        this._earthCutawayView = value;
        return value;
    },
    
    get_showISSModel: function wwtlib_TourStop$get_showISSModel() {
        /// <value type="Boolean"></value>
        return this._showISSModel;
    },
    set_showISSModel: function wwtlib_TourStop$set_showISSModel(value) {
        /// <value type="Boolean"></value>
        this._showISSModel = value;
        return value;
    },
    
    get_milkyWayModel: function wwtlib_TourStop$get_milkyWayModel() {
        /// <value type="Boolean"></value>
        return this._milkyWayModel;
    },
    set_milkyWayModel: function wwtlib_TourStop$set_milkyWayModel(value) {
        /// <value type="Boolean"></value>
        this._milkyWayModel = value;
        return value;
    },
    
    get_minorPlanetsFilter: function wwtlib_TourStop$get_minorPlanetsFilter() {
        /// <value type="Number" integer="true"></value>
        return this._minorPlanetsFilter;
    },
    set_minorPlanetsFilter: function wwtlib_TourStop$set_minorPlanetsFilter(value) {
        /// <value type="Number" integer="true"></value>
        this._minorPlanetsFilter = value;
        return value;
    },
    
    get_planetOrbitsFilter: function wwtlib_TourStop$get_planetOrbitsFilter() {
        /// <value type="Number" integer="true"></value>
        return this._planetOrbitsFilter;
    },
    set_planetOrbitsFilter: function wwtlib_TourStop$set_planetOrbitsFilter(value) {
        /// <value type="Number" integer="true"></value>
        this._planetOrbitsFilter = value;
        return value;
    },
    
    getSetting: function wwtlib_TourStop$getSetting(type) {
        /// <param name="type" type="wwtlib.StockSkyOverlayTypes">
        /// </param>
        /// <returns type="wwtlib.SettingParameter"></returns>
        return new wwtlib.SettingParameter(false, 1, false, null);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.LayerInfo

wwtlib.LayerInfo = function wwtlib_LayerInfo() {
    /// <field name="id" type="wwtlib.Guid">
    /// </field>
    /// <field name="startOpacity" type="Number">
    /// </field>
    /// <field name="endOpacity" type="Number">
    /// </field>
    /// <field name="frameOpacity" type="Number">
    /// </field>
    /// <field name="startParams" type="Array" elementType="Number">
    /// </field>
    /// <field name="endParams" type="Array" elementType="Number">
    /// </field>
    /// <field name="frameParams" type="Array" elementType="Number">
    /// </field>
    this.id = wwtlib.Guid.newGuid();
    this.startParams = new Array(0);
    this.endParams = new Array(0);
    this.frameParams = new Array(0);
}
wwtlib.LayerInfo.prototype = {
    startOpacity: 1,
    endOpacity: 1,
    frameOpacity: 1
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._triangle

wwtlib._triangle = function wwtlib__triangle() {
    /// <field name="a" type="Number" integer="true">
    /// </field>
    /// <field name="b" type="Number" integer="true">
    /// </field>
    /// <field name="c" type="Number" integer="true">
    /// </field>
    this.a = -1;
    this.b = -1;
    this.c = -1;
}
wwtlib._triangle.create = function wwtlib__triangle$create(a, b, c) {
    /// <param name="a" type="Number" integer="true">
    /// </param>
    /// <param name="b" type="Number" integer="true">
    /// </param>
    /// <param name="c" type="Number" integer="true">
    /// </param>
    /// <returns type="wwtlib._triangle"></returns>
    var temp = new wwtlib._triangle();
    temp.a = a;
    temp.b = b;
    temp.c = c;
    return temp;
}
wwtlib._triangle.prototype = {
    a: 0,
    b: 0,
    c: 0,
    
    subDivide: function wwtlib__triangle$subDivide(triList, vertexList) {
        /// <param name="triList" type="Array">
        /// </param>
        /// <param name="vertexList" type="Array">
        /// </param>
        var a1 = wwtlib.Vector3d.lerp(vertexList[this.b].position, vertexList[this.c].position, 0.5);
        var b1 = wwtlib.Vector3d.lerp(vertexList[this.c].position, vertexList[this.a].position, 0.5);
        var c1 = wwtlib.Vector3d.lerp(vertexList[this.a].position, vertexList[this.b].position, 0.5);
        var a1uv = wwtlib.Vector2d.lerp(wwtlib.Vector2d.create(vertexList[this.b].tu, vertexList[this.b].tv), wwtlib.Vector2d.create(vertexList[this.c].tu, vertexList[this.c].tv), 0.5);
        var b1uv = wwtlib.Vector2d.lerp(wwtlib.Vector2d.create(vertexList[this.c].tu, vertexList[this.c].tv), wwtlib.Vector2d.create(vertexList[this.a].tu, vertexList[this.a].tv), 0.5);
        var c1uv = wwtlib.Vector2d.lerp(wwtlib.Vector2d.create(vertexList[this.a].tu, vertexList[this.a].tv), wwtlib.Vector2d.create(vertexList[this.b].tu, vertexList[this.b].tv), 0.5);
        a1.normalize();
        b1.normalize();
        c1.normalize();
        var aIndex = vertexList.length;
        var bIndex = vertexList.length + 1;
        var cIndex = vertexList.length + 2;
        vertexList.add(wwtlib.PositionTexture.createPosRaw(a1, a1uv.x, a1uv.y));
        vertexList.add(wwtlib.PositionTexture.createPosRaw(b1, b1uv.x, b1uv.y));
        vertexList.add(wwtlib.PositionTexture.createPosRaw(c1, c1uv.x, c1uv.y));
        triList.add(wwtlib._triangle.create(this.a, cIndex, bIndex));
        triList.add(wwtlib._triangle.create(this.b, aIndex, cIndex));
        triList.add(wwtlib._triangle.create(this.c, bIndex, aIndex));
        triList.add(wwtlib._triangle.create(aIndex, bIndex, cIndex));
    },
    
    subDivideNoNormalize: function wwtlib__triangle$subDivideNoNormalize(triList, vertexList) {
        /// <param name="triList" type="Array">
        /// </param>
        /// <param name="vertexList" type="Array">
        /// </param>
        var a1 = wwtlib.Vector3d.lerp(vertexList[this.b].position, vertexList[this.c].position, 0.5);
        var b1 = wwtlib.Vector3d.lerp(vertexList[this.c].position, vertexList[this.a].position, 0.5);
        var c1 = wwtlib.Vector3d.lerp(vertexList[this.a].position, vertexList[this.b].position, 0.5);
        var a1uv = wwtlib.Vector2d.lerp(wwtlib.Vector2d.create(vertexList[this.b].tu, vertexList[this.b].tv), wwtlib.Vector2d.create(vertexList[this.c].tu, vertexList[this.c].tv), 0.5);
        var b1uv = wwtlib.Vector2d.lerp(wwtlib.Vector2d.create(vertexList[this.c].tu, vertexList[this.c].tv), wwtlib.Vector2d.create(vertexList[this.a].tu, vertexList[this.a].tv), 0.5);
        var c1uv = wwtlib.Vector2d.lerp(wwtlib.Vector2d.create(vertexList[this.a].tu, vertexList[this.a].tv), wwtlib.Vector2d.create(vertexList[this.b].tu, vertexList[this.b].tv), 0.5);
        var aIndex = vertexList.length;
        var bIndex = vertexList.length + 1;
        var cIndex = vertexList.length + 2;
        vertexList.add(wwtlib.PositionTexture.createPosRaw(a1, a1uv.x, a1uv.y));
        vertexList.add(wwtlib.PositionTexture.createPosRaw(b1, b1uv.x, b1uv.y));
        vertexList.add(wwtlib.PositionTexture.createPosRaw(c1, c1uv.x, c1uv.y));
        triList.add(wwtlib._triangle.create(this.a, cIndex, bIndex));
        triList.add(wwtlib._triangle.create(this.b, aIndex, cIndex));
        triList.add(wwtlib._triangle.create(this.c, bIndex, aIndex));
        triList.add(wwtlib._triangle.create(aIndex, bIndex, cIndex));
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.UiTools

wwtlib.UiTools = function wwtlib_UiTools() {
    /// <field name="kilometersPerAu" type="Number" static="true">
    /// </field>
    /// <field name="auPerParsec" type="Number" static="true">
    /// </field>
    /// <field name="auPerLightYear" type="Number" static="true">
    /// </field>
    /// <field name="ssmUnitConversion" type="Number" static="true">
    /// </field>
}
wwtlib.UiTools.getNamesStringFromArray = function wwtlib_UiTools$getNamesStringFromArray(array) {
    /// <param name="array" type="Array" elementType="String">
    /// </param>
    /// <returns type="String"></returns>
    var names = '';
    var delim = '';
    var $enum1 = ss.IEnumerator.getEnumerator(array);
    while ($enum1.moveNext()) {
        var name = $enum1.current;
        names += delim;
        names += name;
        delim = ';';
    }
    return names;
}
wwtlib.UiTools.solarSystemToMeters = function wwtlib_UiTools$solarSystemToMeters(SolarSystemCameraDistance) {
    /// <param name="SolarSystemCameraDistance" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return SolarSystemCameraDistance * 149598000 * 370;
}
wwtlib.UiTools.metersToSolarSystemDistance = function wwtlib_UiTools$metersToSolarSystemDistance(meters) {
    /// <param name="meters" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return meters / 370 * 149598000;
}
wwtlib.UiTools.metersToZoom = function wwtlib_UiTools$metersToZoom(meters) {
    /// <param name="meters" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return ((meters / 1000 / 370) - 1E-06) / 4 * 9;
}
wwtlib.UiTools.formatDistance = function wwtlib_UiTools$formatDistance(distance) {
    /// <param name="distance" type="Number">
    /// </param>
    /// <returns type="String"></returns>
    if (distance < 0.1) {
        var km = (distance * 149598000);
        if (km < 10) {
            var m = parseInt((km * 1000));
            return m.format('N1') + ' m';
        }
        else {
            km = parseInt(km);
            return km.format('N1') + ' km';
        }
    }
    else if (distance < (10)) {
        var au = parseInt((distance * 10)) / 10;
        return au.format('N1') + ' au';
    }
    else if (distance < (63239.6717 / 10)) {
        var au = parseInt(distance);
        return au.format('N1') + ' au';
    }
    else if (distance < (63239.6717 * 10)) {
        var ly = parseInt(((distance * 10) / 63239.6717)) / 10;
        return ly.format('N1') + ' ly';
    }
    else if (distance < (63239.6717 * 1000000)) {
        var ly = parseInt((distance / 63239.6717));
        return ly.format('N1') + ' ly';
    }
    else if (distance < (206264.806 * 10000000)) {
        var mpc = parseInt(((distance * 10) / (206264.806 * 1000000))) / 10;
        return mpc.format('N1') + ' Mpc';
    }
    else if (distance < (206264.806 * 1000000000)) {
        var mpc = parseInt((distance / (206264.806 * 1000000)));
        return mpc.format('N1') + ' Mpc';
    }
    else {
        var mpc = parseInt(((distance * 10) / (206264.806 * 1000000000))) / 10;
        return mpc.format('N1') + ' Gpc';
    }
}
wwtlib.UiTools.formatDecimalHours = function wwtlib_UiTools$formatDecimalHours(dayFraction) {
    /// <param name="dayFraction" type="Number">
    /// </param>
    /// <returns type="String"></returns>
    var today = Date.get_now();
    var ts = today.getTimezoneOffset() / 60;
    ts = 0;
    var day = (dayFraction - ts) + 0.0083333334;
    while (day > 24) {
        day -= 24;
    }
    while (day < 0) {
        day += 24;
    }
    var hours = parseInt(day);
    var minutes = parseInt(((day * 60) - (hours * 60)));
    var seconds = parseInt(((day * 3600) - ((hours * 3600) + (minutes * 60))));
    return String.format('{0}:{1}', hours, minutes, seconds);
}
wwtlib.UiTools.splitString = function wwtlib_UiTools$splitString(data, delimiter) {
    /// <param name="data" type="String">
    /// </param>
    /// <param name="delimiter" type="String">
    /// </param>
    /// <returns type="Array"></returns>
    var output = [];
    var nestingLevel = 0;
    var current = 0;
    var count = 0;
    var start = 0;
    while (current < data.length) {
        if (data.substr(current, 1) === '(') {
            nestingLevel++;
        }
        if (data.substr(current, 1) === ')') {
            nestingLevel--;
        }
        if (current === (data.length - 1)) {
            count++;
        }
        if (current === (data.length - 1) || (data.substr(current, 1) === delimiter && delimiter === '\t') || (!nestingLevel && data.substr(current, 1) === delimiter)) {
            output.add(data.substr(start, count));
            start = current + 1;
            count = 0;
        }
        else {
            count++;
        }
        current++;
    }
    return output;
}
wwtlib.UiTools.split = function wwtlib_UiTools$split(data, delimiters) {
    /// <param name="data" type="String">
    /// </param>
    /// <param name="delimiters" type="String">
    /// </param>
    /// <returns type="Array"></returns>
    var output = [];
    var nestingLevel = 0;
    var current = 0;
    var count = 0;
    var start = 0;
    while (current < data.length) {
        if (current === (data.length - 1)) {
            count++;
        }
        if (current === (data.length - 1) || delimiters.indexOf(data.substr(current, 1)) > -1) {
            output.add(data.substr(start, count));
            start = current + 1;
            count = 0;
        }
        else {
            count++;
        }
        current++;
    }
    return output;
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._util

wwtlib._util = function wwtlib__util() {
}
wwtlib._util.getHashCode = function wwtlib__util$getHashCode(target) {
    /// <param name="target" type="String">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var hash = 0;
    if (!target.length) {
        return hash;
    }
    for (var i = 0; i < target.length; i++) {
        var c = target.charCodeAt(i);
        hash = ((hash << 5) - hash) + c;
    }
    return hash;
}
wwtlib._util.logN = function wwtlib__util$logN(num, b) {
    /// <param name="num" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Math.log(num) / Math.log(b);
}
wwtlib._util.getUrlParam = function wwtlib__util$getUrlParam(name) {
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="String"></returns>
    return '';
}
wwtlib._util.getProxiedUrl = function wwtlib__util$getProxiedUrl(url) {
    /// <param name="url" type="String">
    /// </param>
    /// <returns type="String"></returns>
    if (url.toLowerCase().startsWith('http')) {
        return 'http://www.worldwidetelescope.org/webserviceproxy.aspx?targeturl=' + encodeURIComponent(url);
    }
    return url;
}
wwtlib._util.parseTimeSpan = function wwtlib__util$parseTimeSpan(timespan) {
    /// <param name="timespan" type="String">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var val = 0;
    var parts = timespan.split(':');
    if (parts.length === 3) {
        val += parseInt(parts[0]) * 36000000;
        val += parseInt(parts[1]) * 600000;
        val += parseInt((parseFloat(parts[2]) * 1000));
    }
    return val;
}
wwtlib._util.getTourComponent = function wwtlib__util$getTourComponent(url, name) {
    /// <param name="url" type="String">
    /// </param>
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="String"></returns>
    return 'http://www.worldwidetelescope.org/GetTourFile.aspx?targeturl=' + encodeURIComponent(url) + '&filename=' + name;
}
wwtlib._util.selectSingleNode = function wwtlib__util$selectSingleNode(parent, name) {
    /// <param name="parent" type="XmlNode">
    /// </param>
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="XmlNode"></returns>
    var node = null;
    try {
        node = parent.selectSingleNode(name);
    }
    catch ($e1) {
        var $enum2 = ss.IEnumerator.getEnumerator(parent.childNodes);
        while ($enum2.moveNext()) {
            var child = $enum2.current;
            if (child.nodeName === name) {
                node = child;
                break;
            }
        }
    }
    return node;
}
wwtlib._util.getInnerText = function wwtlib__util$getInnerText(node) {
    /// <param name="node" type="XmlNode">
    /// </param>
    /// <returns type="String"></returns>
    if (String.isNullOrEmpty(node.text)) {
        var cn = node;
        return cn.textContent;
    }
    else {
        return node.text;
    }
}
wwtlib._util.getWrappedText = function wwtlib__util$getWrappedText(ctx, text, width) {
    /// <param name="ctx" type="CanvasContext2D">
    /// </param>
    /// <param name="text" type="String">
    /// </param>
    /// <param name="width" type="Number">
    /// </param>
    /// <returns type="Array"></returns>
    var lines = [];
    var words = text.split(' ');
    var currentLine = '';
    for (var i = 0; i < words.length; i++) {
        if (!String.isNullOrEmpty(words[i])) {
            if (!currentLine || ctx.measureText(currentLine + ' ' + words[i]).width < width) {
                currentLine += ' ' + words[i];
            }
            else {
                lines.add(currentLine);
                currentLine = words[i];
            }
        }
    }
    if (!!currentLine) {
        lines.add(currentLine);
    }
    return lines;
}
wwtlib._util.toHex = function wwtlib__util$toHex(number) {
    /// <param name="number" type="Number">
    /// </param>
    /// <returns type="String"></returns>
    var num = Math.max(0, Math.min(parseInt(number), 255));
    return '0123456789ABCDEF'.substr((num - num % 16) / 16, 1) + '0123456789ABCDEF'.substr(num % 16, 1);
}
wwtlib._util.fromHex = function wwtlib__util$fromHex(data) {
    /// <param name="data" type="String">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var val = 0;
    switch (data.substr(1, 1).toUpperCase()) {
        case 'A':
            val += 10;
            break;
        case 'B':
            val += 11;
            break;
        case 'C':
            val += 12;
            break;
        case 'D':
            val += 13;
            break;
        case 'E':
            val += 14;
            break;
        case 'F':
            val += 15;
            break;
        default:
            val += parseInt(data.substr(1, 1));
            break;
    }
    switch (data.substr(0, 1).toUpperCase()) {
        case 'A':
            val += 10 * 16;
            break;
        case 'B':
            val += 11 * 16;
            break;
        case 'C':
            val += 12 * 16;
            break;
        case 'D':
            val += 13 * 16;
            break;
        case 'E':
            val += 14 * 16;
            break;
        case 'F':
            val += 15 * 16;
            break;
        default:
            val += parseInt(data.substr(0, 1)) * 16;
            break;
    }
    return val;
}
wwtlib._util._openUrl = function wwtlib__util$_openUrl(p, p_2) {
    /// <param name="p" type="String">
    /// </param>
    /// <param name="p_2" type="Boolean">
    /// </param>
}
wwtlib._util.log10 = function wwtlib__util$log10(num) {
    /// <param name="num" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Math.log(num) / 2.30258509299405;
}
wwtlib._util.sign = function wwtlib__util$sign(num) {
    /// <param name="num" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    if (num < 0) {
        return -1;
    }
    return 1;
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Rectangle

wwtlib.Rectangle = function wwtlib_Rectangle() {
    /// <field name="x" type="Number">
    /// </field>
    /// <field name="y" type="Number">
    /// </field>
    /// <field name="width" type="Number">
    /// </field>
    /// <field name="height" type="Number">
    /// </field>
}
wwtlib.Rectangle.create = function wwtlib_Rectangle$create(x, y, width, height) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <param name="width" type="Number">
    /// </param>
    /// <param name="height" type="Number">
    /// </param>
    /// <returns type="wwtlib.Rectangle"></returns>
    var temp = new wwtlib.Rectangle();
    temp.x = x;
    temp.y = y;
    temp.width = width;
    temp.height = height;
    return temp;
}
wwtlib.Rectangle.prototype = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    
    get_left: function wwtlib_Rectangle$get_left() {
        /// <value type="Number"></value>
        return this.x;
    },
    
    get_right: function wwtlib_Rectangle$get_right() {
        /// <value type="Number"></value>
        return this.x + this.width;
    },
    
    get_top: function wwtlib_Rectangle$get_top() {
        /// <value type="Number"></value>
        return this.y;
    },
    
    get_bottom: function wwtlib_Rectangle$get_bottom() {
        /// <value type="Number"></value>
        return this.y + this.height;
    },
    
    copy: function wwtlib_Rectangle$copy() {
        /// <returns type="wwtlib.Rectangle"></returns>
        var temp = new wwtlib.Rectangle();
        temp.x = this.x;
        temp.y = this.y;
        temp.width = this.width;
        temp.height = this.height;
        return temp;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Guid

wwtlib.Guid = function wwtlib_Guid() {
    /// <field name="_nextId" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_guid" type="String">
    /// </field>
    this._guid = (wwtlib.Guid._nextId++).toString();
}
wwtlib.Guid.newGuid = function wwtlib_Guid$newGuid() {
    /// <returns type="wwtlib.Guid"></returns>
    return new wwtlib.Guid();
}
wwtlib.Guid.fromString = function wwtlib_Guid$fromString(id) {
    /// <param name="id" type="String">
    /// </param>
    /// <returns type="wwtlib.Guid"></returns>
    var temp = new wwtlib.Guid();
    temp._guid = id;
    return temp;
}
wwtlib.Guid.prototype = {
    
    toString: function wwtlib_Guid$toString() {
        /// <returns type="String"></returns>
        return this._guid;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Mouse

wwtlib.Mouse = function wwtlib_Mouse() {
}
wwtlib.Mouse.offsetX = function wwtlib_Mouse$offsetX(canvas, e) {
    /// <param name="canvas" type="Object" domElement="true">
    /// </param>
    /// <param name="e" type="ElementEvent">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var x = 0;
    var element = canvas;
    var me = e;
    if (element.offsetParent != null) {
        do {
            x += element.offsetLeft;
        } while ((element = element.offsetParent) != null);
    }
    return me.pageX - x;
}
wwtlib.Mouse.offsetY = function wwtlib_Mouse$offsetY(canvas, e) {
    /// <param name="canvas" type="Object" domElement="true">
    /// </param>
    /// <param name="e" type="ElementEvent">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var y = 0;
    var element = canvas;
    var me = e;
    if (element.offsetParent != null) {
        do {
            y += element.offsetTop;
        } while ((element = element.offsetParent) != null);
    }
    return me.pageY - y;
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.VizLayer

wwtlib.VizLayer = function wwtlib_VizLayer() {
    /// <field name="table" type="Array">
    /// </field>
    /// <field name="header" type="Array" elementType="String">
    /// </field>
    /// <field name="items" type="Array">
    /// </field>
    /// <field name="_starProfile" type="Object" domElement="true">
    /// </field>
    /// <field name="_imageReady" type="Boolean">
    /// </field>
    /// <field name="_dateColumn" type="Number" integer="true">
    /// </field>
    /// <field name="_latColumn" type="Number" integer="true">
    /// </field>
    /// <field name="_lngColumn" type="Number" integer="true">
    /// </field>
    /// <field name="_depthColumn" type="Number" integer="true">
    /// </field>
    /// <field name="_magColumn" type="Number" integer="true">
    /// </field>
    /// <field name="earthRadius" type="Number" static="true">
    /// </field>
    /// <field name="_transformedList" type="Array" elementType="Vector3d">
    /// </field>
    /// <field name="_worldList" type="Array" elementType="Vector3d">
    /// </field>
    this.table = [];
    this.items = [];
}
wwtlib.VizLayer.prototype = {
    header: null,
    _starProfile: null,
    _imageReady: false,
    
    load: function wwtlib_VizLayer$load(data) {
        /// <param name="data" type="String">
        /// </param>
        var lines = data.split('\r\n');
        this._starProfile = document.createElement('img');
        this._starProfile.addEventListener('load', ss.Delegate.create(this, function(e) {
            this._imageReady = true;
        }), false);
        this._starProfile.src = 'images/starProfile.png';
        var gotHeader = false;
        var $enum1 = ss.IEnumerator.getEnumerator(lines);
        while ($enum1.moveNext()) {
            var line = $enum1.current;
            if (gotHeader) {
                this.table.add(line.split('\t'));
            }
            else {
                this.header = line.split('\t');
                gotHeader = true;
            }
        }
    },
    
    _dateColumn: 0,
    _latColumn: 1,
    _lngColumn: 2,
    _depthColumn: 3,
    _magColumn: 4,
    _transformedList: null,
    _worldList: null,
    
    prepare: function wwtlib_VizLayer$prepare() {
        this._worldList = new Array(this.table.length);
        this._transformedList = new Array(this.table.length);
        var index = 0;
        var $enum1 = ss.IEnumerator.getEnumerator(this.table);
        while ($enum1.moveNext()) {
            var row = $enum1.current;
            var item = new wwtlib.DataItem();
            item.eventTime = Date.parseDate(row[this._dateColumn]);
            var radius = (6371000 - parseFloat(row[this._depthColumn]) * 1000) / 6371000;
            item.location = wwtlib.Coordinates.geoTo3dRad(parseFloat(row[this._latColumn]), parseFloat(row[this._lngColumn]) + 180, radius);
            item.tranformed = new wwtlib.Vector3d();
            item.size = Math.pow(2, parseFloat(row[this._magColumn])) / 50;
            this._worldList[index] = item.location;
            this._transformedList[index] = item.tranformed;
            this.items.add(item);
            index++;
        }
    },
    
    draw: function wwtlib_VizLayer$draw(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        if (!this._imageReady) {
            return;
        }
        renderContext.device.save();
        renderContext.WVP.projectArrayToScreen(this._worldList, this._transformedList);
        var ctx = renderContext.device;
        ctx.globalAlpha = 0.4;
        var width = renderContext.width;
        var height = renderContext.height;
        var viewPoint = wwtlib.Vector3d.makeCopy(renderContext.get_viewPoint());
        var scaleFactor = renderContext.get_fovScale() / 100;
        var $enum1 = ss.IEnumerator.getEnumerator(this.items);
        while ($enum1.moveNext()) {
            var item = $enum1.current;
            if (item.tranformed.z < 1) {
                var x = item.tranformed.x;
                var y = item.tranformed.y;
                var size = 4 * item.size / scaleFactor;
                var half = size / 2;
                if (x > -half && x < width + half && y > -half && y < height + half) {
                    ctx.drawImage(this._starProfile, x - size / 2, y - size / 2, size, size);
                }
            }
        }
        renderContext.device.restore();
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.DataItem

wwtlib.DataItem = function wwtlib_DataItem() {
    /// <field name="eventTime" type="Date">
    /// </field>
    /// <field name="location" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="tranformed" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="color" type="wwtlib.Color">
    /// </field>
    /// <field name="size" type="Number">
    /// </field>
}
wwtlib.DataItem.prototype = {
    eventTime: null,
    location: null,
    tranformed: null,
    color: null,
    size: 0,
    
    getColor: function wwtlib_DataItem$getColor() {
        /// <returns type="String"></returns>
        return 'Red';
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.WebFile

wwtlib.WebFile = function wwtlib_WebFile(url) {
    /// <param name="url" type="String">
    /// </param>
    /// <field name="_url" type="String">
    /// </field>
    /// <field name="_message" type="String">
    /// </field>
    /// <field name="_state" type="wwtlib.StateType">
    /// </field>
    /// <field name="_data" type="String">
    /// </field>
    /// <field name="_xdr" type="XDomainRequest">
    /// </field>
    /// <field name="_xhr" type="XMLHttpRequest">
    /// </field>
    /// <field name="onStateChange" type="Function">
    /// </field>
    this._url = url;
}
wwtlib.WebFile.prototype = {
    _url: null,
    _message: null,
    _state: 0,
    _data: null,
    _xdr: null,
    _xhr: null,
    
    send: function wwtlib_WebFile$send() {
        var version = navigator.appVersion;
        if (version.indexOf('MSIE 8') > -1 || version.indexOf('MSIE 9') > -1) {
            this._ieCrossDomain();
        }
        else {
            this._CORS();
        }
        this.set_state(0);
    },
    
    onStateChange: null,
    
    get_message: function wwtlib_WebFile$get_message() {
        /// <value type="String"></value>
        return this._message;
    },
    
    get_state: function wwtlib_WebFile$get_state() {
        /// <value type="wwtlib.StateType"></value>
        return this._state;
    },
    set_state: function wwtlib_WebFile$set_state(value) {
        /// <value type="wwtlib.StateType"></value>
        this._state = value;
        if (this.onStateChange != null) {
            this.onStateChange();
        }
        return value;
    },
    
    _loadData: function wwtlib_WebFile$_loadData(textReceived) {
        /// <param name="textReceived" type="String">
        /// </param>
        this._data = textReceived;
        this.set_state(1);
    },
    
    _error: function wwtlib_WebFile$_error() {
        this._message = String.format('Error encountered loading {0}', this._url);
        this.set_state(2);
    },
    
    _timeOut: function wwtlib_WebFile$_timeOut() {
        this._message = String.format('Timeout encountered loading {0}', this._url);
        this.set_state(2);
    },
    
    _ieCrossDomain: function wwtlib_WebFile$_ieCrossDomain() {
        this._xdr = new XDomainRequest();
        this._xdr.onload = ss.Delegate.create(this, function() {
            this._loadData(this._xdr.responseText);
        });
        this._xdr.onTimeout = ss.Delegate.create(this, this._error);
        this._xdr.onError = ss.Delegate.create(this, this._timeOut);
        this._xdr.open('get', this._url);
        this._xdr.send();
    },
    
    _CORS: function wwtlib_WebFile$_CORS() {
        this._xhr = new XMLHttpRequest();
        try {
            this._xhr.open('GET', this._url);
            this._xhr.onreadystatechange = ss.Delegate.create(this, function() {
                if (this._xhr.readyState === 4) {
                    this._loadData(this._xhr.responseText);
                }
            });
            this._xhr.send();
        }
        catch (err) {
            this._message = err.message;
            this.set_state(2);
            throw err;
        }
    },
    
    getText: function wwtlib_WebFile$getText() {
        /// <returns type="String"></returns>
        return this._data;
    },
    
    getXml: function wwtlib_WebFile$getXml() {
        /// <returns type="XmlDocument"></returns>
        return ss.parseXml(this._data);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._wtml

wwtlib._wtml = function wwtlib__wtml() {
}
wwtlib._wtml.getWtmlFile = function wwtlib__wtml$getWtmlFile(url, complete) {
    /// <param name="url" type="String">
    /// </param>
    /// <param name="complete" type="Function">
    /// </param>
    var temp = new wwtlib.Folder();
    temp.loadFromUrl(url, function() {
        wwtlib._wtml.loadImagesets(temp);
        complete();
    });
}
wwtlib._wtml.loadImagesets = function wwtlib__wtml$loadImagesets(folder) {
    /// <param name="folder" type="wwtlib.Folder">
    /// </param>
    var $enum1 = ss.IEnumerator.getEnumerator(folder.get_children());
    while ($enum1.moveNext()) {
        var child = $enum1.current;
        var imageset = null;
        if (Type.canCast(child, wwtlib.Imageset)) {
            imageset = child;
            wwtlib.WWTControl.imageSets.add(imageset);
        }
        if (Type.canCast(child, wwtlib.Place)) {
            var place = child;
            if (place.get_studyImageset() != null) {
                wwtlib.WWTControl.imageSets.add(place.get_studyImageset());
            }
            if (place.get_backgroundImageset() != null) {
                wwtlib.WWTControl.imageSets.add(place.get_backgroundImageset());
            }
        }
    }
    if (!String.isNullOrEmpty(wwtlib.WWTControl.imageSetName)) {
        var name = wwtlib.WWTControl.imageSetName.toLowerCase();
        var $enum2 = ss.IEnumerator.getEnumerator(wwtlib.WWTControl.imageSets);
        while ($enum2.moveNext()) {
            var imageset = $enum2.current;
            if (imageset.get_name().toLowerCase() === name) {
                wwtlib.WWTControl.singleton.renderContext.set_backgroundImageset(imageset);
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.WWTControl

wwtlib.WWTControl = function wwtlib_WWTControl() {
    /// <field name="singleton" type="wwtlib.WWTControl" static="true">
    /// </field>
    /// <field name="renderContext" type="wwtlib.RenderContext">
    /// </field>
    /// <field name="canvas" type="Object" domElement="true">
    /// </field>
    /// <field name="explorer" type="wwtlib.FolderBrowser">
    /// </field>
    /// <field name="imageSets" type="Array" static="true">
    /// </field>
    /// <field name="exploreRoot" type="wwtlib.Folder" static="true">
    /// </field>
    /// <field name="startLat" type="Number" static="true">
    /// </field>
    /// <field name="startLng" type="Number" static="true">
    /// </field>
    /// <field name="startZoom" type="Number" static="true">
    /// </field>
    /// <field name="startMode" type="String" static="true">
    /// </field>
    /// <field name="imageSetName" type="String" static="true">
    /// </field>
    /// <field name="uiController" type="wwtlib.IUiController">
    /// </field>
    /// <field name="_annotations" type="Array">
    /// </field>
    /// <field name="layers" type="Array">
    /// </field>
    /// <field name="_lastUpdate" type="Date">
    /// </field>
    /// <field name="_frameCount" type="Number" integer="true">
    /// </field>
    /// <field name="_zoomMax" type="Number">
    /// </field>
    /// <field name="_zoomMaxSolarSystem" type="Number">
    /// </field>
    /// <field name="_zoomMin" type="Number">
    /// </field>
    /// <field name="_zoomMinSolarSystem" type="Number">
    /// </field>
    /// <field name="showDataLayers" type="Boolean" static="true">
    /// </field>
    /// <field name="_renderNeeded" type="Boolean" static="true">
    /// </field>
    /// <field name="constellationsFigures" type="wwtlib.Constellations" static="true">
    /// </field>
    /// <field name="constellationsBoundries" type="wwtlib.Constellations" static="true">
    /// </field>
    /// <field name="constellation" type="String">
    /// </field>
    /// <field name="renderType" type="wwtlib.ImageSetType">
    /// </field>
    /// <field name="_milkyWayBackground" type="wwtlib.Imageset">
    /// </field>
    /// <field name="_dragCoefficient" type="Number" static="true">
    /// </field>
    /// <field name="_foregroundCanvas" type="Object" domElement="true">
    /// </field>
    /// <field name="_fgDevice" type="CanvasContext2D">
    /// </field>
    /// <field name="_webFolder" type="wwtlib.Folder">
    /// </field>
    /// <field name="_beginZoom" type="Number">
    /// </field>
    /// <field name="_hoverText" type="String">
    /// </field>
    /// <field name="_hoverTextPoint" type="wwtlib.Vector2d">
    /// </field>
    /// <field name="_lastMouseMove" type="Date">
    /// </field>
    /// <field name="_isPintching" type="Boolean">
    /// </field>
    /// <field name="_pointerIds" type="Array" elementType="Number" elementInteger="true">
    /// </field>
    /// <field name="_dragging" type="Boolean">
    /// </field>
    /// <field name="_rect" type="Array" elementType="Vector2d">
    /// </field>
    /// <field name="_mouseDown" type="Boolean">
    /// </field>
    /// <field name="_lastX" type="Number">
    /// </field>
    /// <field name="_lastY" type="Number">
    /// </field>
    /// <field name="_moved" type="Boolean">
    /// </field>
    /// <field name="scriptInterface" type="wwtlib.ScriptInterface" static="true">
    /// </field>
    /// <field name="_tracking" type="Boolean">
    /// </field>
    /// <field name="_trackingObject" type="wwtlib.Place">
    /// </field>
    /// <field name="_solarSystemTrack" type="wwtlib.SolarSystemObjects">
    /// </field>
    /// <field name="_moving" type="Boolean">
    /// </field>
    /// <field name="_targetStudyImageset" type="wwtlib.Imageset">
    /// </field>
    /// <field name="_targetBackgroundImageset" type="wwtlib.Imageset">
    /// </field>
    /// <field name="_tour" type="wwtlib.TourDocument">
    /// </field>
    this._annotations = [];
    this.layers = [];
    this.renderType = 2;
    this._hoverTextPoint = new wwtlib.Vector2d();
    this._lastMouseMove = new Date(1900, 1, 0, 0, 0, 0, 0);
    this._pointerIds = new Array(2);
    this._rect = new Array(2);
    this._solarSystemTrack = 65536;
}
wwtlib.WWTControl.get_renderNeeded = function wwtlib_WWTControl$get_renderNeeded() {
    /// <value type="Boolean"></value>
    return wwtlib.WWTControl._renderNeeded;
}
wwtlib.WWTControl.set_renderNeeded = function wwtlib_WWTControl$set_renderNeeded(value) {
    /// <value type="Boolean"></value>
    wwtlib.WWTControl._renderNeeded = true;
    return value;
}
wwtlib.WWTControl.showExplorerUI = function wwtlib_WWTControl$showExplorerUI() {
    if (wwtlib.WWTControl.singleton != null) {
        wwtlib.WWTControl.singleton.createExplorerUI();
    }
}
wwtlib.WWTControl.initControl = function wwtlib_WWTControl$initControl(DivId) {
    /// <param name="DivId" type="String">
    /// </param>
    /// <returns type="wwtlib.ScriptInterface"></returns>
    return wwtlib.WWTControl.initControlParam(DivId, false);
}
wwtlib.WWTControl.initControlParam = function wwtlib_WWTControl$initControlParam(DivId, webGL) {
    /// <param name="DivId" type="String">
    /// </param>
    /// <param name="webGL" type="Boolean">
    /// </param>
    /// <returns type="wwtlib.ScriptInterface"></returns>
    if (wwtlib.WWTControl.singleton.renderContext.device == null) {
        wwtlib.WWTControl.scriptInterface = new wwtlib.ScriptInterface();
        wwtlib.WWTControl.scriptInterface.settings = wwtlib.Settings.get_current();
        var canvas = wwtlib.WWTControl._createCanvasElement(DivId);
        var webgltext = 'experimental-webgl';
        var gl = null;
        webGL = false;
        if (webGL) {
            gl = canvas.getContext(webgltext);
        }
        if (gl == null) {
            var ctx = canvas.getContext('2d');
            wwtlib.WWTControl.singleton.renderContext.device = ctx;
        }
        else {
            wwtlib.Tile.prepDevice = gl;
            wwtlib.WWTControl.singleton.renderContext.gl = gl;
        }
        wwtlib.WWTControl.singleton.canvas = canvas;
        wwtlib.WWTControl.singleton.renderContext.width = canvas.width;
        wwtlib.WWTControl.singleton.renderContext.height = canvas.height;
        wwtlib.WWTControl.singleton.setup(canvas);
        wwtlib.WWTControl.singleton.renderContext.set_backgroundImageset(wwtlib.Imageset.create('DSS', 'http://cdn.worldwidetelescope.org/wwtweb/dss.aspx?q={1},{2},{3}', 2, 3, 3, 100, 0, 12, 256, 180, '.png', false, '', 0, 0, 0, false, 'http://www.worldwidetelescope.org/thumbnails/DSS.png', true, false, 0, 0, 0, '', '', '', '', 1, 'Sky'));
        if (wwtlib.WWTControl.startMode === 'earth') {
            wwtlib.WWTControl.singleton.renderContext.set_backgroundImageset(wwtlib.Imageset.create('Blue Marble', 'http://www.worldwidetelescope.org/wwtweb/tiles.aspx?q={1},{2},{3},bm200407', 0, 3, 3, 101, 0, 7, 256, 180, '.png', false, '', 0, 0, 0, false, 'http://www.worldwidetelescope.org/wwtweb/thumbnail.aspx?name=bm200407', true, false, 0, 0, 0, '', '', '', '', 6371000, 'Earth'));
        }
        if (wwtlib.WWTControl.startMode === 'bing') {
            wwtlib.WWTControl.singleton.renderContext.set_backgroundImageset(wwtlib.Imageset.create('Virtual Earth Aerial', 'http://a{0}.ortho.tiles.virtualearth.net/tiles/a{1}.jpeg?g=15', 0, 3, 0, 102, 1, 20, 256, 360, '.png', false, '0123', 0, 0, 0, false, 'http://www.worldwidetelescope.org/wwtweb/thumbnail.aspx?name=earth', true, false, 0, 0, 0, '', '', '', '', 6371000, 'Earth'));
        }
    }
    wwtlib.WWTControl.singleton.renderContext.viewCamera.lng += 0;
    wwtlib.WWTControl.singleton.renderContext._initGL();
    wwtlib.WWTControl.singleton.render();
    return wwtlib.WWTControl.scriptInterface;
}
wwtlib.WWTControl.useUserLocation = function wwtlib_WWTControl$useUserLocation() {
    navigator.geolocation.getCurrentPosition(wwtlib.WWTControl._getLocation, wwtlib.WWTControl._getLocationError);
}
wwtlib.WWTControl._getLocation = function wwtlib_WWTControl$_getLocation(pos) {
    /// <param name="pos" type="position">
    /// </param>
    wwtlib.Settings.get_global().set_locationLat(pos.coords.latitude);
    wwtlib.Settings.get_global().set_locationLng(pos.coords.longitude);
    wwtlib.Settings.get_global().set_locationAltitude(pos.coords.altitude);
}
wwtlib.WWTControl._getLocationError = function wwtlib_WWTControl$_getLocationError(pos) {
    /// <param name="pos" type="position">
    /// </param>
    var lat = pos.coords.latitude;
    var lng = pos.coords.longitude;
}
wwtlib.WWTControl._createCanvasElement = function wwtlib_WWTControl$_createCanvasElement(DivId) {
    /// <param name="DivId" type="String">
    /// </param>
    /// <returns type="Object" domElement="true"></returns>
    var canvas = null;
    var div = document.getElementById(DivId);
    var style = div.attributes.getNamedItem('style');
    canvas = document.createElement('canvas');
    canvas.height = parseInt(div.style.height);
    canvas.width = parseInt(div.style.width);
    div.appendChild(canvas);
    return canvas;
}
wwtlib.WWTControl.showFolderUI = function wwtlib_WWTControl$showFolderUI() {
    wwtlib.WWTControl.singleton.createExplorerUI();
}
wwtlib.WWTControl.go = function wwtlib_WWTControl$go(mode, lat, lng, zoom) {
    /// <param name="mode" type="String">
    /// </param>
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <param name="zoom" type="Number">
    /// </param>
    if (mode != null && mode.length > 0) {
        wwtlib.WWTControl.startMode = mode;
    }
    if (!!zoom) {
        wwtlib.WWTControl.startLat = lat;
        wwtlib.WWTControl.startLng = lng;
        wwtlib.WWTControl.startZoom = zoom * 6;
    }
}
wwtlib.WWTControl.setBackgroundImageName = function wwtlib_WWTControl$setBackgroundImageName(name) {
    /// <param name="name" type="String">
    /// </param>
    wwtlib.WWTControl.imageSetName = name;
}
wwtlib.WWTControl.setForegroundImageName = function wwtlib_WWTControl$setForegroundImageName(name) {
    /// <param name="name" type="String">
    /// </param>
    wwtlib.WWTControl.imageSetName = name;
}
wwtlib.WWTControl.showLayers = function wwtlib_WWTControl$showLayers(show) {
    /// <param name="show" type="Boolean">
    /// </param>
    wwtlib.WWTControl.showDataLayers = show;
}
wwtlib.WWTControl.prototype = {
    renderContext: null,
    canvas: null,
    explorer: null,
    uiController: null,
    
    _addAnnotation: function wwtlib_WWTControl$_addAnnotation(annotation) {
        /// <param name="annotation" type="wwtlib.Annotation">
        /// </param>
        this._annotations.add(annotation);
    },
    
    _removeAnnotation: function wwtlib_WWTControl$_removeAnnotation(annotation) {
        /// <param name="annotation" type="wwtlib.Annotation">
        /// </param>
        this._annotations.remove(annotation);
    },
    
    _clearAnnotations: function wwtlib_WWTControl$_clearAnnotations() {
        this._annotations.clear();
    },
    
    _lastUpdate: null,
    _frameCount: 0,
    _zoomMax: 360,
    _zoomMaxSolarSystem: 10000000000000000,
    
    get__zoomMax: function wwtlib_WWTControl$get__zoomMax() {
        /// <value type="Number"></value>
        if (this.renderContext.get_backgroundImageset() != null && this.renderContext.get_backgroundImageset().get_dataSetType() === 4) {
            return this._zoomMaxSolarSystem;
        }
        else {
            return this._zoomMax;
        }
    },
    
    _zoomMin: 0.001373291015625,
    _zoomMinSolarSystem: 0.0001,
    
    get_zoomMin: function wwtlib_WWTControl$get_zoomMin() {
        /// <value type="Number"></value>
        if (this.renderContext.get_backgroundImageset() != null && this.renderContext.get_backgroundImageset().get_dataSetType() === 4) {
            return this._zoomMinSolarSystem / 10000;
        }
        else {
            return this._zoomMin;
        }
    },
    set_zoomMin: function wwtlib_WWTControl$set_zoomMin(value) {
        /// <value type="Number"></value>
        this._zoomMin = value;
        return value;
    },
    
    constellation: 'UMA',
    
    _notifyMoveComplete: function wwtlib_WWTControl$_notifyMoveComplete() {
    },
    
    _milkyWayBackground: null,
    
    render: function wwtlib_WWTControl$render() {
        if (this.renderContext.get_backgroundImageset() != null) {
            this.renderType = this.renderContext.get_backgroundImageset().get_dataSetType();
        }
        else {
            this.renderType = 2;
        }
        var sizeChange = false;
        if (this.canvas.width !== parseInt(this.canvas.parentNode.style.width)) {
            this.canvas.width = parseInt(this.canvas.parentNode.style.width);
            sizeChange = true;
        }
        if (this.canvas.height !== parseInt(this.canvas.parentNode.style.height)) {
            this.canvas.height = parseInt(this.canvas.parentNode.style.height);
            sizeChange = true;
        }
        if (sizeChange) {
            if (this.explorer != null) {
                this.explorer.refresh();
            }
        }
        wwtlib.Tile.lastDeepestLevel = wwtlib.Tile.deepestLevel;
        wwtlib.RenderTriangle.width = this.renderContext.width = this.canvas.width;
        wwtlib.RenderTriangle.height = this.renderContext.height = this.canvas.height;
        wwtlib.Tile.tilesInView = 0;
        wwtlib.Tile.tilesTouched = 0;
        wwtlib.Tile.deepestLevel = 0;
        if (this.get__mover() != null) {
            wwtlib.SpaceTimeController.set_now(this.get__mover().get_currentDateTime());
            wwtlib.Planets.updatePlanetLocations(this.get_solarSystemMode());
            if (this.get__mover() != null) {
                var newCam = this.get__mover().get_currentPosition();
                this.renderContext.targetCamera = newCam.copy();
                this.renderContext.viewCamera = newCam.copy();
                if (this.renderContext.space && wwtlib.Settings.get_active().get_galacticMode()) {
                    var gPoint = wwtlib.Coordinates.j2000toGalactic(newCam.get_RA() * 15, newCam.get_dec());
                    this.renderContext.targetAlt = this.renderContext.alt = gPoint[1];
                    this.renderContext.targetAz = this.renderContext.az = gPoint[0];
                }
                else if (this.renderContext.space && wwtlib.Settings.get_active().get_localHorizonMode()) {
                    var currentAltAz = wwtlib.Coordinates.equitorialToHorizon(wwtlib.Coordinates.fromRaDec(newCam.get_RA(), newCam.get_dec()), wwtlib.SpaceTimeController.get_location(), wwtlib.SpaceTimeController.get_now());
                    this.renderContext.targetAlt = this.renderContext.alt = currentAltAz.get_alt();
                    this.renderContext.targetAz = this.renderContext.az = currentAltAz.get_az();
                }
                if (this.get__mover().get_complete()) {
                    wwtlib.WWTControl.scriptInterface._fireArrived(this.get__mover().get_currentPosition().get_RA(), this.get__mover().get_currentPosition().get_dec(), wwtlib.WWTControl.singleton.renderContext.viewCamera.zoom);
                    this.set__mover(null);
                    this._notifyMoveComplete();
                }
            }
        }
        else {
            wwtlib.SpaceTimeController.updateClock();
            wwtlib.Planets.updatePlanetLocations(this.get_solarSystemMode());
            this._updateViewParameters();
        }
        this.renderContext.clear();
        if (this.renderType === 4) {
            if (this._solarSystemTrack < 20) {
                var radius = wwtlib.Planets.getAdjustedPlanetRadius(this._solarSystemTrack);
                var distance = this.renderContext.get_solarSystemCameraDistance();
                var camAngle = this.renderContext.get_fovLocal();
                var distrad = distance / (radius * Math.tan(0.5 * camAngle));
            }
            if (this._trackingObject == null) {
            }
            this.renderContext.setupMatricesSolarSystem(true);
            var zoom = this.renderContext.viewCamera.zoom;
            var milkyWayBlend = Math.min(1, Math.max(0, (Math.log(zoom) - 8.4)) / 4.2);
            var milkyWayBlendIn = Math.min(1, Math.max(0, (Math.log(zoom) - 17.9)) / 2.3);
            var matOldMW = this.renderContext.get_world();
            var matLocalMW = this.renderContext.get_world().clone();
            matLocalMW._multiply(wwtlib.Matrix3d._scaling(100000, 100000, 100000));
            matLocalMW._multiply(wwtlib.Matrix3d._rotationX(23.5 / 180 * Math.PI));
            matLocalMW._multiply(wwtlib.Matrix3d.translation(this.renderContext.cameraPosition));
            this.renderContext.set_world(matLocalMW);
            this.renderContext.set_worldBase(matLocalMW);
            this.renderContext.space = true;
            this.renderContext.makeFrustum();
            var lighting = this.renderContext.lighting;
            this.renderContext.lighting = false;
            if (wwtlib.Settings.get_active().get_solarSystemMilkyWay()) {
                if (milkyWayBlend < 1) {
                    if (this._milkyWayBackground == null) {
                        this._milkyWayBackground = this.getImagesetByName('Digitized Sky Survey (Color)');
                    }
                    if (this._milkyWayBackground != null) {
                        wwtlib.RenderTriangle.cullInside = true;
                        var c = (1 - milkyWayBlend) / 2;
                        this.renderContext.drawImageSet(this._milkyWayBackground, 100);
                        wwtlib.RenderTriangle.cullInside = false;
                    }
                }
            }
            this._drawSkyOverlays();
            this.renderContext.lighting = lighting;
            this.renderContext.space = false;
            this.renderContext.set_world(matOldMW);
            this.renderContext.set_worldBase(matOldMW);
            this.renderContext.makeFrustum();
            if (this.renderContext.get_solarSystemCameraDistance() < 15000) {
                this.renderContext.setupMatricesSolarSystem(false);
                wwtlib.Planets.drawPlanets3D(this.renderContext, 1, this.renderContext.viewCamera.viewTarget);
            }
        }
        else {
            if (!this.renderType || this.renderType === 1) {
                this.renderContext._setupMatricesLand3d();
            }
            else {
                this.renderContext.setupMatricesSpace3d(this.renderContext.width, this.renderContext.height);
            }
            this.renderContext.drawImageSet(this.renderContext.get_backgroundImageset(), 100);
            if (this.renderContext.get_foregroundImageset() != null) {
                if (this.renderContext.viewCamera.opacity !== 100 && this.renderContext.gl == null) {
                    if (this._foregroundCanvas.width !== this.renderContext.width || this._foregroundCanvas.height !== this.renderContext.height) {
                        this._foregroundCanvas.width = parseInt(this.renderContext.width);
                        this._foregroundCanvas.height = parseInt(this.renderContext.height);
                    }
                    var saveDevice = this.renderContext.device;
                    this._fgDevice.clearRect(0, 0, this.renderContext.width, this.renderContext.height);
                    this.renderContext.device = this._fgDevice;
                    this.renderContext.drawImageSet(this.renderContext.get_foregroundImageset(), 100);
                    this.renderContext.device = saveDevice;
                    this.renderContext.device.save();
                    this.renderContext.device.globalAlpha = this.renderContext.viewCamera.opacity / 100;
                    this.renderContext.device.drawImage(this._foregroundCanvas, 0, 0);
                    this.renderContext.device.restore();
                }
                else {
                    this.renderContext.drawImageSet(this.renderContext.get_foregroundImageset(), this.renderContext.viewCamera.opacity);
                }
            }
            if (this.renderType === 2) {
                wwtlib.Planets.drawPlanets(this.renderContext, 1);
                this.constellation = wwtlib.Constellations.containment.findConstellationForPoint(this.renderContext.viewCamera.get_RA(), this.renderContext.viewCamera.get_dec());
                this._drawSkyOverlays();
                wwtlib.LayerManager._draw(this.renderContext, 1, true, 'Sky', true, true);
            }
            if (!this.renderType) {
                wwtlib.LayerManager._draw(this.renderContext, 1, false, 'Earth', false, false);
            }
            if (wwtlib.Settings.get_current().get_showCrosshairs()) {
                this._drawCrosshairs(this.renderContext);
            }
            if (this.uiController != null) {
                this.uiController.render(this.renderContext);
            }
            else {
                var index = 0;
                var $enum1 = ss.IEnumerator.getEnumerator(this._annotations);
                while ($enum1.moveNext()) {
                    var item = $enum1.current;
                    item.draw(this.renderContext);
                    index++;
                }
                if ((Date.get_now() - this._lastMouseMove) > 400) {
                    var raDecDown = this.getCoordinatesForScreenPoint(this._hoverTextPoint.x, this._hoverTextPoint.y);
                    this._annotationHover(raDecDown.x, raDecDown.y, this._hoverTextPoint.x, this._hoverTextPoint.y);
                    this._lastMouseMove = new Date(2100, 1, 1);
                }
                if (!String.isNullOrEmpty(this._hoverText)) {
                    this._drawHoverText(this.renderContext);
                }
            }
        }
        var tilesInView = wwtlib.Tile.tilesInView;
        var itlesTouched = wwtlib.Tile.tilesTouched;
        this._frameCount++;
        wwtlib._tileCache.decimateQueue();
        wwtlib._tileCache.processQueue(this.renderContext);
        wwtlib.Tile.currentRenderGeneration++;
        var now = Date.get_now();
        var ms = now - this._lastUpdate;
        if (ms > 1000) {
            var fps = (this._frameCount / ms) * 1000;
            var tps = (wwtlib.RenderTriangle.trianglesRendered / ms) * 100;
            var cullRatio = parseInt((wwtlib.RenderTriangle.trianglesCulled / (wwtlib.RenderTriangle.trianglesCulled + wwtlib.RenderTriangle.trianglesRendered) * 100));
            this._lastUpdate = now;
            this._frameCount = 0;
            wwtlib.RenderTriangle.trianglesRendered = 0;
            wwtlib.RenderTriangle.trianglesCulled = 0;
        }
        window.setTimeout(ss.Delegate.create(this, function() {
            this.render();
        }), 0);
    },
    
    _drawSkyOverlays: function wwtlib_WWTControl$_drawSkyOverlays() {
        if (wwtlib.Settings.get_active().get_showConstellationPictures()) {
            wwtlib.Constellations.drawArtwork(this.renderContext);
        }
        if (wwtlib.Settings.get_active().get_showConstellationFigures()) {
            if (wwtlib.WWTControl.constellationsFigures == null) {
                wwtlib.WWTControl.constellationsFigures = wwtlib.Constellations.create('Constellations', 'http://www.worldwidetelescope.org/data/figures.txt', false, false, false);
            }
            wwtlib.WWTControl.constellationsFigures.draw(this.renderContext, false, 'UMA', false);
        }
        if (wwtlib.Settings.get_active().get_showEclipticGrid()) {
            wwtlib.Grids.drawEclipticGrid(this.renderContext, 1, wwtlib.Colors.get_green());
            if (wwtlib.Settings.get_active().get_showEclipticGridText()) {
                wwtlib.Grids.drawEclipticGridText(this.renderContext, 1, wwtlib.Colors.get_green());
            }
        }
        if (wwtlib.Settings.get_active().get_showGalacticGrid()) {
            wwtlib.Grids.drawGalacticGrid(this.renderContext, 1, wwtlib.Colors.get_cyan());
            if (wwtlib.Settings.get_active().get_showGalacticGridText()) {
                wwtlib.Grids.drawGalacticGridText(this.renderContext, 1, wwtlib.Colors.get_cyan());
            }
        }
        if (wwtlib.Settings.get_active().get_showAltAzGrid()) {
            wwtlib.Grids.drawAltAzGrid(this.renderContext, 1, wwtlib.Colors.get_magenta());
            if (wwtlib.Settings.get_active().get_showAltAzGridText()) {
                wwtlib.Grids.drawAltAzGridText(this.renderContext, 1, wwtlib.Colors.get_magenta());
            }
        }
        if (wwtlib.Settings.get_active().get_showPrecessionChart()) {
            wwtlib.Grids.drawPrecessionChart(this.renderContext, 1, wwtlib.Colors.get_orange());
        }
        if (wwtlib.Settings.get_active().get_showEcliptic()) {
            wwtlib.Grids.drawEcliptic(this.renderContext, 1, wwtlib.Colors.get_blue());
            if (wwtlib.Settings.get_active().get_showEclipticOverviewText()) {
                wwtlib.Grids.drawEclipticText(this.renderContext, 1, wwtlib.Colors.get_blue());
            }
        }
        if (wwtlib.Settings.get_active().get_showGrid()) {
            wwtlib.Grids.drawEquitorialGrid(this.renderContext, 1, wwtlib.Colors.get_white());
            if (wwtlib.Settings.get_active().get_showEquatorialGridText()) {
                wwtlib.Grids.drawEquitorialGridText(this.renderContext, 1, wwtlib.Colors.get_white());
            }
        }
        if (wwtlib.Settings.get_active().get_showConstellationBoundries()) {
            if (wwtlib.WWTControl.constellationsBoundries == null) {
                wwtlib.WWTControl.constellationsBoundries = wwtlib.Constellations.create('Constellations', 'http://www.worldwidetelescope.org/data/constellations.txt', true, false, false);
            }
            wwtlib.WWTControl.constellationsBoundries.draw(this.renderContext, wwtlib.Settings.get_active().get_showConstellationSelection(), this.constellation, false);
        }
        if (wwtlib.Settings.get_active().get_showConstellationLabels()) {
            wwtlib.Constellations.drawConstellationNames(this.renderContext, 1, wwtlib.Colors.get_yellow());
        }
    },
    
    _drawHoverText: function wwtlib_WWTControl$_drawHoverText(RenderContext) {
        /// <param name="RenderContext" type="wwtlib.RenderContext">
        /// </param>
        if (RenderContext.gl == null) {
            var ctx = RenderContext.device;
            ctx.save();
            ctx.fillStyle = 'White';
            ctx.font = '15px Arial';
            ctx.fillText(this._hoverText, this._hoverTextPoint.x, this._hoverTextPoint.y);
            ctx.restore();
        }
    },
    
    rAtoViewLng: function wwtlib_WWTControl$rAtoViewLng(ra) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <returns type="Number"></returns>
        return (((180 - (ra / 24 * 360) - 180) + 540) % 360) - 180;
    },
    
    _updateViewParameters: function wwtlib_WWTControl$_updateViewParameters() {
        if (this.renderContext.space && this._tracking && this._trackingObject != null) {
            if (wwtlib.Settings.get_active().get_galacticMode() && this.renderContext.space) {
                var gPoint = wwtlib.Coordinates.j2000toGalactic(this._trackingObject.get_RA() * 15, this._trackingObject.get_dec());
                this.renderContext.targetAlt = this.renderContext.alt = gPoint[1];
                this.renderContext.targetAz = this.renderContext.az = gPoint[0];
            }
            else if (this.renderContext.space && wwtlib.Settings.get_active().get_localHorizonMode()) {
                var currentAltAz = wwtlib.Coordinates.equitorialToHorizon(wwtlib.Coordinates.fromRaDec(this._trackingObject.get_RA(), this._trackingObject.get_dec()), wwtlib.SpaceTimeController.get_location(), wwtlib.SpaceTimeController.get_now());
                this.renderContext.targetAlt = currentAltAz.get_alt();
                this.renderContext.targetAz = currentAltAz.get_az();
            }
            else {
                this.renderContext.viewCamera.lng = this.renderContext.targetCamera.lng = this.rAtoViewLng(this._trackingObject.get_RA());
                this.renderContext.viewCamera.lat = this.renderContext.targetCamera.lat = this._trackingObject.get_dec();
            }
        }
        else if (!this.get_solarSystemMode()) {
            this._tracking = false;
            this._trackingObject = null;
        }
        var oneMinusDragCoefficient = 1 - 0.8;
        var dc = 0.8;
        if (!this._tracking) {
            var minDelta = (this.renderContext.viewCamera.zoom / 4000);
            if (this.renderContext.viewCamera.zoom > 360) {
                minDelta = (360 / 40000);
            }
            if (this.renderContext.space && (wwtlib.Settings.get_active().get_localHorizonMode() || wwtlib.Settings.get_active().get_galacticMode())) {
                if ((((Math.abs(this.renderContext.targetAlt - this.renderContext.alt) >= minDelta) | (Math.abs(this.renderContext.targetAz - this.renderContext.az) >= minDelta)) === 1)) {
                    this.renderContext.alt += (this.renderContext.targetAlt - this.renderContext.alt) / 10;
                    if (Math.abs(this.renderContext.targetAz - this.renderContext.az) > 170) {
                        if (this.renderContext.targetAz > this.renderContext.az) {
                            this.renderContext.az += (this.renderContext.targetAz - (360 + this.renderContext.az)) / 10;
                        }
                        else {
                            this.renderContext.az += ((360 + this.renderContext.targetAz) - this.renderContext.az) / 10;
                        }
                    }
                    else {
                        this.renderContext.az += (this.renderContext.targetAz - this.renderContext.az) / 10;
                    }
                    this.renderContext.az = ((this.renderContext.az + 720) % 360);
                }
            }
            else {
                if ((((Math.abs(this.renderContext.targetCamera.lat - this.renderContext.viewCamera.lat) >= minDelta) | (Math.abs(this.renderContext.targetCamera.lng - this.renderContext.viewCamera.lng) >= minDelta)) === 1)) {
                    this.renderContext.viewCamera.lat += (this.renderContext.targetCamera.lat - this.renderContext.viewCamera.lat) / 10;
                    if (Math.abs(this.renderContext.targetCamera.lng - this.renderContext.viewCamera.lng) > 170) {
                        if (this.renderContext.targetCamera.lng > this.renderContext.viewCamera.lng) {
                            this.renderContext.viewCamera.lng += (this.renderContext.targetCamera.lng - (360 + this.renderContext.viewCamera.lng)) / 10;
                        }
                        else {
                            this.renderContext.viewCamera.lng += ((360 + this.renderContext.targetCamera.lng) - this.renderContext.viewCamera.lng) / 10;
                        }
                    }
                    else {
                        this.renderContext.viewCamera.lng += (this.renderContext.targetCamera.lng - this.renderContext.viewCamera.lng) / 10;
                    }
                    this.renderContext.viewCamera.lng = ((this.renderContext.viewCamera.lng + 720) % 360);
                }
                else {
                    if (this.renderContext.viewCamera.lat !== this.renderContext.targetCamera.lat || this.renderContext.viewCamera.lng !== this.renderContext.targetCamera.lng) {
                        this.renderContext.viewCamera.lat = this.renderContext.targetCamera.lat;
                        this.renderContext.viewCamera.lng = this.renderContext.targetCamera.lng;
                    }
                }
            }
        }
        this.renderContext.viewCamera.zoom = dc * this.renderContext.viewCamera.zoom + oneMinusDragCoefficient * this.renderContext.targetCamera.zoom;
        this.renderContext.viewCamera.rotation = dc * this.renderContext.viewCamera.rotation + oneMinusDragCoefficient * this.renderContext.targetCamera.rotation;
        this.renderContext.viewCamera.angle = dc * this.renderContext.viewCamera.angle + oneMinusDragCoefficient * this.renderContext.targetCamera.angle;
    },
    
    move: function wwtlib_WWTControl$move(x, y) {
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        var scaleY = this.renderContext.get_fovScale() / (3600);
        if (this.renderContext.get_backgroundImageset().get_dataSetType() === 4) {
            scaleY = 0.06;
        }
        var scaleX = scaleY / Math.max(0.2, Math.cos(this.renderContext.viewCamera.lat / 180 * Math.PI));
        if (!this.renderContext.get_backgroundImageset().get_dataSetType() || this.renderContext.get_backgroundImageset().get_dataSetType() === 1 || this.renderContext.get_backgroundImageset().get_dataSetType() === 4) {
            scaleX = scaleX * 6.3;
            scaleY = scaleY * 6.3;
        }
        if (this.renderContext.space && (wwtlib.Settings.get_active().get_galacticMode() || wwtlib.Settings.get_active().get_localHorizonMode())) {
            x = (wwtlib.Settings.get_active().get_localHorizonMode()) ? -x : x;
            this.renderContext.targetAz += x * scaleX;
            this.renderContext.targetAz = ((this.renderContext.targetAz + 720) % 360);
            this.renderContext.targetAlt += y * scaleY;
            if (this.renderContext.targetAlt > 90) {
                this.renderContext.targetAlt = 90;
            }
            if (this.renderContext.targetAlt < -90) {
                this.renderContext.targetAlt = -90;
            }
        }
        else {
            this.renderContext.targetCamera.lng -= x * scaleX;
            this.renderContext.targetCamera.lng = ((this.renderContext.targetCamera.lng + 720) % 360);
            this.renderContext.targetCamera.lat += y * scaleY;
            if (this.renderContext.targetCamera.lat > 90) {
                this.renderContext.targetCamera.lat = 90;
            }
            if (this.renderContext.targetCamera.lat < -90) {
                this.renderContext.targetCamera.lat = -90;
            }
        }
        if (!wwtlib.Settings.get_global().get_smoothPan()) {
            this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
        }
        if (!!x && !!y) {
            this._tracking = false;
            this._trackingObject = null;
        }
    },
    
    zoom: function wwtlib_WWTControl$zoom(factor) {
        /// <param name="factor" type="Number">
        /// </param>
        this.renderContext.targetCamera.zoom *= factor;
        if (this.renderContext.targetCamera.zoom > 360) {
            this.renderContext.targetCamera.zoom = 360;
        }
        if (!wwtlib.Settings.get_global().get_smoothPan()) {
            this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
        }
    },
    
    _foregroundCanvas: null,
    _fgDevice: null,
    _webFolder: null,
    
    setup: function wwtlib_WWTControl$setup(canvas) {
        /// <param name="canvas" type="Object" domElement="true">
        /// </param>
        canvas.addEventListener('dblclick', ss.Delegate.create(this, this.onDoubleClick), false);
        canvas.addEventListener('mousedown', ss.Delegate.create(this, this.onMouseDown), false);
        canvas.addEventListener('mousewheel', ss.Delegate.create(this, this.onMouseWheel), false);
        canvas.addEventListener('DOMMouseScroll', ss.Delegate.create(this, this.onMouseWheel), false);
        canvas.addEventListener('touchstart', ss.Delegate.create(this, this.onTouchStart), false);
        canvas.addEventListener('touchmove', ss.Delegate.create(this, this.onTouchMove), false);
        canvas.addEventListener('touchend', ss.Delegate.create(this, this.onTouchEnd), false);
        canvas.addEventListener('gesturechange', ss.Delegate.create(this, this.onGestureChange), false);
        canvas.addEventListener('gesturestart', ss.Delegate.create(this, this.onGestureStart), false);
        canvas.addEventListener('gestureend', ss.Delegate.create(this, this.onGestureEnd), false);
        document.body.addEventListener('keydown', ss.Delegate.create(this, this.onKeyDown), false);
        canvas.addEventListener('pointerdown', ss.Delegate.create(this, this.onPointerDown), false);
        canvas.addEventListener('pointermove', ss.Delegate.create(this, this.onPointerMove), false);
        canvas.addEventListener('pointerup', ss.Delegate.create(this, this.onPointerUp), false);
        this.renderContext.viewCamera.lat = wwtlib.WWTControl.startLat;
        this.renderContext.viewCamera.lng = wwtlib.WWTControl.startLng;
        this.renderContext.viewCamera.zoom = wwtlib.WWTControl.startZoom;
        this.renderContext.targetCamera = this.renderContext.viewCamera.copy();
        if (this.renderContext.gl == null) {
            this._foregroundCanvas = document.createElement('canvas');
            this._foregroundCanvas.width = canvas.width;
            this._foregroundCanvas.height = canvas.height;
            this._fgDevice = this._foregroundCanvas.getContext('2d');
        }
        this._webFolder = new wwtlib.Folder();
        this._webFolder.loadFromUrl('http://www.worldwidetelescope.org/wwtweb/catalog.aspx?X=ImageSets5', ss.Delegate.create(this, this.setupComplete));
        var webFile = new wwtlib.WebFile('http://www.worldwidetelescope.org/wwtweb/weblogin.aspx?user=12345678-03D2-4935-8D0F-DCE54C9113E5&Version=HTML5&webkey=AX2011Gqqu&platform=web');
        webFile.send();
    },
    
    setupComplete: function wwtlib_WWTControl$setupComplete() {
        wwtlib._wtml.loadImagesets(this._webFolder);
        wwtlib.WWTControl.scriptInterface._fireReady();
    },
    
    createExplorerUI: function wwtlib_WWTControl$createExplorerUI() {
        if (this.explorer == null) {
            this.explorer = wwtlib.FolderBrowser.create();
            var div = document.getElementById('UI');
            div.insertBefore(this.explorer.canvas);
            wwtlib.WWTControl.exploreRoot = new wwtlib.Folder();
            wwtlib.WWTControl.exploreRoot.loadFromUrl('http://www.worldwidetelescope.org/wwtweb/catalog.aspx?W=NewExploreRoot', ss.Delegate.create(this, function() {
                this.explorer._addItems(wwtlib.WWTControl.exploreRoot.get_children());
                this.explorer.refresh();
            }));
        }
    },
    
    onKeyDown: function wwtlib_WWTControl$onKeyDown(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        if (this.uiController != null) {
            this.uiController.keyDown(this, e);
        }
    },
    
    onDoubleClick: function wwtlib_WWTControl$onDoubleClick(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        wwtlib.WWTControl.showDataLayers = true;
    },
    
    onGestureStart: function wwtlib_WWTControl$onGestureStart(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        this._mouseDown = false;
        this._beginZoom = this.renderContext.viewCamera.zoom;
    },
    
    _beginZoom: 1,
    
    onGestureChange: function wwtlib_WWTControl$onGestureChange(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var g = e;
        this._mouseDown = false;
        this.renderContext.targetCamera.zoom = this.renderContext.viewCamera.zoom = Math.min(360, this._beginZoom * (1 / g.scale));
    },
    
    onGestureEnd: function wwtlib_WWTControl$onGestureEnd(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var g = e;
        this._mouseDown = false;
    },
    
    _annotationclicked: function wwtlib_WWTControl$_annotationclicked(ra, dec, x, y) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (this._annotations != null && this._annotations.length > 0) {
            var index = 0;
            var $enum1 = ss.IEnumerator.getEnumerator(this._annotations);
            while ($enum1.moveNext()) {
                var note = $enum1.current;
                if (note.hitTest(this.renderContext, ra, dec, x, y)) {
                    wwtlib.WWTControl.scriptInterface._fireAnnotationclicked(ra, dec, note.get_id());
                    return true;
                }
                index++;
            }
        }
        return false;
    },
    
    _hoverText: '',
    
    _annotationHover: function wwtlib_WWTControl$_annotationHover(ra, dec, x, y) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (this._annotations != null && this._annotations.length > 0) {
            var index = 0;
            var $enum1 = ss.IEnumerator.getEnumerator(this._annotations);
            while ($enum1.moveNext()) {
                var note = $enum1.current;
                if (note.hitTest(this.renderContext, ra, dec, x, y)) {
                    this._hoverText = note.get_label();
                    this._hoverTextPoint = wwtlib.Vector2d.create(x, y);
                    return true;
                }
                index++;
            }
        }
        return false;
    },
    
    _isPintching: false,
    
    onTouchStart: function wwtlib_WWTControl$onTouchStart(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var ev = e;
        ev.preventDefault();
        ev.stopPropagation();
        this._lastX = ev.targetTouches[0].pageX;
        this._lastY = ev.targetTouches[0].pageY;
        if (ev.targetTouches.length === 2) {
            this._isPintching = true;
            return;
        }
        else if (this.uiController != null) {
            var ee = new wwtlib.WWTElementEvent(this._lastX, this._lastY);
            if (this.uiController.mouseDown(this, ee)) {
                this._mouseDown = false;
                this._dragging = false;
                return;
            }
        }
        this._mouseDown = true;
    },
    
    onPointerDown: function wwtlib_WWTControl$onPointerDown(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var pe = e;
        var index = 0;
        if (!this._pointerIds[0]) {
            this._pointerIds[0] = pe.pointerId;
            index = 0;
        }
        else {
            if (!this._pointerIds[1]) {
                this._pointerIds[1] = pe.pointerId;
                index = 1;
            }
            else {
                return;
            }
        }
        this._rect[index] = wwtlib.Vector2d.create(e.offsetX, e.offsetY);
    },
    
    onPointerMove: function wwtlib_WWTControl$onPointerMove(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var pe = e;
        var index = 0;
        if (this._pointerIds[0] === pe.pointerId) {
            index = 0;
        }
        else {
            if (this._pointerIds[1] === pe.pointerId) {
                index = 1;
            }
            else {
                return;
            }
        }
        if (!!this._pointerIds[0] && !!this._pointerIds[1]) {
            if (this._rect[0] != null) {
                var oldDist = this.getDistance(this._rect[0], this._rect[1]);
                this._rect[index] = wwtlib.Vector2d.create(e.offsetX, e.offsetY);
                var newDist = this.getDistance(this._rect[0], this._rect[1]);
                var ratio = oldDist / newDist;
                this.zoom(ratio);
            }
            e.stopPropagation();
            e.preventDefault();
        }
        this._rect[index] = wwtlib.Vector2d.create(e.offsetX, e.offsetY);
    },
    
    onPointerUp: function wwtlib_WWTControl$onPointerUp(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var pe = e;
        if (this._pointerIds[0] === pe.pointerId) {
            this._pointerIds[0] = 0;
        }
        else {
            if (this._pointerIds[1] === pe.pointerId) {
                this._pointerIds[1] = 0;
            }
            else {
                return;
            }
        }
    },
    
    _dragging: false,
    
    onTouchMove: function wwtlib_WWTControl$onTouchMove(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var ev = e;
        if (this._isPintching) {
            this.pinchMove(ev);
            return;
        }
        ev.preventDefault();
        ev.stopPropagation();
        if (this._mouseDown) {
            this._dragging = true;
            var curX = ev.targetTouches[0].pageX - this._lastX;
            var curY = ev.targetTouches[0].pageY - this._lastY;
            this.move(curX, curY);
            this._lastX = ev.targetTouches[0].pageX;
            this._lastY = ev.targetTouches[0].pageY;
        }
        else {
            if (this.uiController != null) {
                if (this.uiController.mouseMove(this, e)) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
            }
        }
    },
    
    onTouchEnd: function wwtlib_WWTControl$onTouchEnd(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var ev = e;
        ev.preventDefault();
        ev.stopPropagation();
        this._rect = new Array(2);
        if (this._isPintching) {
            if (ev.touches.length < 2) {
                this._isPintching = false;
            }
            return;
        }
        if (this.uiController != null) {
            var ee = new wwtlib.WWTElementEvent(this._lastX, this._lastY);
            if (this.uiController.mouseUp(this, ee)) {
                this._mouseDown = false;
                this._dragging = false;
                return;
            }
        }
        this._mouseDown = false;
        this._dragging = false;
    },
    
    pinchStart: function wwtlib_WWTControl$pinchStart(ev) {
        /// <param name="ev" type="TouchEvent">
        /// </param>
        var t0 = ev.touches[0];
        var t1 = ev.touches[1];
        this._rect[0] = wwtlib.Vector2d.create(t0.pageX, t0.pageY);
        this._rect[1] = wwtlib.Vector2d.create(t1.pageX, t1.pageY);
        ev.stopPropagation();
        ev.preventDefault();
    },
    
    pinchMove: function wwtlib_WWTControl$pinchMove(ev) {
        /// <param name="ev" type="TouchEvent">
        /// </param>
        var t0 = ev.touches[0];
        var t1 = ev.touches[1];
        var newRect = new Array(2);
        newRect[0] = wwtlib.Vector2d.create(t0.pageX, t0.pageY);
        newRect[1] = wwtlib.Vector2d.create(t1.pageX, t1.pageY);
        if (this._rect[0] != null) {
            var oldDist = this.getDistance(this._rect[0], this._rect[1]);
            var newDist = this.getDistance(newRect[0], newRect[1]);
            var ratio = oldDist / newDist;
            this.zoom(ratio);
        }
        this._rect = newRect;
        ev.stopPropagation();
        ev.preventDefault();
    },
    
    getDistance: function wwtlib_WWTControl$getDistance(a, b) {
        /// <param name="a" type="wwtlib.Vector2d">
        /// </param>
        /// <param name="b" type="wwtlib.Vector2d">
        /// </param>
        /// <returns type="Number"></returns>
        var x;
        var y;
        x = a.x - b.x;
        y = a.y - b.y;
        return Math.sqrt(x * x + y * y);
    },
    
    _mouseDown: false,
    _lastX: 0,
    _lastY: 0,
    
    onMouseDown: function wwtlib_WWTControl$onMouseDown(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        document.addEventListener('mousemove', ss.Delegate.create(this, this.onMouseMove), false);
        document.addEventListener('mouseup', ss.Delegate.create(this, this.onMouseUp), false);
        if (this.uiController != null) {
            if (this.uiController.mouseDown(this, e)) {
                return;
            }
        }
        this._mouseDown = true;
        this._lastX = wwtlib.Mouse.offsetX(this.canvas, e);
        this._lastY = wwtlib.Mouse.offsetY(this.canvas, e);
    },
    
    onMouseMove: function wwtlib_WWTControl$onMouseMove(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        this._lastMouseMove = Date.get_now();
        this._hoverTextPoint = wwtlib.Vector2d.create(wwtlib.Mouse.offsetX(this.canvas, e), wwtlib.Mouse.offsetY(this.canvas, e));
        this._hoverText = '';
        if (this._mouseDown) {
            e.preventDefault();
            e.stopPropagation();
            this._moved = true;
            if (e.ctrlKey) {
                this._tilt(wwtlib.Mouse.offsetX(this.canvas, e) - this._lastX, wwtlib.Mouse.offsetY(this.canvas, e) - this._lastY);
            }
            else {
                this.move(wwtlib.Mouse.offsetX(this.canvas, e) - this._lastX, wwtlib.Mouse.offsetY(this.canvas, e) - this._lastY);
            }
            this._lastX = wwtlib.Mouse.offsetX(this.canvas, e);
            this._lastY = wwtlib.Mouse.offsetY(this.canvas, e);
        }
        else {
            if (this.uiController != null) {
                if (this.uiController.mouseMove(this, e)) {
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
            }
        }
    },
    
    _tilt: function wwtlib_WWTControl$_tilt(x, y) {
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        this.renderContext.targetCamera.rotation += x * 0.001;
        this.renderContext.targetCamera.angle += y * 0.001;
        if (this.renderContext.targetCamera.angle < -1.52) {
            this.renderContext.targetCamera.angle = -1.52;
        }
        if (this.renderContext.targetCamera.angle > 0) {
            this.renderContext.targetCamera.angle = 0;
        }
    },
    
    _moved: false,
    
    onMouseUp: function wwtlib_WWTControl$onMouseUp(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        document.removeEventListener('mousemove', ss.Delegate.create(this, this.onMouseMove), false);
        document.removeEventListener('mouseup', ss.Delegate.create(this, this.onMouseUp), false);
        if (this.uiController != null) {
            if (this.uiController.mouseUp(this, e)) {
                this._mouseDown = false;
                return;
            }
        }
        if (this._mouseDown && !this._moved) {
            var raDecDown = this.getCoordinatesForScreenPoint(wwtlib.Mouse.offsetX(this.canvas, e), wwtlib.Mouse.offsetY(this.canvas, e));
            if (!this._annotationclicked(raDecDown.x, raDecDown.y, wwtlib.Mouse.offsetX(this.canvas, e), wwtlib.Mouse.offsetY(this.canvas, e))) {
                wwtlib.WWTControl.scriptInterface._fireClick(raDecDown.x, raDecDown.y);
            }
        }
        this._mouseDown = false;
        this._moved = false;
    },
    
    getCoordinatesForScreenPoint: function wwtlib_WWTControl$getCoordinatesForScreenPoint(x, y) {
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        /// <returns type="wwtlib.Vector2d"></returns>
        var result;
        var PickRayOrig;
        var PickRayDir;
        var pt = wwtlib.Vector2d.create(x, y);
        PickRayDir = this.transformPickPointToWorldSpace(pt, this.renderContext.width, this.renderContext.height);
        result = wwtlib.Coordinates.cartesianToSphericalSky(PickRayDir);
        return result;
    },
    
    transformPickPointToWorldSpace: function wwtlib_WWTControl$transformPickPointToWorldSpace(ptCursor, backBufferWidth, backBufferHeight) {
        /// <param name="ptCursor" type="wwtlib.Vector2d">
        /// </param>
        /// <param name="backBufferWidth" type="Number">
        /// </param>
        /// <param name="backBufferHeight" type="Number">
        /// </param>
        /// <returns type="wwtlib.Vector3d"></returns>
        var vPickRayOrig;
        var vPickRayDir;
        var v = new wwtlib.Vector3d();
        v.x = (((2 * ptCursor.x) / backBufferWidth) - 1) / this.renderContext.get_projection().get_m11();
        v.y = (((2 * ptCursor.y) / backBufferHeight) - 1) / this.renderContext.get_projection().get_m22();
        v.z = 1;
        var m = wwtlib.Matrix3d.multiplyMatrix(this.renderContext.get_view(), this.renderContext.get_world());
        m.invert();
        vPickRayDir = new wwtlib.Vector3d();
        vPickRayOrig = new wwtlib.Vector3d();
        vPickRayDir.x = v.x * m.get_m11() + v.y * m.get_m21() + v.z * m.get_m31();
        vPickRayDir.y = v.x * m.get_m12() + v.y * m.get_m22() + v.z * m.get_m32();
        vPickRayDir.z = v.x * m.get_m13() + v.y * m.get_m23() + v.z * m.get_m33();
        vPickRayDir.normalize();
        return vPickRayDir;
    },
    
    onMouseWheel: function wwtlib_WWTControl$onMouseWheel(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var ev = e;
        var delta;
        if (!!ev.detail) {
            delta = ev.detail * -1;
        }
        else {
            delta = ev.wheelDelta / 40;
        }
        if (delta > 0) {
            this.zoom(0.9);
        }
        else {
            this.zoom(1.1);
        }
    },
    
    gotoRADecZoom: function wwtlib_WWTControl$gotoRADecZoom(ra, dec, zoom, instant) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <param name="zoom" type="Number">
        /// </param>
        /// <param name="instant" type="Boolean">
        /// </param>
        ra = wwtlib.DoubleUtilities.clamp(ra, 0, 24);
        dec = wwtlib.DoubleUtilities.clamp(dec, -90, 90);
        zoom = wwtlib.DoubleUtilities.clamp(zoom, this.get_zoomMin(), this.get__zoomMax());
        this._tracking = false;
        this._trackingObject = null;
        this.gotoTargetFull(false, instant, wwtlib.CameraParameters.create(dec, wwtlib.WWTControl.singleton.renderContext.rAtoViewLng(ra), zoom, wwtlib.WWTControl.singleton.renderContext.viewCamera.rotation, wwtlib.WWTControl.singleton.renderContext.viewCamera.angle, wwtlib.WWTControl.singleton.renderContext.viewCamera.opacity), wwtlib.WWTControl.singleton.renderContext.get_foregroundImageset(), wwtlib.WWTControl.singleton.renderContext.get_backgroundImageset());
    },
    
    _tracking: false,
    _trackingObject: null,
    
    get_solarSystemMode: function wwtlib_WWTControl$get_solarSystemMode() {
        /// <value type="Boolean"></value>
        if (this.renderContext.get_backgroundImageset() == null) {
            return false;
        }
        return this.renderContext.get_backgroundImageset().get_dataSetType() === 4;
    },
    
    gotoTarget: function wwtlib_WWTControl$gotoTarget(place, noZoom, instant, trackObject) {
        /// <param name="place" type="wwtlib.Place">
        /// </param>
        /// <param name="noZoom" type="Boolean">
        /// </param>
        /// <param name="instant" type="Boolean">
        /// </param>
        /// <param name="trackObject" type="Boolean">
        /// </param>
        if (place == null) {
            return;
        }
        if ((trackObject && this.get_solarSystemMode())) {
            if ((place.get_classification() === 536870912 && place.get_type() !== 4) || (place.get_classification() === 1) || (place.get_classification() === 1048576) && place.get_distance() > 0) {
                var target = 65536;
                if (place.get_classification() === 1 || place.get_classification() === 1048576) {
                    target = 20;
                }
                else {
                    try {
                        if (place.get_target() !== 65536) {
                            target = place.get_target();
                        }
                        else {
                            target = wwtlib.Planets.getPlanetIDFromName(place.get_name());
                        }
                    }
                    catch ($e1) {
                    }
                }
                if (target !== 65536) {
                    this._trackingObject = place;
                    if (target === this._solarSystemTrack && !(place.get_classification() === 1 || place.get_classification() === 1048576)) {
                        this.gotoTarget3(place.get_camParams(), noZoom, instant);
                        return;
                    }
                    var jumpTime = 4;
                    if (target === 20) {
                        jumpTime = 17;
                    }
                    else {
                        jumpTime += 13 * (101 - wwtlib.Settings.get_active().get_solarSystemScale()) / 100;
                    }
                    if (instant) {
                        jumpTime = 1;
                    }
                    var camTo = this.renderContext.viewCamera.copy();
                    camTo.targetReferenceFrame = '';
                    camTo.target = target;
                    var zoom = 10;
                    if (target === 20) {
                        if (place.get_classification() === 1048576) {
                            zoom = 1404946007758;
                        }
                        else {
                            zoom = 63239.6717 * 100;
                        }
                        var vect = wwtlib.Coordinates.raDecTo3dAu(place.get_RA(), place.get_dec(), place.get_distance());
                        var ecliptic = wwtlib.Coordinates.meanObliquityOfEcliptic(wwtlib.SpaceTimeController.get_jNow()) / 180 * Math.PI;
                        vect.rotateX(ecliptic);
                        camTo.viewTarget = wwtlib.Vector3d.negate(camTo.viewTarget);
                    }
                    else {
                        camTo.viewTarget = wwtlib.Planets.getPlanet3dLocationJD(target, wwtlib.SpaceTimeController.getJNowForFutureTime(jumpTime));
                        switch (target) {
                            case 0:
                                zoom = 0.6;
                                break;
                            case 1:
                                zoom = 0.0004;
                                break;
                            case 2:
                                zoom = 0.0004;
                                break;
                            case 3:
                                zoom = 0.0004;
                                break;
                            case 4:
                                zoom = 0.007;
                                break;
                            case 5:
                                zoom = 0.007;
                                break;
                            case 6:
                                zoom = 0.004;
                                break;
                            case 7:
                                zoom = 0.004;
                                break;
                            case 8:
                                zoom = 0.0004;
                                break;
                            case 9:
                                zoom = 0.0004;
                                break;
                            case 10:
                                zoom = 0.0004;
                                break;
                            case 11:
                                zoom = 0.0004;
                                break;
                            case 12:
                                zoom = 0.0004;
                                break;
                            case 13:
                                zoom = 0.0004;
                                break;
                            case 19:
                                zoom = 0.0004;
                                break;
                            case 20:
                                zoom = 10;
                                break;
                            default:
                                break;
                        }
                        zoom = zoom * wwtlib.Settings.get_active().get_solarSystemScale();
                    }
                    var fromParams = this.renderContext.viewCamera.copy();
                    if (this._solarSystemTrack === 20 && !String.isNullOrEmpty(this.renderContext.get_trackingFrame())) {
                        fromParams = this.renderContext.customTrackingParams;
                        this.renderContext.set_trackingFrame('');
                    }
                    camTo.zoom = zoom;
                    var toVector = camTo.viewTarget;
                    toVector.subtract(fromParams.viewTarget);
                    if (place.get_classification() === 1) {
                        toVector = wwtlib.Vector3d.negate(toVector);
                    }
                    if (!!toVector.length()) {
                        var raDec = toVector.toRaDec();
                        if (target === 20) {
                            camTo.lat = -raDec.y;
                        }
                        else {
                            camTo.lat = raDec.y;
                        }
                        camTo.lng = raDec.x * 15 - 90;
                    }
                    else {
                        camTo.lat = this.renderContext.viewCamera.lat;
                        camTo.lng = this.renderContext.viewCamera.lng;
                    }
                    if (target !== 20) {
                        camTo.viewTarget = wwtlib.Planets.getPlanetTargetPoint(target, camTo.lat, camTo.lng, wwtlib.SpaceTimeController.getJNowForFutureTime(jumpTime));
                    }
                    var solarMover = new wwtlib.ViewMoverKenBurnsStyle(fromParams, camTo, jumpTime, wwtlib.SpaceTimeController.get_now(), wwtlib.SpaceTimeController.getTimeForFutureTime(jumpTime), 3);
                    solarMover.fastDirectionMove = true;
                    this.set__mover(solarMover);
                    return;
                }
            }
        }
        this._tracking = false;
        this._trackingObject = null;
        var camParams = place.get_camParams().copy();
        if (this.renderContext.get_backgroundImageset() != null && place.get_type() !== this.renderContext.get_backgroundImageset().get_dataSetType()) {
            this.renderContext.targetCamera = place.get_camParams().copy();
            this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
            this.renderContext.set_backgroundImageset(this.getDefaultImageset(place.get_type(), 3));
            instant = true;
        }
        else if (this.get_solarSystemMode() && place.get_target() !== this._solarSystemTrack) {
            this.renderContext.targetCamera = place.get_camParams().copy();
            this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
            this._solarSystemTrack = place.get_target();
            instant = true;
        }
        if (place.get_classification() === 128) {
            camParams.zoom = this.get__zoomMax();
            this.gotoTargetFull(false, instant, camParams, null, null);
        }
        else {
            this._solarSystemTrack = place.get_target();
            this.gotoTargetFull(noZoom, instant, camParams, place.get_studyImageset(), place.get_backgroundImageset());
            if (trackObject) {
                this._tracking = true;
                this._trackingObject = place;
            }
        }
    },
    
    gotoTarget3: function wwtlib_WWTControl$gotoTarget3(camParams, noZoom, instant) {
        /// <param name="camParams" type="wwtlib.CameraParameters">
        /// </param>
        /// <param name="noZoom" type="Boolean">
        /// </param>
        /// <param name="instant" type="Boolean">
        /// </param>
        this._tracking = false;
        this._trackingObject = null;
        this.gotoTargetFull(noZoom, instant, camParams, this.renderContext.get_foregroundImageset(), this.renderContext.get_backgroundImageset());
    },
    
    gotoTargetFull: function wwtlib_WWTControl$gotoTargetFull(noZoom, instant, cameraParams, studyImageSet, backgroundImageSet) {
        /// <param name="noZoom" type="Boolean">
        /// </param>
        /// <param name="instant" type="Boolean">
        /// </param>
        /// <param name="cameraParams" type="wwtlib.CameraParameters">
        /// </param>
        /// <param name="studyImageSet" type="wwtlib.Imageset">
        /// </param>
        /// <param name="backgroundImageSet" type="wwtlib.Imageset">
        /// </param>
        wwtlib.WWTControl.set_renderNeeded(true);
        this._tracking = false;
        this._trackingObject = null;
        this._targetStudyImageset = studyImageSet;
        this._targetBackgroundImageset = backgroundImageSet;
        if (noZoom) {
            cameraParams.zoom = this.renderContext.viewCamera.zoom;
            cameraParams.angle = this.renderContext.viewCamera.angle;
            cameraParams.rotation = this.renderContext.viewCamera.rotation;
        }
        else {
            if (cameraParams.zoom === -1 || !cameraParams.zoom) {
                if (this.renderContext.space) {
                    cameraParams.zoom = 1.40625;
                }
                else {
                    cameraParams.zoom = 0.09;
                }
            }
        }
        if (instant || (Math.abs(this.renderContext.viewCamera.lat - cameraParams.lat) < 1E-12 && Math.abs(this.renderContext.viewCamera.lng - cameraParams.lng) < 1E-12 && Math.abs(this.renderContext.viewCamera.zoom - cameraParams.zoom) < 1E-12)) {
            this.set__mover(null);
            this.renderContext.targetCamera = cameraParams.copy();
            this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
            this._mover_Midpoint();
            this._moving = true;
        }
        else {
            this.set__mover(wwtlib._viewMoverSlew.create(this.renderContext.viewCamera, cameraParams));
            wwtlib.WWTControl.set_renderNeeded(true);
            this.get__mover().set_midpoint(ss.Delegate.create(this, this._mover_Midpoint));
        }
    },
    
    _freezeView: function wwtlib_WWTControl$_freezeView() {
        this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
        this.set__mover(null);
    },
    
    get__mover: function wwtlib_WWTControl$get__mover() {
        /// <value type="wwtlib.IViewMover"></value>
        return this.renderContext.viewMover;
    },
    set__mover: function wwtlib_WWTControl$set__mover(value) {
        /// <value type="wwtlib.IViewMover"></value>
        this.renderContext.viewMover = value;
        wwtlib.WWTControl.set_renderNeeded(true);
        return value;
    },
    
    _moving: false,
    
    fadeInImageSet: function wwtlib_WWTControl$fadeInImageSet(newImageSet) {
        /// <param name="newImageSet" type="wwtlib.Imageset">
        /// </param>
        if (this.renderContext.get_backgroundImageset() != null && newImageSet.get_dataSetType() !== this.renderContext.get_backgroundImageset().get_dataSetType()) {
            wwtlib._tileCache.purgeQueue();
            wwtlib._tileCache.clearCache();
        }
        this.renderContext.set_backgroundImageset(newImageSet);
    },
    
    _targetStudyImageset: null,
    _targetBackgroundImageset: null,
    
    _mover_Midpoint: function wwtlib_WWTControl$_mover_Midpoint() {
        if ((this._targetStudyImageset != null && this.renderContext.get_foregroundImageset() == null) || (this.renderContext.get_foregroundImageset() != null && !this.renderContext.get_foregroundImageset().equals(this._targetStudyImageset))) {
            this.renderContext.set_foregroundImageset(this._targetStudyImageset);
        }
        if (this.renderContext.get_backgroundImageset() != null && (this._targetBackgroundImageset != null && !this.renderContext.get_backgroundImageset().equals(this._targetBackgroundImageset))) {
            if (this._targetBackgroundImageset != null && this._targetBackgroundImageset.get_generic()) {
                this.fadeInImageSet(this._getRealImagesetFromGeneric(this._targetBackgroundImageset));
            }
            else {
                this.fadeInImageSet(this._targetBackgroundImageset);
            }
        }
    },
    
    getDefaultImageset: function wwtlib_WWTControl$getDefaultImageset(imageSetType, bandPass) {
        /// <param name="imageSetType" type="wwtlib.ImageSetType">
        /// </param>
        /// <param name="bandPass" type="wwtlib.BandPass">
        /// </param>
        /// <returns type="wwtlib.Imageset"></returns>
        var $enum1 = ss.IEnumerator.getEnumerator(wwtlib.WWTControl.imageSets);
        while ($enum1.moveNext()) {
            var imageset = $enum1.current;
            if (imageset.get_defaultSet() && imageset.get_bandPass() === bandPass && imageset.get_dataSetType() === imageSetType) {
                return imageset;
            }
        }
        var $enum2 = ss.IEnumerator.getEnumerator(wwtlib.WWTControl.imageSets);
        while ($enum2.moveNext()) {
            var imageset = $enum2.current;
            if (imageset.get_bandPass() === bandPass && imageset.get_dataSetType() === imageSetType) {
                return imageset;
            }
        }
        var $enum3 = ss.IEnumerator.getEnumerator(wwtlib.WWTControl.imageSets);
        while ($enum3.moveNext()) {
            var imageset = $enum3.current;
            if (imageset.get_dataSetType() === imageSetType) {
                return imageset;
            }
        }
        return wwtlib.WWTControl.imageSets[0];
    },
    
    _getRealImagesetFromGeneric: function wwtlib_WWTControl$_getRealImagesetFromGeneric(generic) {
        /// <param name="generic" type="wwtlib.Imageset">
        /// </param>
        /// <returns type="wwtlib.Imageset"></returns>
        var $enum1 = ss.IEnumerator.getEnumerator(wwtlib.WWTControl.imageSets);
        while ($enum1.moveNext()) {
            var imageset = $enum1.current;
            if (imageset.get_defaultSet() && imageset.get_bandPass() === generic.get_bandPass() && imageset.get_dataSetType() === generic.get_dataSetType()) {
                return imageset;
            }
        }
        var $enum2 = ss.IEnumerator.getEnumerator(wwtlib.WWTControl.imageSets);
        while ($enum2.moveNext()) {
            var imageset = $enum2.current;
            if (imageset.get_bandPass() === generic.get_bandPass() && imageset.get_dataSetType() === generic.get_dataSetType()) {
                return imageset;
            }
        }
        return wwtlib.WWTControl.imageSets[0];
    },
    
    _hideUI: function wwtlib_WWTControl$_hideUI(p) {
        /// <param name="p" type="Boolean">
        /// </param>
    },
    
    _closeTour: function wwtlib_WWTControl$_closeTour() {
    },
    
    _tour: null,
    
    playTour: function wwtlib_WWTControl$playTour(url) {
        /// <param name="url" type="String">
        /// </param>
        if (Type.canCast(this.uiController, wwtlib.TourPlayer)) {
            var player = this.uiController;
            player.stop(false);
        }
        this._tour = wwtlib.TourDocument.fromUrl(url, ss.Delegate.create(this, function() {
            var player = new wwtlib.TourPlayer();
            player.set_tour(this._tour);
            this._tour.set_currentTourstopIndex(-1);
            this.uiController = player;
            player.play();
        }));
    },
    
    playCurrentTour: function wwtlib_WWTControl$playCurrentTour() {
        if (Type.canCast(this.uiController, wwtlib.TourPlayer)) {
            var player = this.uiController;
            player.play();
        }
    },
    
    pauseCurrentTour: function wwtlib_WWTControl$pauseCurrentTour() {
        if (Type.canCast(this.uiController, wwtlib.TourPlayer)) {
            var player = this.uiController;
            player.pauseTour();
        }
    },
    
    stopCurrentTour: function wwtlib_WWTControl$stopCurrentTour() {
        if (Type.canCast(this.uiController, wwtlib.TourPlayer)) {
            var player = this.uiController;
            player.stop(false);
        }
    },
    
    getImagesetByName: function wwtlib_WWTControl$getImagesetByName(name) {
        /// <param name="name" type="String">
        /// </param>
        /// <returns type="wwtlib.Imageset"></returns>
        var $enum1 = ss.IEnumerator.getEnumerator(wwtlib.WWTControl.imageSets);
        while ($enum1.moveNext()) {
            var imageset = $enum1.current;
            if (imageset.get_name().toLowerCase().indexOf(name.toLowerCase()) > -1) {
                return imageset;
            }
        }
        return null;
    },
    
    setBackgroundImageByName: function wwtlib_WWTControl$setBackgroundImageByName(name) {
        /// <param name="name" type="String">
        /// </param>
        var newBackground = this.getImagesetByName(name);
        if (newBackground != null) {
            this.renderContext.set_backgroundImageset(newBackground);
        }
    },
    
    setForegroundImageByName: function wwtlib_WWTControl$setForegroundImageByName(name) {
        /// <param name="name" type="String">
        /// </param>
        var newForeground = this.getImagesetByName(name);
        if (newForeground != null) {
            this.renderContext.set_foregroundImageset(newForeground);
        }
    },
    
    _drawCrosshairs: function wwtlib_WWTControl$_drawCrosshairs(context) {
        /// <param name="context" type="wwtlib.RenderContext">
        /// </param>
        if (context.gl == null) {
            var ctx = context.device;
            ctx.save();
            ctx.beginPath();
            ctx.strokeStyle = wwtlib.Settings.get_current().get_crosshairsColor();
            ctx.lineWidth = 2;
            var x = context.width / 2, y = context.height / 2;
            var halfLength = 5;
            ctx.moveTo(x, y + halfLength);
            ctx.lineTo(x, y - halfLength);
            ctx.moveTo(x + halfLength, y);
            ctx.lineTo(x - halfLength, y);
            ctx.stroke();
            ctx.restore();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.WWTElementEvent

wwtlib.WWTElementEvent = function wwtlib_WWTElementEvent(x, y) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <field name="offsetX" type="Number">
    /// </field>
    /// <field name="offsetY" type="Number">
    /// </field>
    this.offsetX = x;
    this.offsetY = y;
}
wwtlib.WWTElementEvent.prototype = {
    offsetX: 0,
    offsetY: 0
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Annotation

wwtlib.Annotation = function wwtlib_Annotation() {
    /// <field name="_opacity" type="Number">
    /// </field>
    /// <field name="_id" type="String">
    /// </field>
    /// <field name="_tag" type="String">
    /// </field>
    /// <field name="_label" type="String">
    /// </field>
    /// <field name="_showHoverLabel" type="Boolean">
    /// </field>
    /// <field name="center" type="wwtlib.Vector3d">
    /// </field>
}
wwtlib.Annotation.separation = function wwtlib_Annotation$separation(Alpha1, Delta1, Alpha2, Delta2) {
    /// <param name="Alpha1" type="Number">
    /// </param>
    /// <param name="Delta1" type="Number">
    /// </param>
    /// <param name="Alpha2" type="Number">
    /// </param>
    /// <param name="Delta2" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    Delta1 = Delta1 / 180 * Math.PI;
    Delta2 = Delta2 / 180 * Math.PI;
    Alpha1 = Alpha1 / 12 * Math.PI;
    Alpha2 = Alpha2 / 12 * Math.PI;
    var x = Math.cos(Delta1) * Math.sin(Delta2) - Math.sin(Delta1) * Math.cos(Delta2) * Math.cos(Alpha2 - Alpha1);
    var y = Math.cos(Delta2) * Math.sin(Alpha2 - Alpha1);
    var z = Math.sin(Delta1) * Math.sin(Delta2) + Math.cos(Delta1) * Math.cos(Delta2) * Math.cos(Alpha2 - Alpha1);
    var vvalue = Math.atan2(Math.sqrt(x * x + y * y), z);
    vvalue = vvalue / Math.PI * 180;
    if (vvalue < 0) {
        vvalue += 180;
    }
    return vvalue;
}
wwtlib.Annotation.colorToUint = function wwtlib_Annotation$colorToUint(col) {
    /// <param name="col" type="wwtlib.Color">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    return (col.a) << 24 | (col.r << 16) | (col.g) << 8 | col.b;
}
wwtlib.Annotation.colorToUintAlpha = function wwtlib_Annotation$colorToUintAlpha(col, opacity) {
    /// <param name="col" type="wwtlib.Color">
    /// </param>
    /// <param name="opacity" type="Number" integer="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    return opacity << 24 | col.r << 16 | col.g << 8 | col.b;
}
wwtlib.Annotation.prototype = {
    
    draw: function wwtlib_Annotation$draw(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
    },
    
    _opacity: 1,
    
    get_opacity: function wwtlib_Annotation$get_opacity() {
        /// <value type="Number"></value>
        return this._opacity;
    },
    set_opacity: function wwtlib_Annotation$set_opacity(value) {
        /// <value type="Number"></value>
        this._opacity = value;
        return value;
    },
    
    _id: null,
    
    get_id: function wwtlib_Annotation$get_id() {
        /// <value type="String"></value>
        return this._id;
    },
    set_id: function wwtlib_Annotation$set_id(value) {
        /// <value type="String"></value>
        this._id = value;
        return value;
    },
    
    _tag: null,
    
    get_tag: function wwtlib_Annotation$get_tag() {
        /// <value type="String"></value>
        return this._tag;
    },
    set_tag: function wwtlib_Annotation$set_tag(value) {
        /// <value type="String"></value>
        this._tag = value;
        return value;
    },
    
    _label: null,
    
    get_label: function wwtlib_Annotation$get_label() {
        /// <value type="String"></value>
        return this._label;
    },
    set_label: function wwtlib_Annotation$set_label(value) {
        /// <value type="String"></value>
        this._label = value;
        return value;
    },
    
    _showHoverLabel: false,
    
    get_showHoverLabel: function wwtlib_Annotation$get_showHoverLabel() {
        /// <value type="Boolean"></value>
        return this._showHoverLabel;
    },
    set_showHoverLabel: function wwtlib_Annotation$set_showHoverLabel(value) {
        /// <value type="Boolean"></value>
        this._showHoverLabel = value;
        return value;
    },
    
    hitTest: function wwtlib_Annotation$hitTest(renderContext, RA, dec, x, y) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="RA" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        return false;
    },
    
    center: null,
    
    get_center: function wwtlib_Annotation$get_center() {
        /// <value type="wwtlib.Vector3d"></value>
        return this.center;
    },
    set_center: function wwtlib_Annotation$set_center(value) {
        /// <value type="wwtlib.Vector3d"></value>
        this.center = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Circle

wwtlib.Circle = function wwtlib_Circle() {
    /// <field name="_fill$1" type="Boolean">
    /// </field>
    /// <field name="_skyRelative$1" type="Boolean">
    /// </field>
    /// <field name="_strokeWidth$1" type="Number">
    /// </field>
    /// <field name="_radius$1" type="Number">
    /// </field>
    /// <field name="_lineColor$1" type="wwtlib.Color">
    /// </field>
    /// <field name="_fillColor$1" type="wwtlib.Color">
    /// </field>
    /// <field name="_ra$1" type="Number">
    /// </field>
    /// <field name="_dec$1" type="Number">
    /// </field>
    this._lineColor$1 = wwtlib.Colors.get_white();
    this._fillColor$1 = wwtlib.Colors.get_white();
    wwtlib.Circle.initializeBase(this);
}
wwtlib.Circle.prototype = {
    _fill$1: false,
    
    get_fill: function wwtlib_Circle$get_fill() {
        /// <value type="Boolean"></value>
        return this._fill$1;
    },
    set_fill: function wwtlib_Circle$set_fill(value) {
        /// <value type="Boolean"></value>
        this._fill$1 = value;
        return value;
    },
    
    _skyRelative$1: false,
    
    get_skyRelative: function wwtlib_Circle$get_skyRelative() {
        /// <value type="Boolean"></value>
        return this._skyRelative$1;
    },
    set_skyRelative: function wwtlib_Circle$set_skyRelative(value) {
        /// <value type="Boolean"></value>
        this._skyRelative$1 = value;
        return value;
    },
    
    _strokeWidth$1: 1,
    
    get_lineWidth: function wwtlib_Circle$get_lineWidth() {
        /// <value type="Number"></value>
        return this._strokeWidth$1;
    },
    set_lineWidth: function wwtlib_Circle$set_lineWidth(value) {
        /// <value type="Number"></value>
        this._strokeWidth$1 = value;
        return value;
    },
    
    _radius$1: 10,
    
    get_radius: function wwtlib_Circle$get_radius() {
        /// <value type="Number"></value>
        return this._radius$1;
    },
    set_radius: function wwtlib_Circle$set_radius(value) {
        /// <value type="Number"></value>
        this._radius$1 = value;
        return value;
    },
    
    get_lineColor: function wwtlib_Circle$get_lineColor() {
        /// <value type="String"></value>
        return this._lineColor$1.toString();
    },
    set_lineColor: function wwtlib_Circle$set_lineColor(value) {
        /// <value type="String"></value>
        this._lineColor$1 = wwtlib.Color.fromName(value);
        return value;
    },
    
    get_fillColor: function wwtlib_Circle$get_fillColor() {
        /// <value type="String"></value>
        return this._fillColor$1.toString();
    },
    set_fillColor: function wwtlib_Circle$set_fillColor(value) {
        /// <value type="String"></value>
        this._fillColor$1 = wwtlib.Color.fromName(value);
        return value;
    },
    
    _ra$1: 0,
    _dec$1: 0,
    
    setCenter: function wwtlib_Circle$setCenter(ra, dec) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        this._ra$1 = ra / 15;
        this._dec$1 = dec;
        this.center = wwtlib.Coordinates.raDecTo3d(this._ra$1, this._dec$1);
    },
    
    draw: function wwtlib_Circle$draw(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        var rad = this._radius$1;
        if (this._skyRelative$1) {
            rad /= renderContext.get_fovScale() / 3600;
        }
        var screenSpacePnt = renderContext.WVP.transform(this.center);
        if (screenSpacePnt.z < 0) {
            return;
        }
        if (wwtlib.Vector3d.dot(renderContext.get_viewPoint(), this.center) < 0.55) {
            return;
        }
        if (renderContext.gl != null) {
        }
        else {
            var ctx = renderContext.device;
            ctx.save();
            ctx.globalAlpha = this.get_opacity();
            ctx.beginPath();
            ctx.arc(screenSpacePnt.x, screenSpacePnt.y, rad, 0, Math.PI * 2, true);
            ctx.lineWidth = this._strokeWidth$1;
            ctx.fillStyle = this._fillColor$1.toString();
            if (this._fill$1) {
                ctx.fill();
            }
            ctx.globalAlpha = 1;
            ctx.strokeStyle = this._lineColor$1.toString();
            ctx.stroke();
            ctx.restore();
        }
    },
    
    hitTest: function wwtlib_Circle$hitTest(renderContext, RA, dec, x, y) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="RA" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (String.isNullOrEmpty(this.get_id())) {
            return false;
        }
        var rad = this._radius$1;
        if (!this._skyRelative$1) {
            rad *= renderContext.get_fovScale() / 3600;
        }
        return wwtlib.Annotation.separation(RA, dec, this._ra$1, this._dec$1) < rad;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Poly

wwtlib.Poly = function wwtlib_Poly() {
    /// <field name="_points$1" type="Array">
    /// </field>
    /// <field name="_fill$1" type="Boolean">
    /// </field>
    /// <field name="_strokeWidth$1" type="Number">
    /// </field>
    /// <field name="_lineColor$1" type="wwtlib.Color">
    /// </field>
    /// <field name="_fillColor$1" type="wwtlib.Color">
    /// </field>
    this._points$1 = [];
    this._lineColor$1 = wwtlib.Colors.get_white();
    this._fillColor$1 = wwtlib.Colors.get_white();
    wwtlib.Poly.initializeBase(this);
}
wwtlib.Poly.prototype = {
    
    addPoint: function wwtlib_Poly$addPoint(x, y) {
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        this._points$1.add(wwtlib.Coordinates.raDecTo3d(x / 15, y));
    },
    
    _fill$1: false,
    
    get_fill: function wwtlib_Poly$get_fill() {
        /// <value type="Boolean"></value>
        return this._fill$1;
    },
    set_fill: function wwtlib_Poly$set_fill(value) {
        /// <value type="Boolean"></value>
        this._fill$1 = value;
        return value;
    },
    
    _strokeWidth$1: 1,
    
    get_lineWidth: function wwtlib_Poly$get_lineWidth() {
        /// <value type="Number"></value>
        return this._strokeWidth$1;
    },
    set_lineWidth: function wwtlib_Poly$set_lineWidth(value) {
        /// <value type="Number"></value>
        this._strokeWidth$1 = value;
        return value;
    },
    
    get_lineColor: function wwtlib_Poly$get_lineColor() {
        /// <value type="String"></value>
        return this._lineColor$1.toString();
    },
    set_lineColor: function wwtlib_Poly$set_lineColor(value) {
        /// <value type="String"></value>
        this._lineColor$1 = wwtlib.Color.fromName(value);
        return value;
    },
    
    get_fillColor: function wwtlib_Poly$get_fillColor() {
        /// <value type="String"></value>
        return this._fillColor$1.toString();
    },
    set_fillColor: function wwtlib_Poly$set_fillColor(value) {
        /// <value type="String"></value>
        this._fillColor$1 = wwtlib.Color.fromName(value);
        return value;
    },
    
    draw: function wwtlib_Poly$draw(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        if (renderContext.gl != null) {
        }
        else {
            var ctx = renderContext.device;
            ctx.save();
            ctx.globalAlpha = this.get_opacity();
            ctx.beginPath();
            var first = true;
            var $enum1 = ss.IEnumerator.getEnumerator(this._points$1);
            while ($enum1.moveNext()) {
                var pnt = $enum1.current;
                var screenSpacePnt = renderContext.WVP.transform(pnt);
                if (screenSpacePnt.z < 0) {
                    ctx.restore();
                    return;
                }
                if (wwtlib.Vector3d.dot(renderContext.get_viewPoint(), pnt) < 0.75) {
                    ctx.restore();
                    return;
                }
                if (first) {
                    first = false;
                    ctx.moveTo(screenSpacePnt.x, screenSpacePnt.y);
                }
                else {
                    ctx.lineTo(screenSpacePnt.x, screenSpacePnt.y);
                }
            }
            ctx.closePath();
            ctx.lineWidth = this._strokeWidth$1;
            if (this._fill$1) {
                ctx.fillStyle = this._fillColor$1.toString();
                ctx.fill();
            }
            ctx.strokeStyle = this._lineColor$1.toString();
            ctx.globalAlpha = 1;
            ctx.stroke();
            ctx.restore();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PolyLine

wwtlib.PolyLine = function wwtlib_PolyLine() {
    /// <field name="_points$1" type="Array">
    /// </field>
    /// <field name="_strokeWidth$1" type="Number">
    /// </field>
    /// <field name="_lineColor$1" type="wwtlib.Color">
    /// </field>
    this._points$1 = [];
    this._lineColor$1 = wwtlib.Colors.get_white();
    wwtlib.PolyLine.initializeBase(this);
}
wwtlib.PolyLine.prototype = {
    
    addPoint: function wwtlib_PolyLine$addPoint(x, y) {
        /// <param name="x" type="Number">
        /// </param>
        /// <param name="y" type="Number">
        /// </param>
        this._points$1.add(wwtlib.Coordinates.raDecTo3d(x / 15, y));
    },
    
    _strokeWidth$1: 1,
    
    get_lineWidth: function wwtlib_PolyLine$get_lineWidth() {
        /// <value type="Number"></value>
        return this._strokeWidth$1;
    },
    set_lineWidth: function wwtlib_PolyLine$set_lineWidth(value) {
        /// <value type="Number"></value>
        this._strokeWidth$1 = value;
        return value;
    },
    
    get_lineColor: function wwtlib_PolyLine$get_lineColor() {
        /// <value type="String"></value>
        return this._lineColor$1.toString();
    },
    set_lineColor: function wwtlib_PolyLine$set_lineColor(value) {
        /// <value type="String"></value>
        this._lineColor$1 = wwtlib.Color.fromName(value);
        return value;
    },
    
    draw: function wwtlib_PolyLine$draw(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        if (renderContext.gl != null) {
        }
        else {
            var ctx = renderContext.device;
            ctx.save();
            ctx.globalAlpha = this.get_opacity();
            var first = true;
            var $enum1 = ss.IEnumerator.getEnumerator(this._points$1);
            while ($enum1.moveNext()) {
                var pnt = $enum1.current;
                var screenSpacePnt = renderContext.WVP.transform(pnt);
                if (screenSpacePnt.z < 0) {
                    ctx.restore();
                    return;
                }
                if (wwtlib.Vector3d.dot(renderContext.get_viewPoint(), pnt) < 0.75) {
                    ctx.restore();
                    return;
                }
                if (first) {
                    first = false;
                    ctx.beginPath();
                    ctx.moveTo(screenSpacePnt.x, screenSpacePnt.y);
                }
                else {
                    ctx.lineTo(screenSpacePnt.x, screenSpacePnt.y);
                }
            }
            ctx.lineWidth = this._strokeWidth$1;
            ctx.strokeStyle = this._lineColor$1.toString();
            ctx.stroke();
            ctx.restore();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.BlendState

wwtlib.BlendState = function wwtlib_BlendState() {
    /// <field name="_state" type="Boolean">
    /// </field>
    /// <field name="_targetState" type="Boolean">
    /// </field>
    /// <field name="_switchedTime" type="Date">
    /// </field>
    /// <field name="_delayTime" type="Number">
    /// </field>
    this._switchedTime = new Date(1990, 0, 0, 0, 0, 0, 0);
    this._state = false;
    this._targetState = this._state;
    this._delayTime = 1000;
}
wwtlib.BlendState.create = function wwtlib_BlendState$create(initialState, delayTime) {
    /// <param name="initialState" type="Boolean">
    /// </param>
    /// <param name="delayTime" type="Number">
    /// </param>
    /// <returns type="wwtlib.BlendState"></returns>
    var temp = new wwtlib.BlendState();
    temp._state = initialState;
    temp._targetState = initialState;
    temp._delayTime = delayTime;
    return temp;
}
wwtlib.BlendState.prototype = {
    _state: false,
    
    get_state: function wwtlib_BlendState$get_state() {
        /// <value type="Boolean"></value>
        if (this._targetState !== this._state) {
            var ts = Date.get_now() - this._switchedTime;
            if (ts > this._delayTime) {
                this._state = this._targetState;
            }
            return true;
        }
        return this._state;
    },
    set_state: function wwtlib_BlendState$set_state(value) {
        /// <value type="Boolean"></value>
        this._switchedTime = new Date(1990, 0, 0, 0, 0, 0, 0);
        this._state = value;
        this._targetState = this._state;
        return value;
    },
    
    _targetState: false,
    
    get_targetState: function wwtlib_BlendState$get_targetState() {
        /// <value type="Boolean"></value>
        return this._targetState;
    },
    set_targetState: function wwtlib_BlendState$set_targetState(value) {
        /// <value type="Boolean"></value>
        if (this._targetState !== value) {
            this._switchedTime = Date.get_now();
            this._targetState = value;
        }
        return value;
    },
    
    get_opacity: function wwtlib_BlendState$get_opacity() {
        /// <value type="Number"></value>
        if (this._targetState !== this._state) {
            var ts = Date.get_now() - this._switchedTime;
            if (ts > this._delayTime) {
                this._state = this._targetState;
            }
            else {
                var opacity = (ts / this._delayTime);
                return (this._targetState) ? opacity : 1 - opacity;
            }
        }
        return (this._state) ? 1 : 0;
    },
    
    _switchedTime: null,
    _delayTime: 0,
    
    get_delayTime: function wwtlib_BlendState$get_delayTime() {
        /// <value type="Number"></value>
        return this._delayTime;
    },
    set_delayTime: function wwtlib_BlendState$set_delayTime(value) {
        /// <value type="Number"></value>
        this._delayTime = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.CameraParameters

wwtlib.CameraParameters = function wwtlib_CameraParameters() {
    /// <field name="lat" type="Number">
    /// </field>
    /// <field name="lng" type="Number">
    /// </field>
    /// <field name="zoom" type="Number">
    /// </field>
    /// <field name="rotation" type="Number">
    /// </field>
    /// <field name="angle" type="Number">
    /// </field>
    /// <field name="raDec" type="Boolean">
    /// </field>
    /// <field name="opacity" type="Number">
    /// </field>
    /// <field name="viewTarget" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="target" type="wwtlib.SolarSystemObjects">
    /// </field>
    /// <field name="targetReferenceFrame" type="String">
    /// </field>
    /// <field name="_factor" type="Number" static="true">
    /// </field>
    this.zoom = 360;
    this.viewTarget = new wwtlib.Vector3d();
}
wwtlib.CameraParameters.create = function wwtlib_CameraParameters$create(lat, lng, zoom, rotation, angle, opactity) {
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <param name="zoom" type="Number">
    /// </param>
    /// <param name="rotation" type="Number">
    /// </param>
    /// <param name="angle" type="Number">
    /// </param>
    /// <param name="opactity" type="Number">
    /// </param>
    /// <returns type="wwtlib.CameraParameters"></returns>
    var temp = new wwtlib.CameraParameters();
    temp.lat = lat;
    temp.lng = lng;
    temp.zoom = zoom;
    temp.rotation = rotation;
    temp.angle = angle;
    temp.raDec = false;
    temp.opacity = opactity;
    temp.viewTarget = wwtlib.Vector3d.create(0, 0, 0);
    temp.target = 20;
    temp.targetReferenceFrame = '';
    return temp;
}
wwtlib.CameraParameters.logN = function wwtlib_CameraParameters$logN(num, b) {
    /// <param name="num" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Math.log(num) / Math.log(b);
}
wwtlib.CameraParameters.sinh = function wwtlib_CameraParameters$sinh(v) {
    /// <param name="v" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return (Math.exp(v) - Math.exp(-v)) / 2;
}
wwtlib.CameraParameters.interpolate = function wwtlib_CameraParameters$interpolate(from, to, alphaIn, type, fastDirectionMove) {
    /// <param name="from" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="to" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="alphaIn" type="Number">
    /// </param>
    /// <param name="type" type="wwtlib.InterpolationType">
    /// </param>
    /// <param name="fastDirectionMove" type="Boolean">
    /// </param>
    /// <returns type="wwtlib.CameraParameters"></returns>
    var result = new wwtlib.CameraParameters();
    var alpha = wwtlib.CameraParameters.easeCurve(alphaIn, type);
    var alphaBIn = Math.min(1, alphaIn * 2);
    var alphaB = wwtlib.CameraParameters.easeCurve(alphaBIn, type);
    result.angle = to.angle * alpha + from.angle * (1 - alpha);
    result.rotation = to.rotation * alpha + from.rotation * (1 - alpha);
    if (fastDirectionMove) {
        result.lat = to.lat * alphaB + from.lat * (1 - alphaB);
        result.lng = to.lng * alphaB + from.lng * (1 - alphaB);
    }
    else {
        result.lat = to.lat * alpha + from.lat * (1 - alpha);
        result.lng = to.lng * alpha + from.lng * (1 - alpha);
    }
    result.zoom = Math.pow(2, wwtlib.CameraParameters.logN(to.zoom, 2) * alpha + wwtlib.CameraParameters.logN(from.zoom, 2) * (1 - alpha));
    result.opacity = (to.opacity * alpha + from.opacity * (1 - alpha));
    result.viewTarget = wwtlib.Vector3d.lerp(from.viewTarget, to.viewTarget, alpha);
    result.targetReferenceFrame = to.targetReferenceFrame;
    if (to.target === from.target) {
        result.target = to.target;
    }
    else {
        result.target = 20;
    }
    return result;
}
wwtlib.CameraParameters.interpolateGreatCircle = function wwtlib_CameraParameters$interpolateGreatCircle(from, to, alphaIn, type, fastDirectionMove) {
    /// <param name="from" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="to" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="alphaIn" type="Number">
    /// </param>
    /// <param name="type" type="wwtlib.InterpolationType">
    /// </param>
    /// <param name="fastDirectionMove" type="Boolean">
    /// </param>
    /// <returns type="wwtlib.CameraParameters"></returns>
    var result = new wwtlib.CameraParameters();
    var alpha = wwtlib.CameraParameters.easeCurve(alphaIn, type);
    var alphaBIn = Math.min(1, alphaIn * 2);
    var alphaB = wwtlib.CameraParameters.easeCurve(alphaBIn, type);
    result.angle = to.angle * alpha + from.angle * (1 - alpha);
    result.rotation = to.rotation * alpha + from.rotation * (1 - alpha);
    var left = wwtlib.Coordinates.geoTo3dDouble(from.lat, from.lng);
    var right = wwtlib.Coordinates.geoTo3dDouble(to.lat, to.lng);
    var mid = wwtlib.Vector3d.slerp(left, right, alpha);
    var midV2 = wwtlib.Coordinates.cartesianToLatLng(mid);
    result.lat = midV2.y;
    result.lng = midV2.x;
    result.zoom = Math.pow(2, wwtlib.CameraParameters.logN(to.zoom, 2) * alpha + wwtlib.CameraParameters.logN(from.zoom, 2) * (1 - alpha));
    result.opacity = (to.opacity * alpha + from.opacity * (1 - alpha));
    result.viewTarget = wwtlib.Vector3d.lerp(from.viewTarget, to.viewTarget, alpha);
    result.targetReferenceFrame = to.targetReferenceFrame;
    if (to.target === from.target) {
        result.target = to.target;
    }
    else {
        result.target = 20;
    }
    return result;
}
wwtlib.CameraParameters.easeCurve = function wwtlib_CameraParameters$easeCurve(alpha, type) {
    /// <param name="alpha" type="Number">
    /// </param>
    /// <param name="type" type="wwtlib.InterpolationType">
    /// </param>
    /// <returns type="Number"></returns>
    switch (type) {
        case 0:
            return alpha;
        case 4:
            return Math.pow(alpha, 2);
        case 1:
            return ((1 - alpha) * wwtlib.CameraParameters.sinh(alpha / (0.1085712344 * 2)) / 100) + alpha * alpha;
        case 2:
            return (alpha * (1 - wwtlib.CameraParameters.sinh((1 - alpha) / (0.1085712344 * 2)) / 100)) + (1 - alpha) * alpha;
        case 3:
            if (alpha < 0.5) {
                return wwtlib.CameraParameters.sinh(alpha / 0.1085712344) / 100;
            }
            else {
                return 1 - (wwtlib.CameraParameters.sinh((1 - alpha) / 0.1085712344) / 100);
            }
        default:
            return alpha;
    }
}
wwtlib.CameraParameters.prototype = {
    lat: 0,
    lng: 0,
    zoom: 0,
    rotation: 0,
    angle: 0,
    raDec: false,
    opacity: 0,
    viewTarget: null,
    target: 0,
    targetReferenceFrame: null,
    
    copy: function wwtlib_CameraParameters$copy() {
        /// <returns type="wwtlib.CameraParameters"></returns>
        var temp = new wwtlib.CameraParameters();
        temp.lat = this.lat;
        temp.lng = this.lng;
        temp.zoom = this.zoom;
        temp.rotation = this.rotation;
        temp.angle = this.angle;
        temp.raDec = this.raDec;
        temp.opacity = this.opacity;
        temp.viewTarget = this.viewTarget.copy();
        temp.target = this.target;
        temp.targetReferenceFrame = this.targetReferenceFrame;
        return temp;
    },
    
    get_RA: function wwtlib_CameraParameters$get_RA() {
        /// <value type="Number"></value>
        return ((((180 - (this.lng - 180)) / 360) * 24) % 24);
    },
    set_RA: function wwtlib_CameraParameters$set_RA(value) {
        /// <value type="Number"></value>
        this.lng = 180 - (value / 24 * 360) - 180;
        this.raDec = true;
        return value;
    },
    
    get_dec: function wwtlib_CameraParameters$get_dec() {
        /// <value type="Number"></value>
        return this.lat;
    },
    set_dec: function wwtlib_CameraParameters$set_dec(value) {
        /// <value type="Number"></value>
        this.lat = value;
        return value;
    },
    
    equals: function wwtlib_CameraParameters$equals(obj) {
        /// <param name="obj" type="Object">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (Type.canCast(obj, wwtlib.CameraParameters)) {
            var cam = obj;
            if (Math.abs(cam.angle - this.angle) > 0.01 || Math.abs(cam.lat - this.lat) > (cam.zoom / 10000) || Math.abs(cam.get_RA() - this.get_RA()) > (cam.zoom / 1000) || Math.abs(cam.rotation - this.rotation) > 0.1 || Math.abs(cam.zoom - this.zoom) > (Math.abs(cam.zoom) / 1000)) {
                return false;
            }
            return true;
        }
        else {
            return false;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Color

wwtlib.Color = function wwtlib_Color() {
    /// <field name="a" type="Number">
    /// </field>
    /// <field name="b" type="Number">
    /// </field>
    /// <field name="g" type="Number">
    /// </field>
    /// <field name="r" type="Number">
    /// </field>
    /// <field name="name" type="String">
    /// </field>
}
wwtlib.Color.fromArgb = function wwtlib_Color$fromArgb(a, r, g, b) {
    /// <param name="a" type="Number">
    /// </param>
    /// <param name="r" type="Number">
    /// </param>
    /// <param name="g" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <returns type="wwtlib.Color"></returns>
    var temp = new wwtlib.Color();
    temp.a = a;
    temp.r = r;
    temp.g = g;
    temp.b = b;
    return temp;
}
wwtlib.Color.fromName = function wwtlib_Color$fromName(name) {
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="wwtlib.Color"></returns>
    var temp = new wwtlib.Color();
    temp.a = 255;
    temp.r = 255;
    temp.g = 255;
    temp.b = 255;
    temp.name = name;
    return temp;
}
wwtlib.Color.load = function wwtlib_Color$load(color) {
    /// <param name="color" type="String">
    /// </param>
    /// <returns type="wwtlib.Color"></returns>
    var a = 255, r = 255, g = 255, b = 255;
    var pieces = color.split(':');
    if (pieces.length === 5) {
        a = parseInt(pieces[1]);
        r = parseInt(pieces[2]);
        g = parseInt(pieces[3]);
        b = parseInt(pieces[4]);
    }
    else if (pieces.length === 2) {
        return wwtlib.Color.fromName(pieces[1].toLowerCase());
    }
    else if (pieces.length === 1 && pieces[0].startsWith('#')) {
        return wwtlib.Color.fromHex(pieces[0]);
    }
    else if (pieces.length === 1 && pieces[0].length === 8) {
        return wwtlib.Color.fromSimpleHex(pieces[0]);
    }
    else if (pieces.length === 1) {
        return wwtlib.Color._fromWindowsNamedColor(pieces[0]);
    }
    return wwtlib.Color.fromArgb(a, r, g, b);
}
wwtlib.Color._fromWindowsNamedColor = function wwtlib_Color$_fromWindowsNamedColor(color) {
    /// <param name="color" type="String">
    /// </param>
    /// <returns type="wwtlib.Color"></returns>
    switch (color.toLowerCase()) {
        case 'activeborder':
            return wwtlib.Color.fromArgb(255, 180, 180, 180);
        case 'activecaption':
            return wwtlib.Color.fromArgb(255, 153, 180, 209);
        case 'activecaptiontext':
            return wwtlib.Color.fromArgb(255, 0, 0, 0);
        case 'appworkspace':
            return wwtlib.Color.fromArgb(255, 171, 171, 171);
        case 'control':
            return wwtlib.Color.fromArgb(255, 240, 240, 240);
        case 'controldark':
            return wwtlib.Color.fromArgb(255, 160, 160, 160);
        case 'controldarkdark':
            return wwtlib.Color.fromArgb(255, 105, 105, 105);
        case 'controllight':
            return wwtlib.Color.fromArgb(255, 227, 227, 227);
        case 'controllightlight':
            return wwtlib.Color.fromArgb(255, 255, 255, 255);
        case 'controltext':
            return wwtlib.Color.fromArgb(255, 0, 0, 0);
        case 'desktop':
            return wwtlib.Color.fromArgb(255, 255, 255, 255);
        case 'graytext':
            return wwtlib.Color.fromArgb(255, 109, 109, 109);
        case 'highlight':
            return wwtlib.Color.fromArgb(255, 51, 153, 255);
        case 'highlighttext':
            return wwtlib.Color.fromArgb(255, 255, 255, 255);
        case 'hottrack':
            return wwtlib.Color.fromArgb(255, 0, 102, 204);
        case 'inactiveborder':
            return wwtlib.Color.fromArgb(255, 244, 247, 252);
        case 'inactivecaption':
            return wwtlib.Color.fromArgb(255, 191, 205, 219);
        case 'inactivecaptiontext':
            return wwtlib.Color.fromArgb(255, 0, 0, 0);
        case 'info':
            return wwtlib.Color.fromArgb(255, 255, 255, 225);
        case 'infotext':
            return wwtlib.Color.fromArgb(255, 0, 0, 0);
        case 'menu':
            return wwtlib.Color.fromArgb(255, 240, 240, 240);
        case 'menutext':
            return wwtlib.Color.fromArgb(255, 0, 0, 0);
        case 'scrollbar':
            return wwtlib.Color.fromArgb(255, 200, 200, 200);
        case 'window':
            return wwtlib.Color.fromArgb(255, 255, 255, 255);
        case 'windowframe':
            return wwtlib.Color.fromArgb(255, 100, 100, 100);
        case 'windowtext':
            return wwtlib.Color.fromArgb(255, 0, 0, 0);
        case 'transparent':
            return wwtlib.Color.fromArgb(0, 255, 255, 255);
        case 'aliceblue':
            return wwtlib.Color.fromArgb(255, 240, 248, 255);
        case 'antiquewhite':
            return wwtlib.Color.fromArgb(255, 250, 235, 215);
        case 'aqua':
            return wwtlib.Color.fromArgb(255, 0, 255, 255);
        case 'aquamarine':
            return wwtlib.Color.fromArgb(255, 127, 255, 212);
        case 'azure':
            return wwtlib.Color.fromArgb(255, 240, 255, 255);
        case 'beige':
            return wwtlib.Color.fromArgb(255, 245, 245, 220);
        case 'bisque':
            return wwtlib.Color.fromArgb(255, 255, 228, 196);
        case 'black':
            return wwtlib.Color.fromArgb(255, 0, 0, 0);
        case 'blanchedalmond':
            return wwtlib.Color.fromArgb(255, 255, 235, 205);
        case 'blue':
            return wwtlib.Color.fromArgb(255, 0, 0, 255);
        case 'blueviolet':
            return wwtlib.Color.fromArgb(255, 138, 43, 226);
        case 'brown':
            return wwtlib.Color.fromArgb(255, 165, 42, 42);
        case 'burlywood':
            return wwtlib.Color.fromArgb(255, 222, 184, 135);
        case 'cadetblue':
            return wwtlib.Color.fromArgb(255, 95, 158, 160);
        case 'chartreuse':
            return wwtlib.Color.fromArgb(255, 127, 255, 0);
        case 'chocolate':
            return wwtlib.Color.fromArgb(255, 210, 105, 30);
        case 'coral':
            return wwtlib.Color.fromArgb(255, 255, 127, 80);
        case 'cornflowerblue':
            return wwtlib.Color.fromArgb(255, 100, 149, 237);
        case 'cornsilk':
            return wwtlib.Color.fromArgb(255, 255, 248, 220);
        case 'crimson':
            return wwtlib.Color.fromArgb(255, 220, 20, 60);
        case 'cyan':
            return wwtlib.Color.fromArgb(255, 0, 255, 255);
        case 'darkblue':
            return wwtlib.Color.fromArgb(255, 0, 0, 139);
        case 'darkcyan':
            return wwtlib.Color.fromArgb(255, 0, 139, 139);
        case 'darkgoldenrod':
            return wwtlib.Color.fromArgb(255, 184, 134, 11);
        case 'darkgray':
            return wwtlib.Color.fromArgb(255, 169, 169, 169);
        case 'darkgreen':
            return wwtlib.Color.fromArgb(255, 0, 100, 0);
        case 'darkkhaki':
            return wwtlib.Color.fromArgb(255, 189, 183, 107);
        case 'darkmagenta':
            return wwtlib.Color.fromArgb(255, 139, 0, 139);
        case 'darkolivegreen':
            return wwtlib.Color.fromArgb(255, 85, 107, 47);
        case 'darkorange':
            return wwtlib.Color.fromArgb(255, 255, 140, 0);
        case 'darkorchid':
            return wwtlib.Color.fromArgb(255, 153, 50, 204);
        case 'darkred':
            return wwtlib.Color.fromArgb(255, 139, 0, 0);
        case 'darksalmon':
            return wwtlib.Color.fromArgb(255, 233, 150, 122);
        case 'darkseagreen':
            return wwtlib.Color.fromArgb(255, 143, 188, 139);
        case 'darkslateblue':
            return wwtlib.Color.fromArgb(255, 72, 61, 139);
        case 'darkslategray':
            return wwtlib.Color.fromArgb(255, 47, 79, 79);
        case 'darkturquoise':
            return wwtlib.Color.fromArgb(255, 0, 206, 209);
        case 'darkviolet':
            return wwtlib.Color.fromArgb(255, 148, 0, 211);
        case 'deeppink':
            return wwtlib.Color.fromArgb(255, 255, 20, 147);
        case 'deepskyblue':
            return wwtlib.Color.fromArgb(255, 0, 191, 255);
        case 'dimgray':
            return wwtlib.Color.fromArgb(255, 105, 105, 105);
        case 'dodgerblue':
            return wwtlib.Color.fromArgb(255, 30, 144, 255);
        case 'firebrick':
            return wwtlib.Color.fromArgb(255, 178, 34, 34);
        case 'floralwhite':
            return wwtlib.Color.fromArgb(255, 255, 250, 240);
        case 'forestgreen':
            return wwtlib.Color.fromArgb(255, 34, 139, 34);
        case 'fuchsia':
            return wwtlib.Color.fromArgb(255, 255, 0, 255);
        case 'gainsboro':
            return wwtlib.Color.fromArgb(255, 220, 220, 220);
        case 'ghostwhite':
            return wwtlib.Color.fromArgb(255, 248, 248, 255);
        case 'gold':
            return wwtlib.Color.fromArgb(255, 255, 215, 0);
        case 'goldenrod':
            return wwtlib.Color.fromArgb(255, 218, 165, 32);
        case 'gray':
            return wwtlib.Color.fromArgb(255, 128, 128, 128);
        case 'green':
            return wwtlib.Color.fromArgb(255, 0, 128, 0);
        case 'greenyellow':
            return wwtlib.Color.fromArgb(255, 173, 255, 47);
        case 'honeydew':
            return wwtlib.Color.fromArgb(255, 240, 255, 240);
        case 'hotpink':
            return wwtlib.Color.fromArgb(255, 255, 105, 180);
        case 'indianred':
            return wwtlib.Color.fromArgb(255, 205, 92, 92);
        case 'indigo':
            return wwtlib.Color.fromArgb(255, 75, 0, 130);
        case 'ivory':
            return wwtlib.Color.fromArgb(255, 255, 255, 240);
        case 'khaki':
            return wwtlib.Color.fromArgb(255, 240, 230, 140);
        case 'lavender':
            return wwtlib.Color.fromArgb(255, 230, 230, 250);
        case 'lavenderblush':
            return wwtlib.Color.fromArgb(255, 255, 240, 245);
        case 'lawngreen':
            return wwtlib.Color.fromArgb(255, 124, 252, 0);
        case 'lemonchiffon':
            return wwtlib.Color.fromArgb(255, 255, 250, 205);
        case 'lightblue':
            return wwtlib.Color.fromArgb(255, 173, 216, 230);
        case 'lightcoral':
            return wwtlib.Color.fromArgb(255, 240, 128, 128);
        case 'lightcyan':
            return wwtlib.Color.fromArgb(255, 224, 255, 255);
        case 'lightgoldenrodyellow':
            return wwtlib.Color.fromArgb(255, 250, 250, 210);
        case 'lightgray':
            return wwtlib.Color.fromArgb(255, 211, 211, 211);
        case 'lightgreen':
            return wwtlib.Color.fromArgb(255, 144, 238, 144);
        case 'lightpink':
            return wwtlib.Color.fromArgb(255, 255, 182, 193);
        case 'lightsalmon':
            return wwtlib.Color.fromArgb(255, 255, 160, 122);
        case 'lightseagreen':
            return wwtlib.Color.fromArgb(255, 32, 178, 170);
        case 'lightskyblue':
            return wwtlib.Color.fromArgb(255, 135, 206, 250);
        case 'lightslategray':
            return wwtlib.Color.fromArgb(255, 119, 136, 153);
        case 'lightsteelblue':
            return wwtlib.Color.fromArgb(255, 176, 196, 222);
        case 'lightyellow':
            return wwtlib.Color.fromArgb(255, 255, 255, 224);
        case 'lime':
            return wwtlib.Color.fromArgb(255, 0, 255, 0);
        case 'limegreen':
            return wwtlib.Color.fromArgb(255, 50, 205, 50);
        case 'linen':
            return wwtlib.Color.fromArgb(255, 250, 240, 230);
        case 'magenta':
            return wwtlib.Color.fromArgb(255, 255, 0, 255);
        case 'maroon':
            return wwtlib.Color.fromArgb(255, 128, 0, 0);
        case 'mediumaquamarine':
            return wwtlib.Color.fromArgb(255, 102, 205, 170);
        case 'mediumblue':
            return wwtlib.Color.fromArgb(255, 0, 0, 205);
        case 'mediumorchid':
            return wwtlib.Color.fromArgb(255, 186, 85, 211);
        case 'mediumpurple':
            return wwtlib.Color.fromArgb(255, 147, 112, 219);
        case 'mediumseagreen':
            return wwtlib.Color.fromArgb(255, 60, 179, 113);
        case 'mediumslateblue':
            return wwtlib.Color.fromArgb(255, 123, 104, 238);
        case 'mediumspringgreen':
            return wwtlib.Color.fromArgb(255, 0, 250, 154);
        case 'mediumturquoise':
            return wwtlib.Color.fromArgb(255, 72, 209, 204);
        case 'mediumvioletred':
            return wwtlib.Color.fromArgb(255, 199, 21, 133);
        case 'midnightblue':
            return wwtlib.Color.fromArgb(255, 25, 25, 112);
        case 'mintcream':
            return wwtlib.Color.fromArgb(255, 245, 255, 250);
        case 'mistyrose':
            return wwtlib.Color.fromArgb(255, 255, 228, 225);
        case 'moccasin':
            return wwtlib.Color.fromArgb(255, 255, 228, 181);
        case 'navajowhite':
            return wwtlib.Color.fromArgb(255, 255, 222, 173);
        case 'navy':
            return wwtlib.Color.fromArgb(255, 0, 0, 128);
        case 'oldlace':
            return wwtlib.Color.fromArgb(255, 253, 245, 230);
        case 'olive':
            return wwtlib.Color.fromArgb(255, 128, 128, 0);
        case 'olivedrab':
            return wwtlib.Color.fromArgb(255, 107, 142, 35);
        case 'orange':
            return wwtlib.Color.fromArgb(255, 255, 165, 0);
        case 'orangered':
            return wwtlib.Color.fromArgb(255, 255, 69, 0);
        case 'orchid':
            return wwtlib.Color.fromArgb(255, 218, 112, 214);
        case 'palegoldenrod':
            return wwtlib.Color.fromArgb(255, 238, 232, 170);
        case 'palegreen':
            return wwtlib.Color.fromArgb(255, 152, 251, 152);
        case 'paleturquoise':
            return wwtlib.Color.fromArgb(255, 175, 238, 238);
        case 'palevioletred':
            return wwtlib.Color.fromArgb(255, 219, 112, 147);
        case 'papayawhip':
            return wwtlib.Color.fromArgb(255, 255, 239, 213);
        case 'peachpuff':
            return wwtlib.Color.fromArgb(255, 255, 218, 185);
        case 'peru':
            return wwtlib.Color.fromArgb(255, 205, 133, 63);
        case 'pink':
            return wwtlib.Color.fromArgb(255, 255, 192, 203);
        case 'plum':
            return wwtlib.Color.fromArgb(255, 221, 160, 221);
        case 'powderblue':
            return wwtlib.Color.fromArgb(255, 176, 224, 230);
        case 'purple':
            return wwtlib.Color.fromArgb(255, 128, 0, 128);
        case 'red':
            return wwtlib.Color.fromArgb(255, 255, 0, 0);
        case 'rosybrown':
            return wwtlib.Color.fromArgb(255, 188, 143, 143);
        case 'royalblue':
            return wwtlib.Color.fromArgb(255, 65, 105, 225);
        case 'saddlebrown':
            return wwtlib.Color.fromArgb(255, 139, 69, 19);
        case 'salmon':
            return wwtlib.Color.fromArgb(255, 250, 128, 114);
        case 'sandybrown':
            return wwtlib.Color.fromArgb(255, 244, 164, 96);
        case 'seagreen':
            return wwtlib.Color.fromArgb(255, 46, 139, 87);
        case 'seashell':
            return wwtlib.Color.fromArgb(255, 255, 245, 238);
        case 'sienna':
            return wwtlib.Color.fromArgb(255, 160, 82, 45);
        case 'silver':
            return wwtlib.Color.fromArgb(255, 192, 192, 192);
        case 'skyblue':
            return wwtlib.Color.fromArgb(255, 135, 206, 235);
        case 'slateblue':
            return wwtlib.Color.fromArgb(255, 106, 90, 205);
        case 'slategray':
            return wwtlib.Color.fromArgb(255, 112, 128, 144);
        case 'snow':
            return wwtlib.Color.fromArgb(255, 255, 250, 250);
        case 'springgreen':
            return wwtlib.Color.fromArgb(255, 0, 255, 127);
        case 'steelblue':
            return wwtlib.Color.fromArgb(255, 70, 130, 180);
        case 'tan':
            return wwtlib.Color.fromArgb(255, 210, 180, 140);
        case 'teal':
            return wwtlib.Color.fromArgb(255, 0, 128, 128);
        case 'thistle':
            return wwtlib.Color.fromArgb(255, 216, 191, 216);
        case 'tomato':
            return wwtlib.Color.fromArgb(255, 255, 99, 71);
        case 'turquoise':
            return wwtlib.Color.fromArgb(255, 64, 224, 208);
        case 'violet':
            return wwtlib.Color.fromArgb(255, 238, 130, 238);
        case 'wheat':
            return wwtlib.Color.fromArgb(255, 245, 222, 179);
        case 'white':
            return wwtlib.Color.fromArgb(255, 255, 255, 255);
        case 'whitesmoke':
            return wwtlib.Color.fromArgb(255, 245, 245, 245);
        case 'yellow':
            return wwtlib.Color.fromArgb(255, 255, 255, 0);
        case 'yellowgreen':
            return wwtlib.Color.fromArgb(255, 154, 205, 50);
        case 'buttonface':
            return wwtlib.Color.fromArgb(255, 240, 240, 240);
        case 'buttonhighlight':
            return wwtlib.Color.fromArgb(255, 255, 255, 255);
        case 'buttonshadow':
            return wwtlib.Color.fromArgb(255, 160, 160, 160);
        case 'gradientactivecaption':
            return wwtlib.Color.fromArgb(255, 185, 209, 234);
        case 'gradientinactivecaption':
            return wwtlib.Color.fromArgb(255, 215, 228, 242);
        case 'menubar':
            return wwtlib.Color.fromArgb(255, 240, 240, 240);
        case 'menuhighlight':
            return wwtlib.Color.fromArgb(255, 51, 153, 255);
    }
    return wwtlib.Color.fromArgb(255, 255, 255, 255);
}
wwtlib.Color.fromHex = function wwtlib_Color$fromHex(data) {
    /// <param name="data" type="String">
    /// </param>
    /// <returns type="wwtlib.Color"></returns>
    var r = wwtlib._util.fromHex(data.substr(1, 2));
    var g = wwtlib._util.fromHex(data.substr(3, 2));
    var b = wwtlib._util.fromHex(data.substr(5, 2));
    var a = 255;
    return wwtlib.Color.fromArgb(a, r, g, b);
}
wwtlib.Color.fromSimpleHex = function wwtlib_Color$fromSimpleHex(data) {
    /// <param name="data" type="String">
    /// </param>
    /// <returns type="wwtlib.Color"></returns>
    var a = wwtlib._util.fromHex(data.substr(0, 2));
    var r = wwtlib._util.fromHex(data.substr(2, 2));
    var g = wwtlib._util.fromHex(data.substr(4, 2));
    var b = wwtlib._util.fromHex(data.substr(6, 2));
    return wwtlib.Color.fromArgb(a, r, g, b);
}
wwtlib.Color.prototype = {
    a: 255,
    b: 255,
    g: 255,
    r: 255,
    name: '',
    
    toFormat: function wwtlib_Color$toFormat() {
        /// <returns type="String"></returns>
        if (String.isNullOrEmpty(this.name)) {
            return String.format('rgb({0},{1},{2})', this.r.toString(), this.g.toString(), this.b.toString());
        }
        else {
            return this.name;
        }
    },
    
    toString: function wwtlib_Color$toString() {
        /// <returns type="String"></returns>
        if (String.isNullOrEmpty(this.name)) {
            return String.format('#{0}{1}{2}', wwtlib._util.toHex(this.r), wwtlib._util.toHex(this.g), wwtlib._util.toHex(this.b));
        }
        else {
            return this.name;
        }
    },
    
    _clone: function wwtlib_Color$_clone() {
        /// <returns type="wwtlib.Color"></returns>
        return wwtlib.Color.fromArgb(this.a, this.r, this.g, this.b);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Colors

wwtlib.Colors = function wwtlib_Colors() {
}
wwtlib.Colors.get_black = function wwtlib_Colors$get_black() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 0, 0, 0);
}
wwtlib.Colors.get_blue = function wwtlib_Colors$get_blue() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 0, 0, 255);
}
wwtlib.Colors.get_brown = function wwtlib_Colors$get_brown() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 165, 42, 42);
}
wwtlib.Colors.get_cyan = function wwtlib_Colors$get_cyan() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 0, 255, 255);
}
wwtlib.Colors.get_darkGray = function wwtlib_Colors$get_darkGray() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 169, 169, 169);
}
wwtlib.Colors.get_gray = function wwtlib_Colors$get_gray() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 128, 128, 128);
}
wwtlib.Colors.get_green = function wwtlib_Colors$get_green() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 0, 255, 0);
}
wwtlib.Colors.get_lightGray = function wwtlib_Colors$get_lightGray() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 211, 211, 211);
}
wwtlib.Colors.get_magenta = function wwtlib_Colors$get_magenta() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 255, 0, 255);
}
wwtlib.Colors.get_orange = function wwtlib_Colors$get_orange() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 255, 165, 0);
}
wwtlib.Colors.get_purple = function wwtlib_Colors$get_purple() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 128, 0, 128);
}
wwtlib.Colors.get_red = function wwtlib_Colors$get_red() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 255, 0, 0);
}
wwtlib.Colors.get_transparent = function wwtlib_Colors$get_transparent() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(0, 255, 255, 255);
}
wwtlib.Colors.get_white = function wwtlib_Colors$get_white() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 255, 255, 255);
}
wwtlib.Colors.get_yellow = function wwtlib_Colors$get_yellow() {
    /// <value type="wwtlib.Color"></value>
    return wwtlib.Color.fromArgb(255, 255, 255, 0);
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Constellations

wwtlib.Constellations = function wwtlib_Constellations() {
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="_webFileConstNames" type="wwtlib.WebFile" static="true">
    /// </field>
    /// <field name="_webFile" type="wwtlib.WebFile">
    /// </field>
    /// <field name="_url" type="String">
    /// </field>
    /// <field name="lines" type="Array">
    /// </field>
    /// <field name="_pointCount" type="Number" integer="true">
    /// </field>
    /// <field name="_boundry" type="Boolean">
    /// </field>
    /// <field name="_noInterpollation" type="Boolean">
    /// </field>
    /// <field name="readOnly" type="Boolean">
    /// </field>
    /// <field name="RC" type="Number" static="true">
    /// </field>
    /// <field name="radius" type="Number">
    /// </field>
    /// <field name="_drawCount" type="Number" integer="true">
    /// </field>
    /// <field name="_maxSeperation" type="Number" static="true">
    /// </field>
    /// <field name="_constellationVertexBuffers" type="Object">
    /// </field>
    /// <field name="containment" type="wwtlib.Constellations" static="true">
    /// </field>
    /// <field name="_constToDraw" type="String" static="true">
    /// </field>
    /// <field name="selectedSegment" type="wwtlib.Linepoint" static="true">
    /// </field>
    /// <field name="_namesBatch" type="wwtlib.Text3dBatch" static="true">
    /// </field>
    /// <field name="_artFile" type="wwtlib.Folder" static="true">
    /// </field>
    /// <field name="artwork" type="Array" static="true">
    /// </field>
    /// <field name="boundries" type="Object" static="true">
    /// </field>
    /// <field name="fullNames" type="Object" static="true">
    /// </field>
    /// <field name="abbreviations" type="Object" static="true">
    /// </field>
    /// <field name="constellationCentroids" type="Object" static="true">
    /// </field>
    /// <field name="bitIDs" type="Object" static="true">
    /// </field>
    this._constellationVertexBuffers = {};
}
wwtlib.Constellations.createBasic = function wwtlib_Constellations$createBasic(name) {
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="wwtlib.Constellations"></returns>
    var temp = new wwtlib.Constellations();
    temp._name = name;
    temp._url = null;
    temp.lines = [];
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.Constellations.fullNames));
    while ($enum1.moveNext()) {
        var abbrv = $enum1.current;
        temp.lines.add(new wwtlib.Lineset(abbrv));
    }
    return temp;
}
wwtlib.Constellations.create = function wwtlib_Constellations$create(name, url, boundry, noInterpollation, resource) {
    /// <param name="name" type="String">
    /// </param>
    /// <param name="url" type="String">
    /// </param>
    /// <param name="boundry" type="Boolean">
    /// </param>
    /// <param name="noInterpollation" type="Boolean">
    /// </param>
    /// <param name="resource" type="Boolean">
    /// </param>
    /// <returns type="wwtlib.Constellations"></returns>
    var temp = new wwtlib.Constellations();
    temp._noInterpollation = noInterpollation;
    temp._boundry = boundry;
    temp._name = name;
    temp._url = url;
    temp.getFile();
    return temp;
}
wwtlib.Constellations.drawConstellationNames = function wwtlib_Constellations$drawConstellationNames(renderContext, opacity, drawColor) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    /// <param name="opacity" type="Number">
    /// </param>
    /// <param name="drawColor" type="wwtlib.Color">
    /// </param>
    if (wwtlib.Constellations._namesBatch == null) {
        wwtlib.Constellations.initializeConstellationNames();
        if (wwtlib.Constellations._namesBatch == null) {
            return;
        }
    }
    wwtlib.Constellations._namesBatch.draw(renderContext, opacity, drawColor);
}
wwtlib.Constellations.initializeConstellationNames = function wwtlib_Constellations$initializeConstellationNames() {
    if (wwtlib.Constellations.constellationCentroids == null) {
        return;
    }
    wwtlib.Constellations._namesBatch = new wwtlib.Text3dBatch(80);
    var $enum1 = ss.IEnumerator.getEnumerator(Object.keys(wwtlib.Constellations.constellationCentroids));
    while ($enum1.moveNext()) {
        var key = $enum1.current;
        var centroid = wwtlib.Constellations.constellationCentroids[key];
        var center = wwtlib.Coordinates.raDecTo3dAu(centroid.get_RA(), centroid.get_dec(), 1);
        var up = wwtlib.Vector3d.create(0, 1, 0);
        var name = centroid.get_name();
        if (centroid.get_name() === 'Triangulum Australe') {
            name = name.replaceAll(' ', '\n   ');
        }
        wwtlib.Constellations._namesBatch.add(new wwtlib.Text3d(center, up, name, 80, 0.000125));
    }
}
wwtlib.Constellations.drawArtwork = function wwtlib_Constellations$drawArtwork(renderContext) {
    /// <param name="renderContext" type="wwtlib.RenderContext">
    /// </param>
    if (wwtlib.Constellations.artwork == null) {
        if (wwtlib.Constellations._artFile == null) {
            wwtlib.Constellations._artFile = new wwtlib.Folder();
            wwtlib.Constellations._artFile.loadFromUrl('http://www.worldwidetelescope.org/wwtweb/catalog.aspx?W=hevelius', wwtlib.Constellations._onArtReady);
        }
        return;
    }
    wwtlib.Constellations._maxSeperation = Math.max(0.5, Math.cos((renderContext.get_fovAngle() * 2) / 180 * Math.PI));
    var $enum1 = ss.IEnumerator.getEnumerator(wwtlib.Constellations.artwork);
    while ($enum1.moveNext()) {
        var place = $enum1.current;
        var reverse = false;
        var centroid = wwtlib.Constellations.constellationCentroids[place.get_constellation()];
        if (centroid != null) {
            var pos = wwtlib.Coordinates.raDecTo3d((reverse) ? -centroid.get_RA() - 6 : centroid.get_RA(), (reverse) ? centroid.get_dec() : centroid.get_dec());
            if (wwtlib.Vector3d.dot(renderContext.get_viewPoint(), pos) > wwtlib.Constellations._maxSeperation) {
                renderContext.drawImageSet(place.get_studyImageset(), 100);
            }
        }
    }
}
wwtlib.Constellations._onArtReady = function wwtlib_Constellations$_onArtReady() {
    wwtlib.Constellations._artFile.childLoadCallback(wwtlib.Constellations._loadArtList);
}
wwtlib.Constellations._loadArtList = function wwtlib_Constellations$_loadArtList() {
    wwtlib.Constellations.artwork = wwtlib.Constellations._artFile.get_places();
}
wwtlib.Constellations._loadNames = function wwtlib_Constellations$_loadNames() {
    if (wwtlib.Constellations._webFileConstNames.get_state() === 2) {
        alert(wwtlib.Constellations._webFileConstNames.get_message());
    }
    else if (wwtlib.Constellations._webFileConstNames.get_state() === 1) {
        wwtlib.Constellations._centroidsReady(wwtlib.Constellations._webFileConstNames.getText());
    }
}
wwtlib.Constellations._centroidsReady = function wwtlib_Constellations$_centroidsReady(file) {
    /// <param name="file" type="String">
    /// </param>
    wwtlib.Constellations.constellationCentroids = {};
    wwtlib.Constellations.fullNames = {};
    wwtlib.Constellations.abbreviations = {};
    wwtlib.Constellations.bitIDs = {};
    var rows = file.split('\r\n');
    var id = 0;
    var line;
    var $enum1 = ss.IEnumerator.getEnumerator(rows);
    while ($enum1.moveNext()) {
        var row = $enum1.current;
        line = row;
        var data = line.split(',');
        wwtlib.Constellations.fullNames[data[1]] = data[0];
        wwtlib.Constellations.abbreviations[data[0]] = data[1];
        wwtlib.Constellations.bitIDs[data[1]] = id++;
        wwtlib.Constellations.constellationCentroids[data[1]] = wwtlib.Place.create(data[0], parseFloat(data[3]), parseFloat(data[2]), 128, data[1], 2, 360);
    }
    wwtlib.WWTControl.set_renderNeeded(true);
    wwtlib.ConstellationFilter.buildConstellationFilters();
}
wwtlib.Constellations.fullName = function wwtlib_Constellations$fullName(name) {
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="String"></returns>
    if (Object.keyExists(wwtlib.Constellations.fullNames, name)) {
        return wwtlib.Constellations.fullNames[name];
    }
    return name;
}
wwtlib.Constellations.abbreviation = function wwtlib_Constellations$abbreviation(name) {
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="String"></returns>
    if (wwtlib.Constellations.abbreviations != null && !String.isNullOrEmpty(name) && Object.keyExists(wwtlib.Constellations.abbreviations, name)) {
        return wwtlib.Constellations.abbreviations[name];
    }
    return name;
}
wwtlib.Constellations.prototype = {
    _name: null,
    _webFile: null,
    
    get_name: function wwtlib_Constellations$get_name() {
        /// <value type="String"></value>
        return this._name;
    },
    set_name: function wwtlib_Constellations$set_name(value) {
        /// <value type="String"></value>
        this._name = value;
        return value;
    },
    
    _url: null,
    lines: null,
    _pointCount: 0,
    _boundry: false,
    _noInterpollation: false,
    readOnly: false,
    
    getFile: function wwtlib_Constellations$getFile() {
        this._webFile = new wwtlib.WebFile(this._url);
        this._webFile.onStateChange = ss.Delegate.create(this, this.fileStateChange);
        this._webFile.send();
    },
    
    fileStateChange: function wwtlib_Constellations$fileStateChange() {
        if (this._webFile.get_state() === 2) {
            alert(this._webFile.get_message());
        }
        else if (this._webFile.get_state() === 1) {
            this._loadConstellationData(this._webFile.getText());
        }
    },
    
    _loadConstellationData: function wwtlib_Constellations$_loadConstellationData(data) {
        /// <param name="data" type="String">
        /// </param>
        if (this._boundry && !this._noInterpollation) {
            wwtlib.Constellations.boundries = {};
        }
        this.lines = [];
        var lineSet = null;
        try {
            var rows = data.split('\r\n');
            var abrv;
            var abrvOld = '';
            var ra;
            var dec;
            var lastRa = 0;
            var type = 0;
            var $enum1 = ss.IEnumerator.getEnumerator(rows);
            while ($enum1.moveNext()) {
                var row = $enum1.current;
                var line = row;
                if (line.substr(11, 2) === '- ') {
                    line = line.substr(0, 11) + ' -' + line.substr(13, (line.length - 13));
                }
                if (line.substr(11, 2) === '+ ') {
                    line = line.substr(0, 11) + ' +' + line.substr(13, (line.length - 13));
                }
                dec = parseFloat(line.substr(11, 10));
                if (this._noInterpollation) {
                    ra = parseFloat(line.substr(0, 10));
                }
                else {
                    ra = parseFloat(line.substr(0, 10));
                }
                abrv = line.substr(23, 4).trim();
                if (!this._boundry) {
                    if (!!line.substr(28, 1).trim()) {
                        type = parseInt(line.substr(28, 1));
                    }
                }
                else {
                    if (this._noInterpollation && line.substr(28, 1) !== 'O') {
                        continue;
                    }
                }
                if (abrv !== abrvOld) {
                    type = 3;
                    lineSet = new wwtlib.Lineset(abrv);
                    this.lines.add(lineSet);
                    if (this._boundry && !this._noInterpollation) {
                        wwtlib.Constellations.boundries[abrv] = lineSet;
                    }
                    abrvOld = abrv;
                    lastRa = 0;
                }
                if (this._noInterpollation) {
                    if (Math.abs(ra - lastRa) > 12) {
                        ra = ra - (24 * (((ra - lastRa) < 0) ? -1 : 1));
                    }
                    lastRa = ra;
                }
                var starName = null;
                if (line.length > 30) {
                    starName = line.substr(30).trim();
                }
                if (starName == null || starName !== 'Empty') {
                    lineSet.add(ra, dec, type, starName);
                }
                this._pointCount++;
                type = 1;
            }
        }
        catch ($e2) {
            var i = 0;
        }
        wwtlib.WWTControl.set_renderNeeded(true);
    },
    
    radius: 1,
    
    draw: function wwtlib_Constellations$draw(renderContext, showOnlySelected, focusConsteallation, clearExisting) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="showOnlySelected" type="Boolean">
        /// </param>
        /// <param name="focusConsteallation" type="String">
        /// </param>
        /// <param name="clearExisting" type="Boolean">
        /// </param>
        wwtlib.Constellations._maxSeperation = Math.max(0.6, Math.cos((renderContext.get_fovAngle() * 2) / 180 * Math.PI));
        this._drawCount = 0;
        var lsSelected = null;
        if (this.lines == null || wwtlib.Constellations.constellationCentroids == null) {
            return;
        }
        wwtlib.Constellations._constToDraw = focusConsteallation;
        var $enum1 = ss.IEnumerator.getEnumerator(this.lines);
        while ($enum1.moveNext()) {
            var ls = $enum1.current;
            if (wwtlib.Constellations._constToDraw === ls.get_name() && this._boundry) {
                lsSelected = ls;
            }
            else if (!showOnlySelected || !this._boundry) {
                this._drawSingleConstellation(renderContext, ls, 1);
            }
        }
        if (lsSelected != null) {
            this._drawSingleConstellation(renderContext, lsSelected, 1);
        }
    },
    
    _drawCount: 0,
    
    _drawSingleConstellation: function wwtlib_Constellations$_drawSingleConstellation(renderContext, ls, opacity) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="ls" type="wwtlib.Lineset">
        /// </param>
        /// <param name="opacity" type="Number">
        /// </param>
        var reverse = false;
        var centroid = wwtlib.Constellations.constellationCentroids[ls.get_name()];
        if (centroid != null) {
            var pos = wwtlib.Coordinates.raDecTo3d((reverse) ? -centroid.get_RA() - 6 : centroid.get_RA(), (reverse) ? centroid.get_dec() : centroid.get_dec());
            if (wwtlib.Vector3d.dot(renderContext.get_viewPoint(), pos) < wwtlib.Constellations._maxSeperation) {
                return;
            }
        }
        if (!Object.keyExists(this._constellationVertexBuffers, ls.get_name())) {
            var count = ls.points.length;
            var linelist = new wwtlib.SimpleLineList();
            linelist.set_depthBuffered(false);
            this._constellationVertexBuffers[ls.get_name()] = linelist;
            var currentPoint = new wwtlib.Vector3d();
            var temp;
            for (var i = 0; i < count; i++) {
                if (!ls.points[i].pointType || !i) {
                    currentPoint = wwtlib.Coordinates.raDecTo3d(ls.points[i].RA, ls.points[i].dec);
                }
                else {
                    temp = wwtlib.Coordinates.raDecTo3d(ls.points[i].RA, ls.points[i].dec);
                    linelist.addLine(currentPoint, temp);
                    currentPoint = temp;
                }
            }
            if (this._boundry) {
                temp = wwtlib.Coordinates.raDecTo3d(ls.points[0].RA, ls.points[0].dec);
                linelist.addLine(currentPoint, temp);
            }
        }
        var col;
        if (this._boundry) {
            if (wwtlib.Constellations._constToDraw !== ls.get_name()) {
                col = wwtlib.Settings.get_global().get_constellationBoundryColor();
            }
            else {
                col = wwtlib.Settings.get_global().get_constellationSelectionColor();
            }
        }
        else {
            col = wwtlib.Settings.get_global().get_constellationFigureColor();
        }
        this._constellationVertexBuffers[ls.get_name()].drawLines(renderContext, opacity, wwtlib.Colors.get_red());
    },
    
    _drawSingleConstellationOld: function wwtlib_Constellations$_drawSingleConstellationOld(renderContext, ls) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <param name="ls" type="wwtlib.Lineset">
        /// </param>
        var reverse = false;
        var centroid = wwtlib.Constellations.constellationCentroids[ls.get_name()];
        if (centroid != null) {
            var pos = wwtlib.Coordinates.raDecTo3d((reverse) ? -centroid.get_RA() - 6 : centroid.get_RA(), (reverse) ? centroid.get_dec() : centroid.get_dec());
            if (wwtlib.Vector3d.dot(renderContext.get_viewPoint(), pos) < wwtlib.Constellations._maxSeperation) {
                return;
            }
        }
        this._drawCount++;
        var col;
        if (this._boundry) {
            if (wwtlib.Constellations._constToDraw !== ls.get_name()) {
                col = wwtlib.Settings.get_global().get_constellationBoundryColor();
            }
            else {
                col = wwtlib.Settings.get_global().get_constellationSelectionColor();
            }
        }
        else {
            col = wwtlib.Settings.get_global().get_constellationFigureColor();
        }
        if (renderContext.gl == null) {
            var ctx = renderContext.device;
            var count = ls.points.length;
            var lastPoint = new wwtlib.Vector3d();
            ctx.save();
            var linePending = false;
            ctx.beginPath();
            ctx.strokeStyle = col;
            ctx.lineWidth = 2;
            ctx.globalAlpha = 0.25;
            for (var i = 0; i < count; i++) {
                if (!ls.points[i].pointType || !i) {
                    if (linePending) {
                        ctx.stroke();
                    }
                    lastPoint = renderContext.WVP.transform(wwtlib.Coordinates.raDecTo3d(ls.points[i].RA, ls.points[i].dec));
                    ctx.moveTo(lastPoint.x, lastPoint.y);
                }
                else {
                    var newPoint = renderContext.WVP.transform(wwtlib.Coordinates.raDecTo3d(ls.points[i].RA, ls.points[i].dec));
                    ctx.lineTo(newPoint.x, newPoint.y);
                    linePending = true;
                }
            }
            if (this._boundry) {
                ctx.closePath();
            }
            ctx.stroke();
            ctx.restore();
        }
        else {
        }
    },
    
    findConstellationForPoint: function wwtlib_Constellations$findConstellationForPoint(ra, dec) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <returns type="String"></returns>
        if (dec > 88.402 || this.lines == null) {
            return 'UMI';
        }
        var $enum1 = ss.IEnumerator.getEnumerator(this.lines);
        while ($enum1.moveNext()) {
            var ls = $enum1.current;
            var count = ls.points.length;
            var i;
            var j;
            var inside = false;
            for (i = 0, j = count - 1; i < count; j = i++) {
                if ((((ls.points[i].dec <= dec) && (dec < ls.points[j].dec)) || ((ls.points[j].dec <= dec) && (dec < ls.points[i].dec))) && (ra < (ls.points[j].RA - ls.points[i].RA) * (dec - ls.points[i].dec) / (ls.points[j].dec - ls.points[i].dec) + ls.points[i].RA)) {
                    inside = !inside;
                }
            }
            if (inside) {
                return ls.get_name();
            }
        }
        if (ra > 0) {
            return this.findConstellationForPoint(ra - 24, dec);
        }
        if (dec > 65.5) {
            return 'UMI';
        }
        if (dec < -65.5) {
            return 'OCT';
        }
        return 'Error';
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Lineset

wwtlib.Lineset = function wwtlib_Lineset(name) {
    /// <param name="name" type="String">
    /// </param>
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="points" type="Array">
    /// </field>
    this._name = name;
    this.points = [];
}
wwtlib.Lineset.prototype = {
    _name: null,
    
    get_name: function wwtlib_Lineset$get_name() {
        /// <value type="String"></value>
        return this._name;
    },
    set_name: function wwtlib_Lineset$set_name(value) {
        /// <value type="String"></value>
        this._name = value;
        return value;
    },
    
    points: null,
    
    add: function wwtlib_Lineset$add(ra, dec, pointType, name) {
        /// <param name="ra" type="Number">
        /// </param>
        /// <param name="dec" type="Number">
        /// </param>
        /// <param name="pointType" type="wwtlib.PointType">
        /// </param>
        /// <param name="name" type="String">
        /// </param>
        this.points.add(new wwtlib.Linepoint(ra, dec, pointType, name));
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Linepoint

wwtlib.Linepoint = function wwtlib_Linepoint(ra, dec, type, name) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <param name="type" type="wwtlib.PointType">
    /// </param>
    /// <param name="name" type="String">
    /// </param>
    /// <field name="RA" type="Number">
    /// </field>
    /// <field name="dec" type="Number">
    /// </field>
    /// <field name="pointType" type="wwtlib.PointType">
    /// </field>
    /// <field name="name" type="String">
    /// </field>
    this.RA = ra;
    this.dec = dec;
    this.pointType = type;
    this.name = name;
}
wwtlib.Linepoint.prototype = {
    RA: 0,
    dec: 0,
    pointType: 0,
    name: null,
    
    toString: function wwtlib_Linepoint$toString() {
        /// <returns type="String"></returns>
        if (String.isNullOrEmpty(this.name)) {
            return wwtlib.Coordinates.formatDMS((((this.RA / 360) * 24 + 12) % 24)) + ', ' + wwtlib.Coordinates.formatDMS(this.dec) + ', ' + this.pointType.toString();
        }
        else {
            return this.name + ', ' + this.pointType.toString();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ConstellationFilter

wwtlib.ConstellationFilter = function wwtlib_ConstellationFilter() {
    /// <field name="bits" type="Array" elementType="Number" elementInteger="true">
    /// </field>
    /// <field name="oldBits" type="Array" elementType="Number" elementInteger="true">
    /// </field>
    /// <field name="blendState" type="wwtlib.BlendState">
    /// </field>
    /// <field name="internal" type="Boolean">
    /// </field>
    /// <field name="families" type="Object" static="true">
    /// </field>
    /// <field name="settingsOwned" type="Boolean">
    /// </field>
    this.bits = new Array(3);
    this.oldBits = new Array(3);
    this.blendState = wwtlib.BlendState.create(false, 1000);
    for (var i = 0; i < 3; i++) {
        this.bits[i] = ~this.bits[i];
        this.oldBits[i] = this.bits[i];
    }
}
wwtlib.ConstellationFilter.buildConstellationFilters = function wwtlib_ConstellationFilter$buildConstellationFilters() {
    var all = wwtlib.ConstellationFilter.get_allConstellation();
    all.internal = true;
    wwtlib.ConstellationFilter.families['AllConstellation'] = all;
    wwtlib.ConstellationFilter.families['Zodiacal'] = wwtlib.ConstellationFilter.get_zodiacal();
    wwtlib.ConstellationFilter.families['Ursa Major Family'] = wwtlib.ConstellationFilter.get_ursaMajorFamily();
    wwtlib.ConstellationFilter.families['Perseus Family'] = wwtlib.ConstellationFilter.get_perseusFamily();
    wwtlib.ConstellationFilter.families['Hercules Family'] = wwtlib.ConstellationFilter.get_herculesFamily();
    wwtlib.ConstellationFilter.families['Orion Family'] = wwtlib.ConstellationFilter.get_orionFamily();
    wwtlib.ConstellationFilter.families['Heavenly Waters'] = wwtlib.ConstellationFilter.get_heavenlyWaters();
    wwtlib.ConstellationFilter.families['Bayer Family'] = wwtlib.ConstellationFilter.get_bayerFamily();
    wwtlib.ConstellationFilter.families['La Caille Family'] = wwtlib.ConstellationFilter.get_laCaileFamily();
}
wwtlib.ConstellationFilter.saveCustomFilters = function wwtlib_ConstellationFilter$saveCustomFilters() {
    var sb = new ss.StringBuilder();
    var $dict1 = wwtlib.ConstellationFilter.families;
    for (var $key2 in $dict1) {
        var kv = { key: $key2, value: $dict1[$key2] };
        if (!kv.value.internal) {
            sb.append(kv.key);
            sb.append(';');
            sb.appendLine(kv.value.toString());
        }
    }
}
wwtlib.ConstellationFilter.get_allConstellation = function wwtlib_ConstellationFilter$get_allConstellation() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var all = new wwtlib.ConstellationFilter();
    all.setAll(true);
    return all;
}
wwtlib.ConstellationFilter.get_zodiacal = function wwtlib_ConstellationFilter$get_zodiacal() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var zodiacal = new wwtlib.ConstellationFilter();
    zodiacal.set('ARI', true);
    zodiacal.set('TAU', true);
    zodiacal.set('GEM', true);
    zodiacal.set('CNC', true);
    zodiacal.set('LEO', true);
    zodiacal.set('VIR', true);
    zodiacal.set('LIB', true);
    zodiacal.set('SCO', true);
    zodiacal.set('SGR', true);
    zodiacal.set('CAP', true);
    zodiacal.set('AQR', true);
    zodiacal.set('PSC', true);
    zodiacal.internal = true;
    return zodiacal;
}
wwtlib.ConstellationFilter.get_ursaMajorFamily = function wwtlib_ConstellationFilter$get_ursaMajorFamily() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var uma = new wwtlib.ConstellationFilter();
    uma.set('UMA', true);
    uma.set('UMI', true);
    uma.set('DRA', true);
    uma.set('CVN', true);
    uma.set('BOO', true);
    uma.set('COM', true);
    uma.set('CRB', true);
    uma.set('CAM', true);
    uma.set('LYN', true);
    uma.set('LMI', true);
    uma.internal = true;
    return uma;
}
wwtlib.ConstellationFilter.get_perseusFamily = function wwtlib_ConstellationFilter$get_perseusFamily() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var Perseus = new wwtlib.ConstellationFilter();
    Perseus.set('CAS', true);
    Perseus.set('CEP', true);
    Perseus.set('AND', true);
    Perseus.set('PER', true);
    Perseus.set('PEG', true);
    Perseus.set('CET', true);
    Perseus.set('AUR', true);
    Perseus.set('LAC', true);
    Perseus.set('TRI', true);
    Perseus.internal = true;
    return Perseus;
}
wwtlib.ConstellationFilter.get_herculesFamily = function wwtlib_ConstellationFilter$get_herculesFamily() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var hercules = new wwtlib.ConstellationFilter();
    hercules.set('HER', true);
    hercules.set('SGE', true);
    hercules.set('AQL', true);
    hercules.set('LYR', true);
    hercules.set('CYG', true);
    hercules.set('VUL', true);
    hercules.set('HYA', true);
    hercules.set('SEX', true);
    hercules.set('CRT', true);
    hercules.set('CRV', true);
    hercules.set('OPH', true);
    hercules.set('SER1', true);
    hercules.set('SER2', true);
    hercules.set('SCT', true);
    hercules.set('CEN', true);
    hercules.set('LUP', true);
    hercules.set('CRA', true);
    hercules.set('ARA', true);
    hercules.set('TRA', true);
    hercules.set('CRU', true);
    hercules.internal = true;
    return hercules;
}
wwtlib.ConstellationFilter.get_orionFamily = function wwtlib_ConstellationFilter$get_orionFamily() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var orion = new wwtlib.ConstellationFilter();
    orion.set('ORI', true);
    orion.set('CMA', true);
    orion.set('CMI', true);
    orion.set('MON', true);
    orion.set('LEP', true);
    orion.internal = true;
    return orion;
}
wwtlib.ConstellationFilter.get_heavenlyWaters = function wwtlib_ConstellationFilter$get_heavenlyWaters() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var waters = new wwtlib.ConstellationFilter();
    waters.set('DEL', true);
    waters.set('EQU', true);
    waters.set('ERI', true);
    waters.set('PSA', true);
    waters.set('CAR', true);
    waters.set('PUP', true);
    waters.set('VEL', true);
    waters.set('PYX', true);
    waters.set('COL', true);
    waters.internal = true;
    return waters;
}
wwtlib.ConstellationFilter.get_bayerFamily = function wwtlib_ConstellationFilter$get_bayerFamily() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var bayer = new wwtlib.ConstellationFilter();
    bayer.set('HYA', true);
    bayer.set('DOR', true);
    bayer.set('VOL', true);
    bayer.set('APS', true);
    bayer.set('PAV', true);
    bayer.set('GRU', true);
    bayer.set('PHE', true);
    bayer.set('TUC', true);
    bayer.set('IND', true);
    bayer.set('CHA', true);
    bayer.set('MUS', true);
    bayer.internal = true;
    return bayer;
}
wwtlib.ConstellationFilter.get_laCaileFamily = function wwtlib_ConstellationFilter$get_laCaileFamily() {
    /// <value type="wwtlib.ConstellationFilter"></value>
    var LaCaile = new wwtlib.ConstellationFilter();
    LaCaile.set('NOR', true);
    LaCaile.set('CIR', true);
    LaCaile.set('TEL', true);
    LaCaile.set('MIC', true);
    LaCaile.set('SCL', true);
    LaCaile.set('FOR', true);
    LaCaile.set('CAE', true);
    LaCaile.set('HOR', true);
    LaCaile.set('OCT', true);
    LaCaile.set('MEN', true);
    LaCaile.set('RET', true);
    LaCaile.set('PIC', true);
    LaCaile.set('ANT', true);
    LaCaile.internal = true;
    return LaCaile;
}
wwtlib.ConstellationFilter.parse = function wwtlib_ConstellationFilter$parse(val) {
    /// <param name="val" type="String">
    /// </param>
    /// <returns type="wwtlib.ConstellationFilter"></returns>
    var parts = (val).split(',');
    var cf = new wwtlib.ConstellationFilter();
    try {
        for (var i = 0; i < 3; i++) {
            cf.bits[i] = parseInt(parts[i]);
        }
    }
    catch ($e1) {
    }
    return cf;
}
wwtlib.ConstellationFilter.prototype = {
    internal: false,
    
    _saveBits: function wwtlib_ConstellationFilter$_saveBits() {
        for (var i = 0; i < 3; i++) {
            this.oldBits[i] = this.bits[i];
        }
    },
    
    _isChanged: function wwtlib_ConstellationFilter$_isChanged() {
        /// <returns type="Boolean"></returns>
        for (var i = 0; i < 3; i++) {
            if (this.oldBits[i] !== this.bits[i]) {
                return true;
            }
        }
        return false;
    },
    
    _checkChanged: function wwtlib_ConstellationFilter$_checkChanged() {
        if (this._isChanged()) {
            this._fireChanged();
        }
    },
    
    isEnabled: function wwtlib_ConstellationFilter$isEnabled(abbrev) {
        /// <param name="abbrev" type="String">
        /// </param>
        /// <returns type="Boolean"></returns>
        var bitID = wwtlib.Constellations.bitIDs[abbrev];
        var index = bitID / 32;
        bitID = bitID % 32;
        return this.blendState.get_state() && !!((1 << bitID) & this.bits[index]);
    },
    
    isSet: function wwtlib_ConstellationFilter$isSet(abbrev) {
        /// <param name="abbrev" type="String">
        /// </param>
        /// <returns type="Boolean"></returns>
        this._saveBits();
        var bitID = wwtlib.Constellations.bitIDs[abbrev];
        var index = bitID / 32;
        bitID = bitID % 32;
        return !!((1 << bitID) & this.bits[index]);
    },
    
    set: function wwtlib_ConstellationFilter$set(abbrev, state) {
        /// <param name="abbrev" type="String">
        /// </param>
        /// <param name="state" type="Boolean">
        /// </param>
        this._saveBits();
        var bitID = wwtlib.Constellations.bitIDs[abbrev];
        var index = bitID / 32;
        bitID = bitID % 32;
        if (state) {
            this.bits[index] = this.bits[index] | (1 << bitID);
        }
        else {
            this.bits[index] = this.bits[index] ^ (1 << bitID);
        }
        this._checkChanged();
    },
    
    setAll: function wwtlib_ConstellationFilter$setAll(state) {
        /// <param name="state" type="Boolean">
        /// </param>
        this._saveBits();
        for (var bitID = 0; bitID < 89; bitID++) {
            var index = bitID / 32;
            var bit = bitID % 32;
            if (state) {
                this.bits[index] = this.bits[index] | (1 << bit);
            }
            else {
                this.bits[index] = this.bits[index] ^ (1 << bit);
            }
        }
        this._checkChanged();
    },
    
    setBits: function wwtlib_ConstellationFilter$setBits(bits) {
        /// <param name="bits" type="Array" elementType="Number" elementInteger="true">
        /// </param>
        this._saveBits();
        for (var i = 0; i < 3; i++) {
            this.bits[i] = (bits[i * 4]) + ((bits[i * 4 + 1]) << 8) + ((bits[i * 4 + 2]) << 16) + ((bits[i * 4 + 3]) << 24);
        }
        this._checkChanged();
    },
    
    getBits: function wwtlib_ConstellationFilter$getBits() {
        /// <returns type="Array" elementType="Number" elementInteger="true"></returns>
        var bits = new Array(12);
        var index = 0;
        for (var i = 0; i < 3; i++) {
            bits[index++] = this.bits[i];
            bits[index++] = (this.bits[i] >> 8);
            bits[index++] = (this.bits[i] >> 16);
            bits[index++] = (this.bits[i] >> 24);
        }
        return bits;
    },
    
    cloneFilter: function wwtlib_ConstellationFilter$cloneFilter(filter) {
        /// <param name="filter" type="wwtlib.ConstellationFilter">
        /// </param>
        this._saveBits();
        for (var i = 0; i < 3; i++) {
            this.bits[i] = filter.bits[i];
        }
        this._checkChanged();
    },
    
    clone: function wwtlib_ConstellationFilter$clone() {
        /// <returns type="wwtlib.ConstellationFilter"></returns>
        var newFilter = new wwtlib.ConstellationFilter();
        newFilter.cloneFilter(this);
        return newFilter;
    },
    
    combine: function wwtlib_ConstellationFilter$combine(filter) {
        /// <param name="filter" type="wwtlib.ConstellationFilter">
        /// </param>
        this._saveBits();
        for (var i = 0; i < 3; i++) {
            this.bits[i] = this.bits[i] | filter.bits[i];
        }
        this._checkChanged();
    },
    
    remove: function wwtlib_ConstellationFilter$remove(filter) {
        /// <param name="filter" type="wwtlib.ConstellationFilter">
        /// </param>
        this._saveBits();
        for (var i = 0; i < 3; i++) {
            this.bits[i] = this.bits[i] & ~filter.bits[i];
        }
        this._checkChanged();
    },
    
    settingsOwned: false,
    
    _fireChanged: function wwtlib_ConstellationFilter$_fireChanged() {
        if (this.settingsOwned) {
        }
    },
    
    toString: function wwtlib_ConstellationFilter$toString() {
        /// <returns type="String"></returns>
        return String.format('{0},{1},{2}', this.bits[0], this.bits[1], this.bits[2]);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Coordinates

wwtlib.Coordinates = function wwtlib_Coordinates(ascention, declination) {
    /// <param name="ascention" type="Number">
    /// </param>
    /// <param name="declination" type="Number">
    /// </param>
    /// <field name="RC" type="Number" static="true">
    /// </field>
    /// <field name="RCRA" type="Number" static="true">
    /// </field>
    /// <field name="radius" type="Number" static="true">
    /// </field>
    /// <field name="_earthRadius" type="Number" static="true">
    /// </field>
    /// <field name="_ascention" type="Number">
    /// </field>
    /// <field name="_declination" type="Number">
    /// </field>
    /// <field name="_rotationMatrix" type="Array" elementType="Array" static="true">
    /// </field>
    this._ascention = ascention + (Math.PI * 80) % (Math.PI * 2);
    this._declination = declination;
}
wwtlib.Coordinates.geoTo3d = function wwtlib_Coordinates$geoTo3d(lat, lng) {
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create((Math.cos(lng * wwtlib.Coordinates.RC) * Math.cos(lat * wwtlib.Coordinates.RC) * 1), (Math.sin(lat * wwtlib.Coordinates.RC) * 1), (Math.sin(lng * wwtlib.Coordinates.RC) * Math.cos(lat * wwtlib.Coordinates.RC) * 1));
}
wwtlib.Coordinates.geoTo3dDouble = function wwtlib_Coordinates$geoTo3dDouble(lat, lng) {
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create(Math.cos(lng * wwtlib.Coordinates.RC) * Math.cos(lat * wwtlib.Coordinates.RC) * 1, Math.sin(lat * wwtlib.Coordinates.RC) * 1, Math.sin(lng * wwtlib.Coordinates.RC) * Math.cos(lat * wwtlib.Coordinates.RC) * 1);
}
wwtlib.Coordinates.geoTo3dDoubleRad = function wwtlib_Coordinates$geoTo3dDoubleRad(lat, lng, radius) {
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <param name="radius" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    lng -= 180;
    return wwtlib.Vector3d.create(Math.cos(lng * wwtlib.Coordinates.RC) * Math.cos(lat * wwtlib.Coordinates.RC) * radius, Math.sin(lat * wwtlib.Coordinates.RC) * radius, Math.sin(lng * wwtlib.Coordinates.RC) * Math.cos(lat * wwtlib.Coordinates.RC) * radius);
}
wwtlib.Coordinates.geoTo3dRad = function wwtlib_Coordinates$geoTo3dRad(lat, lng, radius) {
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <param name="radius" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create((Math.cos(lng * wwtlib.Coordinates.RC) * Math.cos(lat * wwtlib.Coordinates.RC) * radius), (Math.sin(lat * wwtlib.Coordinates.RC) * radius), (Math.sin(lng * wwtlib.Coordinates.RC) * Math.cos(lat * wwtlib.Coordinates.RC) * radius));
}
wwtlib.Coordinates.raDecTo3d = function wwtlib_Coordinates$raDecTo3d(ra, dec) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create((Math.cos(ra * wwtlib.Coordinates.RCRA) * Math.cos(dec * wwtlib.Coordinates.RC) * 1), (Math.sin(dec * wwtlib.Coordinates.RC) * 1), (Math.sin(ra * wwtlib.Coordinates.RCRA) * Math.cos(dec * wwtlib.Coordinates.RC) * 1));
}
wwtlib.Coordinates.raDecTo3dAu = function wwtlib_Coordinates$raDecTo3dAu(ra, dec, au) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <param name="au" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create((Math.cos(ra * wwtlib.Coordinates.RCRA) * Math.cos(dec * wwtlib.Coordinates.RC) * au), (Math.sin(dec * wwtlib.Coordinates.RC) * au), (Math.sin(ra * wwtlib.Coordinates.RCRA) * Math.cos(dec * wwtlib.Coordinates.RC) * au));
}
wwtlib.Coordinates.raDecTo3dMat = function wwtlib_Coordinates$raDecTo3dMat(ra, dec, mat) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <param name="mat" type="wwtlib.Matrix3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d._transformCoordinate(wwtlib.Vector3d.create((Math.cos(ra * wwtlib.Coordinates.RCRA) * Math.cos(dec * wwtlib.Coordinates.RC) * 1), (Math.sin(dec * wwtlib.Coordinates.RC) * 1), (Math.sin(ra * wwtlib.Coordinates.RCRA) * Math.cos(dec * wwtlib.Coordinates.RC) * 1)), mat);
}
wwtlib.Coordinates.raDecTo3dPointRad = function wwtlib_Coordinates$raDecTo3dPointRad(point, radius) {
    /// <param name="point" type="wwtlib.Coordinates">
    /// </param>
    /// <param name="radius" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    point.set_dec(-point.get_dec());
    return wwtlib.Vector3d.create((Math.cos(point.get_RA() * wwtlib.Coordinates.RCRA) * Math.cos(point.get_dec() * wwtlib.Coordinates.RC) * radius), (Math.sin(point.get_dec() * wwtlib.Coordinates.RC) * radius), (Math.sin(point.get_RA() * wwtlib.Coordinates.RCRA) * Math.cos(point.get_dec() * wwtlib.Coordinates.RC) * radius));
}
wwtlib.Coordinates.sterographicTo3d = function wwtlib_Coordinates$sterographicTo3d(x, y, radius, standardLat, meridean, falseEasting, falseNorthing, scale, north) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <param name="radius" type="Number">
    /// </param>
    /// <param name="standardLat" type="Number">
    /// </param>
    /// <param name="meridean" type="Number">
    /// </param>
    /// <param name="falseEasting" type="Number">
    /// </param>
    /// <param name="falseNorthing" type="Number">
    /// </param>
    /// <param name="scale" type="Number">
    /// </param>
    /// <param name="north" type="Boolean">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var lat = 90;
    var lng = 0;
    x -= falseEasting;
    y -= falseNorthing;
    if (!!x || !!y) {
        var re = (1 + Math.sin(Math.abs(standardLat) / 180 * Math.PI)) * 6371000 / scale;
        var rere = re * re;
        var c1 = 180 / Math.PI;
        if (!x) {
            lng = (90 * y < 0) ? -1 : 1;
        }
        else {
            lng = Math.atan2(y, x) * c1;
        }
        var len = (x * x) + (y * y);
        lat = (rere - len) / (rere + len);
        lat = Math.asin(lat) * c1;
        if (!north) {
            lat = -lat;
            lng = -lng;
            meridean = -meridean;
        }
    }
    return wwtlib.Coordinates.geoTo3dDoubleRad(lat, 90 + lng + meridean, radius);
}
wwtlib.Coordinates.equitorialToHorizon = function wwtlib_Coordinates$equitorialToHorizon(equitorial, location, utc) {
    /// <param name="equitorial" type="wwtlib.Coordinates">
    /// </param>
    /// <param name="location" type="wwtlib.Coordinates">
    /// </param>
    /// <param name="utc" type="Date">
    /// </param>
    /// <returns type="wwtlib.Coordinates"></returns>
    var hourAngle = wwtlib.Coordinates.mstFromUTC2(utc, location.get_lng()) - (equitorial.get_RA() * 15);
    if (hourAngle < 0) {
        hourAngle += 360;
    }
    var ha = hourAngle * wwtlib.Coordinates.RC;
    var dec = equitorial.get_dec() * wwtlib.Coordinates.RC;
    var lat = location.get_lat() * wwtlib.Coordinates.RC;
    var sinAlt = Math.sin(dec) * Math.sin(lat) + Math.cos(dec) * Math.cos(lat) * Math.cos(ha);
    var altitude = Math.asin(sinAlt);
    var cosAzimith = (Math.sin(dec) - Math.sin(altitude) * Math.sin(lat)) / (Math.cos(altitude) * Math.cos(lat));
    var azimuth = Math.acos(cosAzimith);
    var altAz = new wwtlib.Coordinates(azimuth, altitude);
    if (Math.sin(ha) > 0) {
        altAz.set_az((360 - altAz.get_az()));
    }
    return altAz;
}
wwtlib.Coordinates.horizonToEquitorial = function wwtlib_Coordinates$horizonToEquitorial(altAz, location, utc) {
    /// <param name="altAz" type="wwtlib.Coordinates">
    /// </param>
    /// <param name="location" type="wwtlib.Coordinates">
    /// </param>
    /// <param name="utc" type="Date">
    /// </param>
    /// <returns type="wwtlib.Coordinates"></returns>
    var hourAngle = wwtlib.Coordinates.mstFromUTC2(utc, location.get_lng());
    var haLocal;
    var declination;
    var raDec = wwtlib.Coordinates._altAzToRaDec(altAz.get_alt() * wwtlib.Coordinates.RC, altAz.get_az() * wwtlib.Coordinates.RC, location.get_lat() * wwtlib.Coordinates.RC);
    haLocal = raDec.x;
    declination = raDec.y;
    var ha = (haLocal / wwtlib.Coordinates.RC);
    hourAngle += ha;
    if (hourAngle < 0) {
        hourAngle += 360;
    }
    if (hourAngle > 360) {
        hourAngle -= 360;
    }
    return wwtlib.Coordinates.fromRaDec(hourAngle / 15, declination / wwtlib.Coordinates.RC);
}
wwtlib.Coordinates._altAzToRaDec = function wwtlib_Coordinates$_altAzToRaDec(Altitude, Azimuth, Latitude) {
    /// <param name="Altitude" type="Number">
    /// </param>
    /// <param name="Azimuth" type="Number">
    /// </param>
    /// <param name="Latitude" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var hrAngle = 0;
    var dec = 0;
    Azimuth = Math.PI - Azimuth;
    if (Azimuth < 0) {
        Azimuth += Math.PI * 2;
    }
    hrAngle = Math.atan2(Math.sin(Azimuth), Math.cos(Azimuth) * Math.sin(Latitude) + Math.tan(Altitude) * Math.cos(Latitude));
    if (hrAngle < 0) {
        hrAngle += Math.PI * 2;
    }
    dec = Math.asin(Math.sin(Latitude) * Math.sin(Altitude) - Math.cos(Latitude) * Math.cos(Altitude) * Math.cos(Azimuth));
    return wwtlib.Vector2d.create(hrAngle, dec);
}
wwtlib.Coordinates.mstFromUTC2 = function wwtlib_Coordinates$mstFromUTC2(utc, lng) {
    /// <param name="utc" type="Date">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var year = utc.getUTCFullYear();
    var month = utc.getUTCMonth() + 1;
    var day = utc.getUTCDate();
    var hour = utc.getUTCHours();
    var minute = utc.getUTCMinutes();
    var second = utc.getUTCSeconds() + utc.getUTCMilliseconds() / 1000;
    if (month === 1 || month === 2) {
        year -= 1;
        month += 12;
    }
    var a = parseInt((year / 100));
    var b = 2 - a + Math.floor((a / 4));
    var c = Math.floor(365.25 * year);
    var d = Math.floor(30.6001 * (month + 1));
    var julianDays;
    var jd2;
    var julianCenturies;
    var mst;
    julianDays = b + c + d - 730550.5 + day + (hour + minute / 60 + second / 3600) / 24;
    julianCenturies = julianDays / 36525;
    mst = 280.46061837 + 360.98564736629 * julianDays + 0.000387933 * julianCenturies * julianCenturies - julianCenturies * julianCenturies * julianCenturies / 38710000 + lng;
    if (mst > 0) {
        while (mst > 360) {
            mst = mst - 360;
        }
    }
    else {
        while (mst < 0) {
            mst = mst + 360;
        }
    }
    return mst;
}
wwtlib.Coordinates.cartesianToSpherical = function wwtlib_Coordinates$cartesianToSpherical(vector) {
    /// <param name="vector" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Coordinates"></returns>
    var ascention;
    var declination;
    var radius = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var XZ = Math.sqrt(vector.x * vector.x + vector.z * vector.z);
    declination = Math.asin(vector.y / radius);
    if (0 < vector.x) {
        ascention = Math.asin(vector.z / XZ);
    }
    else if (0 > vector.x) {
        ascention = Math.PI - Math.asin(vector.z / XZ);
    }
    else {
        ascention = 0;
    }
    return new wwtlib.Coordinates(ascention, declination);
}
wwtlib.Coordinates.cartesianToSpherical2 = function wwtlib_Coordinates$cartesianToSpherical2(vector) {
    /// <param name="vector" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Coordinates"></returns>
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var longitude = Math.atan2(vector.z, vector.x);
    var latitude = Math.asin(vector.y / rho);
    return new wwtlib.Coordinates(longitude, latitude);
}
wwtlib.Coordinates.cartesianToSphericalSky = function wwtlib_Coordinates$cartesianToSphericalSky(vector) {
    /// <param name="vector" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var ra = Math.atan2(vector.z, vector.x);
    var dec = Math.asin(-vector.y / rho);
    return wwtlib.Vector2d.create(ra / Math.PI * 12, dec / Math.PI * 180);
}
wwtlib.Coordinates.cartesianToLatLng = function wwtlib_Coordinates$cartesianToLatLng(vector) {
    /// <param name="vector" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var longitude = Math.atan2(vector.z, vector.x);
    var latitude = Math.asin(vector.y / rho);
    return wwtlib.Vector2d.create(longitude * 180 / Math.PI, latitude * 180 / Math.PI);
}
wwtlib.Coordinates.cartesianToSpherical3 = function wwtlib_Coordinates$cartesianToSpherical3(vector) {
    /// <param name="vector" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Coordinates"></returns>
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var longitude = Math.atan2(vector.z, vector.x);
    var latitude = Math.asin(vector.y / rho);
    return new wwtlib.Coordinates(longitude, latitude);
}
wwtlib.Coordinates.sign = function wwtlib_Coordinates$sign(target) {
    /// <param name="target" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return (target < 0) ? -1 : 1;
}
wwtlib.Coordinates.formatDMSSign = function wwtlib_Coordinates$formatDMSSign(angle, sign) {
    /// <param name="angle" type="Number">
    /// </param>
    /// <param name="sign" type="Boolean">
    /// </param>
    /// <returns type="String"></returns>
    try {
        angle += (wwtlib.Coordinates.sign(angle) * 0.0001388888888889);
        var degrees = parseInt(angle);
        var minutes = ((angle - parseInt(angle)) * 60);
        var seconds = ((minutes - parseInt(minutes)) * 60);
        if (sign) {
            var signString = (angle > 0) ? '+' : '-';
            return String.format('{3}{0:00;00}:{1:00}:{2:00}', degrees, Math.abs(parseInt(minutes)), Math.abs(parseInt(seconds)), signString);
        }
        else {
            return String.format('{0:00}:{1:00}:{2:00}', degrees, Math.abs(parseInt(minutes)), Math.abs(parseInt(seconds)));
        }
    }
    catch ($e1) {
        return '';
    }
}
wwtlib.Coordinates.formatDMS = function wwtlib_Coordinates$formatDMS(angle) {
    /// <param name="angle" type="Number">
    /// </param>
    /// <returns type="String"></returns>
    try {
        angle += (((angle < 0) ? -1 : 1) * 0.0001388888888889);
        var degrees = Math.abs(parseInt(angle));
        var minutes = ((angle - parseInt(angle)) * 60);
        var seconds = ((minutes - parseInt(minutes)) * 60);
        var sign = (angle < 0) ? '-' : '';
        return String.format('{3}{0}:{1}:{2}', Math.abs(degrees), Math.abs(parseInt(minutes)), Math.abs(parseInt(seconds)), sign);
    }
    catch ($e1) {
        return '';
    }
}
wwtlib.Coordinates.formatDMSWide = function wwtlib_Coordinates$formatDMSWide(angle) {
    /// <param name="angle" type="Number">
    /// </param>
    /// <returns type="String"></returns>
    try {
        angle += (wwtlib.Coordinates.sign(angle) * 0.0001388888888889);
        var degrees = Math.abs(parseInt(angle));
        var minutes = ((angle - parseInt(angle)) * 60);
        var seconds = ((minutes - parseInt(minutes)) * 60);
        var sign = (angle < 0) ? '-' : '';
        return String.format('{3}{0:00} : {1:00} : {2:00}', degrees, Math.abs(parseInt(minutes)), Math.abs(parseInt(seconds)), sign);
    }
    catch ($e1) {
        return '';
    }
}
wwtlib.Coordinates.formatHMS = function wwtlib_Coordinates$formatHMS(angle) {
    /// <param name="angle" type="Number">
    /// </param>
    /// <returns type="String"></returns>
    try {
        angle += (wwtlib.Coordinates.sign(angle) * 0.0001388888888889);
        var degrees = parseInt(angle);
        var minutes = ((angle - parseInt(angle)) * 60);
        var seconds = ((minutes - parseInt(minutes)) * 60);
        return String.format('{0:00}h{1:00}m{2:00}s', degrees, Math.abs(parseInt(minutes)), Math.abs(parseInt(seconds)));
    }
    catch ($e1) {
        return '';
    }
}
wwtlib.Coordinates.fromRaDec = function wwtlib_Coordinates$fromRaDec(ra, dec) {
    /// <param name="ra" type="Number">
    /// </param>
    /// <param name="dec" type="Number">
    /// </param>
    /// <returns type="wwtlib.Coordinates"></returns>
    return new wwtlib.Coordinates((ra - 12) * 15 * wwtlib.Coordinates.RC, dec * wwtlib.Coordinates.RC);
}
wwtlib.Coordinates.fromLatLng = function wwtlib_Coordinates$fromLatLng(lat, lng) {
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <returns type="wwtlib.Coordinates"></returns>
    return new wwtlib.Coordinates(lng * wwtlib.Coordinates.RC, lat * wwtlib.Coordinates.RC);
}
wwtlib.Coordinates.dmsToDegrees = function wwtlib_Coordinates$dmsToDegrees(Degrees, Minutes, Seconds) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <param name="Minutes" type="Number">
    /// </param>
    /// <param name="Seconds" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Degrees + Minutes / 60 + Seconds / 3600;
}
wwtlib.Coordinates.degreesToRadians = function wwtlib_Coordinates$degreesToRadians(Degrees) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Degrees * 0.0174532925199433;
}
wwtlib.Coordinates.radiansToDegrees = function wwtlib_Coordinates$radiansToDegrees(Radians) {
    /// <param name="Radians" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Radians * 57.2957795130823;
}
wwtlib.Coordinates.radiansToHours = function wwtlib_Coordinates$radiansToHours(Radians) {
    /// <param name="Radians" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Radians * 3.81971863420549;
}
wwtlib.Coordinates.hoursToRadians = function wwtlib_Coordinates$hoursToRadians(Hours) {
    /// <param name="Hours" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Hours * 0.261799387799149;
}
wwtlib.Coordinates.hoursToDegrees = function wwtlib_Coordinates$hoursToDegrees(Hours) {
    /// <param name="Hours" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Hours * 15;
}
wwtlib.Coordinates.degreesToHours = function wwtlib_Coordinates$degreesToHours(Degrees) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Degrees / 15;
}
wwtlib.Coordinates.PI = function wwtlib_Coordinates$PI() {
    /// <returns type="Number"></returns>
    return 3.14159265358979;
}
wwtlib.Coordinates.mapTo0To360Range = function wwtlib_Coordinates$mapTo0To360Range(Degrees) {
    /// <param name="Degrees" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Value = Degrees;
    while (Value < 0) {
        Value += 360;
    }
    while (Value > 360) {
        Value -= 360;
    }
    return Value;
}
wwtlib.Coordinates.mapTo0To24Range = function wwtlib_Coordinates$mapTo0To24Range(HourAngle) {
    /// <param name="HourAngle" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var Value = HourAngle;
    while (Value < 0) {
        Value += 24;
    }
    while (Value > 24) {
        Value -= 24;
    }
    return Value;
}
wwtlib.Coordinates.meanObliquityOfEcliptic = function wwtlib_Coordinates$meanObliquityOfEcliptic(JD) {
    /// <param name="JD" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    var U = (JD - 2451545) / 3652500;
    var Usquared = U * U;
    var Ucubed = Usquared * U;
    var U4 = Ucubed * U;
    var U5 = U4 * U;
    var U6 = U5 * U;
    var U7 = U6 * U;
    var U8 = U7 * U;
    var U9 = U8 * U;
    var U10 = U9 * U;
    return wwtlib.Coordinates.dmsToDegrees(23, 26, 21.448) - wwtlib.Coordinates.dmsToDegrees(0, 0, 4680.93) * U - wwtlib.Coordinates.dmsToDegrees(0, 0, 1.55) * Usquared + wwtlib.Coordinates.dmsToDegrees(0, 0, 1999.25) * Ucubed - wwtlib.Coordinates.dmsToDegrees(0, 0, 51.38) * U4 - wwtlib.Coordinates.dmsToDegrees(0, 0, 249.67) * U5 - wwtlib.Coordinates.dmsToDegrees(0, 0, 39.05) * U6 + wwtlib.Coordinates.dmsToDegrees(0, 0, 7.12) * U7 + wwtlib.Coordinates.dmsToDegrees(0, 0, 27.87) * U8 + wwtlib.Coordinates.dmsToDegrees(0, 0, 5.79) * U9 + wwtlib.Coordinates.dmsToDegrees(0, 0, 2.45) * U10;
}
wwtlib.Coordinates.j2000toGalactic = function wwtlib_Coordinates$j2000toGalactic(J2000RA, J2000DEC) {
    /// <param name="J2000RA" type="Number">
    /// </param>
    /// <param name="J2000DEC" type="Number">
    /// </param>
    /// <returns type="Array" elementType="Number"></returns>
    var J2000pos = [ Math.cos(J2000RA / 180 * Math.PI) * Math.cos(J2000DEC / 180 * Math.PI), Math.sin(J2000RA / 180 * Math.PI) * Math.cos(J2000DEC / 180 * Math.PI), Math.sin(J2000DEC / 180 * Math.PI) ];
    if (wwtlib.Coordinates._rotationMatrix == null) {
        wwtlib.Coordinates._rotationMatrix = new Array(3);
        wwtlib.Coordinates._rotationMatrix[0] = [ -0.0548755604, -0.8734370902, -0.4838350155 ];
        wwtlib.Coordinates._rotationMatrix[1] = [ 0.4941094279, -0.44482963, 0.7469822445 ];
        wwtlib.Coordinates._rotationMatrix[2] = [ -0.867666149, -0.1980763734, 0.4559837762 ];
    }
    var Galacticpos = new Array(3);
    for (var i = 0; i < 3; i++) {
        Galacticpos[i] = J2000pos[0] * wwtlib.Coordinates._rotationMatrix[i][0] + J2000pos[1] * wwtlib.Coordinates._rotationMatrix[i][1] + J2000pos[2] * wwtlib.Coordinates._rotationMatrix[i][2];
    }
    var GalacticL2 = Math.atan2(Galacticpos[1], Galacticpos[0]);
    if (GalacticL2 < 0) {
        GalacticL2 = GalacticL2 + 2 * Math.PI;
    }
    if (GalacticL2 > 2 * Math.PI) {
        GalacticL2 = GalacticL2 - 2 * Math.PI;
    }
    var GalacticB2 = Math.atan2(Galacticpos[2], Math.sqrt(Galacticpos[0] * Galacticpos[0] + Galacticpos[1] * Galacticpos[1]));
    return [ GalacticL2 / Math.PI * 180, GalacticB2 / Math.PI * 180 ];
}
wwtlib.Coordinates.galacticTo3dDouble = function wwtlib_Coordinates$galacticTo3dDouble(l, b) {
    /// <param name="l" type="Number">
    /// </param>
    /// <param name="b" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var result = wwtlib.Coordinates.galactictoJ2000(l, b);
    return wwtlib.Coordinates.raDecTo3dAu(result[0] / 15, result[1], 1);
}
wwtlib.Coordinates.galactictoJ2000 = function wwtlib_Coordinates$galactictoJ2000(GalacticL2, GalacticB2) {
    /// <param name="GalacticL2" type="Number">
    /// </param>
    /// <param name="GalacticB2" type="Number">
    /// </param>
    /// <returns type="Array" elementType="Number"></returns>
    var Galacticpos = [ Math.cos(GalacticL2 / 180 * Math.PI) * Math.cos(GalacticB2 / 180 * Math.PI), Math.sin(GalacticL2 / 180 * Math.PI) * Math.cos(GalacticB2 / 180 * Math.PI), Math.sin(GalacticB2 / 180 * Math.PI) ];
    if (wwtlib.Coordinates._rotationMatrix == null) {
        wwtlib.Coordinates._rotationMatrix = new Array(3);
        wwtlib.Coordinates._rotationMatrix[0] = [ -0.0548755604, -0.8734370902, -0.4838350155 ];
        wwtlib.Coordinates._rotationMatrix[1] = [ 0.4941094279, -0.44482963, 0.7469822445 ];
        wwtlib.Coordinates._rotationMatrix[2] = [ -0.867666149, -0.1980763734, 0.4559837762 ];
    }
    var J2000pos = new Array(3);
    for (var i = 0; i < 3; i++) {
        J2000pos[i] = Galacticpos[0] * wwtlib.Coordinates._rotationMatrix[0][i] + Galacticpos[1] * wwtlib.Coordinates._rotationMatrix[1][i] + Galacticpos[2] * wwtlib.Coordinates._rotationMatrix[2][i];
    }
    var J2000RA = Math.atan2(J2000pos[1], J2000pos[0]);
    if (J2000RA < 0) {
        J2000RA = J2000RA + 2 * Math.PI;
    }
    if (J2000RA > 2 * Math.PI) {
        J2000RA = J2000RA - 2 * Math.PI;
    }
    var J2000DEC = Math.atan2(J2000pos[2], Math.sqrt(J2000pos[0] * J2000pos[0] + J2000pos[1] * J2000pos[1]));
    return [ J2000RA / Math.PI * 180, J2000DEC / Math.PI * 180 ];
}
wwtlib.Coordinates.prototype = {
    
    distance: function wwtlib_Coordinates$distance(pointB) {
        /// <param name="pointB" type="wwtlib.Coordinates">
        /// </param>
        /// <returns type="Number"></returns>
        var y = this.get_lat();
        var x = this.get_lng() * Math.cos(y * wwtlib.Coordinates.RC);
        var y1 = pointB.get_lat();
        var x1 = pointB.get_lng() * Math.cos(y1 * wwtlib.Coordinates.RC);
        return Math.sqrt((y - y1) * (y - y1) + (x - x1) * (x - x1));
    },
    
    distance3d: function wwtlib_Coordinates$distance3d(pointB) {
        /// <param name="pointB" type="wwtlib.Coordinates">
        /// </param>
        /// <returns type="Number"></returns>
        var pnt1 = wwtlib.Coordinates.geoTo3dDouble(pointB.get_lat(), pointB.get_lng());
        var pnt2 = wwtlib.Coordinates.geoTo3dDouble(this.get_lat(), this.get_lng());
        var pntDiff = wwtlib.Vector3d.subtractVectors(pnt1, pnt2);
        return pntDiff.length() / wwtlib.Coordinates.RC;
    },
    
    angle: function wwtlib_Coordinates$angle(pointB) {
        /// <param name="pointB" type="wwtlib.Coordinates">
        /// </param>
        /// <returns type="Number"></returns>
        var y = this.get_lat();
        var x = this.get_lng() * Math.cos(y * wwtlib.Coordinates.RC);
        var y1 = pointB.get_lat();
        var x1 = pointB.get_lng() * Math.cos(y1 * wwtlib.Coordinates.RC);
        return Math.atan2((y1 - y), (x1 - x));
    },
    
    get_RA: function wwtlib_Coordinates$get_RA() {
        /// <value type="Number"></value>
        return (((this._ascention / Math.PI) * 12) + 12) % 24;
    },
    set_RA: function wwtlib_Coordinates$set_RA(value) {
        /// <value type="Number"></value>
        this._ascention = (value / 12) * Math.PI;
        return value;
    },
    
    get_dec: function wwtlib_Coordinates$get_dec() {
        /// <value type="Number"></value>
        return this._declination / wwtlib.Coordinates.RC;
    },
    set_dec: function wwtlib_Coordinates$set_dec(value) {
        /// <value type="Number"></value>
        this._declination = value * wwtlib.Coordinates.RC;
        return value;
    },
    
    get_lat: function wwtlib_Coordinates$get_lat() {
        /// <value type="Number"></value>
        return this._declination / wwtlib.Coordinates.RC;
    },
    set_lat: function wwtlib_Coordinates$set_lat(value) {
        /// <value type="Number"></value>
        this._declination = value * wwtlib.Coordinates.RC;
        return value;
    },
    
    get_lng: function wwtlib_Coordinates$get_lng() {
        /// <value type="Number"></value>
        var lng = this._ascention / wwtlib.Coordinates.RC;
        if (lng <= 180) {
            return lng;
        }
        else {
            return (-180 + (180 - lng));
        }
    },
    set_lng: function wwtlib_Coordinates$set_lng(value) {
        /// <value type="Number"></value>
        this._ascention = ((value * wwtlib.Coordinates.RC) + (Math.PI * 2) % (Math.PI * 2));
        return value;
    },
    
    get_alt: function wwtlib_Coordinates$get_alt() {
        /// <value type="Number"></value>
        return this._declination / wwtlib.Coordinates.RC;
    },
    set_alt: function wwtlib_Coordinates$set_alt(value) {
        /// <value type="Number"></value>
        this._declination = value * wwtlib.Coordinates.RC;
        return value;
    },
    
    get_az: function wwtlib_Coordinates$get_az() {
        /// <value type="Number"></value>
        return this._ascention / wwtlib.Coordinates.RC;
    },
    set_az: function wwtlib_Coordinates$set_az(value) {
        /// <value type="Number"></value>
        this._ascention = value * wwtlib.Coordinates.RC;
        return value;
    },
    
    _ascention: 0,
    _declination: 0,
    
    toString: function wwtlib_Coordinates$toString() {
        /// <returns type="String"></returns>
        return String.format('Lat: {0}, Lng: {1}', this.get_lat(), this.get_lng());
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PositionTexture

wwtlib.PositionTexture = function wwtlib_PositionTexture() {
    /// <field name="tu" type="Number">
    /// </field>
    /// <field name="tv" type="Number">
    /// </field>
    /// <field name="position" type="wwtlib.Vector3d">
    /// </field>
    this.position = new wwtlib.Vector3d();
}
wwtlib.PositionTexture.createPos = function wwtlib_PositionTexture$createPos(pos, u, v) {
    /// <param name="pos" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionTexture"></returns>
    var temp = new wwtlib.PositionTexture();
    temp.tu = u * wwtlib.Tile.uvMultiple;
    temp.tv = v * wwtlib.Tile.uvMultiple;
    temp.position = pos;
    return temp;
}
wwtlib.PositionTexture.createPosRaw = function wwtlib_PositionTexture$createPosRaw(pos, u, v) {
    /// <param name="pos" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionTexture"></returns>
    var temp = new wwtlib.PositionTexture();
    temp.tu = u;
    temp.tv = v;
    temp.position = pos;
    return temp;
}
wwtlib.PositionTexture.createPosSize = function wwtlib_PositionTexture$createPosSize(pos, u, v, width, height) {
    /// <param name="pos" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <param name="width" type="Number">
    /// </param>
    /// <param name="height" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionTexture"></returns>
    var temp = new wwtlib.PositionTexture();
    temp.tu = u * width;
    temp.tv = v * height;
    temp.position = pos;
    return temp;
}
wwtlib.PositionTexture.create = function wwtlib_PositionTexture$create(xvalue, yvalue, zvalue, u, v) {
    /// <param name="xvalue" type="Number">
    /// </param>
    /// <param name="yvalue" type="Number">
    /// </param>
    /// <param name="zvalue" type="Number">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionTexture"></returns>
    var temp = new wwtlib.PositionTexture();
    temp.position = wwtlib.Vector3d.create(xvalue, yvalue, zvalue);
    temp.tu = u * wwtlib.Tile.uvMultiple;
    temp.tv = v * wwtlib.Tile.uvMultiple;
    return temp;
}
wwtlib.PositionTexture.prototype = {
    tu: 0,
    tv: 0,
    position: null,
    
    copy: function wwtlib_PositionTexture$copy() {
        /// <returns type="wwtlib.PositionTexture"></returns>
        var temp = new wwtlib.PositionTexture();
        temp.position = wwtlib.Vector3d.makeCopy(this.position);
        temp.tu = this.tu;
        temp.tv = this.tv;
        return temp;
    },
    
    toString: function wwtlib_PositionTexture$toString() {
        /// <returns type="String"></returns>
        return String.format('{0}, {1}, {2}, {3}, {4}', this.position.x, this.position.y, this.position.z, this.tu, this.tv);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PositionColoredTextured

wwtlib.PositionColoredTextured = function wwtlib_PositionColoredTextured() {
    /// <field name="tu" type="Number">
    /// </field>
    /// <field name="tv" type="Number">
    /// </field>
    /// <field name="position" type="wwtlib.Vector3d">
    /// </field>
    this.position = new wwtlib.Vector3d();
}
wwtlib.PositionColoredTextured.createPos = function wwtlib_PositionColoredTextured$createPos(pos, u, v) {
    /// <param name="pos" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionColoredTextured"></returns>
    var temp = new wwtlib.PositionColoredTextured();
    temp.tu = u * wwtlib.Tile.uvMultiple;
    temp.tv = v * wwtlib.Tile.uvMultiple;
    temp.position = pos;
    return temp;
}
wwtlib.PositionColoredTextured.createPosRaw = function wwtlib_PositionColoredTextured$createPosRaw(pos, u, v) {
    /// <param name="pos" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionColoredTextured"></returns>
    var temp = new wwtlib.PositionColoredTextured();
    temp.tu = u;
    temp.tv = v;
    temp.position = pos;
    return temp;
}
wwtlib.PositionColoredTextured.createPosSize = function wwtlib_PositionColoredTextured$createPosSize(pos, u, v, width, height) {
    /// <param name="pos" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <param name="width" type="Number">
    /// </param>
    /// <param name="height" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionColoredTextured"></returns>
    var temp = new wwtlib.PositionColoredTextured();
    temp.tu = u * width;
    temp.tv = v * height;
    temp.position = pos;
    return temp;
}
wwtlib.PositionColoredTextured.create = function wwtlib_PositionColoredTextured$create(xvalue, yvalue, zvalue, u, v) {
    /// <param name="xvalue" type="Number">
    /// </param>
    /// <param name="yvalue" type="Number">
    /// </param>
    /// <param name="zvalue" type="Number">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionTexture"></returns>
    var temp = new wwtlib.PositionTexture();
    temp.position = wwtlib.Vector3d.create(xvalue, yvalue, zvalue);
    temp.tu = u * wwtlib.Tile.uvMultiple;
    temp.tv = v * wwtlib.Tile.uvMultiple;
    return temp;
}
wwtlib.PositionColoredTextured.prototype = {
    tu: 0,
    tv: 0,
    position: null,
    
    copy: function wwtlib_PositionColoredTextured$copy() {
        /// <returns type="wwtlib.PositionTexture"></returns>
        var temp = new wwtlib.PositionTexture();
        temp.position = wwtlib.Vector3d.makeCopy(this.position);
        temp.tu = this.tu;
        temp.tv = this.tv;
        return temp;
    },
    
    toString: function wwtlib_PositionColoredTextured$toString() {
        /// <returns type="String"></returns>
        return String.format('{0}, {1}, {2}, {3}, {4}', this.position.x, this.position.y, this.position.z, this.tu, this.tv);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Vector3d

wwtlib.Vector3d = function wwtlib_Vector3d() {
    /// <field name="x" type="Number">
    /// </field>
    /// <field name="y" type="Number">
    /// </field>
    /// <field name="z" type="Number">
    /// </field>
}
wwtlib.Vector3d.create = function wwtlib_Vector3d$create(valueX, valueY, valueZ) {
    /// <param name="valueX" type="Number">
    /// </param>
    /// <param name="valueY" type="Number">
    /// </param>
    /// <param name="valueZ" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var temp = new wwtlib.Vector3d();
    temp.x = valueX;
    temp.y = valueY;
    temp.z = valueZ;
    return temp;
}
wwtlib.Vector3d.makeCopy = function wwtlib_Vector3d$makeCopy(value) {
    /// <param name="value" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var temp = new wwtlib.Vector3d();
    temp.x = value.x;
    temp.y = value.y;
    temp.z = value.z;
    return temp;
}
wwtlib.Vector3d.negate = function wwtlib_Vector3d$negate(vec) {
    /// <param name="vec" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create(-vec.x, -vec.y, -vec.z);
}
wwtlib.Vector3d.midPoint = function wwtlib_Vector3d$midPoint(left, right) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var result = wwtlib.Vector3d.create((left.x + right.x) / 2, (left.y + right.y) / 2, (left.z + right.z) / 2);
    result.normalize();
    return result;
}
wwtlib.Vector3d.midPointByLength = function wwtlib_Vector3d$midPointByLength(left, right) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var result = wwtlib.Vector3d.create((left.x + right.x) / 2, (left.y + right.y) / 2, (left.z + right.z) / 2);
    result.normalize();
    result.multiply(left.length());
    return result;
}
wwtlib.Vector3d.get_empty = function wwtlib_Vector3d$get_empty() {
    /// <value type="wwtlib.Vector3d"></value>
    return wwtlib.Vector3d.create(0, 0, 0);
}
wwtlib.Vector3d.addVectors = function wwtlib_Vector3d$addVectors(left, right) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create(left.x + right.x, left.y + right.y, left.z + right.z);
}
wwtlib.Vector3d.cross = function wwtlib_Vector3d$cross(left, right) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create(left.y * right.z - left.z * right.y, left.z * right.x - left.x * right.z, left.x * right.y - left.y * right.x);
}
wwtlib.Vector3d.dot = function wwtlib_Vector3d$dot(left, right) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="Number"></returns>
    return left.x * right.x + left.y * right.y + left.z * right.z;
}
wwtlib.Vector3d.getLength = function wwtlib_Vector3d$getLength(source) {
    /// <param name="source" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="Number"></returns>
    return Math.sqrt(source.x * source.x + source.y * source.y + source.z * source.z);
}
wwtlib.Vector3d.getLengthSq = function wwtlib_Vector3d$getLengthSq(source) {
    /// <param name="source" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="Number"></returns>
    return source.x * source.x + source.y * source.y + source.z * source.z;
}
wwtlib.Vector3d.lerp = function wwtlib_Vector3d$lerp(left, right, interpolater) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="interpolater" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return wwtlib.Vector3d.create(left.x * (1 - interpolater) + right.x * interpolater, left.y * (1 - interpolater) + right.y * interpolater, left.z * (1 - interpolater) + right.z * interpolater);
}
wwtlib.Vector3d.midpoint = function wwtlib_Vector3d$midpoint(left, right) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var tmp = wwtlib.Vector3d.create(left.x * (0.5) + right.x * 0.5, left.y * (0.5) + right.y * 0.5, left.z * (0.5) + right.z * 0.5);
    tmp.normalize();
    return tmp;
}
wwtlib.Vector3d.slerp = function wwtlib_Vector3d$slerp(left, right, interpolater) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="interpolater" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var dot = wwtlib.Vector3d.dot(left, right);
    while (dot < 0.98) {
        var middle = wwtlib.Vector3d.midpoint(left, right);
        if (interpolater > 0.5) {
            left = middle;
            interpolater -= 0.5;
            interpolater *= 2;
        }
        else {
            right = middle;
            interpolater *= 2;
        }
        dot = wwtlib.Vector3d.dot(left, right);
    }
    var tmp = wwtlib.Vector3d.lerp(left, right, interpolater);
    tmp.normalize();
    return tmp;
}
wwtlib.Vector3d.multiplyScalar = function wwtlib_Vector3d$multiplyScalar(source, f) {
    /// <param name="source" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="f" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var result = source.copy();
    result.multiply(f);
    return result;
}
wwtlib.Vector3d.scale = function wwtlib_Vector3d$scale(source, scalingFactor) {
    /// <param name="source" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="scalingFactor" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var result = source;
    result.multiply(scalingFactor);
    return result;
}
wwtlib.Vector3d.subtractVectors = function wwtlib_Vector3d$subtractVectors(left, right) {
    /// <param name="left" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var result = left.copy();
    result.subtract(right);
    return result;
}
wwtlib.Vector3d.parse = function wwtlib_Vector3d$parse(data) {
    /// <param name="data" type="String">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    var newVector = new wwtlib.Vector3d();
    var list = data.split(',');
    if (list.length === 3) {
        newVector.x = parseFloat(list[0]);
        newVector.y = parseFloat(list[1]);
        newVector.z = parseFloat(list[2]);
    }
    return newVector;
}
wwtlib.Vector3d._transformCoordinate = function wwtlib_Vector3d$_transformCoordinate(vector3d, mat) {
    /// <param name="vector3d" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="mat" type="wwtlib.Matrix3d">
    /// </param>
    /// <returns type="wwtlib.Vector3d"></returns>
    return mat.transform(vector3d);
}
wwtlib.Vector3d.prototype = {
    x: 0,
    y: 0,
    z: 0,
    
    copy: function wwtlib_Vector3d$copy() {
        /// <returns type="wwtlib.Vector3d"></returns>
        var temp = new wwtlib.Vector3d();
        temp.x = this.x;
        temp.y = this.y;
        temp.z = this.z;
        return temp;
    },
    
    round: function wwtlib_Vector3d$round() {
        this.x = parseInt((this.x * 65536)) / 65536;
        this.y = parseInt((this.y * 65536)) / 65536;
        this.z = parseInt((this.z * 65536)) / 65536;
    },
    
    add: function wwtlib_Vector3d$add(source) {
        /// <param name="source" type="wwtlib.Vector3d">
        /// </param>
        this.x += source.x;
        this.y += source.y;
        this.z += source.z;
    },
    
    length: function wwtlib_Vector3d$length() {
        /// <returns type="Number"></returns>
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },
    
    lengthSq: function wwtlib_Vector3d$lengthSq() {
        /// <returns type="Number"></returns>
        return this.x * this.x + this.y * this.y + this.z * this.z;
    },
    
    multiply: function wwtlib_Vector3d$multiply(s) {
        /// <param name="s" type="Number">
        /// </param>
        this.x *= s;
        this.y *= s;
        this.z *= s;
    },
    
    normalize: function wwtlib_Vector3d$normalize() {
        var length = this.length();
        if (!!length) {
            this.x /= length;
            this.y /= length;
            this.z /= length;
        }
    },
    
    rotateX: function wwtlib_Vector3d$rotateX(radians) {
        /// <param name="radians" type="Number">
        /// </param>
        var zTemp;
        var yTemp;
        yTemp = this.y * Math.cos(radians) - this.z * Math.sin(radians);
        zTemp = this.y * Math.sin(radians) + this.z * Math.cos(radians);
        this.z = zTemp;
        this.y = yTemp;
    },
    
    rotateZ: function wwtlib_Vector3d$rotateZ(radians) {
        /// <param name="radians" type="Number">
        /// </param>
        var xTemp;
        var yTemp;
        xTemp = this.x * Math.cos(radians) - this.y * Math.sin(radians);
        yTemp = this.x * Math.sin(radians) + this.y * Math.cos(radians);
        this.y = yTemp;
        this.x = xTemp;
    },
    
    rotateY: function wwtlib_Vector3d$rotateY(radians) {
        /// <param name="radians" type="Number">
        /// </param>
        var zTemp;
        var xTemp;
        zTemp = this.z * Math.cos(radians) - this.x * Math.sin(radians);
        xTemp = this.z * Math.sin(radians) + this.x * Math.cos(radians);
        this.x = xTemp;
        this.z = zTemp;
    },
    
    subtract: function wwtlib_Vector3d$subtract(source) {
        /// <param name="source" type="wwtlib.Vector3d">
        /// </param>
        this.x -= source.x;
        this.y -= source.y;
        this.z -= source.z;
    },
    
    toString: function wwtlib_Vector3d$toString() {
        /// <returns type="String"></returns>
        return String.format('{0}, {1}, {2}', this.x, this.y, this.z);
    },
    
    toSpherical: function wwtlib_Vector3d$toSpherical() {
        /// <returns type="wwtlib.Vector2d"></returns>
        var ascention;
        var declination;
        var radius = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        var XZ = Math.sqrt(this.x * this.x + this.z * this.z);
        declination = Math.asin(this.y / radius);
        if (!XZ) {
            ascention = 0;
        }
        else if (0 <= this.x) {
            ascention = Math.asin(this.z / XZ);
        }
        else {
            ascention = Math.PI - Math.asin(this.z / XZ);
        }
        return wwtlib.Vector2d.create(((ascention + Math.PI) % (2 * Math.PI)), (declination + (Math.PI / 2)));
    },
    
    toRaDec: function wwtlib_Vector3d$toRaDec() {
        /// <returns type="wwtlib.Vector2d"></returns>
        var point = this.toSpherical();
        point.x = point.x / Math.PI * 12;
        point.y = (point.y / Math.PI * 180) - 90;
        return point;
    },
    
    distanceToLine: function wwtlib_Vector3d$distanceToLine(x1, x2) {
        /// <param name="x1" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="x2" type="wwtlib.Vector3d">
        /// </param>
        /// <returns type="Number"></returns>
        var t1 = wwtlib.Vector3d.subtractVectors(x2, x1);
        var t2 = wwtlib.Vector3d.subtractVectors(x1, this);
        var t3 = wwtlib.Vector3d.cross(t1, t2);
        var d1 = t3.length();
        var t4 = wwtlib.Vector3d.subtractVectors(x2, x1);
        var d2 = t4.length();
        return d1 / d2;
    },
    
    _transformByMatrics: function wwtlib_Vector3d$_transformByMatrics(lookAtAdjust) {
        /// <param name="lookAtAdjust" type="wwtlib.Matrix3d">
        /// </param>
        var temp = lookAtAdjust.transform(this);
        this.x = temp.x;
        this.y = temp.y;
        this.z = temp.z;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Vector2d

wwtlib.Vector2d = function wwtlib_Vector2d() {
    /// <field name="x" type="Number">
    /// </field>
    /// <field name="y" type="Number">
    /// </field>
}
wwtlib.Vector2d.lerp = function wwtlib_Vector2d$lerp(left, right, interpolater) {
    /// <param name="left" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="interpolater" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    return wwtlib.Vector2d.create(left.x * (1 - interpolater) + right.x * interpolater, left.y * (1 - interpolater) + right.y * interpolater);
}
wwtlib.Vector2d.cartesianToSpherical2 = function wwtlib_Vector2d$cartesianToSpherical2(vector) {
    /// <param name="vector" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var longitude = Math.atan2(vector.z, vector.x);
    var latitude = Math.asin(vector.y / rho);
    return wwtlib.Vector2d.create(longitude / Math.PI * 180, latitude / Math.PI * 180);
}
wwtlib.Vector2d.average3d = function wwtlib_Vector2d$average3d(left, right) {
    /// <param name="left" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector2d">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var pntLeft = wwtlib.Coordinates.geoTo3dDouble(left.y, left.x);
    var pntRight = wwtlib.Coordinates.geoTo3dDouble(right.y, right.x);
    var pntOut = wwtlib.Vector3d.addVectors(pntLeft, pntRight);
    pntOut.multiply(0.5);
    pntOut.normalize();
    return wwtlib.Vector2d.cartesianToSpherical2(pntOut);
}
wwtlib.Vector2d.subtract = function wwtlib_Vector2d$subtract(vec) {
    /// <param name="vec" type="wwtlib.Vector2d">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    return wwtlib.Vector2d.create(-vec.x, -vec.y);
}
wwtlib.Vector2d.create = function wwtlib_Vector2d$create(x, y) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var temp = new wwtlib.Vector2d();
    temp.x = x;
    temp.y = y;
    return temp;
}
wwtlib.Vector2d.subtractVector = function wwtlib_Vector2d$subtractVector(left, right) {
    /// <param name="left" type="wwtlib.Vector2d">
    /// </param>
    /// <param name="right" type="wwtlib.Vector2d">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    return wwtlib.Vector2d.create(left.x - right.x, left.y - right.y);
}
wwtlib.Vector2d.prototype = {
    x: 0,
    y: 0,
    
    distance3d: function wwtlib_Vector2d$distance3d(pointB) {
        /// <param name="pointB" type="wwtlib.Vector2d">
        /// </param>
        /// <returns type="Number"></returns>
        var pnt1 = wwtlib.Coordinates.geoTo3dDouble(pointB.y, pointB.x);
        var pnt2 = wwtlib.Coordinates.geoTo3dDouble(this.y, this.x);
        var pntDiff = wwtlib.Vector3d.subtractVectors(pnt1, pnt2);
        return pntDiff.length() / Math.PI * 180;
    },
    
    get_length: function wwtlib_Vector2d$get_length() {
        /// <value type="Number"></value>
        return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    
    normalize: function wwtlib_Vector2d$normalize() {
        var length = this.get_length();
        if (!!length) {
            this.x /= length;
            this.y /= length;
        }
    },
    
    extend: function wwtlib_Vector2d$extend(factor) {
        /// <param name="factor" type="Number">
        /// </param>
        this.x = this.x * factor;
        this.y = this.y * factor;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Matrix3d

wwtlib.Matrix3d = function wwtlib_Matrix3d() {
    /// <field name="_m11" type="Number">
    /// </field>
    /// <field name="_m12" type="Number">
    /// </field>
    /// <field name="_m13" type="Number">
    /// </field>
    /// <field name="_m14" type="Number">
    /// </field>
    /// <field name="_m21" type="Number">
    /// </field>
    /// <field name="_m22" type="Number">
    /// </field>
    /// <field name="_m23" type="Number">
    /// </field>
    /// <field name="_m24" type="Number">
    /// </field>
    /// <field name="_m31" type="Number">
    /// </field>
    /// <field name="_m32" type="Number">
    /// </field>
    /// <field name="_m33" type="Number">
    /// </field>
    /// <field name="_m34" type="Number">
    /// </field>
    /// <field name="_offsetX" type="Number">
    /// </field>
    /// <field name="_offsetY" type="Number">
    /// </field>
    /// <field name="_offsetZ" type="Number">
    /// </field>
    /// <field name="_m44" type="Number">
    /// </field>
    /// <field name="_isNotKnownToBeIdentity" type="Boolean">
    /// </field>
    /// <field name="_s_identity" type="wwtlib.Matrix3d" static="true">
    /// </field>
}
wwtlib.Matrix3d.create = function wwtlib_Matrix3d$create(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, offsetX, offsetY, offsetZ, m44) {
    /// <param name="m11" type="Number">
    /// </param>
    /// <param name="m12" type="Number">
    /// </param>
    /// <param name="m13" type="Number">
    /// </param>
    /// <param name="m14" type="Number">
    /// </param>
    /// <param name="m21" type="Number">
    /// </param>
    /// <param name="m22" type="Number">
    /// </param>
    /// <param name="m23" type="Number">
    /// </param>
    /// <param name="m24" type="Number">
    /// </param>
    /// <param name="m31" type="Number">
    /// </param>
    /// <param name="m32" type="Number">
    /// </param>
    /// <param name="m33" type="Number">
    /// </param>
    /// <param name="m34" type="Number">
    /// </param>
    /// <param name="offsetX" type="Number">
    /// </param>
    /// <param name="offsetY" type="Number">
    /// </param>
    /// <param name="offsetZ" type="Number">
    /// </param>
    /// <param name="m44" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var temp = new wwtlib.Matrix3d();
    temp._m11 = m11;
    temp._m12 = m12;
    temp._m13 = m13;
    temp._m14 = m14;
    temp._m21 = m21;
    temp._m22 = m22;
    temp._m23 = m23;
    temp._m24 = m24;
    temp._m31 = m31;
    temp._m32 = m32;
    temp._m33 = m33;
    temp._m34 = m34;
    temp._offsetX = offsetX;
    temp._offsetY = offsetY;
    temp._offsetZ = offsetZ;
    temp._m44 = m44;
    temp._isNotKnownToBeIdentity = true;
    return temp;
}
wwtlib.Matrix3d.get_identity = function wwtlib_Matrix3d$get_identity() {
    /// <value type="wwtlib.Matrix3d"></value>
    var temp = new wwtlib.Matrix3d();
    temp.set(wwtlib.Matrix3d._s_identity);
    return temp;
}
wwtlib.Matrix3d.multiplyMatrix = function wwtlib_Matrix3d$multiplyMatrix(matrix1, matrix2) {
    /// <param name="matrix1" type="wwtlib.Matrix3d">
    /// </param>
    /// <param name="matrix2" type="wwtlib.Matrix3d">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    if (matrix1.get__isDistinguishedIdentity()) {
        return matrix2;
    }
    if (matrix2.get__isDistinguishedIdentity()) {
        return matrix1;
    }
    return wwtlib.Matrix3d.create((((matrix1._m11 * matrix2._m11) + (matrix1._m12 * matrix2._m21)) + (matrix1._m13 * matrix2._m31)) + (matrix1._m14 * matrix2._offsetX), (((matrix1._m11 * matrix2._m12) + (matrix1._m12 * matrix2._m22)) + (matrix1._m13 * matrix2._m32)) + (matrix1._m14 * matrix2._offsetY), (((matrix1._m11 * matrix2._m13) + (matrix1._m12 * matrix2._m23)) + (matrix1._m13 * matrix2._m33)) + (matrix1._m14 * matrix2._offsetZ), (((matrix1._m11 * matrix2._m14) + (matrix1._m12 * matrix2._m24)) + (matrix1._m13 * matrix2._m34)) + (matrix1._m14 * matrix2._m44), (((matrix1._m21 * matrix2._m11) + (matrix1._m22 * matrix2._m21)) + (matrix1._m23 * matrix2._m31)) + (matrix1._m24 * matrix2._offsetX), (((matrix1._m21 * matrix2._m12) + (matrix1._m22 * matrix2._m22)) + (matrix1._m23 * matrix2._m32)) + (matrix1._m24 * matrix2._offsetY), (((matrix1._m21 * matrix2._m13) + (matrix1._m22 * matrix2._m23)) + (matrix1._m23 * matrix2._m33)) + (matrix1._m24 * matrix2._offsetZ), (((matrix1._m21 * matrix2._m14) + (matrix1._m22 * matrix2._m24)) + (matrix1._m23 * matrix2._m34)) + (matrix1._m24 * matrix2._m44), (((matrix1._m31 * matrix2._m11) + (matrix1._m32 * matrix2._m21)) + (matrix1._m33 * matrix2._m31)) + (matrix1._m34 * matrix2._offsetX), (((matrix1._m31 * matrix2._m12) + (matrix1._m32 * matrix2._m22)) + (matrix1._m33 * matrix2._m32)) + (matrix1._m34 * matrix2._offsetY), (((matrix1._m31 * matrix2._m13) + (matrix1._m32 * matrix2._m23)) + (matrix1._m33 * matrix2._m33)) + (matrix1._m34 * matrix2._offsetZ), (((matrix1._m31 * matrix2._m14) + (matrix1._m32 * matrix2._m24)) + (matrix1._m33 * matrix2._m34)) + (matrix1._m34 * matrix2._m44), (((matrix1._offsetX * matrix2._m11) + (matrix1._offsetY * matrix2._m21)) + (matrix1._offsetZ * matrix2._m31)) + (matrix1._m44 * matrix2._offsetX), (((matrix1._offsetX * matrix2._m12) + (matrix1._offsetY * matrix2._m22)) + (matrix1._offsetZ * matrix2._m32)) + (matrix1._m44 * matrix2._offsetY), (((matrix1._offsetX * matrix2._m13) + (matrix1._offsetY * matrix2._m23)) + (matrix1._offsetZ * matrix2._m33)) + (matrix1._m44 * matrix2._offsetZ), (((matrix1._offsetX * matrix2._m14) + (matrix1._offsetY * matrix2._m24)) + (matrix1._offsetZ * matrix2._m34)) + (matrix1._m44 * matrix2._m44));
}
wwtlib.Matrix3d.lookAtLH = function wwtlib_Matrix3d$lookAtLH(cameraPosition, cameraTarget, cameraUpVector) {
    /// <param name="cameraPosition" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="cameraTarget" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="cameraUpVector" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var zaxis = wwtlib.Vector3d.subtractVectors(cameraTarget, cameraPosition);
    zaxis.normalize();
    var xaxis = wwtlib.Vector3d.cross(cameraUpVector, zaxis);
    xaxis.normalize();
    var yaxis = wwtlib.Vector3d.cross(zaxis, xaxis);
    var mat = wwtlib.Matrix3d.create(xaxis.x, yaxis.x, zaxis.x, 0, xaxis.y, yaxis.y, zaxis.y, 0, xaxis.z, yaxis.z, zaxis.z, 0, -wwtlib.Vector3d.dot(xaxis, cameraPosition), -wwtlib.Vector3d.dot(yaxis, cameraPosition), -wwtlib.Vector3d.dot(zaxis, cameraPosition), 1);
    return mat;
}
wwtlib.Matrix3d._createIdentity = function wwtlib_Matrix3d$_createIdentity() {
    /// <returns type="wwtlib.Matrix3d"></returns>
    var matrixd = wwtlib.Matrix3d.create(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    matrixd.set__isDistinguishedIdentity(true);
    return matrixd;
}
wwtlib.Matrix3d.equals = function wwtlib_Matrix3d$equals(matrix1, matrix2) {
    /// <param name="matrix1" type="wwtlib.Matrix3d">
    /// </param>
    /// <param name="matrix2" type="wwtlib.Matrix3d">
    /// </param>
    /// <returns type="Boolean"></returns>
    if (matrix1.get__isDistinguishedIdentity() || matrix2.get__isDistinguishedIdentity()) {
        return (matrix1.get_isIdentity() === matrix2.get_isIdentity());
    }
    if ((((matrix1.get_m11() === matrix2.get_m11() && matrix1.get_m12() === matrix2.get_m12()) && (matrix1.get_m13() === matrix2.get_m13() && matrix1.get_m14() === matrix2.get_m14())) && ((matrix1.get_m21() === matrix2.get_m21() && matrix1.get_m22() === matrix2.get_m22()) && (matrix1.get_m23() === matrix2.get_m23() && matrix1.get_m24() === matrix2.get_m24()))) && (((matrix1.get_m31() === matrix2.get_m31() && matrix1.get_m32() === matrix2.get_m32()) && (matrix1.get_m33() === matrix2.get_m33() && matrix1.get_m34() === matrix2.get_m34())) && ((matrix1.get_offsetX() === matrix2.get_offsetX() && matrix1.get_offsetY() === matrix2.get_offsetY()) && matrix1.get_offsetZ() === matrix2.get_offsetZ()))) {
        return matrix1.get_m44() === matrix2.get_m44();
    }
    return false;
}
wwtlib.Matrix3d.fromMatrix2d = function wwtlib_Matrix3d$fromMatrix2d(mat) {
    /// <param name="mat" type="wwtlib.Matrix2d">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var mat3d = wwtlib.Matrix3d._createIdentity();
    mat3d.set_m11(mat.m11);
    mat3d.set_m12(mat.m12);
    mat3d.set_m13(mat.m13);
    mat3d.set_m21(mat.m21);
    mat3d.set_m22(mat.m22);
    mat3d.set_m23(mat.m23);
    mat3d.set_m31(mat.m31);
    mat3d.set_m32(mat.m32);
    mat3d.set_m33(mat.m33);
    mat3d._isNotKnownToBeIdentity = true;
    return mat3d;
}
wwtlib.Matrix3d._rotationY = function wwtlib_Matrix3d$_rotationY(p) {
    /// <param name="p" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var v = p;
    var matNew = wwtlib.Matrix3d.get_identity();
    matNew._m11 = Math.cos(v);
    matNew._m22 = 1;
    matNew._m31 = Math.sin(v);
    matNew._m13 = -Math.sin(v);
    matNew._m33 = Math.cos(v);
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
}
wwtlib.Matrix3d._rotationX = function wwtlib_Matrix3d$_rotationX(p) {
    /// <param name="p" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var v = p;
    var matNew = wwtlib.Matrix3d.get_identity();
    matNew._m11 = 1;
    matNew._m22 = Math.cos(v);
    matNew._m32 = -Math.sin(v);
    matNew._m23 = Math.sin(v);
    matNew._m33 = Math.cos(v);
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
}
wwtlib.Matrix3d._rotationZ = function wwtlib_Matrix3d$_rotationZ(p) {
    /// <param name="p" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var v = p;
    var matNew = wwtlib.Matrix3d.get_identity();
    matNew._m11 = Math.cos(v);
    matNew._m21 = -Math.sin(v);
    matNew._m12 = Math.sin(v);
    matNew._m22 = Math.cos(v);
    matNew._m33 = 1;
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
}
wwtlib.Matrix3d._scaling = function wwtlib_Matrix3d$_scaling(x, y, z) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <param name="z" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var matNew = wwtlib.Matrix3d.get_identity();
    matNew._m11 = x;
    matNew._m22 = y;
    matNew._m33 = z;
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
}
wwtlib.Matrix3d._translationXYZ = function wwtlib_Matrix3d$_translationXYZ(x, y, z) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <param name="z" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var matNew = wwtlib.Matrix3d.get_identity();
    matNew.set_offsetX(x);
    matNew.set_offsetY(y);
    matNew.set_offsetZ(z);
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
}
wwtlib.Matrix3d.perspectiveFovLH = function wwtlib_Matrix3d$perspectiveFovLH(fieldOfViewY, aspectRatio, znearPlane, zfarPlane) {
    /// <param name="fieldOfViewY" type="Number">
    /// </param>
    /// <param name="aspectRatio" type="Number">
    /// </param>
    /// <param name="znearPlane" type="Number">
    /// </param>
    /// <param name="zfarPlane" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var h = 1 / Math.tan(fieldOfViewY / 2);
    var w = h / aspectRatio;
    return wwtlib.Matrix3d.create(w, 0, 0, 0, 0, h, 0, 0, 0, 0, zfarPlane / (zfarPlane - znearPlane), 1, 0, 0, -znearPlane * zfarPlane / (zfarPlane - znearPlane), 0);
}
wwtlib.Matrix3d.perspectiveOffCenterLH = function wwtlib_Matrix3d$perspectiveOffCenterLH(left, right, bottom, top, znearPlane, zfarPlane) {
    /// <param name="left" type="Number">
    /// </param>
    /// <param name="right" type="Number">
    /// </param>
    /// <param name="bottom" type="Number">
    /// </param>
    /// <param name="top" type="Number">
    /// </param>
    /// <param name="znearPlane" type="Number">
    /// </param>
    /// <param name="zfarPlane" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    return wwtlib.Matrix3d.create(2 * znearPlane / (right - left), 0, 0, 0, 0, 2 * znearPlane / (top - bottom), 0, 0, (left + right) / (left - right), (top + bottom) / (bottom - top), zfarPlane / (zfarPlane - znearPlane), 1, 0, 0, znearPlane * zfarPlane / (znearPlane - zfarPlane), 0);
}
wwtlib.Matrix3d.invertMatrix = function wwtlib_Matrix3d$invertMatrix(matrix3d) {
    /// <param name="matrix3d" type="wwtlib.Matrix3d">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var mat = matrix3d;
    mat.invert();
    return mat;
}
wwtlib.Matrix3d.translation = function wwtlib_Matrix3d$translation(vector3d) {
    /// <param name="vector3d" type="wwtlib.Vector3d">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    return wwtlib.Matrix3d._translationXYZ(vector3d.x, vector3d.y, vector3d.z);
}
wwtlib.Matrix3d.getMapMatrix = function wwtlib_Matrix3d$getMapMatrix(center, fieldWidth, fieldHeight, rotation) {
    /// <param name="center" type="wwtlib.Coordinates">
    /// </param>
    /// <param name="fieldWidth" type="Number">
    /// </param>
    /// <param name="fieldHeight" type="Number">
    /// </param>
    /// <param name="rotation" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix3d"></returns>
    var offsetX = 0;
    var offsetY = 0;
    offsetX = -((center.get_lng() + 180 - (fieldWidth / 2)) / 360);
    offsetY = -(1 - ((center.get_lat() + 90 + (fieldHeight / 2)) / 180));
    var mat = new wwtlib.Matrix2d();
    var scaleX = 0;
    var scaleY = 0;
    scaleX = 360 / fieldWidth;
    scaleY = 180 / fieldHeight;
    mat = wwtlib.Matrix2d.multiply(mat, wwtlib.Matrix2d.translation(offsetX, offsetY));
    mat = wwtlib.Matrix2d.multiply(mat, wwtlib.Matrix2d.scaling(scaleX, scaleY));
    if (!!rotation) {
        mat = wwtlib.Matrix2d.multiply(mat, wwtlib.Matrix2d.translation(-0.5, -0.5));
        mat = wwtlib.Matrix2d.multiply(mat, wwtlib.Matrix2d.rotation(rotation));
        mat = wwtlib.Matrix2d.multiply(mat, wwtlib.Matrix2d.translation(0.5, 0.5));
    }
    return wwtlib.Matrix3d.fromMatrix2d(mat);
}
wwtlib.Matrix3d.prototype = {
    _m11: 0,
    _m12: 0,
    _m13: 0,
    _m14: 0,
    _m21: 0,
    _m22: 0,
    _m23: 0,
    _m24: 0,
    _m31: 0,
    _m32: 0,
    _m33: 0,
    _m34: 0,
    _offsetX: 0,
    _offsetY: 0,
    _offsetZ: 0,
    _m44: 0,
    _isNotKnownToBeIdentity: false,
    
    clone: function wwtlib_Matrix3d$clone() {
        /// <returns type="wwtlib.Matrix3d"></returns>
        var tmp = new wwtlib.Matrix3d();
        tmp.set(this);
        return tmp;
    },
    
    setIdentity: function wwtlib_Matrix3d$setIdentity() {
        this.set(wwtlib.Matrix3d._s_identity);
    },
    
    set: function wwtlib_Matrix3d$set(mat) {
        /// <param name="mat" type="wwtlib.Matrix3d">
        /// </param>
        this._m11 = mat._m11;
        this._m12 = mat._m12;
        this._m13 = mat._m13;
        this._m14 = mat._m14;
        this._m21 = mat._m21;
        this._m22 = mat._m22;
        this._m23 = mat._m23;
        this._m24 = mat._m24;
        this._m31 = mat._m31;
        this._m32 = mat._m32;
        this._m33 = mat._m33;
        this._m34 = mat._m34;
        this._offsetX = mat._offsetX;
        this._offsetY = mat._offsetY;
        this._offsetZ = mat._offsetZ;
        this._m44 = mat._m44;
        this._isNotKnownToBeIdentity = true;
    },
    
    floatArray: function wwtlib_Matrix3d$floatArray() {
        /// <returns type="Array" elementType="Number"></returns>
        var array = new Array(16);
        array[0] = this._m11;
        array[1] = this._m12;
        array[2] = this._m13;
        array[3] = this._m14;
        array[4] = this._m21;
        array[5] = this._m22;
        array[6] = this._m23;
        array[7] = this._m24;
        array[8] = this._m31;
        array[9] = this._m32;
        array[10] = this._m33;
        array[11] = this._m34;
        array[12] = this._offsetX;
        array[13] = this._offsetY;
        array[14] = this._offsetZ;
        array[15] = this._m44;
        return array;
    },
    
    get_isIdentity: function wwtlib_Matrix3d$get_isIdentity() {
        /// <value type="Boolean"></value>
        if (this.get__isDistinguishedIdentity()) {
            return true;
        }
        if (((((this._m11 === 1) && (!this._m12)) && ((!this._m13) && (!this._m14))) && (((!this._m21) && (this._m22 === 1)) && ((!this._m23) && (!this._m24)))) && ((((!this._m31) && (!this._m32)) && ((this._m33 === 1) && (!this._m34))) && (((!this._offsetX) && (!this._offsetY)) && ((!this._offsetZ) && (this._m44 === 1))))) {
            this.set__isDistinguishedIdentity(true);
            return true;
        }
        return false;
    },
    
    prepend: function wwtlib_Matrix3d$prepend(matrix) {
        /// <param name="matrix" type="wwtlib.Matrix3d">
        /// </param>
        this.set(wwtlib.Matrix3d.multiplyMatrix(matrix, this));
    },
    
    append: function wwtlib_Matrix3d$append(matrix) {
        /// <param name="matrix" type="wwtlib.Matrix3d">
        /// </param>
        this._multiply(matrix);
    },
    
    scale: function wwtlib_Matrix3d$scale(scale) {
        /// <param name="scale" type="wwtlib.Vector3d">
        /// </param>
        if (this.get__isDistinguishedIdentity()) {
            this._setScaleMatrix(scale);
        }
        else {
            this._m11 *= scale.x;
            this._m12 *= scale.y;
            this._m13 *= scale.z;
            this._m21 *= scale.x;
            this._m22 *= scale.y;
            this._m23 *= scale.z;
            this._m31 *= scale.x;
            this._m32 *= scale.y;
            this._m33 *= scale.z;
            this._offsetX *= scale.x;
            this._offsetY *= scale.y;
            this._offsetZ *= scale.z;
        }
    },
    
    scalePrepend: function wwtlib_Matrix3d$scalePrepend(scale) {
        /// <param name="scale" type="wwtlib.Vector3d">
        /// </param>
        if (this.get__isDistinguishedIdentity()) {
            this._setScaleMatrix(scale);
        }
        else {
            this._m11 *= scale.x;
            this._m12 *= scale.x;
            this._m13 *= scale.x;
            this._m14 *= scale.x;
            this._m21 *= scale.y;
            this._m22 *= scale.y;
            this._m23 *= scale.y;
            this._m24 *= scale.y;
            this._m31 *= scale.z;
            this._m32 *= scale.z;
            this._m33 *= scale.z;
            this._m34 *= scale.z;
        }
    },
    
    scaleAt: function wwtlib_Matrix3d$scaleAt(scale, center) {
        /// <param name="scale" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="center" type="wwtlib.Vector3d">
        /// </param>
        if (this.get__isDistinguishedIdentity()) {
            this._setScaleMatrixCenter(scale, center);
        }
        else {
            var num = this._m14 * center.x;
            this._m11 = num + (scale.x * (this._m11 - num));
            num = this._m14 * center.y;
            this._m12 = num + (scale.y * (this._m12 - num));
            num = this._m14 * center.z;
            this._m13 = num + (scale.z * (this._m13 - num));
            num = this._m24 * center.x;
            this._m21 = num + (scale.x * (this._m21 - num));
            num = this._m24 * center.y;
            this._m22 = num + (scale.y * (this._m22 - num));
            num = this._m24 * center.z;
            this._m23 = num + (scale.z * (this._m23 - num));
            num = this._m34 * center.x;
            this._m31 = num + (scale.x * (this._m31 - num));
            num = this._m34 * center.y;
            this._m32 = num + (scale.y * (this._m32 - num));
            num = this._m34 * center.z;
            this._m33 = num + (scale.z * (this._m33 - num));
            num = this._m44 * center.x;
            this._offsetX = num + (scale.x * (this._offsetX - num));
            num = this._m44 * center.y;
            this._offsetY = num + (scale.y * (this._offsetY - num));
            num = this._m44 * center.z;
            this._offsetZ = num + (scale.z * (this._offsetZ - num));
        }
    },
    
    scaleAtPrepend: function wwtlib_Matrix3d$scaleAtPrepend(scale, center) {
        /// <param name="scale" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="center" type="wwtlib.Vector3d">
        /// </param>
        if (this.get__isDistinguishedIdentity()) {
            this._setScaleMatrixCenter(scale, center);
        }
        else {
            var num3 = center.x - (center.x * scale.x);
            var num2 = center.y - (center.y * scale.y);
            var num = center.z - (center.z * scale.z);
            this._offsetX += ((this._m11 * num3) + (this._m21 * num2)) + (this._m31 * num);
            this._offsetY += ((this._m12 * num3) + (this._m22 * num2)) + (this._m32 * num);
            this._offsetZ += ((this._m13 * num3) + (this._m23 * num2)) + (this._m33 * num);
            this._m44 += ((this._m14 * num3) + (this._m24 * num2)) + (this._m34 * num);
            this._m11 *= scale.x;
            this._m12 *= scale.x;
            this._m13 *= scale.x;
            this._m14 *= scale.x;
            this._m21 *= scale.y;
            this._m22 *= scale.y;
            this._m23 *= scale.y;
            this._m24 *= scale.y;
            this._m31 *= scale.z;
            this._m32 *= scale.z;
            this._m33 *= scale.z;
            this._m34 *= scale.z;
        }
    },
    
    translate: function wwtlib_Matrix3d$translate(offset) {
        /// <param name="offset" type="wwtlib.Vector3d">
        /// </param>
        if (this.get__isDistinguishedIdentity()) {
            this._setTranslationMatrix(offset);
        }
        else {
            this._m11 += this._m14 * offset.x;
            this._m12 += this._m14 * offset.y;
            this._m13 += this._m14 * offset.z;
            this._m21 += this._m24 * offset.x;
            this._m22 += this._m24 * offset.y;
            this._m23 += this._m24 * offset.z;
            this._m31 += this._m34 * offset.x;
            this._m32 += this._m34 * offset.y;
            this._m33 += this._m34 * offset.z;
            this._offsetX += this._m44 * offset.x;
            this._offsetY += this._m44 * offset.y;
            this._offsetZ += this._m44 * offset.z;
        }
    },
    
    translatePrepend: function wwtlib_Matrix3d$translatePrepend(offset) {
        /// <param name="offset" type="wwtlib.Vector3d">
        /// </param>
        if (this.get__isDistinguishedIdentity()) {
            this._setTranslationMatrix(offset);
        }
        else {
            this._offsetX += ((this._m11 * offset.x) + (this._m21 * offset.y)) + (this._m31 * offset.z);
            this._offsetY += ((this._m12 * offset.x) + (this._m22 * offset.y)) + (this._m32 * offset.z);
            this._offsetZ += ((this._m13 * offset.x) + (this._m23 * offset.y)) + (this._m33 * offset.z);
            this._m44 += ((this._m14 * offset.x) + (this._m24 * offset.y)) + (this._m34 * offset.z);
        }
    },
    
    transform: function wwtlib_Matrix3d$transform(point) {
        /// <param name="point" type="wwtlib.Vector3d">
        /// </param>
        /// <returns type="wwtlib.Vector3d"></returns>
        var temp = new wwtlib.Vector3d();
        if (!this.get__isDistinguishedIdentity()) {
            var x = point.x;
            var y = point.y;
            var z = point.z;
            temp.x = (((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX;
            temp.y = (((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY;
            temp.z = (((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ;
            if (!this.get_isAffine()) {
                var num4 = (((x * this._m14) + (y * this._m24)) + (z * this._m34)) + this._m44;
                temp.x /= num4;
                temp.y /= num4;
                temp.z /= num4;
            }
        }
        return temp;
    },
    
    _transformTo: function wwtlib_Matrix3d$_transformTo(input, output) {
        /// <param name="input" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="output" type="wwtlib.Vector3d">
        /// </param>
        output.x = (((input.x * this._m11) + (input.y * this._m21)) + (input.z * this._m31)) + this._offsetX;
        output.y = (((input.x * this._m12) + (input.y * this._m22)) + (input.z * this._m32)) + this._offsetY;
        output.z = (((input.x * this._m13) + (input.y * this._m23)) + (input.z * this._m33)) + this._offsetZ;
        var num4 = (((input.x * this._m14) + (input.y * this._m24)) + (input.z * this._m34)) + this._m44;
        output.x /= num4;
        output.y /= num4;
        output.z /= num4;
    },
    
    transformArray: function wwtlib_Matrix3d$transformArray(points) {
        /// <param name="points" type="Array" elementType="Vector3d">
        /// </param>
        if (points != null) {
            for (var i = 0; i < points.length; i++) {
                this._multiplyPoint(points[i]);
            }
        }
    },
    
    projectArrayToScreen: function wwtlib_Matrix3d$projectArrayToScreen(input, output) {
        /// <param name="input" type="Array" elementType="Vector3d">
        /// </param>
        /// <param name="output" type="Array" elementType="Vector3d">
        /// </param>
        if (input != null && output != null) {
            var affine = this.get_isAffine();
            for (var i = 0; i < input.length; i++) {
                var x = input[i].x;
                var y = input[i].y;
                var z = input[i].z;
                if (affine) {
                    output[i].x = ((((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX);
                    output[i].y = ((((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY);
                    output[i].z = (((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ;
                }
                else {
                    var num4 = (((x * this._m14) + (y * this._m24)) + (z * this._m34)) + this._m44;
                    output[i].x = (((((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX) / num4);
                    output[i].y = (((((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY) / num4);
                    output[i].z = ((((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ) / num4;
                }
            }
        }
    },
    
    projectToScreen: function wwtlib_Matrix3d$projectToScreen(input, width, height) {
        /// <param name="input" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="width" type="Number">
        /// </param>
        /// <param name="height" type="Number">
        /// </param>
        /// <returns type="wwtlib.Vector3d"></returns>
        var output = new wwtlib.Vector3d();
        var x = input.x;
        var y = input.y;
        var z = input.z;
        if (this.get_isAffine()) {
            output.x = (((((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX) + 0.5) * width;
            output.y = (-((((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY) + 0.5) * height;
            output.z = (((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ;
        }
        else {
            var num4 = (((x * this._m14) + (y * this._m24)) + (z * this._m34)) + this._m44;
            output.x = ((((((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX) / num4) + 0.5) * width;
            output.y = (-(((((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY) / num4) + 0.5) * height;
            output.z = ((((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ) / num4;
        }
        return output;
    },
    
    get_isAffine: function wwtlib_Matrix3d$get_isAffine() {
        /// <value type="Boolean"></value>
        if (this.get__isDistinguishedIdentity()) {
            return true;
        }
        if (((!this._m14) && (!this._m24)) && (!this._m34)) {
            return (this._m44 === 1);
        }
        return false;
    },
    
    get_determinant: function wwtlib_Matrix3d$get_determinant() {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            return 1;
        }
        if (this.get_isAffine()) {
            return this._getNormalizedAffineDeterminant();
        }
        var num6 = (this._m13 * this._m24) - (this._m23 * this._m14);
        var num5 = (this._m13 * this._m34) - (this._m33 * this._m14);
        var num4 = (this._m13 * this._m44) - (this._offsetZ * this._m14);
        var num3 = (this._m23 * this._m34) - (this._m33 * this._m24);
        var num2 = (this._m23 * this._m44) - (this._offsetZ * this._m24);
        var num = (this._m33 * this._m44) - (this._offsetZ * this._m34);
        var num10 = ((this._m22 * num5) - (this._m32 * num6)) - (this._m12 * num3);
        var num9 = ((this._m12 * num2) - (this._m22 * num4)) + (this._offsetY * num6);
        var num8 = ((this._m32 * num4) - (this._offsetY * num5)) - (this._m12 * num);
        var num7 = ((this._m22 * num) - (this._m32 * num2)) + (this._offsetY * num3);
        return ((((this._offsetX * num10) + (this._m31 * num9)) + (this._m21 * num8)) + (this._m11 * num7));
    },
    
    get_hasInverse: function wwtlib_Matrix3d$get_hasInverse() {
        /// <value type="Boolean"></value>
        return !wwtlib.DoubleUtilities.isZero(this.get_determinant());
    },
    
    invert: function wwtlib_Matrix3d$invert() {
        if (!this._invertCore()) {
            return;
        }
    },
    
    transpose: function wwtlib_Matrix3d$transpose() {
        var that = new wwtlib.Matrix3d();
        that.set(this);
        this._m12 = that._m21;
        this._m13 = that._m31;
        this._m14 = that._offsetX;
        this._m23 = that._m32;
        this._m24 = that._offsetY;
        this._m34 = that._offsetZ;
        this._m21 = that._m12;
        this._m31 = that._m13;
        this._offsetX = that._m14;
        this._m32 = that._m23;
        this._offsetY = that._m24;
        this._offsetZ = that._m34;
    },
    
    get_m11: function wwtlib_Matrix3d$get_m11() {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            return 1;
        }
        return this._m11;
    },
    set_m11: function wwtlib_Matrix3d$set_m11(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m11 = value;
        return value;
    },
    
    get_m12: function wwtlib_Matrix3d$get_m12() {
        /// <value type="Number"></value>
        return this._m12;
    },
    set_m12: function wwtlib_Matrix3d$set_m12(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m12 = value;
        return value;
    },
    
    get_m13: function wwtlib_Matrix3d$get_m13() {
        /// <value type="Number"></value>
        return this._m13;
    },
    set_m13: function wwtlib_Matrix3d$set_m13(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m13 = value;
        return value;
    },
    
    get_m14: function wwtlib_Matrix3d$get_m14() {
        /// <value type="Number"></value>
        return this._m14;
    },
    set_m14: function wwtlib_Matrix3d$set_m14(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m14 = value;
        return value;
    },
    
    get_m21: function wwtlib_Matrix3d$get_m21() {
        /// <value type="Number"></value>
        return this._m21;
    },
    set_m21: function wwtlib_Matrix3d$set_m21(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m21 = value;
        return value;
    },
    
    get_m22: function wwtlib_Matrix3d$get_m22() {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            return 1;
        }
        return this._m22;
    },
    set_m22: function wwtlib_Matrix3d$set_m22(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m22 = value;
        return value;
    },
    
    get_m23: function wwtlib_Matrix3d$get_m23() {
        /// <value type="Number"></value>
        return this._m23;
    },
    set_m23: function wwtlib_Matrix3d$set_m23(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m23 = value;
        return value;
    },
    
    get_m24: function wwtlib_Matrix3d$get_m24() {
        /// <value type="Number"></value>
        return this._m24;
    },
    set_m24: function wwtlib_Matrix3d$set_m24(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m24 = value;
        return value;
    },
    
    get_m31: function wwtlib_Matrix3d$get_m31() {
        /// <value type="Number"></value>
        return this._m31;
    },
    set_m31: function wwtlib_Matrix3d$set_m31(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m31 = value;
        return value;
    },
    
    get_m32: function wwtlib_Matrix3d$get_m32() {
        /// <value type="Number"></value>
        return this._m32;
    },
    set_m32: function wwtlib_Matrix3d$set_m32(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m32 = value;
        return value;
    },
    
    get_m33: function wwtlib_Matrix3d$get_m33() {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            return 1;
        }
        return this._m33;
    },
    set_m33: function wwtlib_Matrix3d$set_m33(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m33 = value;
        return value;
    },
    
    get_m34: function wwtlib_Matrix3d$get_m34() {
        /// <value type="Number"></value>
        return this._m34;
    },
    set_m34: function wwtlib_Matrix3d$set_m34(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m34 = value;
        return value;
    },
    
    get_m41: function wwtlib_Matrix3d$get_m41() {
        /// <value type="Number"></value>
        return this.get_offsetX();
    },
    set_m41: function wwtlib_Matrix3d$set_m41(value) {
        /// <value type="Number"></value>
        this.set_offsetX(value);
        return value;
    },
    
    get_m42: function wwtlib_Matrix3d$get_m42() {
        /// <value type="Number"></value>
        return this.get_offsetY();
    },
    set_m42: function wwtlib_Matrix3d$set_m42(value) {
        /// <value type="Number"></value>
        this.set_offsetY(value);
        return value;
    },
    
    get_m43: function wwtlib_Matrix3d$get_m43() {
        /// <value type="Number"></value>
        return this.get_offsetZ();
    },
    set_m43: function wwtlib_Matrix3d$set_m43(value) {
        /// <value type="Number"></value>
        this.set_offsetZ(value);
        return value;
    },
    
    get_offsetX: function wwtlib_Matrix3d$get_offsetX() {
        /// <value type="Number"></value>
        return this._offsetX;
    },
    set_offsetX: function wwtlib_Matrix3d$set_offsetX(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._offsetX = value;
        return value;
    },
    
    get_offsetY: function wwtlib_Matrix3d$get_offsetY() {
        /// <value type="Number"></value>
        return this._offsetY;
    },
    set_offsetY: function wwtlib_Matrix3d$set_offsetY(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._offsetY = value;
        return value;
    },
    
    get_offsetZ: function wwtlib_Matrix3d$get_offsetZ() {
        /// <value type="Number"></value>
        return this._offsetZ;
    },
    set_offsetZ: function wwtlib_Matrix3d$set_offsetZ(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._offsetZ = value;
        return value;
    },
    
    get_m44: function wwtlib_Matrix3d$get_m44() {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            return 1;
        }
        return this._m44;
    },
    set_m44: function wwtlib_Matrix3d$set_m44(value) {
        /// <value type="Number"></value>
        if (this.get__isDistinguishedIdentity()) {
            this.set(wwtlib.Matrix3d._s_identity);
            this.set__isDistinguishedIdentity(false);
        }
        this._m44 = value;
        return value;
    },
    
    _setScaleMatrix: function wwtlib_Matrix3d$_setScaleMatrix(scale) {
        /// <param name="scale" type="wwtlib.Vector3d">
        /// </param>
        this._m11 = scale.x;
        this._m22 = scale.y;
        this._m33 = scale.z;
        this._m44 = 1;
        this.set__isDistinguishedIdentity(false);
    },
    
    _setScaleMatrixCenter: function wwtlib_Matrix3d$_setScaleMatrixCenter(scale, center) {
        /// <param name="scale" type="wwtlib.Vector3d">
        /// </param>
        /// <param name="center" type="wwtlib.Vector3d">
        /// </param>
        this._m11 = scale.x;
        this._m22 = scale.y;
        this._m33 = scale.z;
        this._m44 = 1;
        this._offsetX = center.x - (center.x * scale.x);
        this._offsetY = center.y - (center.y * scale.y);
        this._offsetZ = center.z - (center.z * scale.z);
        this.set__isDistinguishedIdentity(false);
    },
    
    _setTranslationMatrix: function wwtlib_Matrix3d$_setTranslationMatrix(offset) {
        /// <param name="offset" type="wwtlib.Vector3d">
        /// </param>
        this._m11 = this._m22 = this._m33 = this._m44 = 1;
        this._offsetX = offset.x;
        this._offsetY = offset.y;
        this._offsetZ = offset.z;
        this.set__isDistinguishedIdentity(false);
    },
    
    _multiplyPoint: function wwtlib_Matrix3d$_multiplyPoint(point) {
        /// <param name="point" type="wwtlib.Vector3d">
        /// </param>
        if (!this.get__isDistinguishedIdentity()) {
            var x = point.x;
            var y = point.y;
            var z = point.z;
            point.x = (((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX;
            point.y = (((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY;
            point.z = (((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ;
            if (!this.get_isAffine()) {
                var num4 = (((x * this._m14) + (y * this._m24)) + (z * this._m34)) + this._m44;
                point.x /= num4;
                point.y /= num4;
                point.z /= num4;
            }
        }
    },
    
    multiplyVector: function wwtlib_Matrix3d$multiplyVector(vector) {
        /// <param name="vector" type="wwtlib.Vector3d">
        /// </param>
        if (!this.get__isDistinguishedIdentity()) {
            var x = vector.x;
            var y = vector.y;
            var z = vector.z;
            vector.x = ((x * this._m11) + (y * this._m21)) + (z * this._m31);
            vector.y = ((x * this._m12) + (y * this._m22)) + (z * this._m32);
            vector.z = ((x * this._m13) + (y * this._m23)) + (z * this._m33);
        }
    },
    
    _getNormalizedAffineDeterminant: function wwtlib_Matrix3d$_getNormalizedAffineDeterminant() {
        /// <returns type="Number"></returns>
        var num3 = (this._m12 * this._m23) - (this._m22 * this._m13);
        var num2 = (this._m32 * this._m13) - (this._m12 * this._m33);
        var num = (this._m22 * this._m33) - (this._m32 * this._m23);
        return (((this._m31 * num3) + (this._m21 * num2)) + (this._m11 * num));
    },
    
    _normalizedAffineInvert: function wwtlib_Matrix3d$_normalizedAffineInvert() {
        /// <returns type="Boolean"></returns>
        var num11 = (this._m12 * this._m23) - (this._m22 * this._m13);
        var num10 = (this._m32 * this._m13) - (this._m12 * this._m33);
        var num9 = (this._m22 * this._m33) - (this._m32 * this._m23);
        var num8 = ((this._m31 * num11) + (this._m21 * num10)) + (this._m11 * num9);
        if (wwtlib.DoubleUtilities.isZero(num8)) {
            return false;
        }
        var num20 = (this._m21 * this._m13) - (this._m11 * this._m23);
        var num19 = (this._m11 * this._m33) - (this._m31 * this._m13);
        var num18 = (this._m31 * this._m23) - (this._m21 * this._m33);
        var num7 = (this._m11 * this._m22) - (this._m21 * this._m12);
        var num6 = (this._m11 * this._m32) - (this._m31 * this._m12);
        var num5 = (this._m11 * this._offsetY) - (this._offsetX * this._m12);
        var num4 = (this._m21 * this._m32) - (this._m31 * this._m22);
        var num3 = (this._m21 * this._offsetY) - (this._offsetX * this._m22);
        var num2 = (this._m31 * this._offsetY) - (this._offsetX * this._m32);
        var num17 = ((this._m23 * num5) - (this._offsetZ * num7)) - (this._m13 * num3);
        var num16 = ((this._m13 * num2) - (this._m33 * num5)) + (this._offsetZ * num6);
        var num15 = ((this._m33 * num3) - (this._offsetZ * num4)) - (this._m23 * num2);
        var num14 = num7;
        var num13 = -num6;
        var num12 = num4;
        var num = 1 / num8;
        this._m11 = num9 * num;
        this._m12 = num10 * num;
        this._m13 = num11 * num;
        this._m21 = num18 * num;
        this._m22 = num19 * num;
        this._m23 = num20 * num;
        this._m31 = num12 * num;
        this._m32 = num13 * num;
        this._m33 = num14 * num;
        this._offsetX = num15 * num;
        this._offsetY = num16 * num;
        this._offsetZ = num17 * num;
        return true;
    },
    
    _invertCore: function wwtlib_Matrix3d$_invertCore() {
        /// <returns type="Boolean"></returns>
        if (!this.get__isDistinguishedIdentity()) {
            if (this.get_isAffine()) {
                return this._normalizedAffineInvert();
            }
            var num7 = (this._m13 * this._m24) - (this._m23 * this._m14);
            var num6 = (this._m13 * this._m34) - (this._m33 * this._m14);
            var num5 = (this._m13 * this._m44) - (this._offsetZ * this._m14);
            var num4 = (this._m23 * this._m34) - (this._m33 * this._m24);
            var num3 = (this._m23 * this._m44) - (this._offsetZ * this._m24);
            var num2 = (this._m33 * this._m44) - (this._offsetZ * this._m34);
            var num12 = ((this._m22 * num6) - (this._m32 * num7)) - (this._m12 * num4);
            var num11 = ((this._m12 * num3) - (this._m22 * num5)) + (this._offsetY * num7);
            var num10 = ((this._m32 * num5) - (this._offsetY * num6)) - (this._m12 * num2);
            var num9 = ((this._m22 * num2) - (this._m32 * num3)) + (this._offsetY * num4);
            var num8 = (((this._offsetX * num12) + (this._m31 * num11)) + (this._m21 * num10)) + (this._m11 * num9);
            if (wwtlib.DoubleUtilities.isZero(num8)) {
                return false;
            }
            var num24 = ((this._m11 * num4) - (this._m21 * num6)) + (this._m31 * num7);
            var num23 = ((this._m21 * num5) - (this._offsetX * num7)) - (this._m11 * num3);
            var num22 = ((this._m11 * num2) - (this._m31 * num5)) + (this._offsetX * num6);
            var num21 = ((this._m31 * num3) - (this._offsetX * num4)) - (this._m21 * num2);
            num7 = (this._m11 * this._m22) - (this._m21 * this._m12);
            num6 = (this._m11 * this._m32) - (this._m31 * this._m12);
            num5 = (this._m11 * this._offsetY) - (this._offsetX * this._m12);
            num4 = (this._m21 * this._m32) - (this._m31 * this._m22);
            num3 = (this._m21 * this._offsetY) - (this._offsetX * this._m22);
            num2 = (this._m31 * this._offsetY) - (this._offsetX * this._m32);
            var num20 = ((this._m13 * num4) - (this._m23 * num6)) + (this._m33 * num7);
            var num19 = ((this._m23 * num5) - (this._offsetZ * num7)) - (this._m13 * num3);
            var num18 = ((this._m13 * num2) - (this._m33 * num5)) + (this._offsetZ * num6);
            var num17 = ((this._m33 * num3) - (this._offsetZ * num4)) - (this._m23 * num2);
            var num16 = ((this._m24 * num6) - (this._m34 * num7)) - (this._m14 * num4);
            var num15 = ((this._m14 * num3) - (this._m24 * num5)) + (this._m44 * num7);
            var num14 = ((this._m34 * num5) - (this._m44 * num6)) - (this._m14 * num2);
            var num13 = ((this._m24 * num2) - (this._m34 * num3)) + (this._m44 * num4);
            var num = 1 / num8;
            this._m11 = num9 * num;
            this._m12 = num10 * num;
            this._m13 = num11 * num;
            this._m14 = num12 * num;
            this._m21 = num21 * num;
            this._m22 = num22 * num;
            this._m23 = num23 * num;
            this._m24 = num24 * num;
            this._m31 = num13 * num;
            this._m32 = num14 * num;
            this._m33 = num15 * num;
            this._m34 = num16 * num;
            this._offsetX = num17 * num;
            this._offsetY = num18 * num;
            this._offsetZ = num19 * num;
            this._m44 = num20 * num;
        }
        return true;
    },
    
    get__isDistinguishedIdentity: function wwtlib_Matrix3d$get__isDistinguishedIdentity() {
        /// <value type="Boolean"></value>
        return !this._isNotKnownToBeIdentity;
    },
    set__isDistinguishedIdentity: function wwtlib_Matrix3d$set__isDistinguishedIdentity(value) {
        /// <value type="Boolean"></value>
        this._isNotKnownToBeIdentity = !value;
        return value;
    },
    
    _multiply: function wwtlib_Matrix3d$_multiply(mat) {
        /// <param name="mat" type="wwtlib.Matrix3d">
        /// </param>
        this.set(wwtlib.Matrix3d.multiplyMatrix(this, mat));
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Matrix2d

wwtlib.Matrix2d = function wwtlib_Matrix2d() {
    /// <field name="m11" type="Number">
    /// </field>
    /// <field name="m12" type="Number">
    /// </field>
    /// <field name="m13" type="Number">
    /// </field>
    /// <field name="m21" type="Number">
    /// </field>
    /// <field name="m22" type="Number">
    /// </field>
    /// <field name="m23" type="Number">
    /// </field>
    /// <field name="m31" type="Number">
    /// </field>
    /// <field name="m32" type="Number">
    /// </field>
    /// <field name="m33" type="Number">
    /// </field>
}
wwtlib.Matrix2d.create = function wwtlib_Matrix2d$create(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
    /// <param name="m11" type="Number">
    /// </param>
    /// <param name="m12" type="Number">
    /// </param>
    /// <param name="m13" type="Number">
    /// </param>
    /// <param name="m21" type="Number">
    /// </param>
    /// <param name="m22" type="Number">
    /// </param>
    /// <param name="m23" type="Number">
    /// </param>
    /// <param name="m31" type="Number">
    /// </param>
    /// <param name="m32" type="Number">
    /// </param>
    /// <param name="m33" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix2d"></returns>
    var mat = new wwtlib.Matrix2d();
    mat.m11 = m11;
    mat.m12 = m12;
    mat.m13 = m13;
    mat.m21 = m21;
    mat.m22 = m22;
    mat.m23 = m23;
    mat.m31 = m31;
    mat.m32 = m32;
    mat.m33 = m33;
    return mat;
}
wwtlib.Matrix2d.rotation = function wwtlib_Matrix2d$rotation(angle) {
    /// <param name="angle" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix2d"></returns>
    var mat = new wwtlib.Matrix2d();
    mat.m11 = Math.cos(angle);
    mat.m21 = -Math.sin(angle);
    mat.m12 = Math.sin(angle);
    mat.m22 = Math.cos(angle);
    return mat;
}
wwtlib.Matrix2d.translation = function wwtlib_Matrix2d$translation(x, y) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix2d"></returns>
    var mat = new wwtlib.Matrix2d();
    mat.m31 = x;
    mat.m32 = y;
    return mat;
}
wwtlib.Matrix2d.scaling = function wwtlib_Matrix2d$scaling(x, y) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="y" type="Number">
    /// </param>
    /// <returns type="wwtlib.Matrix2d"></returns>
    var mat = new wwtlib.Matrix2d();
    mat.m11 = x;
    mat.m22 = y;
    return mat;
}
wwtlib.Matrix2d.multiply = function wwtlib_Matrix2d$multiply(matrix1, matrix2) {
    /// <param name="matrix1" type="wwtlib.Matrix2d">
    /// </param>
    /// <param name="matrix2" type="wwtlib.Matrix2d">
    /// </param>
    /// <returns type="wwtlib.Matrix2d"></returns>
    return wwtlib.Matrix2d.create((((matrix1.m11 * matrix2.m11) + (matrix1.m12 * matrix2.m21)) + (matrix1.m13 * matrix2.m31)), (((matrix1.m11 * matrix2.m12) + (matrix1.m12 * matrix2.m22)) + (matrix1.m13 * matrix2.m32)), (((matrix1.m11 * matrix2.m13) + (matrix1.m12 * matrix2.m23)) + (matrix1.m13 * matrix2.m33)), (((matrix1.m21 * matrix2.m11) + (matrix1.m22 * matrix2.m21)) + (matrix1.m23 * matrix2.m31)), (((matrix1.m21 * matrix2.m12) + (matrix1.m22 * matrix2.m22)) + (matrix1.m23 * matrix2.m32)), (((matrix1.m21 * matrix2.m13) + (matrix1.m22 * matrix2.m23)) + (matrix1.m23 * matrix2.m33)), (((matrix1.m31 * matrix2.m11) + (matrix1.m32 * matrix2.m21)) + (matrix1.m33 * matrix2.m31)), (((matrix1.m31 * matrix2.m12) + (matrix1.m32 * matrix2.m22)) + (matrix1.m33 * matrix2.m32)), (((matrix1.m31 * matrix2.m13) + (matrix1.m32 * matrix2.m23)) + (matrix1.m33 * matrix2.m33)));
}
wwtlib.Matrix2d.prototype = {
    m11: 1,
    m12: 0,
    m13: 0,
    m21: 0,
    m22: 1,
    m23: 0,
    m31: 0,
    m32: 0,
    m33: 1
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.DoubleUtilities

wwtlib.DoubleUtilities = function wwtlib_DoubleUtilities() {
    /// <field name="_epsilon" type="Number" static="true">
    /// </field>
}
wwtlib.DoubleUtilities.isZero = function wwtlib_DoubleUtilities$isZero(value) {
    /// <param name="value" type="Number">
    /// </param>
    /// <returns type="Boolean"></returns>
    return (Math.abs(value) < 2.22044604925031E-50);
}
wwtlib.DoubleUtilities.isOne = function wwtlib_DoubleUtilities$isOne(value) {
    /// <param name="value" type="Number">
    /// </param>
    /// <returns type="Boolean"></returns>
    return (Math.abs(value - 1) < 2.22044604925031E-50);
}
wwtlib.DoubleUtilities.radiansToDegrees = function wwtlib_DoubleUtilities$radiansToDegrees(radians) {
    /// <param name="radians" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return radians * 180 / Math.PI;
}
wwtlib.DoubleUtilities.degreesToRadians = function wwtlib_DoubleUtilities$degreesToRadians(degrees) {
    /// <param name="degrees" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return degrees * Math.PI / 180;
}
wwtlib.DoubleUtilities.clamp = function wwtlib_DoubleUtilities$clamp(x, min, max) {
    /// <param name="x" type="Number">
    /// </param>
    /// <param name="min" type="Number">
    /// </param>
    /// <param name="max" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return Math.max(min, Math.min(x, max));
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PlaneD

wwtlib.PlaneD = function wwtlib_PlaneD(valuePointA, valuePointB, valuePointC, valuePointD) {
    /// <param name="valuePointA" type="Number">
    /// </param>
    /// <param name="valuePointB" type="Number">
    /// </param>
    /// <param name="valuePointC" type="Number">
    /// </param>
    /// <param name="valuePointD" type="Number">
    /// </param>
    /// <field name="a" type="Number">
    /// </field>
    /// <field name="b" type="Number">
    /// </field>
    /// <field name="c" type="Number">
    /// </field>
    /// <field name="d" type="Number">
    /// </field>
    this.a = valuePointA;
    this.b = valuePointB;
    this.c = valuePointC;
    this.d = valuePointD;
}
wwtlib.PlaneD.prototype = {
    a: 0,
    b: 0,
    c: 0,
    d: 0,
    
    normalize: function wwtlib_PlaneD$normalize() {
        var length = Math.sqrt(this.a * this.a + this.b * this.b + this.c * this.c);
        this.a /= length;
        this.b /= length;
        this.c /= length;
        this.d /= length;
    },
    
    dot: function wwtlib_PlaneD$dot(v) {
        /// <param name="v" type="wwtlib.Vector4d">
        /// </param>
        /// <returns type="Number"></returns>
        return this.b * v.y + this.c * v.z + this.d * v.w + this.a * v.x;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Vector4d

wwtlib.Vector4d = function wwtlib_Vector4d(valueX, valueY, valueZ, valueW) {
    /// <param name="valueX" type="Number">
    /// </param>
    /// <param name="valueY" type="Number">
    /// </param>
    /// <param name="valueZ" type="Number">
    /// </param>
    /// <param name="valueW" type="Number">
    /// </param>
    /// <field name="x" type="Number">
    /// </field>
    /// <field name="y" type="Number">
    /// </field>
    /// <field name="z" type="Number">
    /// </field>
    /// <field name="w" type="Number">
    /// </field>
    this.x = valueX;
    this.y = valueY;
    this.z = valueZ;
    this.w = valueW;
}
wwtlib.Vector4d.prototype = {
    x: 0,
    y: 0,
    z: 0,
    w: 0
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.PositionNormalTexturedX2

wwtlib.PositionNormalTexturedX2 = function wwtlib_PositionNormalTexturedX2() {
    /// <field name="x" type="Number">
    /// </field>
    /// <field name="y" type="Number">
    /// </field>
    /// <field name="z" type="Number">
    /// </field>
    /// <field name="nx" type="Number">
    /// </field>
    /// <field name="ny" type="Number">
    /// </field>
    /// <field name="nz" type="Number">
    /// </field>
    /// <field name="tu" type="Number">
    /// </field>
    /// <field name="tv" type="Number">
    /// </field>
    /// <field name="tu1" type="Number">
    /// </field>
    /// <field name="tv1" type="Number">
    /// </field>
}
wwtlib.PositionNormalTexturedX2.create2UV = function wwtlib_PositionNormalTexturedX2$create2UV(pos, nor, u, v, u1, v1) {
    /// <param name="pos" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="nor" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <param name="u1" type="Number">
    /// </param>
    /// <param name="v1" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionNormalTexturedX2"></returns>
    var temp = new wwtlib.PositionNormalTexturedX2();
    temp.x = pos.x;
    temp.y = pos.y;
    temp.z = pos.z;
    temp.nx = nor.x;
    temp.ny = nor.y;
    temp.nz = nor.z;
    temp.tu = u;
    temp.tv = v;
    temp.tu1 = u1;
    temp.tv1 = v1;
    return temp;
}
wwtlib.PositionNormalTexturedX2.create = function wwtlib_PositionNormalTexturedX2$create(pos, nor, u, v) {
    /// <param name="pos" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="nor" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionNormalTexturedX2"></returns>
    var temp = new wwtlib.PositionNormalTexturedX2();
    temp.x = pos.x;
    temp.y = pos.y;
    temp.z = pos.z;
    temp.nx = nor.x;
    temp.ny = nor.y;
    temp.nz = nor.z;
    temp.tu = u;
    temp.tv = v;
    var result = wwtlib.Coordinates.cartesianToSpherical2(nor);
    temp.tu1 = ((result.get_lng() + 180) / 360);
    temp.tv1 = (1 - ((result.get_lat() + 90) / 180));
    return temp;
}
wwtlib.PositionNormalTexturedX2.createLong2UV = function wwtlib_PositionNormalTexturedX2$createLong2UV(xvalue, yvalue, zvalue, nxvalue, nyvalue, nzvalue, u, v, u1, v1) {
    /// <param name="xvalue" type="Number">
    /// </param>
    /// <param name="yvalue" type="Number">
    /// </param>
    /// <param name="zvalue" type="Number">
    /// </param>
    /// <param name="nxvalue" type="Number">
    /// </param>
    /// <param name="nyvalue" type="Number">
    /// </param>
    /// <param name="nzvalue" type="Number">
    /// </param>
    /// <param name="u" type="Number">
    /// </param>
    /// <param name="v" type="Number">
    /// </param>
    /// <param name="u1" type="Number">
    /// </param>
    /// <param name="v1" type="Number">
    /// </param>
    /// <returns type="wwtlib.PositionNormalTexturedX2"></returns>
    var temp = new wwtlib.PositionNormalTexturedX2();
    temp.x = xvalue;
    temp.y = yvalue;
    temp.z = zvalue;
    temp.nx = nxvalue;
    temp.ny = nyvalue;
    temp.nz = nzvalue;
    temp.tu = u;
    temp.tv = v;
    temp.tu1 = u1;
    temp.tv1 = v1;
    return temp;
}
wwtlib.PositionNormalTexturedX2.get_strideSize = function wwtlib_PositionNormalTexturedX2$get_strideSize() {
    /// <value type="Number" integer="true"></value>
    return 40;
}
wwtlib.PositionNormalTexturedX2.prototype = {
    x: 0,
    y: 0,
    z: 0,
    nx: 0,
    ny: 0,
    nz: 0,
    tu: 0,
    tv: 0,
    tu1: 0,
    tv1: 0,
    
    get_lat: function wwtlib_PositionNormalTexturedX2$get_lat() {
        /// <value type="Number"></value>
        return (1 - this.tv1) * 180 - 90;
    },
    set_lat: function wwtlib_PositionNormalTexturedX2$set_lat(value) {
        /// <value type="Number"></value>
        this.tv1 = (1 - ((value + 90) / 180));
        return value;
    },
    
    get_lng: function wwtlib_PositionNormalTexturedX2$get_lng() {
        /// <value type="Number"></value>
        return this.tu1 * 360 - 180;
    },
    set_lng: function wwtlib_PositionNormalTexturedX2$set_lng(value) {
        /// <value type="Number"></value>
        this.tu1 = ((value + 180) / 360);
        return value;
    },
    
    createLong: function wwtlib_PositionNormalTexturedX2$createLong(xvalue, yvalue, zvalue, nxvalue, nyvalue, nzvalue, u, v) {
        /// <param name="xvalue" type="Number">
        /// </param>
        /// <param name="yvalue" type="Number">
        /// </param>
        /// <param name="zvalue" type="Number">
        /// </param>
        /// <param name="nxvalue" type="Number">
        /// </param>
        /// <param name="nyvalue" type="Number">
        /// </param>
        /// <param name="nzvalue" type="Number">
        /// </param>
        /// <param name="u" type="Number">
        /// </param>
        /// <param name="v" type="Number">
        /// </param>
        /// <returns type="wwtlib.PositionNormalTexturedX2"></returns>
        var temp = new wwtlib.PositionNormalTexturedX2();
        temp.x = xvalue;
        temp.y = yvalue;
        temp.z = zvalue;
        temp.nx = nxvalue;
        temp.ny = nyvalue;
        temp.nz = nzvalue;
        temp.tu = u;
        temp.tv = v;
        var result = wwtlib.Coordinates.cartesianToSpherical2(wwtlib.Vector3d.create(this.nx, this.ny, this.nz));
        temp.tu1 = ((result.get_lng() + 180) / 360);
        temp.tv1 = (1 - ((result.get_lat() + 90) / 180));
        return temp;
    },
    
    get_normal: function wwtlib_PositionNormalTexturedX2$get_normal() {
        /// <value type="wwtlib.Vector3d"></value>
        return wwtlib.Vector3d.create(this.nx, this.ny, this.nz);
    },
    set_normal: function wwtlib_PositionNormalTexturedX2$set_normal(value) {
        /// <value type="wwtlib.Vector3d"></value>
        this.nx = value.x;
        this.ny = value.y;
        this.nz = value.z;
        return value;
    },
    
    get_position: function wwtlib_PositionNormalTexturedX2$get_position() {
        /// <value type="wwtlib.Vector3d"></value>
        return wwtlib.Vector3d.create(this.x, this.y, this.y);
    },
    set_position: function wwtlib_PositionNormalTexturedX2$set_position(value) {
        /// <value type="wwtlib.Vector3d"></value>
        this.x = value.x;
        this.y = value.y;
        this.z = value.z;
        return value;
    },
    
    toString: function wwtlib_PositionNormalTexturedX2$toString() {
        /// <returns type="String"></returns>
        return String.format('X={0}, Y={1}, Z={2}, Nx={3}, Ny={4}, Nz={5}, U={6}, V={7}, U1={8}, U2={9}', this.x, this.y, this.z, this.nx, this.ny, this.nz, this.tu, this.tv, this.tu1, this.tv1);
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.SphereHull

wwtlib.SphereHull = function wwtlib_SphereHull() {
    /// <field name="center" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="radius" type="Number">
    /// </field>
}
wwtlib.SphereHull._create = function wwtlib_SphereHull$_create(Center, Radius) {
    /// <param name="Center" type="wwtlib.Vector3d">
    /// </param>
    /// <param name="Radius" type="Number">
    /// </param>
    /// <returns type="wwtlib.SphereHull"></returns>
    var temp = new wwtlib.SphereHull();
    temp.center = Center;
    temp.radius = Radius;
    return temp;
}
wwtlib.SphereHull.prototype = {
    center: null,
    radius: 0
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ConvexHull

wwtlib.ConvexHull = function wwtlib_ConvexHull() {
}
wwtlib.ConvexHull.findEnclosingSphere = function wwtlib_ConvexHull$findEnclosingSphere(list) {
    /// <param name="list" type="Array" elementType="Vector3d">
    /// </param>
    /// <returns type="wwtlib.SphereHull"></returns>
    var Center = new wwtlib.Vector3d();
    var Radius = 0;
    var count = list.length;
    var i;
    var dx;
    var dy;
    var dz;
    var rad_sq;
    var xspan;
    var yspan;
    var zspan;
    var maxspan;
    var old_to_p;
    var old_to_p_sq;
    var old_to_new;
    var xmin = new wwtlib.Vector3d();
    var xmax = new wwtlib.Vector3d();
    var ymin = new wwtlib.Vector3d();
    var ymax = new wwtlib.Vector3d();
    var zmin = new wwtlib.Vector3d();
    var zmax = new wwtlib.Vector3d();
    var dia1 = new wwtlib.Vector3d();
    var dia2 = new wwtlib.Vector3d();
    xmin.x = ymin.y = zmin.z = 100000000;
    xmax.x = ymax.y = zmax.z = -1000000000;
    for (i = 0; i < count; i++) {
        var current = list[i];
        if (current.x < xmin.x) {
            xmin = current;
        }
        if (current.x > xmax.x) {
            xmax = current;
        }
        if (current.y < ymin.y) {
            ymin = current;
        }
        if (current.y > ymax.y) {
            ymax = current;
        }
        if (current.z < zmin.z) {
            zmin = current;
        }
        if (current.z > zmax.z) {
            zmax = current;
        }
    }
    dx = xmax.x - xmin.x;
    dy = xmax.y - xmin.y;
    dz = xmax.z - xmin.z;
    xspan = dx * dx + dy * dy + dz * dz;
    dx = ymax.x - ymin.x;
    dy = ymax.y - ymin.y;
    dz = ymax.z - ymin.z;
    yspan = dx * dx + dy * dy + dz * dz;
    dx = zmax.x - zmin.x;
    dy = zmax.y - zmin.y;
    dz = zmax.z - zmin.z;
    zspan = dx * dx + dy * dy + dz * dz;
    dia1 = xmin;
    dia2 = xmax;
    maxspan = xspan;
    if (yspan > maxspan) {
        maxspan = yspan;
        dia1 = ymin;
        dia2 = ymax;
    }
    if (zspan > maxspan) {
        dia1 = zmin;
        dia2 = zmax;
    }
    Center.x = (dia1.x + dia2.x) / 2;
    Center.y = (dia1.y + dia2.y) / 2;
    Center.z = (dia1.z + dia2.z) / 2;
    dx = dia2.x - Center.x;
    dy = dia2.y - Center.y;
    dz = dia2.z - Center.z;
    rad_sq = dx * dx + dy * dy + dz * dz;
    Radius = Math.sqrt(rad_sq);
    for (i = 0; i < count; i++) {
        var current = list[i];
        dx = current.x - Center.x;
        dy = current.y - Center.y;
        dz = current.z - Center.z;
        old_to_p_sq = dx * dx + dy * dy + dz * dz;
        if (old_to_p_sq > rad_sq) {
            old_to_p = Math.sqrt(old_to_p_sq);
            Radius = (Radius + old_to_p) / 2;
            rad_sq = Radius * Radius;
            old_to_new = old_to_p - Radius;
            Center.x = (Radius * Center.x + old_to_new * current.x) / old_to_p;
            Center.y = (Radius * Center.y + old_to_new * current.y) / old_to_p;
            Center.z = (Radius * Center.z + old_to_new * current.z) / old_to_p;
        }
    }
    return wwtlib.SphereHull._create(Center, Radius);
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.EquirectangularTile

wwtlib.EquirectangularTile = function wwtlib_EquirectangularTile() {
    /// <field name="_tileDegrees$1" type="Number">
    /// </field>
    /// <field name="_topDown$1" type="Boolean">
    /// </field>
    /// <field name="_subDivisionLevel$1" type="Number" integer="true">
    /// </field>
    wwtlib.EquirectangularTile.initializeBase(this);
}
wwtlib.EquirectangularTile.create = function wwtlib_EquirectangularTile$create(level, x, y, dataset, parent) {
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="x" type="Number" integer="true">
    /// </param>
    /// <param name="y" type="Number" integer="true">
    /// </param>
    /// <param name="dataset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.EquirectangularTile"></returns>
    var temp = new wwtlib.EquirectangularTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = x;
    temp.tileY = y;
    temp.dataset = dataset;
    temp._topDown$1 = !dataset.get_bottomsUp();
    temp.computeBoundingSphere();
    return temp;
}
wwtlib.EquirectangularTile.prototype = {
    _tileDegrees$1: 0,
    _topDown$1: true,
    
    computeBoundingSphere: function wwtlib_EquirectangularTile$computeBoundingSphere() {
        if (!this._topDown$1) {
            this.computeBoundingSphereBottomsUp();
            return;
        }
        this._tileDegrees$1 = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
        var latMin = (90 - ((this.tileY) * this._tileDegrees$1));
        var latMax = (90 - (((this.tileY + 1)) * this._tileDegrees$1));
        var lngMin = ((this.tileX * this._tileDegrees$1) - 180);
        var lngMax = ((((this.tileX + 1)) * this._tileDegrees$1) - 180);
        var latCenter = (latMin + latMax) / 2;
        var lngCenter = (lngMin + lngMax) / 2;
        this.sphereCenter = this.geoTo3d(latCenter, lngCenter, false);
        this.topLeft = this.geoTo3d(latMin, lngMin, false);
        this.bottomRight = this.geoTo3d(latMax, lngMax, false);
        this.topRight = this.geoTo3d(latMin, lngMax, false);
        this.bottomLeft = this.geoTo3d(latMax, lngMin, false);
        var distVect = this.geoTo3d(latMin, lngMin, false);
        distVect.subtract(this.sphereCenter);
        this.sphereRadius = distVect.length();
        this._tileDegrees$1 = lngMax - lngMin;
    },
    
    computeBoundingSphereBottomsUp: function wwtlib_EquirectangularTile$computeBoundingSphereBottomsUp() {
        var tileDegrees = this.dataset.get_baseTileDegrees() / (Math.pow(2, this.level));
        var latMin = (-90 + (((this.tileY + 1)) * tileDegrees));
        var latMax = (-90 + ((this.tileY) * tileDegrees));
        var lngMin = ((this.tileX * tileDegrees) - 180);
        var lngMax = ((((this.tileX + 1)) * tileDegrees) - 180);
        var latCenter = (latMin + latMax) / 2;
        var lngCenter = (lngMin + lngMax) / 2;
        this.sphereCenter = this.geoTo3d(latCenter, lngCenter, false);
        this.topLeft = this.geoTo3d(latMin, lngMin, false);
        this.bottomRight = this.geoTo3d(latMax, lngMax, false);
        this.topRight = this.geoTo3d(latMin, lngMax, false);
        this.bottomLeft = this.geoTo3d(latMax, lngMin, false);
        var distVect = this.topLeft;
        distVect.subtract(this.sphereCenter);
        this.sphereRadius = distVect.length();
        tileDegrees = lngMax - lngMin;
    },
    
    _subDivisionLevel$1: 1,
    
    createGeometry: function wwtlib_EquirectangularTile$createGeometry(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        wwtlib.EquirectangularTile.callBaseMethod(this, 'createGeometry', [ renderContext ]);
        if (renderContext.gl == null) {
            if (!this.dataset.get_dataSetType() || this.dataset.get_dataSetType() === 1) {
                this._subDivisionLevel$1 = Math.max(2, (4 - this.level) * 2);
            }
        }
        else {
            this._subDivisionLevel$1 = 32;
        }
        try {
            for (var i = 0; i < 4; i++) {
                this._renderTriangleLists[i] = [];
            }
            if (!this._topDown$1) {
                return this._createGeometryBottomsUp$1(renderContext);
            }
            var lat, lng;
            var index = 0;
            var tileDegrees = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
            var latMin = (90 - ((this.tileY) * tileDegrees));
            var latMax = (90 - (((this.tileY + 1)) * tileDegrees));
            var lngMin = ((this.tileX * tileDegrees) - 180);
            var lngMax = ((((this.tileX + 1)) * tileDegrees) - 180);
            var tileDegreesX = lngMax - lngMin;
            var tileDegreesY = latMax - latMin;
            this.topLeft = this.geoTo3d(latMin, lngMin, false);
            this.bottomRight = this.geoTo3d(latMax, lngMax, false);
            this.topRight = this.geoTo3d(latMin, lngMax, false);
            this.bottomLeft = this.geoTo3d(latMax, lngMin, false);
            var verts = new Array((this._subDivisionLevel$1 + 1) * (this._subDivisionLevel$1 + 1));
            var x, y;
            var textureStep = 1 / this._subDivisionLevel$1;
            for (y = 0; y <= this._subDivisionLevel$1; y++) {
                if (y !== this._subDivisionLevel$1) {
                    lat = latMin + (textureStep * tileDegreesY * y);
                }
                else {
                    lat = latMax;
                }
                for (x = 0; x <= this._subDivisionLevel$1; x++) {
                    if (x !== this._subDivisionLevel$1) {
                        lng = lngMin + (textureStep * tileDegreesX * x);
                    }
                    else {
                        lng = lngMax;
                    }
                    index = y * (this._subDivisionLevel$1 + 1) + x;
                    verts[index] = wwtlib.PositionTexture.createPos(this.geoTo3d(lat, lng, false), x * textureStep, y * textureStep);
                }
            }
            this.triangleCount = this._subDivisionLevel$1 * this._subDivisionLevel$1 * 2;
            var quarterDivisions = this._subDivisionLevel$1 / 2;
            var part = 0;
            if (renderContext.gl == null) {
                for (var y2 = 0; y2 < 2; y2++) {
                    for (var x2 = 0; x2 < 2; x2++) {
                        index = 0;
                        for (var y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
                            for (var x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                                var p1;
                                var p2;
                                var p3;
                                p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + x1)];
                                p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                                p3 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                                this._renderTriangleLists[part].add(wwtlib.RenderTriangle.create(p1, p3, p2, this.texture, this.level));
                                p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                                p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                                p3 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                                this._renderTriangleLists[part].add(wwtlib.RenderTriangle.create(p1, p3, p2, this.texture, this.level));
                            }
                        }
                        part++;
                    }
                }
            }
            else {
                this._vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
                wwtlib.Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
                var f32array = new Float32Array(verts.length * 5);
                var buffer = f32array;
                index = 0;
                var $enum1 = ss.IEnumerator.getEnumerator(verts);
                while ($enum1.moveNext()) {
                    var pt = $enum1.current;
                    index = this.addVertex(buffer, index, pt);
                }
                wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
                for (var y2 = 0; y2 < 2; y2++) {
                    for (var x2 = 0; x2 < 2; x2++) {
                        var ui16array = new Uint16Array(this.triangleCount * 3);
                        var indexArray = ui16array;
                        index = 0;
                        for (var y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
                            for (var x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + x1);
                                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                            }
                        }
                        this._indexBuffers[part] = wwtlib.Tile.prepDevice.createBuffer();
                        wwtlib.Tile.prepDevice.bindBuffer(34963, this._indexBuffers[part]);
                        wwtlib.Tile.prepDevice.bufferData(34963, ui16array, 35044);
                        part++;
                    }
                }
            }
        }
        catch ($e2) {
        }
        return true;
    },
    
    _createGeometryBottomsUp$1: function wwtlib_EquirectangularTile$_createGeometryBottomsUp$1(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        var lat, lng;
        var index = 0;
        var tileDegrees = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
        var latMin = (-90 + (((this.tileY + 1)) * tileDegrees));
        var latMax = (-90 + ((this.tileY) * tileDegrees));
        var lngMin = ((this.tileX * tileDegrees) - 180);
        var lngMax = ((((this.tileX + 1)) * tileDegrees) - 180);
        var tileDegreesX = lngMax - lngMin;
        var tileDegreesY = latMax - latMin;
        var verts = new Array((this._subDivisionLevel$1 + 1) * (this._subDivisionLevel$1 + 1));
        var x, y;
        var textureStep = 1 / this._subDivisionLevel$1;
        for (y = 0; y <= this._subDivisionLevel$1; y++) {
            if (y !== this._subDivisionLevel$1) {
                lat = latMin + (textureStep * tileDegreesY * y);
            }
            else {
                lat = latMax;
            }
            for (x = 0; x <= this._subDivisionLevel$1; x++) {
                if (x !== this._subDivisionLevel$1) {
                    lng = lngMin + (textureStep * tileDegreesX * x);
                }
                else {
                    lng = lngMax;
                }
                index = y * (this._subDivisionLevel$1 + 1) + x;
                verts[index] = wwtlib.PositionTexture.createPos(this.geoTo3d(lat, lng, false), x * textureStep, y * textureStep);
            }
        }
        this.triangleCount = this._subDivisionLevel$1 * this._subDivisionLevel$1 * 2;
        var quarterDivisions = this._subDivisionLevel$1 / 2;
        var part = 0;
        if (renderContext.gl == null) {
            for (var y2 = 0; y2 < 2; y2++) {
                for (var x2 = 0; x2 < 2; x2++) {
                    index = 0;
                    for (var y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
                        for (var x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                            var p1;
                            var p2;
                            var p3;
                            p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + x1)];
                            p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                            p3 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                            this._renderTriangleLists[part].add(wwtlib.RenderTriangle.create(p1, p3, p2, this.texture, this.level));
                            p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                            p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                            p3 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                            this._renderTriangleLists[part].add(wwtlib.RenderTriangle.create(p1, p3, p2, this.texture, this.level));
                        }
                    }
                    part++;
                }
            }
        }
        else {
            this._vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
            wwtlib.Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
            var f32array = new Float32Array(verts.length * 5);
            var buffer = f32array;
            index = 0;
            var $enum1 = ss.IEnumerator.getEnumerator(verts);
            while ($enum1.moveNext()) {
                var pt = $enum1.current;
                index = this.addVertex(buffer, index, pt);
            }
            wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
            for (var y2 = 0; y2 < 2; y2++) {
                for (var x2 = 0; x2 < 2; x2++) {
                    var ui16array = new Uint16Array(this.triangleCount * 3);
                    var indexArray = ui16array;
                    index = 0;
                    for (var y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
                        for (var x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                            indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + x1);
                            indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                            indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                            indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                            indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                            indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                        }
                    }
                    this._indexBuffers[part] = wwtlib.Tile.prepDevice.createBuffer();
                    wwtlib.Tile.prepDevice.bindBuffer(34963, this._indexBuffers[part]);
                    wwtlib.Tile.prepDevice.bufferData(34963, ui16array, 35044);
                    part++;
                }
            }
        }
        return true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Folder

wwtlib.Folder = function wwtlib_Folder() {
    /// <field name="parent" type="wwtlib.Folder">
    /// </field>
    /// <field name="isProxy" type="Boolean">
    /// </field>
    /// <field name="_versionDependent" type="Boolean">
    /// </field>
    /// <field name="_readOnly" type="Boolean">
    /// </field>
    /// <field name="_dirty" type="Boolean">
    /// </field>
    /// <field name="_webFile" type="wwtlib.WebFile">
    /// </field>
    /// <field name="_onComplete" type="Function">
    /// </field>
    /// <field name="_thumbnail" type="Object" domElement="true">
    /// </field>
    /// <field name="_bounds" type="wwtlib.Rectangle">
    /// </field>
    /// <field name="_proxyFolder" type="wwtlib.Folder">
    /// </field>
    /// <field name="_lastUpdate" type="Date">
    /// </field>
    /// <field name="_childReadyCallback" type="Function">
    /// </field>
    /// <field name="_childList" type="Array">
    /// </field>
    /// <field name="_itemsField" type="Array">
    /// </field>
    /// <field name="_imagesets" type="Array">
    /// </field>
    /// <field name="_tours" type="Array">
    /// </field>
    /// <field name="_folders" type="Array">
    /// </field>
    /// <field name="_places" type="Array">
    /// </field>
    /// <field name="_nameField" type="String">
    /// </field>
    /// <field name="_groupField" type="wwtlib.FolderGroup">
    /// </field>
    /// <field name="_urlField" type="String">
    /// </field>
    /// <field name="_thumbnailUrlField" type="String">
    /// </field>
    /// <field name="_refreshTypeField" type="wwtlib.FolderRefreshType">
    /// </field>
    /// <field name="_refreshTypeFieldSpecified" type="Boolean">
    /// </field>
    /// <field name="_refreshIntervalField" type="String">
    /// </field>
    /// <field name="_browseableField" type="Boolean">
    /// </field>
    /// <field name="_browseableFieldSpecified" type="Boolean">
    /// </field>
    /// <field name="_searchableField" type="Boolean">
    /// </field>
    /// <field name="_typeField" type="wwtlib.FolderType">
    /// </field>
    /// <field name="_subTypeField" type="String">
    /// </field>
    /// <field name="_communityIdField" type="Number" integer="true">
    /// </field>
    /// <field name="_componentIdField" type="Number" integer="true">
    /// </field>
    /// <field name="_permissionField" type="Number" integer="true">
    /// </field>
    this._lastUpdate = new Date();
    this._childList = [];
    this._itemsField = [];
    this._imagesets = [];
    this._tours = [];
    this._folders = [];
    this._places = [];
}
wwtlib.Folder.prototype = {
    
    toString: function wwtlib_Folder$toString() {
        /// <returns type="String"></returns>
        return this._nameField;
    },
    
    parent: null,
    isProxy: false,
    _versionDependent: false,
    
    get_versionDependent: function wwtlib_Folder$get_versionDependent() {
        /// <value type="Boolean"></value>
        return this._versionDependent;
    },
    set_versionDependent: function wwtlib_Folder$set_versionDependent(value) {
        /// <value type="Boolean"></value>
        this._versionDependent = value;
        var $enum1 = ss.IEnumerator.getEnumerator(this._folders);
        while ($enum1.moveNext()) {
            var folder = $enum1.current;
            folder.set_versionDependent(this._versionDependent);
        }
        return value;
    },
    
    _readOnly: true,
    
    get_readOnly: function wwtlib_Folder$get_readOnly() {
        /// <value type="Boolean"></value>
        return this._readOnly;
    },
    set_readOnly: function wwtlib_Folder$set_readOnly(value) {
        /// <value type="Boolean"></value>
        this._readOnly = value;
        return value;
    },
    
    _dirty: false,
    
    get_dirty: function wwtlib_Folder$get_dirty() {
        /// <value type="Boolean"></value>
        return this._dirty;
    },
    set_dirty: function wwtlib_Folder$set_dirty(value) {
        /// <value type="Boolean"></value>
        this._dirty = value;
        return value;
    },
    
    _webFile: null,
    _onComplete: null,
    
    loadFromUrl: function wwtlib_Folder$loadFromUrl(url, complete) {
        /// <param name="url" type="String">
        /// </param>
        /// <param name="complete" type="Function">
        /// </param>
        this._onComplete = complete;
        this._webFile = new wwtlib.WebFile(wwtlib._util.getProxiedUrl(url));
        this._webFile.onStateChange = ss.Delegate.create(this, this._loadData);
        this._webFile.send();
    },
    
    _loadData: function wwtlib_Folder$_loadData() {
        if (this._webFile.get_state() === 2) {
            alert(this._webFile.get_message());
        }
        else if (this._webFile.get_state() === 1) {
            var node = wwtlib._util.selectSingleNode(this._webFile.getXml(), 'Folder');
            if (node == null) {
                var doc = this._webFile.getXml();
                if (doc != null) {
                    node = wwtlib._util.selectSingleNode(doc, 'Folder');
                }
            }
            if (node != null) {
                this._clearChildren();
                this._parseXML(node);
            }
            if (this._onComplete != null) {
                this._onComplete();
            }
        }
    },
    
    _clearChildren: function wwtlib_Folder$_clearChildren() {
        this._folders.clear();
        this._tours.clear();
        this._places.clear();
        this.get_imagesets().clear();
    },
    
    _parseXML: function wwtlib_Folder$_parseXML(node) {
        /// <param name="node" type="XmlNode">
        /// </param>
        if (node.attributes.getNamedItem('Name') != null) {
            this._nameField = node.attributes.getNamedItem('Name').nodeValue;
        }
        else {
            this._nameField = '';
        }
        if (node.attributes.getNamedItem('Url') != null) {
            this._urlField = node.attributes.getNamedItem('Url').nodeValue;
        }
        if (node.attributes.getNamedItem('Thumbnail') != null) {
            this._thumbnailUrlField = node.attributes.getNamedItem('Thumbnail').nodeValue;
        }
        var $enum1 = ss.IEnumerator.getEnumerator(node.childNodes);
        while ($enum1.moveNext()) {
            var child = $enum1.current;
            switch (child.nodeName) {
                case 'Folder':
                    var temp = new wwtlib.Folder();
                    temp.parent = this;
                    temp._parseXML(child);
                    this._folders.add(temp);
                    break;
                case 'Place':
                    this._places.add(wwtlib.Place._fromXml(child));
                    break;
                case 'ImageSet':
                    this.get_imagesets().add(wwtlib.Imageset.fromXMLNode(child));
                    break;
                case 'Tour':
                    this.get_tours().add(wwtlib.Tour._fromXml(child));
                    break;
            }
        }
    },
    
    addChildFolder: function wwtlib_Folder$addChildFolder(child) {
        /// <param name="child" type="wwtlib.Folder">
        /// </param>
        this._folders.add(child);
        this._dirty = true;
    },
    
    removeChildFolder: function wwtlib_Folder$removeChildFolder(child) {
        /// <param name="child" type="wwtlib.Folder">
        /// </param>
        this._folders.remove(child);
        this._dirty = true;
    },
    
    addChildPlace: function wwtlib_Folder$addChildPlace(child) {
        /// <param name="child" type="wwtlib.Place">
        /// </param>
        this._places.add(child);
        this._dirty = true;
    },
    
    removeChildPlace: function wwtlib_Folder$removeChildPlace(child) {
        /// <param name="child" type="wwtlib.Place">
        /// </param>
        this._places.remove(child);
        this._dirty = true;
    },
    
    _thumbnail: null,
    
    get_thumbnail: function wwtlib_Folder$get_thumbnail() {
        /// <value type="Object" domElement="true"></value>
        return this._thumbnail;
    },
    set_thumbnail: function wwtlib_Folder$set_thumbnail(value) {
        /// <value type="Object" domElement="true"></value>
        this._thumbnail = value;
        return value;
    },
    
    _bounds: null,
    
    get_bounds: function wwtlib_Folder$get_bounds() {
        /// <value type="wwtlib.Rectangle"></value>
        return this._bounds;
    },
    set_bounds: function wwtlib_Folder$set_bounds(value) {
        /// <value type="wwtlib.Rectangle"></value>
        this._bounds = value;
        return value;
    },
    
    get_isImage: function wwtlib_Folder$get_isImage() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isTour: function wwtlib_Folder$get_isTour() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isFolder: function wwtlib_Folder$get_isFolder() {
        /// <value type="Boolean"></value>
        return true;
    },
    
    get_isCloudCommunityItem: function wwtlib_Folder$get_isCloudCommunityItem() {
        /// <value type="Boolean"></value>
        return !!this._communityIdField || this._permissionField > 0;
    },
    
    _proxyFolder: null,
    
    refresh: function wwtlib_Folder$refresh() {
        if (this._proxyFolder == null) {
            this._proxyFolder = new wwtlib.Folder();
            this._proxyFolder.isProxy = true;
            this._proxyFolder.parent = this.parent;
        }
        this._proxyFolder.loadFromUrl(this._urlField, this._childReadyCallback);
        this._childReadyCallback = null;
    },
    
    _childReadyCallback: null,
    
    childLoadCallback: function wwtlib_Folder$childLoadCallback(callback) {
        /// <param name="callback" type="Function">
        /// </param>
        this._childReadyCallback = callback;
        var temp = this.get_children();
        if (this._proxyFolder == null) {
            callback();
        }
    },
    
    get_children: function wwtlib_Folder$get_children() {
        /// <value type="Array"></value>
        if (String.isNullOrEmpty(this._urlField)) {
            this._childList.clear();
            if (this.parent != null) {
                var folderUp = new wwtlib._folderUp();
                folderUp.parent = this.parent;
                this._childList.add(folderUp);
            }
            if (this.get_folders() != null) {
                var $enum1 = ss.IEnumerator.getEnumerator(this.get_folders());
                while ($enum1.moveNext()) {
                    var folder = $enum1.current;
                    this._childList.add(folder);
                }
            }
            if (this.get_imagesets() != null) {
                var $enum2 = ss.IEnumerator.getEnumerator(this.get_imagesets());
                while ($enum2.moveNext()) {
                    var imset = $enum2.current;
                    this._childList.add(imset);
                }
            }
            if (this.get_places() != null) {
                var $enum3 = ss.IEnumerator.getEnumerator(this.get_places());
                while ($enum3.moveNext()) {
                    var place = $enum3.current;
                    this._childList.add(place);
                }
            }
            if (this.get_tours() != null) {
                var $enum4 = ss.IEnumerator.getEnumerator(this.get_tours());
                while ($enum4.moveNext()) {
                    var tour = $enum4.current;
                    this._childList.add(tour);
                }
            }
            return this._childList;
        }
        else {
            var ts = (this._lastUpdate - Date.get_now()) / 1000;
            if (true || this.get_refreshType() === 1 || this._proxyFolder == null || (!this.get_refreshType() && (parseInt(this._refreshIntervalField) < ts))) {
                this.refresh();
            }
            if (this._proxyFolder != null) {
                return this._proxyFolder.get_children();
            }
            else {
                return null;
            }
        }
    },
    
    _nameField: null,
    _groupField: 0,
    _urlField: null,
    _thumbnailUrlField: null,
    _refreshTypeField: 0,
    _refreshTypeFieldSpecified: false,
    _refreshIntervalField: null,
    _browseableField: true,
    _browseableFieldSpecified: false,
    _searchableField: false,
    _typeField: 0,
    _subTypeField: null,
    _communityIdField: 0,
    
    get_msrCommunityId: function wwtlib_Folder$get_msrCommunityId() {
        /// <value type="Number" integer="true"></value>
        return this._communityIdField;
    },
    set_msrCommunityId: function wwtlib_Folder$set_msrCommunityId(value) {
        /// <value type="Number" integer="true"></value>
        this._communityIdField = value;
        return value;
    },
    
    _componentIdField: 0,
    
    get_msrComponentId: function wwtlib_Folder$get_msrComponentId() {
        /// <value type="Number" integer="true"></value>
        return this._componentIdField;
    },
    set_msrComponentId: function wwtlib_Folder$set_msrComponentId(value) {
        /// <value type="Number" integer="true"></value>
        this._componentIdField = value;
        return value;
    },
    
    _permissionField: 0,
    
    get_permission: function wwtlib_Folder$get_permission() {
        /// <value type="Number" integer="true"></value>
        return this._permissionField;
    },
    set_permission: function wwtlib_Folder$set_permission(value) {
        /// <value type="Number" integer="true"></value>
        this._permissionField = value;
        return value;
    },
    
    get_folders: function wwtlib_Folder$get_folders() {
        /// <value type="Array"></value>
        return this._folders;
    },
    set_folders: function wwtlib_Folder$set_folders(value) {
        /// <value type="Array"></value>
        this._folders = value;
        return value;
    },
    
    get_places: function wwtlib_Folder$get_places() {
        /// <value type="Array"></value>
        return this._places;
    },
    set_places: function wwtlib_Folder$set_places(value) {
        /// <value type="Array"></value>
        this._places = value;
        return value;
    },
    
    get_imagesets: function wwtlib_Folder$get_imagesets() {
        /// <value type="Array"></value>
        return this._imagesets;
    },
    set_imagesets: function wwtlib_Folder$set_imagesets(value) {
        /// <value type="Array"></value>
        this._imagesets = value;
        return value;
    },
    
    get_tours: function wwtlib_Folder$get_tours() {
        /// <value type="Array"></value>
        return this._tours;
    },
    set_tours: function wwtlib_Folder$set_tours(value) {
        /// <value type="Array"></value>
        this._tours = value;
        return value;
    },
    
    get_name: function wwtlib_Folder$get_name() {
        /// <value type="String"></value>
        if (this._nameField == null) {
            return '';
        }
        else {
            return this._nameField;
        }
    },
    set_name: function wwtlib_Folder$set_name(value) {
        /// <value type="String"></value>
        this._nameField = value;
        return value;
    },
    
    get_group: function wwtlib_Folder$get_group() {
        /// <value type="wwtlib.FolderGroup"></value>
        return this._groupField;
    },
    set_group: function wwtlib_Folder$set_group(value) {
        /// <value type="wwtlib.FolderGroup"></value>
        this._groupField = value;
        return value;
    },
    
    get_url: function wwtlib_Folder$get_url() {
        /// <value type="String"></value>
        return this._urlField;
    },
    set_url: function wwtlib_Folder$set_url(value) {
        /// <value type="String"></value>
        this._urlField = value;
        return value;
    },
    
    get_thumbnailUrl: function wwtlib_Folder$get_thumbnailUrl() {
        /// <value type="String"></value>
        if (String.isNullOrEmpty(this._thumbnailUrlField)) {
            return 'http://cdn.worldwidetelescope.org/wwtweb/thumbnail.aspx?name=folder';
        }
        return this._thumbnailUrlField;
    },
    set_thumbnailUrl: function wwtlib_Folder$set_thumbnailUrl(value) {
        /// <value type="String"></value>
        this._thumbnailUrlField = value;
        return value;
    },
    
    get_refreshType: function wwtlib_Folder$get_refreshType() {
        /// <value type="wwtlib.FolderRefreshType"></value>
        return this._refreshTypeField;
    },
    set_refreshType: function wwtlib_Folder$set_refreshType(value) {
        /// <value type="wwtlib.FolderRefreshType"></value>
        this._refreshTypeField = value;
        this.set_refreshTypeSpecified(true);
        return value;
    },
    
    get_refreshTypeSpecified: function wwtlib_Folder$get_refreshTypeSpecified() {
        /// <value type="Boolean"></value>
        return this._refreshTypeFieldSpecified;
    },
    set_refreshTypeSpecified: function wwtlib_Folder$set_refreshTypeSpecified(value) {
        /// <value type="Boolean"></value>
        this._refreshTypeFieldSpecified = value;
        return value;
    },
    
    get_refreshInterval: function wwtlib_Folder$get_refreshInterval() {
        /// <value type="String"></value>
        return this._refreshIntervalField;
    },
    set_refreshInterval: function wwtlib_Folder$set_refreshInterval(value) {
        /// <value type="String"></value>
        this._refreshIntervalField = value;
        return value;
    },
    
    get_browseable: function wwtlib_Folder$get_browseable() {
        /// <value type="Boolean"></value>
        return this._browseableField;
    },
    set_browseable: function wwtlib_Folder$set_browseable(value) {
        /// <value type="Boolean"></value>
        this._browseableField = value;
        this._browseableFieldSpecified = true;
        return value;
    },
    
    get_browseableSpecified: function wwtlib_Folder$get_browseableSpecified() {
        /// <value type="Boolean"></value>
        return this._browseableFieldSpecified;
    },
    set_browseableSpecified: function wwtlib_Folder$set_browseableSpecified(value) {
        /// <value type="Boolean"></value>
        this._browseableFieldSpecified = value;
        return value;
    },
    
    get_searchable: function wwtlib_Folder$get_searchable() {
        /// <value type="Boolean"></value>
        return this._searchableField;
    },
    set_searchable: function wwtlib_Folder$set_searchable(value) {
        /// <value type="Boolean"></value>
        this._searchableField = value;
        return value;
    },
    
    get_type: function wwtlib_Folder$get_type() {
        /// <value type="wwtlib.FolderType"></value>
        return this._typeField;
    },
    set_type: function wwtlib_Folder$set_type(value) {
        /// <value type="wwtlib.FolderType"></value>
        this._typeField = value;
        return value;
    },
    
    get_subType: function wwtlib_Folder$get_subType() {
        /// <value type="String"></value>
        return this._subTypeField;
    },
    set_subType: function wwtlib_Folder$set_subType(value) {
        /// <value type="String"></value>
        this._subTypeField = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.FolderBrowser

wwtlib.FolderBrowser = function wwtlib_FolderBrowser() {
    /// <field name="canvas" type="Object" domElement="true">
    /// </field>
    /// <field name="_items" type="Array">
    /// </field>
    /// <field name="top" type="Number" integer="true">
    /// </field>
    /// <field name="left" type="Number" integer="true">
    /// </field>
    /// <field name="_indexTouchDown" type="Number" integer="true">
    /// </field>
    /// <field name="_mouseDown" type="Boolean">
    /// </field>
    /// <field name="_lastX" type="Number">
    /// </field>
    /// <field name="_lastY" type="Number">
    /// </field>
    /// <field name="_ignoreClick" type="Boolean">
    /// </field>
    /// <field name="_downloading" type="Boolean" static="true">
    /// </field>
    /// <field name="_imagesLoaded" type="Boolean" static="true">
    /// </field>
    /// <field name="_imageLoadCount" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_bmpBackground" type="Object" domElement="true" static="true">
    /// </field>
    /// <field name="_bmpBackgroundHover" type="Object" domElement="true" static="true">
    /// </field>
    /// <field name="_bmpBackgroundWide" type="Object" domElement="true" static="true">
    /// </field>
    /// <field name="_bmpBackgroundWideHover" type="Object" domElement="true" static="true">
    /// </field>
    /// <field name="_bmpDropInsertMarker" type="Object" domElement="true" static="true">
    /// </field>
    /// <field name="_thumbnailSize" type="wwtlib.ThumbnailSize">
    /// </field>
    /// <field name="_horzSpacing" type="Number" integer="true">
    /// </field>
    /// <field name="_vertSpacing" type="Number" integer="true">
    /// </field>
    /// <field name="_thumbHeight" type="Number" integer="true">
    /// </field>
    /// <field name="_thumbWidth" type="Number" integer="true">
    /// </field>
    /// <field name="_horzMultiple" type="Number">
    /// </field>
    /// <field name="_rowCount" type="Number" integer="true">
    /// </field>
    /// <field name="_colCount" type="Number" integer="true">
    /// </field>
    /// <field name="_dragging" type="Boolean">
    /// </field>
    /// <field name="_startIndex" type="Number" integer="true">
    /// </field>
    /// <field name="_startOffset" type="Number" integer="true">
    /// </field>
    /// <field name="_selectedItem" type="Number" integer="true">
    /// </field>
    /// <field name="_hoverItem" type="Number" integer="true">
    /// </field>
    /// <field name="showAddButton" type="Boolean">
    /// </field>
    /// <field name="width" type="Number" integer="true">
    /// </field>
    /// <field name="height" type="Number" integer="true">
    /// </field>
    /// <field name="_buffer" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_addButtonHover" type="Boolean">
    /// </field>
    /// <field name="imageClicked" type="Boolean">
    /// </field>
    this._items = [];
    this._indexTouchDown = -1;
    this._thumbnailSize = 0;
    this._selectedItem = -1;
    this._hoverItem = -1;
}
wwtlib.FolderBrowser.create = function wwtlib_FolderBrowser$create() {
    /// <returns type="wwtlib.FolderBrowser"></returns>
    var temp = new wwtlib.FolderBrowser();
    temp.height = 85;
    temp.width = 1920;
    temp.canvas = document.createElement('canvas');
    temp.canvas.width = temp.width;
    temp.canvas.height = temp.height;
    temp.setup();
    temp.loadImages();
    return temp;
}
wwtlib.FolderBrowser.prototype = {
    canvas: null,
    top: 10,
    left: 10,
    
    setup: function wwtlib_FolderBrowser$setup() {
        this.canvas.addEventListener('click', ss.Delegate.create(this, this.onClick), false);
        this.canvas.addEventListener('dblclick', ss.Delegate.create(this, this.onDoubleClick), false);
        this.canvas.addEventListener('mousemove', ss.Delegate.create(this, this.onMouseMove), false);
        this.canvas.addEventListener('mouseup', ss.Delegate.create(this, this.onMouseUp), false);
        this.canvas.addEventListener('mousedown', ss.Delegate.create(this, this.onMouseDown), false);
        this.canvas.addEventListener('mousewheel', ss.Delegate.create(this, this.onMouseWheel), false);
        this.canvas.addEventListener('touchstart', ss.Delegate.create(this, this.onTouchStart), false);
        this.canvas.addEventListener('touchmove', ss.Delegate.create(this, this.onTouchMove), false);
        this.canvas.addEventListener('touchend', ss.Delegate.create(this, this.onTouchEnd), false);
        this.canvas.addEventListener('mouseout', ss.Delegate.create(this, this.onMouseUp), false);
    },
    
    onTouchStart: function wwtlib_FolderBrowser$onTouchStart(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var ev = e;
        ev.preventDefault();
        this._mouseDown = true;
        this._lastX = ev.targetTouches[0].pageX;
        this._lastY = ev.targetTouches[0].pageY;
        this._indexTouchDown = this._getItemIndexFromCursor(wwtlib.Vector2d.create(ev.targetTouches[0].pageX, ev.targetTouches[0].pageY));
    },
    
    onTouchMove: function wwtlib_FolderBrowser$onTouchMove(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var ev = e;
        ev.preventDefault();
        if (this._mouseDown) {
            var curX = ev.targetTouches[0].pageX - this._lastX;
            var curY = ev.targetTouches[0].pageY - this._lastY;
            if (this._mouseDown) {
                this._dragging = true;
            }
            if (!this._dragging) {
                var newHover = this._getItemIndexFromCursor(wwtlib.Vector2d.create(ev.targetTouches[0].pageX, ev.targetTouches[0].pageY));
                if (this._hoverItem !== newHover) {
                    this._hoverItem = newHover;
                }
            }
            else {
                var tiles = Math.round(((ev.targetTouches[0].pageX - this._lastX) + this._startOffset) / this._horzSpacing);
                var offset = Math.round(((ev.targetTouches[0].pageX - this._lastX) + this._startOffset) - (tiles * this._horzSpacing));
                this._startOffset = offset;
                this._startIndex -= tiles;
                if (this._startIndex < 0) {
                    this._startOffset -= (this._horzSpacing * this._startIndex);
                    this._startIndex = 0;
                }
                this._lastX = ev.targetTouches[0].pageX;
                this._lastY = ev.targetTouches[0].pageY;
            }
            this.refresh();
        }
    },
    
    onTouchEnd: function wwtlib_FolderBrowser$onTouchEnd(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var ev = e;
        ev.preventDefault();
        if (this._dragging) {
            this._dragging = false;
            this._ignoreClick = true;
        }
        else if (this._indexTouchDown > -1 && this._mouseDown) {
            this._handleClick(this._indexTouchDown);
        }
        this._startOffset = 0;
        this._mouseDown = false;
        this.refresh();
    },
    
    onClick: function wwtlib_FolderBrowser$onClick(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        if (!this._ignoreClick) {
            var index = this._getItemIndexFromCursor(wwtlib.Vector2d.create(e.offsetX, e.offsetY));
            this._handleClick(index);
        }
        else {
            this._ignoreClick = false;
        }
    },
    
    _handleClick: function wwtlib_FolderBrowser$_handleClick(index) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        if (index > -1) {
            if (Type.canCast(this._items[index], wwtlib.Place)) {
                var place = this._items[index];
                wwtlib.WWTControl.singleton.gotoTarget(place, false, false, true);
                return;
            }
            if (Type.canCast(this._items[index], wwtlib.Imageset)) {
                var imageset = this._items[index];
                wwtlib.WWTControl.singleton.renderContext.set_backgroundImageset(imageset);
                return;
            }
            if (Type.canCast(this._items[index], wwtlib.Tour)) {
                var tour = this._items[index];
                wwtlib.WWTControl.singleton.playTour(tour.get_tourUrl());
                return;
            }
            if (Type.canCast(this._items[index], wwtlib.Folder)) {
                var folder = this._items[index];
                this._startIndex = 0;
                folder.childLoadCallback(ss.Delegate.create(this, function() {
                    this._items = folder.get_children();
                    this.refresh();
                }));
                return;
            }
            if (Type.canCast(this._items[index], wwtlib._folderUp)) {
                var folderUp = this._items[index];
                if (folderUp.parent != null) {
                    this._startIndex = 0;
                    folderUp.parent.childLoadCallback(ss.Delegate.create(this, function() {
                        this._items = folderUp.parent.get_children();
                        this.refresh();
                    }));
                }
                return;
            }
        }
        return;
    },
    
    onDoubleClick: function wwtlib_FolderBrowser$onDoubleClick(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        wwtlib.RenderTriangle.renderingOn = !wwtlib.RenderTriangle.renderingOn;
    },
    
    onGestureChange: function wwtlib_FolderBrowser$onGestureChange(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var g = e;
        this._mouseDown = false;
        var delta = g.scale;
    },
    
    _mouseDown: false,
    _lastX: 0,
    _lastY: 0,
    
    onMouseDown: function wwtlib_FolderBrowser$onMouseDown(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        this._mouseDown = true;
        this._lastX = wwtlib.Mouse.offsetX(this.canvas, e);
        this._lastY = wwtlib.Mouse.offsetY(this.canvas, e);
    },
    
    onMouseMove: function wwtlib_FolderBrowser$onMouseMove(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        if (this._mouseDown) {
            this._dragging = true;
        }
        if (!this._dragging) {
            var newHover = this._getItemIndexFromCursor(wwtlib.Vector2d.create(wwtlib.Mouse.offsetX(this.canvas, e), wwtlib.Mouse.offsetY(this.canvas, e)));
            if (this._hoverItem !== newHover) {
                this._hoverItem = newHover;
            }
        }
        else {
            var tiles = Math.round(((wwtlib.Mouse.offsetX(this.canvas, e) - this._lastX) + this._startOffset) / this._horzSpacing);
            var offset = Math.round(((wwtlib.Mouse.offsetX(this.canvas, e) - this._lastX) + this._startOffset) - (tiles * this._horzSpacing));
            this._startOffset = offset;
            this._startIndex -= tiles;
            if (this._startIndex < 0) {
                this._startOffset -= (this._horzSpacing * this._startIndex);
                this._startIndex = 0;
            }
            this._lastX = wwtlib.Mouse.offsetX(this.canvas, e);
            this._lastY = wwtlib.Mouse.offsetY(this.canvas, e);
        }
        this.refresh();
    },
    
    _ignoreClick: false,
    
    onMouseUp: function wwtlib_FolderBrowser$onMouseUp(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        if (this._dragging) {
            this._startOffset = 0;
            this._dragging = false;
            this._ignoreClick = true;
        }
        this._mouseDown = false;
        this.refresh();
    },
    
    onMouseWheel: function wwtlib_FolderBrowser$onMouseWheel(e) {
        /// <param name="e" type="ElementEvent">
        /// </param>
        var ev = e;
        var delta = ev.wheelDelta;
    },
    
    loadImages: function wwtlib_FolderBrowser$loadImages() {
        if (!wwtlib.FolderBrowser._imagesLoaded && !wwtlib.FolderBrowser._downloading) {
            wwtlib.FolderBrowser._imageLoadCount = 0;
            wwtlib.FolderBrowser._imagesLoaded = false;
            wwtlib.FolderBrowser._downloading = true;
            wwtlib.FolderBrowser._bmpBackground = document.createElement('img');
            wwtlib.FolderBrowser._bmpBackground.src = 'images/thumbBackground.png';
            wwtlib.FolderBrowser._bmpBackground.addEventListener('load', ss.Delegate.create(this, function(e) {
                wwtlib.FolderBrowser._imageLoadCount++;
                if (wwtlib.FolderBrowser._imageLoadCount === 5) {
                    wwtlib.FolderBrowser._downloading = false;
                    wwtlib.FolderBrowser._imagesLoaded = true;
                    this.refresh();
                }
            }), false);
            wwtlib.FolderBrowser._bmpBackgroundHover = document.createElement('img');
            wwtlib.FolderBrowser._bmpBackgroundHover.src = 'images/thumbBackgroundHover.png';
            wwtlib.FolderBrowser._bmpBackgroundHover.addEventListener('load', ss.Delegate.create(this, function(e) {
                wwtlib.FolderBrowser._imageLoadCount++;
                if (wwtlib.FolderBrowser._imageLoadCount === 5) {
                    wwtlib.FolderBrowser._downloading = false;
                    wwtlib.FolderBrowser._imagesLoaded = true;
                    this.refresh();
                }
            }), false);
            wwtlib.FolderBrowser._bmpBackgroundWide = document.createElement('img');
            wwtlib.FolderBrowser._bmpBackgroundWide.src = 'images/thumbBackgroundWide.png';
            wwtlib.FolderBrowser._bmpBackgroundWide.addEventListener('load', ss.Delegate.create(this, function(e) {
                wwtlib.FolderBrowser._imageLoadCount++;
                if (wwtlib.FolderBrowser._imageLoadCount === 5) {
                    wwtlib.FolderBrowser._downloading = false;
                    wwtlib.FolderBrowser._imagesLoaded = true;
                    this.refresh();
                }
            }), false);
            wwtlib.FolderBrowser._bmpBackgroundWideHover = document.createElement('img');
            wwtlib.FolderBrowser._bmpBackgroundWideHover.src = 'images/thumbBackgroundWideHover.png';
            wwtlib.FolderBrowser._bmpBackgroundWideHover.addEventListener('load', ss.Delegate.create(this, function(e) {
                wwtlib.FolderBrowser._imageLoadCount++;
                if (wwtlib.FolderBrowser._imageLoadCount === 5) {
                    wwtlib.FolderBrowser._downloading = false;
                    wwtlib.FolderBrowser._imagesLoaded = true;
                    this.refresh();
                }
            }), false);
            wwtlib.FolderBrowser._bmpDropInsertMarker = document.createElement('img');
            wwtlib.FolderBrowser._bmpDropInsertMarker.src = 'images/dragInsertMarker.png';
            wwtlib.FolderBrowser._bmpDropInsertMarker.addEventListener('load', ss.Delegate.create(this, function(e) {
                wwtlib.FolderBrowser._imageLoadCount++;
                if (wwtlib.FolderBrowser._imageLoadCount === 5) {
                    wwtlib.FolderBrowser._downloading = false;
                    wwtlib.FolderBrowser._imagesLoaded = true;
                    this.refresh();
                }
            }), false);
        }
    },
    
    get_thumbnailSize: function wwtlib_FolderBrowser$get_thumbnailSize() {
        /// <value type="wwtlib.ThumbnailSize"></value>
        return this._thumbnailSize;
    },
    set_thumbnailSize: function wwtlib_FolderBrowser$set_thumbnailSize(value) {
        /// <value type="wwtlib.ThumbnailSize"></value>
        this._thumbnailSize = value;
        switch (value) {
            case 1:
                this._horzSpacing = 180;
                this._vertSpacing = 75;
                this._thumbHeight = 65;
                this._thumbWidth = 180;
                break;
            case 0:
                this._horzSpacing = 110;
                this._vertSpacing = 75;
                this._thumbHeight = 65;
                this._thumbWidth = 110;
                break;
        }
        this._updatePaginator();
        this.refresh();
        return value;
    },
    
    refresh: function wwtlib_FolderBrowser$refresh() {
        if (this.width !== window.innerWidth) {
            this.width = window.innerWidth;
            this.canvas.width = this.canvas.width;
        }
        this.paint();
    },
    
    _horzSpacing: 110,
    _vertSpacing: 75,
    _thumbHeight: 65,
    _thumbWidth: 110,
    _horzMultiple: 110,
    _rowCount: 1,
    
    get_rowCount: function wwtlib_FolderBrowser$get_rowCount() {
        /// <value type="Number" integer="true"></value>
        return this._rowCount;
    },
    set_rowCount: function wwtlib_FolderBrowser$set_rowCount(value) {
        /// <value type="Number" integer="true"></value>
        if (this._rowCount !== value) {
            this._rowCount = value;
            this._updatePaginator();
        }
        return value;
    },
    
    _updatePaginator: function wwtlib_FolderBrowser$_updatePaginator() {
    },
    
    _colCount: 6,
    
    get_colCount: function wwtlib_FolderBrowser$get_colCount() {
        /// <value type="Number" integer="true"></value>
        return this._colCount;
    },
    set_colCount: function wwtlib_FolderBrowser$set_colCount(value) {
        /// <value type="Number" integer="true"></value>
        if (this._colCount !== value) {
            this._colCount = value;
            this._updatePaginator();
        }
        return value;
    },
    
    _dragging: false,
    _startIndex: 0,
    _startOffset: 0,
    
    get_itemsPerPage: function wwtlib_FolderBrowser$get_itemsPerPage() {
        /// <value type="Number" integer="true"></value>
        return this._rowCount * this._colCount;
    },
    
    get_currentPage: function wwtlib_FolderBrowser$get_currentPage() {
        /// <value type="Number" integer="true"></value>
        return this._startIndex / this.get_itemsPerPage();
    },
    
    showAddButton: false,
    
    get_pageCount: function wwtlib_FolderBrowser$get_pageCount() {
        /// <value type="Number" integer="true"></value>
        return Math.max(1, ((this._items.length + this.get_itemsPerPage() - 1) + ((this.showAddButton) ? 1 : 0)) / this.get_itemsPerPage());
    },
    
    width: 0,
    height: 0,
    
    paint: function wwtlib_FolderBrowser$paint() {
        var g = this.canvas.getContext('2d');
        g.fillStyle = 'rgb(20, 22, 31)';
        g.fillRect(0, 0, this.width, this.height);
        if (!wwtlib.FolderBrowser._imagesLoaded) {
            return;
        }
        var netHeight = (this.height - 10 * 2);
        var netWidth = (this.width - 10 * 2);
        this.set_rowCount(Math.round(Math.max(netHeight / this._thumbHeight, 1)));
        this.set_colCount(Math.round(Math.max(netWidth / this._horzSpacing, 1)));
        this._horzMultiple = (netWidth + 13) / this.get_colCount();
        this._startIndex = Math.round((this._startIndex / this.get_itemsPerPage()) * this.get_itemsPerPage());
        var rectf;
        var index = this._startIndex;
        for (var y = 0; y < this._rowCount; y++) {
            for (var x = 0; x < this._colCount; x++) {
                if (index >= this._items.length) {
                    if (!this._items.length || this.showAddButton) {
                        rectf = wwtlib.Rectangle.create(this.left + x * this._horzMultiple + 3 + this._startOffset, this.top + y * this._vertSpacing, this._thumbWidth - 10, 60);
                        g.drawImage((this._thumbnailSize === 1) ? wwtlib.FolderBrowser._bmpBackgroundWide : wwtlib.FolderBrowser._bmpBackground, parseInt((x * this._horzMultiple)) + this._startOffset, y * this._vertSpacing);
                    }
                    break;
                }
                rectf = wwtlib.Rectangle.create(this.left + x * this._horzMultiple + 3 + this._startOffset, this.top + y * this._vertSpacing, this._thumbWidth - 14, 60);
                var textBrush = 'white';
                if (index === this._hoverItem || (index === this._selectedItem && this._hoverItem === -1)) {
                    g.drawImage((this._thumbnailSize === 1) ? wwtlib.FolderBrowser._bmpBackgroundWideHover : wwtlib.FolderBrowser._bmpBackgroundHover, this.left + parseInt((x * this._horzMultiple)) + this._startOffset, this.top + y * this._vertSpacing);
                    textBrush = 'yellow';
                }
                else {
                    g.drawImage((this._thumbnailSize === 1) ? wwtlib.FolderBrowser._bmpBackgroundWide : wwtlib.FolderBrowser._bmpBackground, this.left + parseInt((x * this._horzMultiple)) + this._startOffset, this.top + y * this._vertSpacing);
                }
                this._items[index].set_bounds(wwtlib.Rectangle.create((this.left + x * this._horzMultiple) + this._startOffset, this.top + (y * this._vertSpacing), parseInt(this._horzMultiple), this._vertSpacing));
                try {
                    var bmpThumb = this._items[index].get_thumbnail();
                    if (bmpThumb != null) {
                        g.drawImage(bmpThumb, this.left + (x * this._horzMultiple) + 2 + this._startOffset, this.top + y * this._vertSpacing + 3);
                        g.strokeStyle = 'rgb(0,0,0)';
                        g.rect(this.left + parseInt((x * this._horzMultiple)) + 2 + this._startOffset, this.top + y * this._vertSpacing + 3, this._items[index].get_thumbnail().width, this._items[index].get_thumbnail().height);
                    }
                    else {
                        this._items[index].set_thumbnail(document.createElement('img'));
                        this._items[index].get_thumbnail().src = this._items[index].get_thumbnailUrl();
                        this._items[index].get_thumbnail().addEventListener('load', ss.Delegate.create(this, function(e) {
                            this.refresh();
                        }), false);
                    }
                }
                catch ($e1) {
                }
                g.fillStyle = textBrush;
                g.strokeStyle = textBrush;
                g.lineWidth = 1;
                g.font = 'normal 8pt Arial';
                g.fillText(this._items[index].get_name(), rectf.x, rectf.y + rectf.height, rectf.width);
                index++;
            }
            if (index >= this._items.length) {
                break;
            }
        }
    },
    
    _addButtonHover: false,
    imageClicked: false,
    
    _getItemIndexFromCursor: function wwtlib_FolderBrowser$_getItemIndexFromCursor(testPointIn) {
        /// <param name="testPointIn" type="wwtlib.Vector2d">
        /// </param>
        /// <returns type="Number" integer="true"></returns>
        var testPoint = wwtlib.Vector2d.create(testPointIn.x + this.left, testPointIn.y + this.top);
        this.imageClicked = false;
        var index = -1;
        var xpos = parseInt((testPoint.x / this._horzMultiple));
        var xPart = parseInt((testPoint.x % this._horzMultiple));
        if (xpos >= this._colCount) {
            return -1;
        }
        if (xpos < 0) {
            return -1;
        }
        var ypos = parseInt((testPoint.y / this._vertSpacing));
        var yPart = parseInt((testPoint.y % this._vertSpacing));
        if (ypos >= this._rowCount) {
            return -1;
        }
        if (ypos < 0) {
            return -1;
        }
        index = this._startIndex + ypos * this._colCount + xpos;
        if (index === this._items.length) {
            this._addButtonHover = true;
        }
        else {
            this._addButtonHover = false;
        }
        if (index > this._items.length - 1) {
            return -1;
        }
        if ((this._items[index]).get_isImage() && yPart < 16 && xPart > 78) {
            this.imageClicked = true;
        }
        return index;
    },
    
    _addItems: function wwtlib_FolderBrowser$_addItems(list) {
        /// <param name="list" type="Array">
        /// </param>
        this._items = list;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._folderUp

wwtlib._folderUp = function wwtlib__folderUp() {
    /// <field name="parent" type="wwtlib.Folder">
    /// </field>
    /// <field name="_thumbnail" type="Object" domElement="true">
    /// </field>
    /// <field name="_bounds" type="wwtlib.Rectangle">
    /// </field>
    this._bounds = new wwtlib.Rectangle();
}
wwtlib._folderUp.prototype = {
    
    get_name: function wwtlib__folderUp$get_name() {
        /// <value type="String"></value>
        return 'Up Level';
    },
    
    parent: null,
    _thumbnail: null,
    
    get_thumbnail: function wwtlib__folderUp$get_thumbnail() {
        /// <value type="Object" domElement="true"></value>
        return this._thumbnail;
    },
    set_thumbnail: function wwtlib__folderUp$set_thumbnail(value) {
        /// <value type="Object" domElement="true"></value>
        this._thumbnail = value;
        return value;
    },
    
    get_thumbnailUrl: function wwtlib__folderUp$get_thumbnailUrl() {
        /// <value type="String"></value>
        return 'http://www.worldwidetelescope.org/wwtweb/thumbnail.aspx?Name=folderup';
    },
    set_thumbnailUrl: function wwtlib__folderUp$set_thumbnailUrl(value) {
        /// <value type="String"></value>
        return;
        return value;
    },
    
    get_bounds: function wwtlib__folderUp$get_bounds() {
        /// <value type="wwtlib.Rectangle"></value>
        return this._bounds;
    },
    set_bounds: function wwtlib__folderUp$set_bounds(value) {
        /// <value type="wwtlib.Rectangle"></value>
        this._bounds = value;
        return value;
    },
    
    get_isImage: function wwtlib__folderUp$get_isImage() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isTour: function wwtlib__folderUp$get_isTour() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isFolder: function wwtlib__folderUp$get_isFolder() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isCloudCommunityItem: function wwtlib__folderUp$get_isCloudCommunityItem() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_readOnly: function wwtlib__folderUp$get_readOnly() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_children: function wwtlib__folderUp$get_children() {
        /// <value type="Array"></value>
        if (this.parent == null) {
            return [];
        }
        else {
            return this.parent.get_children();
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Imageset

wwtlib.Imageset = function wwtlib_Imageset() {
    /// <field name="_projection" type="wwtlib.ProjectionType">
    /// </field>
    /// <field name="_referenceFrame" type="String">
    /// </field>
    /// <field name="_imageSetID" type="Number" integer="true">
    /// </field>
    /// <field name="_baseTileDegrees" type="Number">
    /// </field>
    /// <field name="_widthFactor" type="Number">
    /// </field>
    /// <field name="url" type="String">
    /// </field>
    /// <field name="demUrl" type="String">
    /// </field>
    /// <field name="_extension" type="String">
    /// </field>
    /// <field name="_levels" type="Number" integer="true">
    /// </field>
    /// <field name="_mercator" type="Boolean">
    /// </field>
    /// <field name="_bottomsUp" type="Boolean">
    /// </field>
    /// <field name="_baseLevel" type="Number" integer="true">
    /// </field>
    /// <field name="_quadTreeTileMap" type="String">
    /// </field>
    /// <field name="_centerX" type="Number">
    /// </field>
    /// <field name="_centerY" type="Number">
    /// </field>
    /// <field name="_rotation" type="Number">
    /// </field>
    /// <field name="_meanRadius" type="Number">
    /// </field>
    /// <field name="_dataSetType" type="wwtlib.ImageSetType">
    /// </field>
    /// <field name="_bandPass" type="wwtlib.BandPass">
    /// </field>
    /// <field name="_altUrl" type="String">
    /// </field>
    /// <field name="_singleImage" type="Boolean">
    /// </field>
    /// <field name="_matrix" type="wwtlib.Matrix3d">
    /// </field>
    /// <field name="_matrixComputed" type="Boolean">
    /// </field>
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="_sparse" type="Boolean">
    /// </field>
    /// <field name="_thumbnailUrl" type="String">
    /// </field>
    /// <field name="_generic" type="Boolean">
    /// </field>
    /// <field name="_defaultSet" type="Boolean">
    /// </field>
    /// <field name="_elevationModel" type="Boolean">
    /// </field>
    /// <field name="_offsetX" type="Number">
    /// </field>
    /// <field name="_offsetY" type="Number">
    /// </field>
    /// <field name="_creditsText" type="String">
    /// </field>
    /// <field name="_creditsUrl" type="String">
    /// </field>
    /// <field name="_thumbnail" type="Object" domElement="true">
    /// </field>
    /// <field name="_bounds" type="wwtlib.Rectangle">
    /// </field>
    this._dataSetType = 0;
    this._bandPass = 3;
}
wwtlib.Imageset.getTileKey = function wwtlib_Imageset$getTileKey(imageset, level, x, y) {
    /// <param name="imageset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="x" type="Number" integer="true">
    /// </param>
    /// <param name="y" type="Number" integer="true">
    /// </param>
    /// <returns type="String"></returns>
    return imageset.get_imageSetID().toString() + '\\' + level.toString() + '\\' + y.toString() + '_' + x.toString();
}
wwtlib.Imageset.getNewTile = function wwtlib_Imageset$getNewTile(imageset, level, x, y, parent) {
    /// <param name="imageset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="x" type="Number" integer="true">
    /// </param>
    /// <param name="y" type="Number" integer="true">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.Tile"></returns>
    switch (imageset.get_projection()) {
        case 0:
            var newTile = wwtlib.MercatorTile.create(level, x, y, imageset, parent);
            return newTile;
        case 1:
            return wwtlib.EquirectangularTile.create(level, x, y, imageset, parent);
        case 3:
        default:
            return wwtlib.ToastTile.create(level, x, y, imageset, parent);
        case 5:
            return wwtlib.SkyImageTile.create(level, x, y, imageset, parent);
        case 6:
            return wwtlib.PlotTile.create(level, x, y, imageset, parent);
        case 2:
            var newTile = wwtlib.TangentTile.create(level, x, y, imageset, parent);
            return newTile;
    }
}
wwtlib.Imageset.fromXMLNode = function wwtlib_Imageset$fromXMLNode(node) {
    /// <param name="node" type="XmlNode">
    /// </param>
    /// <returns type="wwtlib.Imageset"></returns>
    try {
        var type = 2;
        var projection = 2;
        if (node.attributes.getNamedItem('DataSetType') != null) {
            switch (node.attributes.getNamedItem('DataSetType').nodeValue.toLowerCase()) {
                case 'earth':
                    type = 0;
                    break;
                case 'planet':
                    type = 1;
                    break;
                case 'sky':
                    type = 2;
                    break;
                case 'panorama':
                    type = 3;
                    break;
                case 'solarsystem':
                    type = 4;
                    break;
            }
        }
        var bandPass = 3;
        switch (node.attributes.getNamedItem('BandPass').nodeValue) {
            case 'Gamma':
                bandPass = 0;
                break;
            case 'XRay':
                bandPass = 1;
                break;
            case 'Ultraviolet':
                bandPass = 2;
                break;
            case 'Visible':
                bandPass = 3;
                break;
            case 'HydrogenAlpha':
                bandPass = 4;
                break;
            case 'IR':
                bandPass = 4;
                break;
            case 'Microwave':
                bandPass = 5;
                break;
            case 'Radio':
                bandPass = 6;
                break;
            case 'VisibleNight':
                bandPass = 6;
                break;
            default:
                break;
        }
        var wf = 1;
        if (node.attributes.getNamedItem('WidthFactor') != null) {
            wf = parseInt(node.attributes.getNamedItem('WidthFactor').nodeValue);
        }
        if (node.attributes.getNamedItem('Generic') == null || !Boolean.parse(node.attributes.getNamedItem('Generic').nodeValue)) {
            switch (node.attributes.getNamedItem('Projection').nodeValue.toLowerCase()) {
                case 'tan':
                case 'tangent':
                    projection = 2;
                    break;
                case 'mercator':
                    projection = 0;
                    break;
                case 'equirectangular':
                    projection = 1;
                    break;
                case 'toast':
                    projection = 3;
                    break;
                case 'spherical':
                    projection = 4;
                    break;
                case 'plotted':
                    projection = 6;
                    break;
                case 'skyimage':
                    projection = 5;
                    break;
            }
            var fileType = node.attributes.getNamedItem('FileType').nodeValue;
            if (!fileType.startsWith('.')) {
                fileType = '.' + fileType;
            }
            var thumbnailUrl = '';
            var thumbUrl = wwtlib._util.selectSingleNode(node, 'ThumbnailUrl');
            if (thumbUrl != null) {
                if (String.isNullOrEmpty(thumbUrl.text)) {
                    var cn = thumbUrl;
                    thumbnailUrl = cn.textContent;
                }
                else {
                    thumbnailUrl = thumbUrl.text;
                }
            }
            var stockSet = false;
            var elevationModel = false;
            if (node.attributes.getNamedItem('StockSet') != null) {
                stockSet = Boolean.parse(node.attributes.getNamedItem('StockSet').nodeValue);
            }
            if (node.attributes.getNamedItem('ElevationModel') != null) {
                elevationModel = Boolean.parse(node.attributes.getNamedItem('ElevationModel').nodeValue);
            }
            var demUrl = '';
            if (node.attributes.getNamedItem('DemUrl') != null) {
                demUrl = node.attributes.getNamedItem('DemUrl').nodeValue;
            }
            var alturl = '';
            if (node.attributes.getNamedItem('AltUrl') != null) {
                alturl = node.attributes.getNamedItem('AltUrl').nodeValue;
            }
            var offsetX = 0;
            if (node.attributes.getNamedItem('OffsetX') != null) {
                offsetX = parseFloat(node.attributes.getNamedItem('OffsetX').nodeValue);
            }
            var offsetY = 0;
            if (node.attributes.getNamedItem('OffsetY') != null) {
                offsetY = parseFloat(node.attributes.getNamedItem('OffsetY').nodeValue);
            }
            var creditText = '';
            var credits = wwtlib._util.selectSingleNode(node, 'Credits');
            if (credits != null) {
                creditText = credits.text;
            }
            var creditsUrl = '';
            credits = wwtlib._util.selectSingleNode(node, 'CreditsUrl');
            if (credits != null) {
                creditsUrl = credits.text;
            }
            var meanRadius = 0;
            if (node.attributes.getNamedItem('MeanRadius') != null) {
                meanRadius = parseFloat(node.attributes.getNamedItem('MeanRadius').nodeValue);
            }
            var referenceFrame = null;
            if (node.attributes.getNamedItem('ReferenceFrame') != null) {
                referenceFrame = node.attributes.getNamedItem('ReferenceFrame').nodeValue;
            }
            var name = '';
            if (node.attributes.getNamedItem('Name') != null) {
                name = node.attributes.getNamedItem('Name').nodeValue;
            }
            var url = '';
            if (node.attributes.getNamedItem('Url') != null) {
                url = node.attributes.getNamedItem('Url').nodeValue;
            }
            var baseTileLevel = 0;
            if (node.attributes.getNamedItem('BaseTileLevel') != null) {
                baseTileLevel = parseInt(node.attributes.getNamedItem('BaseTileLevel').nodeValue);
            }
            var tileLevels = 0;
            if (node.attributes.getNamedItem('TileLevels') != null) {
                tileLevels = parseInt(node.attributes.getNamedItem('TileLevels').nodeValue);
            }
            var baseDegreesPerTile = 0;
            if (node.attributes.getNamedItem('BaseDegreesPerTile') != null) {
                baseDegreesPerTile = parseFloat(node.attributes.getNamedItem('BaseDegreesPerTile').nodeValue);
            }
            var bottomsUp = false;
            if (node.attributes.getNamedItem('BottomsUp') != null) {
                bottomsUp = Boolean.parse(node.attributes.getNamedItem('BottomsUp').nodeValue);
            }
            var quadTreeMap = '';
            if (node.attributes.getNamedItem('QuadTreeMap') != null) {
                quadTreeMap = node.attributes.getNamedItem('QuadTreeMap').nodeValue;
            }
            var centerX = 0;
            if (node.attributes.getNamedItem('CenterX') != null) {
                centerX = parseFloat(node.attributes.getNamedItem('CenterX').nodeValue);
            }
            var centerY = 0;
            if (node.attributes.getNamedItem('CenterY') != null) {
                centerY = parseFloat(node.attributes.getNamedItem('CenterY').nodeValue);
            }
            var rotation = 0;
            if (node.attributes.getNamedItem('Rotation') != null) {
                rotation = parseFloat(node.attributes.getNamedItem('Rotation').nodeValue);
            }
            var sparse = false;
            if (node.attributes.getNamedItem('Sparse') != null) {
                sparse = Boolean.parse(node.attributes.getNamedItem('Sparse').nodeValue);
            }
            return wwtlib.Imageset.create(name, url, type, bandPass, projection, Math.abs(wwtlib._util.getHashCode(url)), baseTileLevel, tileLevels, 256, baseDegreesPerTile, fileType, bottomsUp, quadTreeMap, centerX, centerY, rotation, sparse, thumbnailUrl, stockSet, elevationModel, wf, offsetX, offsetY, creditText, creditsUrl, demUrl, alturl, meanRadius, referenceFrame);
        }
        else {
            return wwtlib.Imageset.createGeneric(type, bandPass);
        }
    }
    catch ($e1) {
        return null;
    }
}
wwtlib.Imageset.createGeneric = function wwtlib_Imageset$createGeneric(dataSetType, bandPass) {
    /// <param name="dataSetType" type="wwtlib.ImageSetType">
    /// </param>
    /// <param name="bandPass" type="wwtlib.BandPass">
    /// </param>
    /// <returns type="wwtlib.Imageset"></returns>
    var temp = new wwtlib.Imageset();
    temp._generic = true;
    temp._name = 'Generic';
    temp._sparse = false;
    temp._dataSetType = dataSetType;
    temp._bandPass = bandPass;
    temp._quadTreeTileMap = '';
    temp.url = '';
    temp._levels = 0;
    temp._baseTileDegrees = 0;
    temp._imageSetID = 0;
    temp._extension = '';
    temp._projection = 1;
    temp._bottomsUp = false;
    temp._baseLevel = 0;
    temp._mercator = (!temp._projection);
    temp._centerX = 0;
    temp._centerY = 0;
    temp._rotation = 0;
    temp._thumbnailUrl = '';
    temp._matrix = wwtlib.Matrix3d.get_identity();
    temp._matrix._multiply(wwtlib.Matrix3d._rotationX((temp.get_rotation() / 180 * Math.PI)));
    temp._matrix._multiply(wwtlib.Matrix3d._rotationZ((temp.get_centerY() / 180 * Math.PI)));
    temp._matrix._multiply(wwtlib.Matrix3d._rotationY((((360 - temp.get_centerX()) + 180) / 180 * Math.PI)));
    return temp;
}
wwtlib.Imageset.create = function wwtlib_Imageset$create(name, url, dataSetType, bandPass, projection, imageSetID, baseLevel, levels, tileSize, baseTileDegrees, extension, bottomsUp, quadTreeMap, centerX, centerY, rotation, sparse, thumbnailUrl, defaultSet, elevationModel, wf, offsetX, offsetY, credits, creditsUrl, demUrlIn, alturl, meanRadius, referenceFrame) {
    /// <param name="name" type="String">
    /// </param>
    /// <param name="url" type="String">
    /// </param>
    /// <param name="dataSetType" type="wwtlib.ImageSetType">
    /// </param>
    /// <param name="bandPass" type="wwtlib.BandPass">
    /// </param>
    /// <param name="projection" type="wwtlib.ProjectionType">
    /// </param>
    /// <param name="imageSetID" type="Number" integer="true">
    /// </param>
    /// <param name="baseLevel" type="Number" integer="true">
    /// </param>
    /// <param name="levels" type="Number" integer="true">
    /// </param>
    /// <param name="tileSize" type="Number" integer="true">
    /// </param>
    /// <param name="baseTileDegrees" type="Number">
    /// </param>
    /// <param name="extension" type="String">
    /// </param>
    /// <param name="bottomsUp" type="Boolean">
    /// </param>
    /// <param name="quadTreeMap" type="String">
    /// </param>
    /// <param name="centerX" type="Number">
    /// </param>
    /// <param name="centerY" type="Number">
    /// </param>
    /// <param name="rotation" type="Number">
    /// </param>
    /// <param name="sparse" type="Boolean">
    /// </param>
    /// <param name="thumbnailUrl" type="String">
    /// </param>
    /// <param name="defaultSet" type="Boolean">
    /// </param>
    /// <param name="elevationModel" type="Boolean">
    /// </param>
    /// <param name="wf" type="Number" integer="true">
    /// </param>
    /// <param name="offsetX" type="Number">
    /// </param>
    /// <param name="offsetY" type="Number">
    /// </param>
    /// <param name="credits" type="String">
    /// </param>
    /// <param name="creditsUrl" type="String">
    /// </param>
    /// <param name="demUrlIn" type="String">
    /// </param>
    /// <param name="alturl" type="String">
    /// </param>
    /// <param name="meanRadius" type="Number">
    /// </param>
    /// <param name="referenceFrame" type="String">
    /// </param>
    /// <returns type="wwtlib.Imageset"></returns>
    var temp = new wwtlib.Imageset();
    temp.set_referenceFrame(referenceFrame);
    temp.set_meanRadius(meanRadius);
    temp._altUrl = alturl;
    temp.demUrl = demUrlIn;
    temp._creditsText = credits;
    temp._creditsUrl = creditsUrl;
    temp._offsetY = offsetY;
    temp._offsetX = offsetX;
    temp._widthFactor = wf;
    temp._elevationModel = elevationModel;
    temp._defaultSet = defaultSet;
    temp._name = name;
    temp._sparse = sparse;
    temp._dataSetType = dataSetType;
    temp._bandPass = bandPass;
    temp._quadTreeTileMap = quadTreeMap;
    temp.url = url;
    temp._levels = levels;
    temp._baseTileDegrees = baseTileDegrees;
    temp._imageSetID = imageSetID;
    temp._extension = extension;
    temp._projection = projection;
    temp._bottomsUp = bottomsUp;
    temp._baseLevel = baseLevel;
    temp._mercator = (!projection);
    temp._centerX = centerX;
    temp._centerY = centerY;
    temp._rotation = rotation;
    temp._thumbnailUrl = thumbnailUrl;
    temp._computeMatrix();
    return temp;
}
wwtlib.Imageset.prototype = {
    _projection: 0,
    
    get_projection: function wwtlib_Imageset$get_projection() {
        /// <value type="wwtlib.ProjectionType"></value>
        return this._projection;
    },
    set_projection: function wwtlib_Imageset$set_projection(value) {
        /// <value type="wwtlib.ProjectionType"></value>
        this._projection = value;
        return value;
    },
    
    _referenceFrame: null,
    
    get_referenceFrame: function wwtlib_Imageset$get_referenceFrame() {
        /// <value type="String"></value>
        return this._referenceFrame;
    },
    set_referenceFrame: function wwtlib_Imageset$set_referenceFrame(value) {
        /// <value type="String"></value>
        this._referenceFrame = value;
        return value;
    },
    
    _imageSetID: 0,
    
    get_imageSetID: function wwtlib_Imageset$get_imageSetID() {
        /// <value type="Number" integer="true"></value>
        return this._imageSetID;
    },
    set_imageSetID: function wwtlib_Imageset$set_imageSetID(value) {
        /// <value type="Number" integer="true"></value>
        this._imageSetID = value;
        return value;
    },
    
    _baseTileDegrees: 0,
    
    get_baseTileDegrees: function wwtlib_Imageset$get_baseTileDegrees() {
        /// <value type="Number"></value>
        return this._baseTileDegrees;
    },
    set_baseTileDegrees: function wwtlib_Imageset$set_baseTileDegrees(value) {
        /// <value type="Number"></value>
        this._baseTileDegrees = value;
        return value;
    },
    
    _widthFactor: 1,
    
    get_widthFactor: function wwtlib_Imageset$get_widthFactor() {
        /// <value type="Number"></value>
        return this._widthFactor;
    },
    set_widthFactor: function wwtlib_Imageset$set_widthFactor(value) {
        /// <value type="Number"></value>
        this._widthFactor = value;
        return value;
    },
    
    getHashCode: function wwtlib_Imageset$getHashCode() {
        /// <returns type="Number" integer="true"></returns>
        return wwtlib._util.getHashCode(this.get_url());
    },
    
    url: null,
    
    get_url: function wwtlib_Imageset$get_url() {
        /// <value type="String"></value>
        return this.url;
    },
    set_url: function wwtlib_Imageset$set_url(value) {
        /// <value type="String"></value>
        this.url = value;
        return value;
    },
    
    demUrl: '',
    
    get_demUrl: function wwtlib_Imageset$get_demUrl() {
        /// <value type="String"></value>
        if (String.isNullOrEmpty(this.demUrl) && !this._projection) {
            return 'http://www.worldwidetelescope.org/wwtweb/BingDemTile.aspx?Q={0},{1},{2}';
        }
        return this.demUrl;
    },
    set_demUrl: function wwtlib_Imageset$set_demUrl(value) {
        /// <value type="String"></value>
        this.demUrl = value;
        return value;
    },
    
    _extension: null,
    
    get_extension: function wwtlib_Imageset$get_extension() {
        /// <value type="String"></value>
        return this._extension;
    },
    set_extension: function wwtlib_Imageset$set_extension(value) {
        /// <value type="String"></value>
        this._extension = value;
        return value;
    },
    
    _levels: 0,
    
    get_levels: function wwtlib_Imageset$get_levels() {
        /// <value type="Number" integer="true"></value>
        return this._levels;
    },
    set_levels: function wwtlib_Imageset$set_levels(value) {
        /// <value type="Number" integer="true"></value>
        this._levels = value;
        return value;
    },
    
    _mercator: false,
    _bottomsUp: false,
    
    get_bottomsUp: function wwtlib_Imageset$get_bottomsUp() {
        /// <value type="Boolean"></value>
        return this._bottomsUp;
    },
    set_bottomsUp: function wwtlib_Imageset$set_bottomsUp(value) {
        /// <value type="Boolean"></value>
        this._bottomsUp = value;
        return value;
    },
    
    get_mercator: function wwtlib_Imageset$get_mercator() {
        /// <value type="Boolean"></value>
        return this._mercator;
    },
    set_mercator: function wwtlib_Imageset$set_mercator(value) {
        /// <value type="Boolean"></value>
        this._mercator = value;
        return value;
    },
    
    _baseLevel: 1,
    
    get_baseLevel: function wwtlib_Imageset$get_baseLevel() {
        /// <value type="Number" integer="true"></value>
        return this._baseLevel;
    },
    set_baseLevel: function wwtlib_Imageset$set_baseLevel(value) {
        /// <value type="Number" integer="true"></value>
        this._baseLevel = value;
        return value;
    },
    
    _quadTreeTileMap: '0123',
    
    get_quadTreeTileMap: function wwtlib_Imageset$get_quadTreeTileMap() {
        /// <value type="String"></value>
        return this._quadTreeTileMap;
    },
    set_quadTreeTileMap: function wwtlib_Imageset$set_quadTreeTileMap(value) {
        /// <value type="String"></value>
        this._quadTreeTileMap = value;
        return value;
    },
    
    _centerX: 0,
    
    get_centerX: function wwtlib_Imageset$get_centerX() {
        /// <value type="Number"></value>
        return this._centerX;
    },
    set_centerX: function wwtlib_Imageset$set_centerX(value) {
        /// <value type="Number"></value>
        if (this._centerX !== value) {
            this._centerX = value;
            this._computeMatrix();
        }
        return value;
    },
    
    _centerY: 0,
    
    get_centerY: function wwtlib_Imageset$get_centerY() {
        /// <value type="Number"></value>
        return this._centerY;
    },
    set_centerY: function wwtlib_Imageset$set_centerY(value) {
        /// <value type="Number"></value>
        if (this._centerY !== value) {
            this._centerY = value;
            this._computeMatrix();
        }
        return value;
    },
    
    _rotation: 0,
    
    get_rotation: function wwtlib_Imageset$get_rotation() {
        /// <value type="Number"></value>
        return this._rotation;
    },
    set_rotation: function wwtlib_Imageset$set_rotation(value) {
        /// <value type="Number"></value>
        if (this._rotation !== value) {
            this._rotation = value;
            this._computeMatrix();
        }
        return value;
    },
    
    _meanRadius: 0,
    
    get_meanRadius: function wwtlib_Imageset$get_meanRadius() {
        /// <value type="Number"></value>
        return this._meanRadius;
    },
    set_meanRadius: function wwtlib_Imageset$set_meanRadius(value) {
        /// <value type="Number"></value>
        this._meanRadius = value;
        return value;
    },
    
    get_bandPass: function wwtlib_Imageset$get_bandPass() {
        /// <value type="wwtlib.BandPass"></value>
        return this._bandPass;
    },
    set_bandPass: function wwtlib_Imageset$set_bandPass(value) {
        /// <value type="wwtlib.BandPass"></value>
        this._bandPass = value;
        return value;
    },
    
    get_dataSetType: function wwtlib_Imageset$get_dataSetType() {
        /// <value type="wwtlib.ImageSetType"></value>
        return this._dataSetType;
    },
    set_dataSetType: function wwtlib_Imageset$set_dataSetType(value) {
        /// <value type="wwtlib.ImageSetType"></value>
        this._dataSetType = value;
        return value;
    },
    
    _altUrl: '',
    
    get_altUrl: function wwtlib_Imageset$get_altUrl() {
        /// <value type="String"></value>
        return this._altUrl;
    },
    set_altUrl: function wwtlib_Imageset$set_altUrl(value) {
        /// <value type="String"></value>
        this._altUrl = value;
        return value;
    },
    
    _singleImage: false,
    
    get_singleImage: function wwtlib_Imageset$get_singleImage() {
        /// <value type="Boolean"></value>
        return this._singleImage;
    },
    set_singleImage: function wwtlib_Imageset$set_singleImage(value) {
        /// <value type="Boolean"></value>
        this._singleImage = value;
        return value;
    },
    
    toString: function wwtlib_Imageset$toString() {
        /// <returns type="String"></returns>
        if (this.get_defaultSet()) {
            return this._name + ' *';
        }
        else {
            return this._name;
        }
    },
    
    get_stockImageSet: function wwtlib_Imageset$get_stockImageSet() {
        /// <value type="wwtlib.Imageset"></value>
        if (this._generic || !this._defaultSet) {
            return this;
        }
        else {
            return wwtlib.Imageset.createGeneric(this.get_dataSetType(), this.get_bandPass());
        }
    },
    
    equals: function wwtlib_Imageset$equals(obj) {
        /// <param name="obj" type="Object">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (obj == null) {
            return false;
        }
        if (!(Type.canCast(obj, wwtlib.Imageset))) {
            return false;
        }
        var b = obj;
        return (wwtlib._util.getHashCode(b.get_url()) === wwtlib._util.getHashCode(this.get_url()) && b.get_dataSetType() === this.get_dataSetType() && b.get_bandPass() === this.get_bandPass() && b.get_generic() === this.get_generic());
    },
    
    _matrix: null,
    
    get_matrix: function wwtlib_Imageset$get_matrix() {
        /// <value type="wwtlib.Matrix3d"></value>
        if (!this._matrixComputed) {
            this._computeMatrix();
        }
        return this._matrix;
    },
    set_matrix: function wwtlib_Imageset$set_matrix(value) {
        /// <value type="wwtlib.Matrix3d"></value>
        this._matrix = value;
        return value;
    },
    
    _matrixComputed: false,
    
    _computeMatrix: function wwtlib_Imageset$_computeMatrix() {
        this._matrixComputed = true;
        this._matrix = wwtlib.Matrix3d.get_identity();
        this._matrix._multiply(wwtlib.Matrix3d._rotationX((this.get_rotation() / 180 * Math.PI)));
        this._matrix._multiply(wwtlib.Matrix3d._rotationZ((this.get_centerY() / 180 * Math.PI)));
        this._matrix._multiply(wwtlib.Matrix3d._rotationY(((360 - this.get_centerX()) / 180 * Math.PI)));
    },
    
    _name: '',
    
    get_name: function wwtlib_Imageset$get_name() {
        /// <value type="String"></value>
        return this._name;
    },
    set_name: function wwtlib_Imageset$set_name(value) {
        /// <value type="String"></value>
        this._name = value;
        return value;
    },
    
    _sparse: false,
    
    get_sparse: function wwtlib_Imageset$get_sparse() {
        /// <value type="Boolean"></value>
        return this._sparse;
    },
    set_sparse: function wwtlib_Imageset$set_sparse(value) {
        /// <value type="Boolean"></value>
        this._sparse = value;
        return value;
    },
    
    _thumbnailUrl: '',
    
    get_thumbnailUrl: function wwtlib_Imageset$get_thumbnailUrl() {
        /// <value type="String"></value>
        return this._thumbnailUrl;
    },
    set_thumbnailUrl: function wwtlib_Imageset$set_thumbnailUrl(value) {
        /// <value type="String"></value>
        this._thumbnailUrl = value;
        return value;
    },
    
    _generic: false,
    
    get_generic: function wwtlib_Imageset$get_generic() {
        /// <value type="Boolean"></value>
        return this._generic;
    },
    set_generic: function wwtlib_Imageset$set_generic(value) {
        /// <value type="Boolean"></value>
        this._generic = value;
        return value;
    },
    
    _defaultSet: false,
    _elevationModel: false,
    
    get_elevationModel: function wwtlib_Imageset$get_elevationModel() {
        /// <value type="Boolean"></value>
        return this._elevationModel;
    },
    set_elevationModel: function wwtlib_Imageset$set_elevationModel(value) {
        /// <value type="Boolean"></value>
        this._elevationModel = value;
        return value;
    },
    
    get_defaultSet: function wwtlib_Imageset$get_defaultSet() {
        /// <value type="Boolean"></value>
        return this._defaultSet;
    },
    set_defaultSet: function wwtlib_Imageset$set_defaultSet(value) {
        /// <value type="Boolean"></value>
        this._defaultSet = value;
        return value;
    },
    
    _offsetX: 0,
    
    get_offsetX: function wwtlib_Imageset$get_offsetX() {
        /// <value type="Number"></value>
        return this._offsetX;
    },
    set_offsetX: function wwtlib_Imageset$set_offsetX(value) {
        /// <value type="Number"></value>
        this._offsetX = value;
        return value;
    },
    
    _offsetY: 0,
    
    get_offsetY: function wwtlib_Imageset$get_offsetY() {
        /// <value type="Number"></value>
        return this._offsetY;
    },
    set_offsetY: function wwtlib_Imageset$set_offsetY(value) {
        /// <value type="Number"></value>
        this._offsetY = value;
        return value;
    },
    
    _creditsText: null,
    
    get_creditsText: function wwtlib_Imageset$get_creditsText() {
        /// <value type="String"></value>
        return this._creditsText;
    },
    set_creditsText: function wwtlib_Imageset$set_creditsText(value) {
        /// <value type="String"></value>
        this._creditsText = value;
        return value;
    },
    
    _creditsUrl: null,
    
    get_creditsUrl: function wwtlib_Imageset$get_creditsUrl() {
        /// <value type="String"></value>
        return this._creditsUrl;
    },
    set_creditsUrl: function wwtlib_Imageset$set_creditsUrl(value) {
        /// <value type="String"></value>
        this._creditsUrl = value;
        return value;
    },
    
    get_isMandelbrot: function wwtlib_Imageset$get_isMandelbrot() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    _thumbnail: null,
    
    get_thumbnail: function wwtlib_Imageset$get_thumbnail() {
        /// <value type="Object" domElement="true"></value>
        return this._thumbnail;
    },
    set_thumbnail: function wwtlib_Imageset$set_thumbnail(value) {
        /// <value type="Object" domElement="true"></value>
        this._thumbnail = value;
        return value;
    },
    
    _bounds: null,
    
    get_bounds: function wwtlib_Imageset$get_bounds() {
        /// <value type="wwtlib.Rectangle"></value>
        return this._bounds;
    },
    set_bounds: function wwtlib_Imageset$set_bounds(value) {
        /// <value type="wwtlib.Rectangle"></value>
        this._bounds = value;
        return value;
    },
    
    get_isImage: function wwtlib_Imageset$get_isImage() {
        /// <value type="Boolean"></value>
        return true;
    },
    
    get_isTour: function wwtlib_Imageset$get_isTour() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isFolder: function wwtlib_Imageset$get_isFolder() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isCloudCommunityItem: function wwtlib_Imageset$get_isCloudCommunityItem() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_readOnly: function wwtlib_Imageset$get_readOnly() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_children: function wwtlib_Imageset$get_children() {
        /// <value type="Array"></value>
        return [];
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.ViewMoverKenBurnsStyle

wwtlib.ViewMoverKenBurnsStyle = function wwtlib_ViewMoverKenBurnsStyle(from, to, time, fromDateTime, toDateTime, type) {
    /// <param name="from" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="to" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="time" type="Number">
    /// </param>
    /// <param name="fromDateTime" type="Date">
    /// </param>
    /// <param name="toDateTime" type="Date">
    /// </param>
    /// <param name="type" type="wwtlib.InterpolationType">
    /// </param>
    /// <field name="interpolationType" type="wwtlib.InterpolationType">
    /// </field>
    /// <field name="fastDirectionMove" type="Boolean">
    /// </field>
    /// <field name="_from" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="_to" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="_fromDateTime" type="Date">
    /// </field>
    /// <field name="_toDateTime" type="Date">
    /// </field>
    /// <field name="_fromTime" type="Date">
    /// </field>
    /// <field name="_toTargetTime" type="Number">
    /// </field>
    /// <field name="_dateTimeSpan" type="Number" integer="true">
    /// </field>
    /// <field name="_complete" type="Boolean">
    /// </field>
    /// <field name="_midpointFired" type="Boolean">
    /// </field>
    /// <field name="_midpoint" type="Function">
    /// </field>
    this.interpolationType = 0;
    this.interpolationType = type;
    if (Math.abs(from.lng - to.lng) > 180) {
        if (from.lng > to.lng) {
            from.lng -= 360;
        }
        else {
            from.lng += 360;
        }
    }
    this._fromDateTime = fromDateTime;
    this._toDateTime = toDateTime;
    this._dateTimeSpan = toDateTime - fromDateTime;
    this._from = from.copy();
    this._to = to.copy();
    this._fromTime = Date.get_now();
    this._toTargetTime = time;
}
wwtlib.ViewMoverKenBurnsStyle.prototype = {
    fastDirectionMove: false,
    _from: null,
    _to: null,
    _fromDateTime: null,
    _toDateTime: null,
    _fromTime: null,
    _toTargetTime: 0,
    _dateTimeSpan: 0,
    _complete: false,
    _midpointFired: false,
    
    get_complete: function wwtlib_ViewMoverKenBurnsStyle$get_complete() {
        /// <value type="Boolean"></value>
        return this._complete;
    },
    
    get_currentPosition: function wwtlib_ViewMoverKenBurnsStyle$get_currentPosition() {
        /// <value type="wwtlib.CameraParameters"></value>
        var elapsed = Date.get_now() - this._fromTime;
        var elapsedSeconds = (elapsed) / 1000;
        var alpha = elapsedSeconds / this._toTargetTime;
        if (!this._midpointFired && alpha >= 0.5) {
            this._midpointFired = true;
            if (this._midpoint != null) {
                this._midpoint();
            }
        }
        if (alpha >= 1) {
            alpha = 1;
            this._complete = true;
            return this._to.copy();
        }
        if (wwtlib.Settings.get_active().get_galacticMode() && wwtlib.WWTControl.singleton.renderContext.space) {
            return wwtlib.CameraParameters.interpolateGreatCircle(this._from, this._to, alpha, this.interpolationType, this.fastDirectionMove);
        }
        return wwtlib.CameraParameters.interpolate(this._from, this._to, alpha, this.interpolationType, this.fastDirectionMove);
    },
    
    get_currentDateTime: function wwtlib_ViewMoverKenBurnsStyle$get_currentDateTime() {
        /// <value type="Date"></value>
        var elapsed = Date.get_now() - this._fromTime;
        var elapsedSeconds = (elapsed) / 1000;
        var alpha = elapsedSeconds / this._toTargetTime;
        var delta = this._dateTimeSpan * alpha;
        var retDate = new Date(this._fromDateTime.getTime() + parseInt(delta));
        return retDate;
    },
    
    _midpoint: null,
    
    get_midpoint: function wwtlib_ViewMoverKenBurnsStyle$get_midpoint() {
        /// <value type="Function"></value>
        return this._midpoint;
    },
    set_midpoint: function wwtlib_ViewMoverKenBurnsStyle$set_midpoint(value) {
        /// <value type="Function"></value>
        this._midpoint = value;
        return value;
    },
    
    get_moveTime: function wwtlib_ViewMoverKenBurnsStyle$get_moveTime() {
        /// <value type="Number"></value>
        return this._toTargetTime;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._viewMoverSlew

wwtlib._viewMoverSlew = function wwtlib__viewMoverSlew() {
    /// <field name="_from" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="_fromTop" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="_to" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="_toTop" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="_fromTime" type="Date">
    /// </field>
    /// <field name="_upTargetTime" type="Number">
    /// </field>
    /// <field name="_downTargetTime" type="Number">
    /// </field>
    /// <field name="_toTargetTime" type="Number">
    /// </field>
    /// <field name="_upTimeFactor" type="Number">
    /// </field>
    /// <field name="_downTimeFactor" type="Number">
    /// </field>
    /// <field name="_travelTimeFactor" type="Number">
    /// </field>
    /// <field name="_midpointFired" type="Boolean">
    /// </field>
    /// <field name="_complete" type="Boolean">
    /// </field>
    /// <field name="_midpoint" type="Function">
    /// </field>
}
wwtlib._viewMoverSlew.create = function wwtlib__viewMoverSlew$create(from, to) {
    /// <param name="from" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="to" type="wwtlib.CameraParameters">
    /// </param>
    /// <returns type="wwtlib._viewMoverSlew"></returns>
    var temp = new wwtlib._viewMoverSlew();
    temp.init(from, to);
    return temp;
}
wwtlib._viewMoverSlew.createUpDown = function wwtlib__viewMoverSlew$createUpDown(from, to, upDowFactor) {
    /// <param name="from" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="to" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="upDowFactor" type="Number">
    /// </param>
    /// <returns type="wwtlib._viewMoverSlew"></returns>
    var temp = new wwtlib._viewMoverSlew();
    temp._upTimeFactor = temp._downTimeFactor = upDowFactor;
    temp.init(from.copy(), to.copy());
    return temp;
}
wwtlib._viewMoverSlew.prototype = {
    _from: null,
    _fromTop: null,
    _to: null,
    _toTop: null,
    _fromTime: null,
    _upTargetTime: 0,
    _downTargetTime: 0,
    _toTargetTime: 0,
    _upTimeFactor: 0.6,
    _downTimeFactor: 0.6,
    _travelTimeFactor: 7,
    
    init: function wwtlib__viewMoverSlew$init(from, to) {
        /// <param name="from" type="wwtlib.CameraParameters">
        /// </param>
        /// <param name="to" type="wwtlib.CameraParameters">
        /// </param>
        if (Math.abs(from.lng - to.lng) > 180) {
            if (from.lng > to.lng) {
                from.lng -= 360;
            }
            else {
                from.lng += 360;
            }
        }
        if (to.zoom <= 0) {
            to.zoom = 360;
        }
        if (from.zoom <= 0) {
            from.zoom = 360;
        }
        this._from = from;
        this._to = to;
        this._fromTime = Date.get_now();
        var zoomUpTarget = 360;
        var travelTime;
        var lngDist = Math.abs(from.lng - to.lng);
        var latDist = Math.abs(from.lat - to.lat);
        var distance = Math.sqrt(latDist * latDist + lngDist * lngDist);
        zoomUpTarget = (distance / 3) * 20;
        if (zoomUpTarget > 360) {
            zoomUpTarget = 360;
        }
        if (zoomUpTarget < from.zoom) {
            zoomUpTarget = from.zoom;
        }
        travelTime = (distance / 180) * (360 / zoomUpTarget) * this._travelTimeFactor;
        var rotateTime = Math.max(Math.abs(from.angle - to.angle), Math.abs(from.rotation - to.rotation));
        var logDistUp = Math.max(Math.abs(wwtlib._util.logN(zoomUpTarget, 2) - wwtlib._util.logN(from.zoom, 2)), rotateTime);
        this._upTargetTime = this._upTimeFactor * logDistUp;
        this._downTargetTime = this._upTargetTime + travelTime;
        var logDistDown = Math.abs(wwtlib._util.logN(zoomUpTarget, 2) - wwtlib._util.logN(to.zoom, 2));
        this._toTargetTime = this._downTargetTime + Math.max((this._downTimeFactor * logDistDown), rotateTime);
        this._fromTop = from.copy();
        this._fromTop.zoom = zoomUpTarget;
        this._fromTop.angle = (from.angle + to.angle) / 2;
        this._fromTop.rotation = (from.rotation + to.rotation) / 2;
        this._toTop = to.copy();
        this._toTop.zoom = this._fromTop.zoom;
        this._toTop.angle = this._fromTop.angle;
        this._toTop.rotation = this._fromTop.rotation;
    },
    
    _midpointFired: false,
    _complete: false,
    
    get_complete: function wwtlib__viewMoverSlew$get_complete() {
        /// <value type="Boolean"></value>
        return this._complete;
    },
    
    get_currentPosition: function wwtlib__viewMoverSlew$get_currentPosition() {
        /// <value type="wwtlib.CameraParameters"></value>
        var elapsed = Date.get_now() - this._fromTime;
        var elapsedSeconds = (elapsed) / 1000;
        if (elapsedSeconds < this._upTargetTime) {
            return wwtlib.CameraParameters.interpolate(this._from, this._fromTop, elapsedSeconds / this._upTargetTime, 3, false);
        }
        else if (elapsedSeconds < this._downTargetTime) {
            elapsedSeconds -= this._upTargetTime;
            if (wwtlib.Settings.get_active().get_galacticMode() && wwtlib.WWTControl.singleton.renderContext.space) {
                return wwtlib.CameraParameters.interpolateGreatCircle(this._fromTop, this._toTop, elapsedSeconds / (this._downTargetTime - this._upTargetTime), 3, false);
            }
            return wwtlib.CameraParameters.interpolate(this._fromTop, this._toTop, elapsedSeconds / (this._downTargetTime - this._upTargetTime), 3, false);
        }
        else {
            if (!this._midpointFired) {
                this._midpointFired = true;
                if (this._midpoint != null) {
                    this._midpoint();
                }
            }
            elapsedSeconds -= this._downTargetTime;
            var alpha = elapsedSeconds / (this._toTargetTime - this._downTargetTime);
            if (alpha > 1) {
                alpha = 1;
                this._complete = true;
                return this._to.copy();
            }
            return wwtlib.CameraParameters.interpolate(this._toTop, this._to, alpha, 3, false);
        }
    },
    
    get_currentDateTime: function wwtlib__viewMoverSlew$get_currentDateTime() {
        /// <value type="Date"></value>
        wwtlib.SpaceTimeController.updateClock();
        return wwtlib.SpaceTimeController.get_now();
    },
    
    _midpoint: null,
    
    get_midpoint: function wwtlib__viewMoverSlew$get_midpoint() {
        /// <value type="Function"></value>
        return this._midpoint;
    },
    set_midpoint: function wwtlib__viewMoverSlew$set_midpoint(value) {
        /// <value type="Function"></value>
        this._midpoint = value;
        return value;
    },
    
    get_moveTime: function wwtlib__viewMoverSlew$get_moveTime() {
        /// <value type="Number"></value>
        return this._toTargetTime;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib._mainView

window._drawTest = function wwtlib__mainView$_drawTest() {
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');
    ctx.fillStyle = 'rgb(80,0,0)';
    ctx.fillRect(120, 120, 165, 160);
    ctx.fillStyle = 'rgba(0, 0, 160, 0.5)';
    ctx.fillRect(140, 140, 165, 160);
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.MercatorTile

wwtlib.MercatorTile = function wwtlib_MercatorTile() {
    /// <field name="_tileDegrees$1" type="Number">
    /// </field>
    /// <field name="_latMin$1" type="Number">
    /// </field>
    /// <field name="_latMax$1" type="Number">
    /// </field>
    /// <field name="_lngMin$1" type="Number">
    /// </field>
    /// <field name="_lngMax$1" type="Number">
    /// </field>
    /// <field name="_subDivisionLevel$1" type="Number" integer="true">
    /// </field>
    /// <field name="_eartH_RADIUS$1" type="Number" static="true">
    /// </field>
    /// <field name="_griD_SIZE$1" type="Number" static="true">
    /// </field>
    /// <field name="_basE_METERS_PER_PIXEL$1" type="Number" static="true">
    /// </field>
    /// <field name="_offseT_METERS$1" type="Number" static="true">
    /// </field>
    wwtlib.MercatorTile.initializeBase(this);
}
wwtlib.MercatorTile.create = function wwtlib_MercatorTile$create(level, X, Y, dataset, parent) {
    /// <param name="level" type="Number" integer="true">
    /// </param>
    /// <param name="X" type="Number" integer="true">
    /// </param>
    /// <param name="Y" type="Number" integer="true">
    /// </param>
    /// <param name="dataset" type="wwtlib.Imageset">
    /// </param>
    /// <param name="parent" type="wwtlib.Tile">
    /// </param>
    /// <returns type="wwtlib.MercatorTile"></returns>
    var temp = new wwtlib.MercatorTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = X;
    temp.tileY = Y;
    temp.dataset = dataset;
    temp.computeBoundingSphere();
    return temp;
}
wwtlib.MercatorTile.getCentrePointOffsetAsTileRatio = function wwtlib_MercatorTile$getCentrePointOffsetAsTileRatio(lat, lon, zoom) {
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lon" type="Number">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <returns type="wwtlib.Vector2d"></returns>
    var metersX = wwtlib.MercatorTile.absoluteLonToMetersAtZoom(lon, zoom);
    var relativeXIntoCell = (metersX / 256) - Math.floor(metersX / 256);
    var metersY = wwtlib.MercatorTile.absoluteLatToMetersAtZoom(lat, zoom);
    var relativeYIntoCell = (metersY / 256) - Math.floor(metersY / 256);
    return wwtlib.Vector2d.create(relativeXIntoCell, relativeYIntoCell);
}
wwtlib.MercatorTile.relativeMetersToLatAtZoom = function wwtlib_MercatorTile$relativeMetersToLatAtZoom(Y, zoom) {
    /// <param name="Y" type="Number">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    var metersY = Y * metersPerPixel;
    return wwtlib.MercatorTile._radToDeg$1(Math.PI / 2 - 2 * Math.atan(Math.exp(0 - metersY / 6378137)));
}
wwtlib.MercatorTile.relativeMetersToLonAtZoom = function wwtlib_MercatorTile$relativeMetersToLonAtZoom(X, zoom) {
    /// <param name="X" type="Number">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    var metersX = X * metersPerPixel;
    return wwtlib.MercatorTile._radToDeg$1(metersX / 6378137);
}
wwtlib.MercatorTile.absoluteLatToMetersAtZoom = function wwtlib_MercatorTile$absoluteLatToMetersAtZoom(latitude, zoom) {
    /// <param name="latitude" type="Number">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var sinLat = Math.sin(wwtlib.MercatorTile._degToRad$1(latitude));
    var metersY = 6378137 / 2 * Math.log((1 + sinLat) / (1 - sinLat));
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    return parseInt((Math.round(20037508 - metersY) / metersPerPixel));
}
wwtlib.MercatorTile.absoluteMetersToLatAtZoom = function wwtlib_MercatorTile$absoluteMetersToLatAtZoom(Y, zoom) {
    /// <param name="Y" type="Number" integer="true">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    var metersY = 20037508 - Y * metersPerPixel;
    return wwtlib.MercatorTile._radToDeg$1(Math.PI / 2 - 2 * Math.atan(Math.exp(0 - metersY / 6378137)));
}
wwtlib.MercatorTile.absoluteLonToMetersAtZoom = function wwtlib_MercatorTile$absoluteLonToMetersAtZoom(longitude, zoom) {
    /// <param name="longitude" type="Number">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var metersX = 6378137 * wwtlib.MercatorTile._degToRad$1(longitude);
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    return parseInt(((metersX + 20037508) / metersPerPixel));
}
wwtlib.MercatorTile.absoluteMetersToLonAtZoom = function wwtlib_MercatorTile$absoluteMetersToLonAtZoom(X, zoom) {
    /// <param name="X" type="Number" integer="true">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    var metersX = X * metersPerPixel - 20037508;
    return wwtlib.MercatorTile._radToDeg$1(metersX / 6378137);
}
wwtlib.MercatorTile.absoluteLonToMetersAtZoomTile = function wwtlib_MercatorTile$absoluteLonToMetersAtZoomTile(longitude, zoom, tileX) {
    /// <param name="longitude" type="Number">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <param name="tileX" type="Number" integer="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var metersX = 6378137 * wwtlib.MercatorTile._degToRad$1(longitude);
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    return parseInt(((metersX + 20037508) / metersPerPixel));
}
wwtlib.MercatorTile.absoluteLatToMetersAtZoomTile = function wwtlib_MercatorTile$absoluteLatToMetersAtZoomTile(latitude, zoom, tileX) {
    /// <param name="latitude" type="Number">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <param name="tileX" type="Number" integer="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var sinLat = Math.sin(wwtlib.MercatorTile._degToRad$1(latitude));
    var metersY = 6378137 / 2 * Math.log((1 + sinLat) / (1 - sinLat));
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    return parseInt((Math.round(20037508 - metersY) / metersPerPixel));
}
wwtlib.MercatorTile.absoluteMetersToLonAtZoomByTileY = function wwtlib_MercatorTile$absoluteMetersToLonAtZoomByTileY(X, zoom, tileY) {
    /// <param name="X" type="Number" integer="true">
    /// </param>
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <param name="tileY" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    var metersPerPixel = wwtlib.MercatorTile.metersPerPixel2(zoom);
    var metersX = X * metersPerPixel - 20037508;
    return wwtlib.MercatorTile._radToDeg$1(metersX / 6378137);
}
wwtlib.MercatorTile._degToRad$1 = function wwtlib_MercatorTile$_degToRad$1(deg) {
    /// <param name="deg" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return (deg * Math.PI / 180);
}
wwtlib.MercatorTile.metersPerPixel2 = function wwtlib_MercatorTile$metersPerPixel2(zoom) {
    /// <param name="zoom" type="Number" integer="true">
    /// </param>
    /// <returns type="Number"></returns>
    return (156543 / (1 << zoom));
}
wwtlib.MercatorTile._radToDeg$1 = function wwtlib_MercatorTile$_radToDeg$1(rad) {
    /// <param name="rad" type="Number">
    /// </param>
    /// <returns type="Number"></returns>
    return (rad * 180 / Math.PI);
}
wwtlib.MercatorTile.prototype = {
    _tileDegrees$1: 0,
    _latMin$1: 0,
    _latMax$1: 0,
    _lngMin$1: 0,
    _lngMax$1: 0,
    
    computeBoundingSphere: function wwtlib_MercatorTile$computeBoundingSphere() {
        this._tileDegrees$1 = 360 / Math.pow(2, this.level);
        this._latMin$1 = wwtlib.MercatorTile.absoluteMetersToLatAtZoom(this.tileY * 256, this.level);
        this._latMax$1 = wwtlib.MercatorTile.absoluteMetersToLatAtZoom((this.tileY + 1) * 256, this.level);
        this._lngMin$1 = ((this.tileX * this._tileDegrees$1) - 180);
        this._lngMax$1 = ((((this.tileX + 1)) * this._tileDegrees$1) - 180);
        var latCenter = (this._latMin$1 + this._latMax$1) / 2;
        var lngCenter = (this._lngMin$1 + this._lngMax$1) / 2;
        this.sphereCenter = this.geoTo3d(latCenter, lngCenter, false);
        this.topLeft = this.geoTo3d(this._latMin$1, this._lngMin$1, false);
        this.bottomRight = this.geoTo3d(this._latMax$1, this._lngMax$1, false);
        this.topRight = this.geoTo3d(this._latMin$1, this._lngMax$1, false);
        this.bottomLeft = this.geoTo3d(this._latMax$1, this._lngMin$1, false);
        if (!this.tileY) {
            this.topLeft = wwtlib.Vector3d.create(0, 1, 0);
            this.topRight = wwtlib.Vector3d.create(0, 1, 0);
        }
        if (this.tileY === Math.pow(2, this.level) - 1) {
            this.bottomRight = wwtlib.Vector3d.create(0, -1, 0);
            this.bottomLeft = wwtlib.Vector3d.create(0, -1, 0);
        }
        var distVect = this.topLeft;
        distVect.subtract(this.sphereCenter);
        this.sphereRadius = distVect.length();
        distVect = this.bottomRight;
        distVect.subtract(this.sphereCenter);
        var len = distVect.length();
        if (this.sphereRadius < len) {
            this.sphereRadius = len;
        }
        this._tileDegrees$1 = Math.abs(this._latMax$1 - this._latMin$1);
    },
    
    isPointInTile: function wwtlib_MercatorTile$isPointInTile(lat, lng) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (!this.demReady || this.demData == null || lat < Math.min(this._latMin$1, this._latMax$1) || lat > Math.max(this._latMax$1, this._latMin$1) || lng < Math.min(this._lngMin$1, this._lngMax$1) || lng > Math.max(this._lngMin$1, this._lngMax$1)) {
            return false;
        }
        return true;
    },
    
    getSurfacePointAltitude: function wwtlib_MercatorTile$getSurfacePointAltitude(lat, lng, meters) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <param name="meters" type="Boolean">
        /// </param>
        /// <returns type="Number"></returns>
        if (this.level < wwtlib.Tile.lastDeepestLevel) {
            var $enum1 = ss.IEnumerator.getEnumerator(this.children);
            while ($enum1.moveNext()) {
                var child = $enum1.current;
                if (child != null) {
                    if (child.isPointInTile(lat, lng)) {
                        var retVal = child.getSurfacePointAltitude(lat, lng, meters);
                        if (!!retVal) {
                            return retVal;
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        var alt = this._getAltitudeAtLatLng$1(lat, lng, (meters) ? 1 : this.get__demScaleFactor());
        return alt;
    },
    
    _getAltitudeAtLatLng$1: function wwtlib_MercatorTile$_getAltitudeAtLatLng$1(lat, lng, scaleFactor) {
        /// <param name="lat" type="Number">
        /// </param>
        /// <param name="lng" type="Number">
        /// </param>
        /// <param name="scaleFactor" type="Number">
        /// </param>
        /// <returns type="Number"></returns>
        var height = Math.abs(this._latMax$1 - this._latMin$1);
        var width = Math.abs(this._lngMax$1 - this._lngMin$1);
        var yy = ((lat - Math.min(this._latMax$1, this._latMin$1)) / height * 32);
        var xx = ((lng - Math.min(this._lngMax$1, this._lngMin$1)) / width * 32);
        var indexY = Math.min(31, parseInt(yy));
        var indexX = Math.min(31, parseInt(xx));
        var ha = xx - indexX;
        var va = yy - indexY;
        var ul = this.demData[indexY * 33 + indexX];
        var ur = this.demData[indexY * 33 + (indexX + 1)];
        var ll = this.demData[(indexY + 1) * 33 + indexX];
        var lr = this.demData[(indexY + 1) * 33 + (indexX + 1)];
        var top = ul * (1 - ha) + ha * ur;
        var bottom = ll * (1 - ha) + ha * lr;
        var val = top * (1 - va) + va * bottom;
        return val / scaleFactor;
    },
    
    _subDivisionLevel$1: 32,
    
    createGeometry: function wwtlib_MercatorTile$createGeometry(renderContext) {
        /// <param name="renderContext" type="wwtlib.RenderContext">
        /// </param>
        /// <returns type="Boolean"></returns>
        wwtlib.MercatorTile.callBaseMethod(this, 'createGeometry', [ renderContext ]);
        if (this.geometryCreated) {
            return true;
        }
        this.geometryCreated = true;
        if (wwtlib.Tile.uvMultiple === 256) {
            if (!this.dataset.get_dataSetType() || this.dataset.get_dataSetType() === 1) {
                this._subDivisionLevel$1 = Math.max(2, (6 - this.level) * 2);
            }
        }
        for (var i = 0; i < 4; i++) {
            this._renderTriangleLists[i] = [];
        }
        var lat, lng;
        var index = 0;
        var tileDegrees = 360 / Math.pow(2, this.level);
        this._latMin$1 = wwtlib.MercatorTile.absoluteMetersToLatAtZoom(this.tileY * 256, this.level);
        this._latMax$1 = wwtlib.MercatorTile.absoluteMetersToLatAtZoom((this.tileY + 1) * 256, this.level);
        this._lngMin$1 = ((this.tileX * tileDegrees) - 180);
        this._lngMax$1 = ((((this.tileX + 1)) * tileDegrees) - 180);
        var latCenter = wwtlib.MercatorTile.absoluteMetersToLatAtZoom(((this.tileY * 2) + 1) * 256, this.level + 1);
        this.topLeft = this.geoTo3d(this._latMin$1, this._lngMin$1, false);
        this.bottomRight = this.geoTo3d(this._latMax$1, this._lngMax$1, false);
        this.topRight = this.geoTo3d(this._latMin$1, this._lngMax$1, false);
        this.bottomLeft = this.geoTo3d(this._latMax$1, this._lngMin$1, false);
        var verts = new Array((this._subDivisionLevel$1 + 1) * (this._subDivisionLevel$1 + 1));
        tileDegrees = this._lngMax$1 - this._lngMin$1;
        var dGrid = (tileDegrees / this._subDivisionLevel$1);
        var x1, y1;
        var textureStep = 1 / this._subDivisionLevel$1;
        var latDegrees = this._latMax$1 - latCenter;
        for (y1 = 0; y1 < this._subDivisionLevel$1 / 2; y1++) {
            if (y1 !== this._subDivisionLevel$1 / 2) {
                lat = this._latMax$1 - (2 * textureStep * latDegrees * y1);
            }
            else {
                lat = latCenter;
            }
            for (x1 = 0; x1 <= this._subDivisionLevel$1; x1++) {
                if (x1 !== this._subDivisionLevel$1) {
                    lng = this._lngMin$1 + (textureStep * tileDegrees * x1);
                }
                else {
                    lng = this._lngMax$1;
                }
                index = y1 * (this._subDivisionLevel$1 + 1) + x1;
                verts[index] = new wwtlib.PositionTexture();
                verts[index].position = this.geoTo3dWithAlt(lat, lng, false, true);
                verts[index].tu = (x1 * textureStep) * wwtlib.Tile.uvMultiple;
                verts[index].tv = ((wwtlib.MercatorTile.absoluteLatToMetersAtZoom(lat, this.level) - (this.tileY * 256)) / 256) * wwtlib.Tile.uvMultiple;
                this.demIndex++;
            }
        }
        latDegrees = this._latMin$1 - latCenter;
        for (y1 = this._subDivisionLevel$1 / 2; y1 <= this._subDivisionLevel$1; y1++) {
            if (y1 !== this._subDivisionLevel$1) {
                lat = latCenter + (2 * textureStep * latDegrees * (y1 - (this._subDivisionLevel$1 / 2)));
            }
            else {
                lat = this._latMin$1;
            }
            for (x1 = 0; x1 <= this._subDivisionLevel$1; x1++) {
                if (x1 !== this._subDivisionLevel$1) {
                    lng = this._lngMin$1 + (textureStep * tileDegrees * x1);
                }
                else {
                    lng = this._lngMax$1;
                }
                index = y1 * (this._subDivisionLevel$1 + 1) + x1;
                verts[index] = new wwtlib.PositionTexture();
                verts[index].position = this.geoTo3dWithAlt(lat, lng, false, true);
                verts[index].tu = (x1 * textureStep) * wwtlib.Tile.uvMultiple;
                verts[index].tv = ((wwtlib.MercatorTile.absoluteLatToMetersAtZoom(lat, this.level) - (this.tileY * 256)) / 256) * wwtlib.Tile.uvMultiple;
                this.demIndex++;
            }
        }
        if (!this.tileY) {
            y1 = this._subDivisionLevel$1;
            for (x1 = 0; x1 <= this._subDivisionLevel$1; x1++) {
                index = y1 * (this._subDivisionLevel$1 + 1) + x1;
                verts[index].position = wwtlib.Vector3d.create(0, 1, 0);
            }
        }
        if (this.tileY === Math.pow(2, this.level) - 1) {
            y1 = 0;
            for (x1 = 0; x1 <= this._subDivisionLevel$1; x1++) {
                index = y1 * (this._subDivisionLevel$1 + 1) + x1;
                verts[index].position = wwtlib.Vector3d.create(0, -1, 0);
            }
        }
        this.triangleCount = this._subDivisionLevel$1 * this._subDivisionLevel$1 * 2;
        var quarterDivisions = this._subDivisionLevel$1 / 2;
        var part = 0;
        if (renderContext.gl == null) {
            for (var y2 = 0; y2 < 2; y2++) {
                for (var x2 = 0; x2 < 2; x2++) {
                    index = 0;
                    for (y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
                        for (x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                            var p1;
                            var p2;
                            var p3;
                            p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + x1)];
                            p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                            p3 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                            var tri = wwtlib.RenderTriangle.create(p1, p2, p3, this.texture, this.level);
                            this._renderTriangleLists[part].add(tri);
                            p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                            p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                            p3 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                            tri = wwtlib.RenderTriangle.create(p1, p2, p3, this.texture, this.level);
                            this._renderTriangleLists[part].add(tri);
                        }
                    }
                    part++;
                }
            }
        }
        else {
            this._vertexBuffer = wwtlib.Tile.prepDevice.createBuffer();
            wwtlib.Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
            var f32array = new Float32Array(verts.length * 5);
            var buffer = f32array;
            index = 0;
            var $enum1 = ss.IEnumerator.getEnumerator(verts);
            while ($enum1.moveNext()) {
                var pt = $enum1.current;
                index = this.addVertex(buffer, index, pt);
            }
            wwtlib.Tile.prepDevice.bufferData(34962, f32array, 35044);
            for (var y2 = 0; y2 < 2; y2++) {
                for (var x2 = 0; x2 < 2; x2++) {
                    var ui16array = new Uint16Array(this.triangleCount * 3);
                    var indexArray = ui16array;
                    index = 0;
                    for (y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
                        for (x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                            indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + x1);
                            indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                            indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                            indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                            indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                            indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                        }
                    }
                    this._indexBuffers[part] = wwtlib.Tile.prepDevice.createBuffer();
                    wwtlib.Tile.prepDevice.bindBuffer(34963, this._indexBuffers[part]);
                    wwtlib.Tile.prepDevice.bufferData(34963, ui16array, 35044);
                    part++;
                }
            }
        }
        return true;
    },
    
    _getDemSample$1: function wwtlib_MercatorTile$_getDemSample$1(x, y) {
        /// <param name="x" type="Number" integer="true">
        /// </param>
        /// <param name="y" type="Number" integer="true">
        /// </param>
        /// <returns type="Number"></returns>
        return this.demData[(32 - y) * 33 + x];
    },
    
    createDemFromParent: function wwtlib_MercatorTile$createDemFromParent() {
        /// <returns type="Boolean"></returns>
        var parent = Type.safeCast(this.parent, wwtlib.MercatorTile);
        if (parent == null || parent.demData == null) {
            return false;
        }
        var offsetX = (((this.tileX % 2) === 1) ? 16 : 0);
        var offsetY = (((this.tileY % 2) === 1) ? 16 : 0);
        this.demData = new Array(this.demSize);
        for (var y = 0; y < 33; y += 2) {
            var copy = true;
            for (var x = 0; x < 33; x++) {
                if (copy) {
                    this.demData[(32 - y) * 33 + x] = parent._getDemSample$1((x / 2) + offsetX, (y / 2) + offsetY);
                }
                else {
                    this.demData[(32 - y) * 33 + x] = ((parent._getDemSample$1((x / 2) + offsetX, (y / 2) + offsetY) + parent._getDemSample$1(((x / 2) + offsetX) + 1, (y / 2) + offsetY)) / 2);
                }
                copy = !copy;
            }
        }
        for (var y = 1; y < 33; y += 2) {
            for (var x = 0; x < 33; x++) {
                this.demData[(32 - y) * 33 + x] = ((this._getDemSample$1(x, y - 1) + this._getDemSample$1(x, y + 1)) / 2);
            }
        }
        var $enum1 = ss.IEnumerator.getEnumerator(this.demData);
        while ($enum1.moveNext()) {
            var sample = $enum1.current;
            this.demAverage += sample;
        }
        this.demAverage /= this.demData.length;
        this.demReady = true;
        return true;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Place

wwtlib.Place = function wwtlib_Place() {
    /// <field name="_tag" type="Object">
    /// </field>
    /// <field name="_url" type="String">
    /// </field>
    /// <field name="_thumbnail" type="Object" domElement="true">
    /// </field>
    /// <field name="_name" type="String">
    /// </field>
    /// <field name="_camParams" type="wwtlib.CameraParameters">
    /// </field>
    /// <field name="_location3d" type="wwtlib.Vector3d">
    /// </field>
    /// <field name="htmlDescription" type="String">
    /// </field>
    /// <field name="_constellation" type="String">
    /// </field>
    /// <field name="_classification" type="wwtlib.Classification">
    /// </field>
    /// <field name="_type" type="wwtlib.ImageSetType">
    /// </field>
    /// <field name="_magnitude" type="Number">
    /// </field>
    /// <field name="_distnace" type="Number">
    /// </field>
    /// <field name="angularSize" type="Number">
    /// Angular Size in Arc Seconds
    /// </field>
    /// <field name="_thumbNail" type="Object" domElement="true">
    /// </field>
    /// <field name="_studyImageset" type="wwtlib.Imageset">
    /// </field>
    /// <field name="_backgroundImageSet" type="wwtlib.Imageset">
    /// </field>
    /// <field name="_searchDistance" type="Number">
    /// </field>
    /// <field name="_elevation" type="Number">
    /// </field>
    /// <field name="_thumbnailField" type="String">
    /// </field>
    /// <field name="_bounds" type="wwtlib.Rectangle">
    /// </field>
    this._camParams = wwtlib.CameraParameters.create(0, 0, -1, 0, 0, 100);
    this._location3d = wwtlib.Vector3d.create(0, 0, 0);
    this._classification = 1048576;
    this._type = 2;
}
wwtlib.Place.create = function wwtlib_Place$create(name, lat, lng, classification, constellation, type, zoomFactor) {
    /// <param name="name" type="String">
    /// </param>
    /// <param name="lat" type="Number">
    /// </param>
    /// <param name="lng" type="Number">
    /// </param>
    /// <param name="classification" type="wwtlib.Classification">
    /// </param>
    /// <param name="constellation" type="String">
    /// </param>
    /// <param name="type" type="wwtlib.ImageSetType">
    /// </param>
    /// <param name="zoomFactor" type="Number">
    /// </param>
    /// <returns type="wwtlib.Place"></returns>
    var temp = new wwtlib.Place();
    temp.set_zoomLevel(zoomFactor);
    temp._constellation = constellation;
    temp._name = name;
    if (type === 2 || type === 4) {
        temp._camParams.set_RA(lng);
    }
    else {
        temp.set_lng(lng);
    }
    temp.set_lat(lat);
    temp.set_classification(classification);
    temp.set_type(type);
    return temp;
}
wwtlib.Place.createCameraParams = function wwtlib_Place$createCameraParams(name, camParams, classification, constellation, type, target) {
    /// <param name="name" type="String">
    /// </param>
    /// <param name="camParams" type="wwtlib.CameraParameters">
    /// </param>
    /// <param name="classification" type="wwtlib.Classification">
    /// </param>
    /// <param name="constellation" type="String">
    /// </param>
    /// <param name="type" type="wwtlib.ImageSetType">
    /// </param>
    /// <param name="target" type="wwtlib.SolarSystemObjects">
    /// </param>
    /// <returns type="wwtlib.Place"></returns>
    var temp = new wwtlib.Place();
    temp._constellation = constellation;
    temp._name = name;
    temp.set_classification(classification);
    temp._camParams = camParams;
    temp.set_type(type);
    temp.set_target(target);
    return temp;
}
wwtlib.Place._fromXml = function wwtlib_Place$_fromXml(place) {
    /// <param name="place" type="XmlNode">
    /// </param>
    /// <returns type="wwtlib.Place"></returns>
    var newPlace = new wwtlib.Place();
    newPlace._name = place.attributes.getNamedItem('Name').nodeValue;
    if (place.attributes.getNamedItem('DataSetType') != null) {
        switch (place.attributes.getNamedItem('DataSetType').nodeValue.toLowerCase()) {
            case 'earth':
                newPlace._type = 0;
                break;
            case 'planet':
                newPlace._type = 1;
                break;
            case 'sky':
                newPlace._type = 2;
                break;
            case 'panorama':
                newPlace._type = 3;
                break;
            case 'solarsystem':
                newPlace._type = 4;
                break;
        }
    }
    if (newPlace.get_type() === 2) {
        newPlace._camParams.set_RA(parseFloat(place.attributes.getNamedItem('RA').nodeValue));
        newPlace._camParams.set_dec(parseFloat(place.attributes.getNamedItem('Dec').nodeValue));
    }
    else {
        newPlace.set_lat(parseFloat(place.attributes.getNamedItem('Lat').nodeValue));
        newPlace.set_lng(parseFloat(place.attributes.getNamedItem('Lng').nodeValue));
    }
    if (place.attributes.getNamedItem('Constellation') != null) {
        newPlace._constellation = place.attributes.getNamedItem('Constellation').nodeValue;
    }
    if (place.attributes.getNamedItem('Classification') != null) {
        switch (place.attributes.getNamedItem('Classification').nodeValue) {
            case 'Star':
                newPlace._classification = 1;
                break;
            case 'Supernova':
                newPlace._classification = 2;
                break;
            case 'BlackHole':
                newPlace._classification = 4;
                break;
            case 'NeutronStar':
                newPlace._classification = 8;
                break;
            case 'DoubleStar':
                newPlace._classification = 16;
                break;
            case 'MultipleStars':
                newPlace._classification = 32;
                break;
            case 'Asterism':
                newPlace._classification = 64;
                break;
            case 'Constellation':
                newPlace._classification = 128;
                break;
            case 'OpenCluster':
                newPlace._classification = 256;
                break;
            case 'GlobularCluster':
                newPlace._classification = 512;
                break;
            case 'NebulousCluster':
                newPlace._classification = 1024;
                break;
            case 'Nebula':
                newPlace._classification = 2048;
                break;
            case 'EmissionNebula':
                newPlace._classification = 4096;
                break;
            case 'PlanetaryNebula':
                newPlace._classification = 8192;
                break;
            case 'ReflectionNebula':
                newPlace._classification = 16384;
                break;
            case 'DarkNebula':
                newPlace._classification = 32768;
                break;
            case 'GiantMolecularCloud':
                newPlace._classification = 65536;
                break;
            case 'SupernovaRemnant':
                newPlace._classification = 131072;
                break;
            case 'InterstellarDust':
                newPlace._classification = 262144;
                break;
            case 'Quasar':
                newPlace._classification = 524288;
                break;
            case 'Galaxy':
                newPlace._classification = 1048576;
                break;
            case 'SpiralGalaxy':
                newPlace._classification = 2097152;
                break;
            case 'IrregularGalaxy':
                newPlace._classification = 4194304;
                break;
            case 'EllipticalGalaxy':
                newPlace._classification = 8388608;
                break;
            case 'Knot':
                newPlace._classification = 16777216;
                break;
            case 'PlateDefect':
                newPlace._classification = 33554432;
                break;
            case 'ClusterOfGalaxies':
                newPlace._classification = 67108864;
                break;
            case 'OtherNGC':
                newPlace._classification = 134217728;
                break;
            case 'Unidentified':
                newPlace._classification = 268435456;
                break;
            case 'SolarSystem':
                newPlace._classification = 536870912;
                break;
            case 'Unfiltered':
                newPlace._classification = 1073741823;
                break;
            case 'Stellar':
                newPlace._classification = 63;
                break;
            case 'StellarGroupings':
                newPlace._classification = 2032;
                break;
            case 'Nebulae':
                newPlace._classification = 523264;
                break;
            case 'Galactic':
                newPlace._classification = 133693440;
                break;
            case 'Other':
                newPlace._classification = 436207616;
                break;
            default:
                break;
        }
    }
    if (place.attributes.getNamedItem('Magnitude') != null) {
        newPlace._magnitude = parseFloat(place.attributes.getNamedItem('Magnitude').nodeValue);
    }
    if (place.attributes.getNamedItem('AngularSize') != null) {
        newPlace.angularSize = parseFloat(place.attributes.getNamedItem('AngularSize').nodeValue);
    }
    if (place.attributes.getNamedItem('ZoomLevel') != null) {
        newPlace.set_zoomLevel(parseFloat(place.attributes.getNamedItem('ZoomLevel').nodeValue));
    }
    if (place.attributes.getNamedItem('Rotation') != null) {
        newPlace._camParams.rotation = parseFloat(place.attributes.getNamedItem('Rotation').nodeValue);
    }
    if (place.attributes.getNamedItem('Angle') != null) {
        newPlace._camParams.angle = parseFloat(place.attributes.getNamedItem('Angle').nodeValue);
    }
    if (place.attributes.getNamedItem('Opacity') != null) {
        newPlace._camParams.opacity = parseFloat(place.attributes.getNamedItem('Opacity').nodeValue);
    }
    else {
        newPlace._camParams.opacity = 100;
    }
    newPlace.set_target(65536);
    if (place.attributes.getNamedItem('Target') != null) {
        switch (place.attributes.getNamedItem('Target').nodeValue) {
            case 'Sun':
                newPlace.set_target(0);
                break;
            case 'Mercury':
                newPlace.set_target(1);
                break;
            case 'Venus':
                newPlace.set_target(2);
                break;
            case 'Mars':
                newPlace.set_target(3);
                break;
            case 'Jupiter':
                newPlace.set_target(4);
                break;
            case 'Saturn':
                newPlace.set_target(5);
                break;
            case 'Uranus':
                newPlace.set_target(6);
                break;
            case 'Neptune':
                newPlace.set_target(7);
                break;
            case 'Pluto':
                newPlace.set_target(8);
                break;
            case 'Moon':
                newPlace.set_target(9);
                break;
            case 'Io':
                newPlace.set_target(10);
                break;
            case 'Europa':
                newPlace.set_target(11);
                break;
            case 'Ganymede':
                newPlace.set_target(12);
                break;
            case 'Callisto':
                newPlace.set_target(13);
                break;
            case 'IoShadow':
                newPlace.set_target(14);
                break;
            case 'EuropaShadow':
                newPlace.set_target(15);
                break;
            case 'GanymedeShadow':
                newPlace.set_target(16);
                break;
            case 'CallistoShadow':
                newPlace.set_target(17);
                break;
            case 'SunEclipsed':
                newPlace.set_target(18);
                break;
            case 'Earth':
                newPlace.set_target(19);
                break;
            case 'Custom':
                newPlace.set_target(20);
                break;
            case 'Undefined':
                newPlace.set_target(65536);
                break;
            default:
                break;
        }
    }
    if (place.attributes.getNamedItem('ViewTarget') != null) {
        newPlace._camParams.viewTarget = wwtlib.Vector3d.parse(place.attributes.getNamedItem('ViewTarget').nodeValue);
    }
    var descriptionNode = wwtlib._util.selectSingleNode(place, 'Description');
    if (descriptionNode != null) {
        newPlace.htmlDescription = descriptionNode.nodeValue;
    }
    var backgroundImageSet = wwtlib._util.selectSingleNode(place, 'BackgroundImageSet');
    if (backgroundImageSet != null) {
        var imageSet = wwtlib._util.selectSingleNode(backgroundImageSet, 'ImageSet');
        newPlace._backgroundImageSet = wwtlib.Imageset.fromXMLNode(imageSet);
    }
    var study = wwtlib._util.selectSingleNode(place, 'ForegroundImageSet');
    if (study != null) {
        var imageSet = wwtlib._util.selectSingleNode(study, 'ImageSet');
        newPlace._studyImageset = wwtlib.Imageset.fromXMLNode(imageSet);
    }
    study = wwtlib._util.selectSingleNode(place, 'ImageSet');
    if (study != null) {
        newPlace._studyImageset = wwtlib.Imageset.fromXMLNode(study);
    }
    return newPlace;
}
wwtlib.Place._properCaps = function wwtlib_Place$_properCaps(name) {
    /// <param name="name" type="String">
    /// </param>
    /// <returns type="String"></returns>
    var list = name.split(' ');
    var ProperName = '';
    var $enum1 = ss.IEnumerator.getEnumerator(list);
    while ($enum1.moveNext()) {
        var part = $enum1.current;
        ProperName = ProperName + part.substr(0, 1).toUpperCase() + ((part.length > 1) ? part.substr(1).toLowerCase() : '') + ' ';
    }
    return ProperName.trim();
}
wwtlib.Place.prototype = {
    _tag: null,
    
    get_tag: function wwtlib_Place$get_tag() {
        /// <value type="Object"></value>
        return this._tag;
    },
    set_tag: function wwtlib_Place$set_tag(value) {
        /// <value type="Object"></value>
        this._tag = value;
        return value;
    },
    
    _url: null,
    
    get_url: function wwtlib_Place$get_url() {
        /// <value type="String"></value>
        return this._url;
    },
    set_url: function wwtlib_Place$set_url(value) {
        /// <value type="String"></value>
        this._url = value;
        return value;
    },
    
    _thumbnail: null,
    
    get_thumbnail: function wwtlib_Place$get_thumbnail() {
        /// <value type="Object" domElement="true"></value>
        return this._thumbnail;
    },
    set_thumbnail: function wwtlib_Place$set_thumbnail(value) {
        /// <value type="Object" domElement="true"></value>
        this._thumbnail = value;
        return value;
    },
    
    _name: null,
    
    get_name: function wwtlib_Place$get_name() {
        /// <value type="String"></value>
        return this.get_names()[0];
    },
    
    get_names: function wwtlib_Place$get_names() {
        /// <value type="Array" elementType="String"></value>
        if (String.isNullOrEmpty(this._name)) {
            return ''.split(';');
        }
        return this._name.split(';');
    },
    set_names: function wwtlib_Place$set_names(value) {
        /// <value type="Array" elementType="String"></value>
        this._name = wwtlib.UiTools.getNamesStringFromArray(value);
        return value;
    },
    
    get_camParams: function wwtlib_Place$get_camParams() {
        /// <value type="wwtlib.CameraParameters"></value>
        if (this.get_classification() === 536870912 && this._camParams.target !== 20) {
            var raDec = wwtlib.Planets.getPlanetLocation(this.get_name());
            this._camParams.set_RA(raDec.RA);
            this._camParams.set_dec(raDec.dec);
            this._distnace = raDec.distance;
        }
        return this._camParams;
    },
    set_camParams: function wwtlib_Place$set_camParams(value) {
        /// <value type="wwtlib.CameraParameters"></value>
        this._camParams = value;
        return value;
    },
    
    updatePlanetLocation: function wwtlib_Place$updatePlanetLocation(jNow) {
        /// <param name="jNow" type="Number">
        /// </param>
        this._camParams.viewTarget = wwtlib.Planets.getPlanet3dLocationJD(this.get_target(), jNow);
        if (this.get_target() !== 65536 && this.get_target() !== 20) {
            this._camParams.viewTarget = wwtlib.Planets.getPlanetTargetPoint(this.get_target(), this.get_lat(), this.get_lng(), jNow);
        }
    },
    
    get_location3d: function wwtlib_Place$get_location3d() {
        /// <value type="wwtlib.Vector3d"></value>
        if (this.get_classification() === 536870912 || (!this._location3d.x && !this._location3d.y && !this._location3d.z)) {
            this._location3d = wwtlib.Coordinates.raDecTo3d(this.get_RA(), this.get_dec());
        }
        return this._location3d;
    },
    
    get_lat: function wwtlib_Place$get_lat() {
        /// <value type="Number"></value>
        return this.get_camParams().lat;
    },
    set_lat: function wwtlib_Place$set_lat(value) {
        /// <value type="Number"></value>
        this._camParams.lat = value;
        return value;
    },
    
    get_lng: function wwtlib_Place$get_lng() {
        /// <value type="Number"></value>
        return this.get_camParams().lng;
    },
    set_lng: function wwtlib_Place$set_lng(value) {
        /// <value type="Number"></value>
        this._camParams.lng = value;
        return value;
    },
    
    get_opacity: function wwtlib_Place$get_opacity() {
        /// <value type="Number"></value>
        return this.get_camParams().opacity;
    },
    set_opacity: function wwtlib_Place$set_opacity(value) {
        /// <value type="Number"></value>
        this._camParams.opacity = value;
        return value;
    },
    
    htmlDescription: '',
    _constellation: '',
    
    get_constellation: function wwtlib_Place$get_constellation() {
        /// <value type="String"></value>
        return this._constellation;
    },
    set_constellation: function wwtlib_Place$set_constellation(value) {
        /// <value type="String"></value>
        this._constellation = value;
        return value;
    },
    
    get_classification: function wwtlib_Place$get_classification() {
        /// <value type="wwtlib.Classification"></value>
        return this._classification;
    },
    set_classification: function wwtlib_Place$set_classification(value) {
        /// <value type="wwtlib.Classification"></value>
        this._classification = value;
        return value;
    },
    
    get_type: function wwtlib_Place$get_type() {
        /// <value type="wwtlib.ImageSetType"></value>
        return this._type;
    },
    set_type: function wwtlib_Place$set_type(value) {
        /// <value type="wwtlib.ImageSetType"></value>
        this._type = value;
        return value;
    },
    
    _magnitude: 0,
    
    get_magnitude: function wwtlib_Place$get_magnitude() {
        /// <value type="Number"></value>
        return this._magnitude;
    },
    set_magnitude: function wwtlib_Place$set_magnitude(value) {
        /// <value type="Number"></value>
        this._magnitude = value;
        return value;
    },
    
    _distnace: 0,
    
    get_distance: function wwtlib_Place$get_distance() {
        /// <value type="Number"></value>
        return this._distnace;
    },
    set_distance: function wwtlib_Place$set_distance(value) {
        /// <value type="Number"></value>
        this._distnace = value;
        return value;
    },
    
    angularSize: 60,
    
    get_zoomLevel: function wwtlib_Place$get_zoomLevel() {
        /// <value type="Number"></value>
        return this.get_camParams().zoom;
    },
    set_zoomLevel: function wwtlib_Place$set_zoomLevel(value) {
        /// <value type="Number"></value>
        this._camParams.zoom = value;
        return value;
    },
    
    _thumbNail: null,
    _studyImageset: null,
    
    get_studyImageset: function wwtlib_Place$get_studyImageset() {
        /// <value type="wwtlib.Imageset"></value>
        return this._studyImageset;
    },
    set_studyImageset: function wwtlib_Place$set_studyImageset(value) {
        /// <value type="wwtlib.Imageset"></value>
        this._studyImageset = value;
        return value;
    },
    
    _backgroundImageSet: null,
    
    get_backgroundImageset: function wwtlib_Place$get_backgroundImageset() {
        /// <value type="wwtlib.Imageset"></value>
        return this._backgroundImageSet;
    },
    set_backgroundImageset: function wwtlib_Place$set_backgroundImageset(value) {
        /// <value type="wwtlib.Imageset"></value>
        if (value != null) {
            this.set_type(value.get_dataSetType());
        }
        this._backgroundImageSet = value;
        return value;
    },
    
    _searchDistance: 0,
    
    get_searchDistance: function wwtlib_Place$get_searchDistance() {
        /// <value type="Number"></value>
        return this._searchDistance;
    },
    set_searchDistance: function wwtlib_Place$set_searchDistance(value) {
        /// <value type="Number"></value>
        this._searchDistance = value;
        return value;
    },
    
    _elevation: 50,
    
    get_elevation: function wwtlib_Place$get_elevation() {
        /// <value type="Number"></value>
        return this._elevation;
    },
    set_elevation: function wwtlib_Place$set_elevation(value) {
        /// <value type="Number"></value>
        this._elevation = value;
        return value;
    },
    
    _thumbnailField: null,
    
    get_thumbnailUrl: function wwtlib_Place$get_thumbnailUrl() {
        /// <value type="String"></value>
        if (String.isNullOrEmpty(this._thumbnailField)) {
            if (this._studyImageset != null && !String.isNullOrEmpty(this._studyImageset.get_thumbnailUrl())) {
                return this._studyImageset.get_thumbnailUrl();
            }
            if (this._backgroundImageSet != null && !String.isNullOrEmpty(this._backgroundImageSet.get_thumbnailUrl())) {
                return this._backgroundImageSet.get_thumbnailUrl();
            }
            var name = this.get_name();
            if (name.indexOf(';') > -1) {
                name = name.substr(0, name.indexOf(';'));
            }
            if (this.get_classification() === 1) {
                return 'http://cdn.worldwidetelescope.org/wwtweb/thumbnail.aspx?name=star';
            }
            return 'http://cdn.worldwidetelescope.org/wwtweb/thumbnail.aspx?name=' + name.toLowerCase();
        }
        return this._thumbnailField;
    },
    set_thumbnailUrl: function wwtlib_Place$set_thumbnailUrl(value) {
        /// <value type="String"></value>
        this._thumbnailField = value;
        return value;
    },
    
    get_RA: function wwtlib_Place$get_RA() {
        /// <value type="Number"></value>
        return this.get_camParams().get_RA();
    },
    set_RA: function wwtlib_Place$set_RA(value) {
        /// <value type="Number"></value>
        this._camParams.set_RA(value);
        return value;
    },
    
    get_dec: function wwtlib_Place$get_dec() {
        /// <value type="Number"></value>
        return this.get_camParams().get_dec();
    },
    set_dec: function wwtlib_Place$set_dec(value) {
        /// <value type="Number"></value>
        this._camParams.set_dec(value);
        return value;
    },
    
    toString: function wwtlib_Place$toString() {
        /// <returns type="String"></returns>
        return this._name;
    },
    
    _bounds: null,
    
    get_bounds: function wwtlib_Place$get_bounds() {
        /// <value type="wwtlib.Rectangle"></value>
        return this._bounds;
    },
    set_bounds: function wwtlib_Place$set_bounds(value) {
        /// <value type="wwtlib.Rectangle"></value>
        this._bounds = value;
        return value;
    },
    
    get_isImage: function wwtlib_Place$get_isImage() {
        /// <value type="Boolean"></value>
        return this._studyImageset != null || this._backgroundImageSet != null;
    },
    
    get_isTour: function wwtlib_Place$get_isTour() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_isFolder: function wwtlib_Place$get_isFolder() {
        /// <value type="Boolean"></value>
        return false;
    },
    
    get_children: function wwtlib_Place$get_children() {
        /// <value type="Array"></value>
        return [];
    },
    
    get_readOnly: function wwtlib_Place$get_readOnly() {
        /// <value type="Boolean"></value>
        return true;
    },
    
    get_target: function wwtlib_Place$get_target() {
        /// <value type="wwtlib.SolarSystemObjects"></value>
        return this._camParams.target;
    },
    set_target: function wwtlib_Place$set_target(value) {
        /// <value type="wwtlib.SolarSystemObjects"></value>
        this._camParams.target = value;
        return value;
    },
    
    get_isCloudCommunityItem: function wwtlib_Place$get_isCloudCommunityItem() {
        /// <value type="Boolean"></value>
        return false;
    }
}


////////////////////////////////////////////////////////////////////////////////
// wwtlib.Class1

wwtlib.Class1 = function wwtlib_Class1() {
}


GFX.registerClass('GFX');
ABR.registerClass('ABR');
ACFT.registerClass('ACFT');
ASEP.registerClass('ASEP');
COR.registerClass('COR');
C3D.registerClass('C3D');
CT.registerClass('CT');
CalD.registerClass('CalD');
DT.registerClass('DT');
DYT.registerClass('DYT');
CAAEarth.registerClass('CAAEarth');
VSC.registerClass('VSC');
CAAEclipticalElementDetails.registerClass('CAAEclipticalElementDetails');
CAAEclipticalElements.registerClass('CAAEclipticalElements');
EPO.registerClass('EPO');
EOE.registerClass('EOE');
EPD.registerClass('EPD');
EOD.registerClass('EOD');
ELL.registerClass('ELL');
EOT.registerClass('EOT');
CAAFK5.registerClass('CAAFK5');
GMD.registerClass('GMD');
GMDS.registerClass('GMDS');
GM.registerClass('GM');
CAAGlobe.registerClass('CAAGlobe');
IFR.registerClass('IFR');
INTP.registerClass('INTP');
CAAJupiter.registerClass('CAAJupiter');
CAAKepler.registerClass('CAAKepler');
CAAMars.registerClass('CAAMars');
CAAMercury.registerClass('CAAMercury');
CAAMoon.registerClass('CAAMoon');
MoonCoefficient1.registerClass('MoonCoefficient1');
MoonCoefficient2.registerClass('MoonCoefficient2');
MIFR.registerClass('MIFR');
CAAMoonNodes.registerClass('CAAMoonNodes');
CAAMoonPerigeeApogee.registerClass('CAAMoonPerigeeApogee');
MPAC.registerClass('MPAC');
CAAMoonPhases.registerClass('CAAMoonPhases');
CAANeptune.registerClass('CAANeptune');
CAANutation.registerClass('CAANutation');
NUC.registerClass('NUC');
CAATopocentricEclipticDetails.registerClass('CAATopocentricEclipticDetails');
CAAParallax.registerClass('CAAParallax');
CAAPhysicalJupiterDetails.registerClass('CAAPhysicalJupiterDetails');
CAAPhysicalJupiter.registerClass('CAAPhysicalJupiter');
CAAPhysicalMarsDetails.registerClass('CAAPhysicalMarsDetails');
CAAPhysicalMars.registerClass('CAAPhysicalMars');
CAAPhysicalSunDetails.registerClass('CAAPhysicalSunDetails');
CAAPhysicalSun.registerClass('CAAPhysicalSun');
CAAPluto.registerClass('CAAPluto');
PlutoCoefficient1.registerClass('PlutoCoefficient1');
PlutoCoefficient2.registerClass('PlutoCoefficient2');
CAAPrecession.registerClass('CAAPrecession');
CAARiseTransitSetDetails.registerClass('CAARiseTransitSetDetails');
CAARiseTransitSet.registerClass('CAARiseTransitSet');
CAASaturn.registerClass('CAASaturn');
CAASaturnRingDetails.registerClass('CAASaturnRingDetails');
CAASaturnRings.registerClass('CAASaturnRings');
CAASidereal.registerClass('CAASidereal');
CAAStellarMagnitudes.registerClass('CAAStellarMagnitudes');
CAASun.registerClass('CAASun');
CAAUranus.registerClass('CAAUranus');
CAAVenus.registerClass('CAAVenus');
wwtlib.AstroRaDec.registerClass('wwtlib.AstroRaDec');
wwtlib.RiseSetDetails.registerClass('wwtlib.RiseSetDetails');
wwtlib.AstroCalc.registerClass('wwtlib.AstroCalc');
wwtlib._positionVertexBuffer.registerClass('wwtlib._positionVertexBuffer');
wwtlib._positionTextureVertexBuffer.registerClass('wwtlib._positionTextureVertexBuffer');
wwtlib._timeSeriesLineVertexBuffer.registerClass('wwtlib._timeSeriesLineVertexBuffer');
wwtlib._timeSeriesPointVertexBuffer.registerClass('wwtlib._timeSeriesPointVertexBuffer');
wwtlib.Dates.registerClass('wwtlib.Dates');
wwtlib.SimpleLineList.registerClass('wwtlib.SimpleLineList');
wwtlib.LineList.registerClass('wwtlib.LineList');
wwtlib.TriangleList.registerClass('wwtlib.TriangleList');
wwtlib.PointList.registerClass('wwtlib.PointList');
wwtlib.TimeSeriesLineVertex.registerClass('wwtlib.TimeSeriesLineVertex');
wwtlib.TimeSeriesPointVertex.registerClass('wwtlib.TimeSeriesPointVertex');
wwtlib.SimpleLineShader.registerClass('wwtlib.SimpleLineShader');
wwtlib.LineShaderNormalDates.registerClass('wwtlib.LineShaderNormalDates');
wwtlib.TimeSeriesPointSpriteShader.registerClass('wwtlib.TimeSeriesPointSpriteShader');
wwtlib.TileShader.registerClass('wwtlib.TileShader');
wwtlib.TextShader.registerClass('wwtlib.TextShader');
wwtlib.Tessellator.registerClass('wwtlib.Tessellator');
wwtlib.Texture.registerClass('wwtlib.Texture');
wwtlib.Grids.registerClass('wwtlib.Grids');
wwtlib.Layer.registerClass('wwtlib.Layer');
wwtlib.GreatCirlceRouteLayer.registerClass('wwtlib.GreatCirlceRouteLayer', wwtlib.Layer);
wwtlib.ImageSetLayer.registerClass('wwtlib.ImageSetLayer', wwtlib.Layer);
wwtlib._layerCollection.registerClass('wwtlib._layerCollection', wwtlib.Layer);
wwtlib.DomainValue.registerClass('wwtlib.DomainValue');
wwtlib.LayerManager.registerClass('wwtlib.LayerManager');
wwtlib.LayerMap.registerClass('wwtlib.LayerMap');
wwtlib.LayerUI.registerClass('wwtlib.LayerUI');
wwtlib.LayerUIMenuItem.registerClass('wwtlib.LayerUIMenuItem');
wwtlib.LayerUITreeNode.registerClass('wwtlib.LayerUITreeNode');
wwtlib.Orbit.registerClass('wwtlib.Orbit');
wwtlib.ReferenceFrame.registerClass('wwtlib.ReferenceFrame');
wwtlib.TimeSeriesLayer.registerClass('wwtlib.TimeSeriesLayer', wwtlib.Layer);
wwtlib._spreadSheetLayer.registerClass('wwtlib._spreadSheetLayer', wwtlib.TimeSeriesLayer);
wwtlib.KmlCoordinate.registerClass('wwtlib.KmlCoordinate');
wwtlib.KmlLineList.registerClass('wwtlib.KmlLineList');
wwtlib._table.registerClass('wwtlib._table');
wwtlib.Planets.registerClass('wwtlib.Planets');
wwtlib.Tile.registerClass('wwtlib.Tile');
wwtlib.PlotTile.registerClass('wwtlib.PlotTile', wwtlib.Tile);
wwtlib.RenderContext.registerClass('wwtlib.RenderContext');
wwtlib.RenderTriangle.registerClass('wwtlib.RenderTriangle');
wwtlib.ScriptInterface.registerClass('wwtlib.ScriptInterface');
wwtlib.SlideChangedEventArgs.registerClass('wwtlib.SlideChangedEventArgs', ss.EventArgs);
wwtlib.ArrivedEventArgs.registerClass('wwtlib.ArrivedEventArgs', ss.EventArgs);
wwtlib.AnnotationClickEventArgs.registerClass('wwtlib.AnnotationClickEventArgs', ss.EventArgs);
wwtlib.CollectionLoadedEventArgs.registerClass('wwtlib.CollectionLoadedEventArgs', ss.EventArgs);
wwtlib.Settings.registerClass('wwtlib.Settings', null, wwtlib.ISettings);
wwtlib.SkyImageTile.registerClass('wwtlib.SkyImageTile', wwtlib.Tile);
wwtlib.Text3dBatch.registerClass('wwtlib.Text3dBatch');
wwtlib.GlyphItem.registerClass('wwtlib.GlyphItem');
wwtlib.GlyphCache.registerClass('wwtlib.GlyphCache', null, ss.IDisposable);
wwtlib.Text3d.registerClass('wwtlib.Text3d');
wwtlib.SpaceTimeController.registerClass('wwtlib.SpaceTimeController');
wwtlib.Star.registerClass('wwtlib.Star');
wwtlib.TangentTile.registerClass('wwtlib.TangentTile', wwtlib.Tile);
wwtlib._tileCache.registerClass('wwtlib._tileCache');
wwtlib.ToastTile.registerClass('wwtlib.ToastTile', wwtlib.Tile);
wwtlib._distanceCalc.registerClass('wwtlib._distanceCalc');
wwtlib.Tour.registerClass('wwtlib.Tour', null, wwtlib.IThumbnail);
wwtlib.SettingParameter.registerClass('wwtlib.SettingParameter');
wwtlib.Overlay.registerClass('wwtlib.Overlay');
wwtlib.BitmapOverlay.registerClass('wwtlib.BitmapOverlay', wwtlib.Overlay);
wwtlib.TextOverlay.registerClass('wwtlib.TextOverlay', wwtlib.Overlay);
wwtlib.ShapeOverlay.registerClass('wwtlib.ShapeOverlay', wwtlib.Overlay);
wwtlib.AudioOverlay.registerClass('wwtlib.AudioOverlay', wwtlib.Overlay);
wwtlib.FlipbookOverlay.registerClass('wwtlib.FlipbookOverlay', wwtlib.Overlay);
wwtlib.TextObject.registerClass('wwtlib.TextObject');
wwtlib.TourDocument.registerClass('wwtlib.TourDocument');
wwtlib.TourPlayer.registerClass('wwtlib.TourPlayer', null, wwtlib.IUiController);
wwtlib.MasterTime.registerClass('wwtlib.MasterTime');
wwtlib.TourStop.registerClass('wwtlib.TourStop', null, wwtlib.ISettings);
wwtlib.LayerInfo.registerClass('wwtlib.LayerInfo');
wwtlib._triangle.registerClass('wwtlib._triangle');
wwtlib.UiTools.registerClass('wwtlib.UiTools');
wwtlib._util.registerClass('wwtlib._util');
wwtlib.Rectangle.registerClass('wwtlib.Rectangle');
wwtlib.Guid.registerClass('wwtlib.Guid');
wwtlib.Mouse.registerClass('wwtlib.Mouse');
wwtlib.VizLayer.registerClass('wwtlib.VizLayer');
wwtlib.DataItem.registerClass('wwtlib.DataItem');
wwtlib.WebFile.registerClass('wwtlib.WebFile');
wwtlib._wtml.registerClass('wwtlib._wtml');
wwtlib.WWTControl.registerClass('wwtlib.WWTControl');
wwtlib.WWTElementEvent.registerClass('wwtlib.WWTElementEvent');
wwtlib.Annotation.registerClass('wwtlib.Annotation');
wwtlib.Circle.registerClass('wwtlib.Circle', wwtlib.Annotation);
wwtlib.Poly.registerClass('wwtlib.Poly', wwtlib.Annotation);
wwtlib.PolyLine.registerClass('wwtlib.PolyLine', wwtlib.Annotation);
wwtlib.BlendState.registerClass('wwtlib.BlendState');
wwtlib.CameraParameters.registerClass('wwtlib.CameraParameters');
wwtlib.Color.registerClass('wwtlib.Color');
wwtlib.Colors.registerClass('wwtlib.Colors');
wwtlib.Constellations.registerClass('wwtlib.Constellations');
wwtlib.Lineset.registerClass('wwtlib.Lineset');
wwtlib.Linepoint.registerClass('wwtlib.Linepoint');
wwtlib.ConstellationFilter.registerClass('wwtlib.ConstellationFilter');
wwtlib.Coordinates.registerClass('wwtlib.Coordinates');
wwtlib.PositionTexture.registerClass('wwtlib.PositionTexture');
wwtlib.PositionColoredTextured.registerClass('wwtlib.PositionColoredTextured');
wwtlib.Vector3d.registerClass('wwtlib.Vector3d');
wwtlib.Vector2d.registerClass('wwtlib.Vector2d');
wwtlib.Matrix3d.registerClass('wwtlib.Matrix3d');
wwtlib.Matrix2d.registerClass('wwtlib.Matrix2d');
wwtlib.DoubleUtilities.registerClass('wwtlib.DoubleUtilities');
wwtlib.PlaneD.registerClass('wwtlib.PlaneD');
wwtlib.Vector4d.registerClass('wwtlib.Vector4d');
wwtlib.PositionNormalTexturedX2.registerClass('wwtlib.PositionNormalTexturedX2');
wwtlib.SphereHull.registerClass('wwtlib.SphereHull');
wwtlib.ConvexHull.registerClass('wwtlib.ConvexHull');
wwtlib.EquirectangularTile.registerClass('wwtlib.EquirectangularTile', wwtlib.Tile);
wwtlib.Folder.registerClass('wwtlib.Folder', null, wwtlib.IThumbnail);
wwtlib.FolderBrowser.registerClass('wwtlib.FolderBrowser');
wwtlib._folderUp.registerClass('wwtlib._folderUp', null, wwtlib.IThumbnail);
wwtlib.Imageset.registerClass('wwtlib.Imageset', null, wwtlib.IThumbnail);
wwtlib.ViewMoverKenBurnsStyle.registerClass('wwtlib.ViewMoverKenBurnsStyle', null, wwtlib.IViewMover);
wwtlib._viewMoverSlew.registerClass('wwtlib._viewMoverSlew', null, wwtlib.IViewMover);
wwtlib.MercatorTile.registerClass('wwtlib.MercatorTile', wwtlib.Tile);
wwtlib.Place.registerClass('wwtlib.Place', null, wwtlib.IThumbnail, wwtlib.IPlace);
wwtlib.Class1.registerClass('wwtlib.Class1');
GFX.g_ACft = [ new ACFT(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1719914, -2, -25, 0, 25, -13, 1578089, 156, 10, 32, 684185, -358), new ACFT(0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6434, 141, 28007, -107, 25697, -95, -5904, -130, 11141, -48, -2559, -55), new ACFT(0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 715, 0, 0, 0, 6, 0, -657, 0, -15, 0, -282, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 715, 0, 0, 0, 0, 0, -656, 0, 0, 0, -285, 0), new ACFT(0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 486, -5, -236, -4, -216, -4, -446, 5, -94, 0, -193, 0), new ACFT(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 2, 0, -147, 0, -6, 0, -61, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, -59, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 39, 0, 0, 0, 0, 0, -36, 0, 0, 0, -16, 0), new ACFT(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 33, 0, -10, 0, -9, 0, -30, 0, -5, 0, -13, 0), new ACFT(0, 2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 31, 0, 1, 0, 1, 0, -28, 0, 0, 0, -12, 0), new ACFT(0, 3, -8, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, -28, 0, 25, 0, 8, 0, 11, 0, 3, 0), new ACFT(0, 5, -8, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, -28, 0, -25, 0, -8, 0, -11, 0, -3, 0), new ACFT(2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, -19, 0, 0, 0, -8, 0), new ACFT(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 17, 0, 0, 0, 8, 0), new ACFT(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, -16, 0, 0, 0, -7, 0), new ACFT(0, 1, 0, -2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 1, 0, 7, 0), new ACFT(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, -15, 0, -3, 0, -6, 0), new ACFT(0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, -1, 0, -1, 0, -10, 0, -1, 0, -5, 0), new ACFT(2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, -10, 0, 0, 0, -4, 0, 0, 0), new ACFT(0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -11, 0, -2, 0, -2, 0, 9, 0, -1, 0, 4, 0), new ACFT(0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, -8, 0, -8, 0, 6, 0, -3, 0, 3, 0), new ACFT(0, 3, 0, -2, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0), new ACFT(1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, -9, 0, 0, 0, -4, 0), new ACFT(2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, -8, 0, 0, 0, -4, 0), new ACFT(0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, -8, 0, 0, 0, -3, 0, 0, 0), new ACFT(2, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 8, 0, 0, 0, 3, 0, 0, 0), new ACFT(0, 3, -2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, -8, 0, 0, 0, -3, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 1, 2, -1, 0, 8, 0, 0, 0, 0, 0, -7, 0, 0, 0, -3, 0), new ACFT(8, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -7, 0, -6, 0, 4, 0, -3, 0, 2, 0), new ACFT(8, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -7, 0, 6, 0, -4, 0, 3, 0, -2, 0), new ACFT(0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, -5, 0, -4, 0, 5, 0, -2, 0, 2, 0), new ACFT(3, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -2, 0, -7, 0, 1, 0, -4, 0), new ACFT(0, 2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 4, 0, -6, 0, -5, 0, -4, 0, -2, 0, -2, 0), new ACFT(3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, -6, 0, 0, 0, -3, 0, 0, 0), new ACFT(0, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, -5, 0, -4, 0, -5, 0, -2, 0, -2, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 1, -2, 0, 0, 5, 0, 0, 0, 0, 0, -5, 0, 0, 0, -2, 0) ];
GFX.deltaTTable = [ 121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46, 44, 42, 40, 38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12, 11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7, 1.4, -1.2, -2.8, -3.8, -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6, -6.3, -6.5, -6.2, -4.7, -2.8, -0.1, 2.6, 5.3, 7.7, 10.4, 13.3, 16, 18.2, 20.2, 21.2, 22.4, 23.5, 23.8, 24.3, 24, 23.9, 23.9, 23.7, 24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4, 32.2, 33.1, 34, 35, 36.5, 38.3, 40.18, 42.2, 44.5, 46.5, 48.5, 50.54, 52.2, 53.8, 54.9, 55.8, 56.86, 58.31, 59.99, 61.63, 62.97 ];
GFX.g_L0EarthCoefficients = [ new VSC(175347046, 0, 0), new VSC(3341656, 4.6692568, 6283.07585), new VSC(34894, 4.6261, 12566.1517), new VSC(3497, 2.7441, 5753.3849), new VSC(3418, 2.8289, 3.5231), new VSC(3136, 3.6277, 77713.7715), new VSC(2676, 4.4181, 7860.4194), new VSC(2343, 6.1352, 3930.2097), new VSC(1324, 0.7425, 11506.7698), new VSC(1273, 2.0371, 529.691), new VSC(1199, 1.1096, 1577.3435), new VSC(990, 5.233, 5884.927), new VSC(902, 2.045, 26.298), new VSC(857, 3.508, 398.149), new VSC(780, 1.179, 5223.694), new VSC(753, 2.533, 5507.553), new VSC(505, 4.583, 18849.228), new VSC(492, 4.205, 775.523), new VSC(357, 2.92, 0.067), new VSC(317, 5.849, 11790.629), new VSC(284, 1.899, 796.288), new VSC(271, 0.315, 10977.079), new VSC(243, 0.345, 5486.778), new VSC(206, 4.806, 2544.314), new VSC(205, 1.869, 5573.143), new VSC(202, 2.458, 6069.777), new VSC(156, 0.833, 213.299), new VSC(132, 3.411, 2942.463), new VSC(126, 1.083, 20.775), new VSC(115, 0.645, 0.98), new VSC(103, 0.636, 4694.003), new VSC(102, 0.976, 15720.839), new VSC(102, 4.267, 7.114), new VSC(99, 6.21, 2146.17), new VSC(98, 0.68, 155.42), new VSC(86, 5.98, 161000.69), new VSC(85, 1.3, 6275.96), new VSC(85, 3.67, 71430.7), new VSC(80, 1.81, 17260.15), new VSC(79, 3.04, 12036.46), new VSC(75, 1.76, 5088.63), new VSC(74, 3.5, 3154.69), new VSC(74, 4.68, 801.82), new VSC(70, 0.83, 9437.76), new VSC(62, 3.98, 8827.39), new VSC(61, 1.82, 7084.9), new VSC(57, 2.78, 6286.6), new VSC(56, 4.39, 14143.5), new VSC(56, 3.47, 6279.55), new VSC(52, 0.19, 12139.55), new VSC(52, 1.33, 1748.02), new VSC(51, 0.28, 5856.48), new VSC(49, 0.49, 1194.45), new VSC(41, 5.37, 8429.24), new VSC(41, 2.4, 19651.05), new VSC(39, 6.17, 10447.39), new VSC(37, 6.04, 10213.29), new VSC(37, 2.57, 1059.38), new VSC(36, 1.71, 2352.87), new VSC(36, 1.78, 6812.77), new VSC(33, 0.59, 17789.85), new VSC(30, 0.44, 83996.85), new VSC(30, 2.74, 1349.87), new VSC(25, 3.16, 4690.48) ];
GFX.g_L1EarthCoefficients = [ new VSC(628331966747, 0, 0), new VSC(206059, 2.678235, 6283.07585), new VSC(4303, 2.6351, 12566.1517), new VSC(425, 1.59, 3.523), new VSC(119, 5.796, 26.298), new VSC(109, 2.966, 1577.344), new VSC(93, 2.59, 18849.23), new VSC(72, 1.14, 529.69), new VSC(68, 1.87, 398.15), new VSC(67, 4.41, 5507.55), new VSC(59, 2.89, 5223.69), new VSC(56, 2.17, 155.42), new VSC(45, 0.4, 796.3), new VSC(36, 0.47, 775.52), new VSC(29, 2.65, 7.11), new VSC(21, 5.43, 0.98), new VSC(19, 1.85, 5486.78), new VSC(19, 4.97, 213.3), new VSC(17, 2.99, 6275.96), new VSC(16, 0.03, 2544.31), new VSC(16, 1.43, 2146.17), new VSC(15, 1.21, 10977.08), new VSC(12, 2.83, 1748.02), new VSC(12, 3.26, 5088.63), new VSC(12, 5.27, 1194.45), new VSC(12, 2.08, 4694), new VSC(11, 0.77, 553.57), new VSC(10, 1.3, 6286.6), new VSC(10, 4.24, 1349.87), new VSC(9, 2.7, 242.73), new VSC(9, 5.64, 951.72), new VSC(8, 5.3, 2352.87), new VSC(6, 2.65, 9437.76), new VSC(6, 4.67, 4690.48) ];
GFX.g_L2EarthCoefficients = [ new VSC(52919, 0, 0), new VSC(8720, 1.0721, 6283.0758), new VSC(309, 0.867, 12566.152), new VSC(27, 0.05, 3.52), new VSC(16, 5.19, 26.3), new VSC(16, 3.68, 155.42), new VSC(10, 0.76, 18849.23), new VSC(9, 2.06, 77713.77), new VSC(7, 0.83, 775.52), new VSC(5, 4.66, 1577.34), new VSC(4, 1.03, 7.11), new VSC(4, 3.44, 5573.14), new VSC(3, 5.14, 796.3), new VSC(3, 6.05, 5507.55), new VSC(3, 1.19, 242.73), new VSC(3, 6.12, 529.69), new VSC(3, 0.31, 398.15), new VSC(3, 2.28, 553.57), new VSC(2, 4.38, 5223.69), new VSC(2, 3.75, 0.98) ];
GFX.g_L3EarthCoefficients = [ new VSC(289, 5.844, 6283.076), new VSC(35, 0, 0), new VSC(17, 5.49, 12566.15), new VSC(3, 5.2, 155.42), new VSC(1, 4.72, 3.52), new VSC(1, 5.3, 18849.23), new VSC(1, 5.97, 242.73) ];
GFX.g_L4EarthCoefficients = [ new VSC(114, 3.142, 0), new VSC(8, 4.13, 6283.08), new VSC(1, 3.84, 12566.15) ];
GFX.g_L5EarthCoefficients = [ new VSC(1, 3.14, 0) ];
GFX.g_B0EarthCoefficients = [ new VSC(280, 3.199, 84334.662), new VSC(102, 5.422, 5507.553), new VSC(80, 3.88, 5223.69), new VSC(44, 3.7, 2352.87), new VSC(32, 4, 1577.34) ];
GFX.g_B1EarthCoefficients = [ new VSC(9, 3.9, 5507.55), new VSC(6, 1.73, 5223.69) ];
GFX.g_B2EarthCoefficients = [ new VSC(22378, 3.38509, 10213.28555), new VSC(282, 0, 0), new VSC(173, 5.256, 20426.571), new VSC(27, 3.87, 30639.86) ];
GFX.g_B3EarthCoefficients = [ new VSC(647, 4.992, 10213.286), new VSC(20, 3.14, 0), new VSC(6, 0.77, 20426.57), new VSC(3, 5.44, 30639.86) ];
GFX.g_B4EarthCoefficients = [ new VSC(14, 0.32, 10213.29) ];
GFX.g_R0EarthCoefficients = [ new VSC(100013989, 0, 0), new VSC(1670700, 3.0984635, 6283.07585), new VSC(13956, 3.05525, 12566.1517), new VSC(3084, 5.1985, 77713.7715), new VSC(1628, 1.1739, 5753.3849), new VSC(1576, 2.8469, 7860.4194), new VSC(925, 5.453, 11506.77), new VSC(542, 4.564, 3930.21), new VSC(472, 3.661, 5884.927), new VSC(346, 0.964, 5507.553), new VSC(329, 5.9, 5223.694), new VSC(307, 0.299, 5573.143), new VSC(243, 4.273, 11790.629), new VSC(212, 5.847, 1577.344), new VSC(186, 5.022, 10977.079), new VSC(175, 3.012, 18849.228), new VSC(110, 5.055, 5486.778), new VSC(98, 0.89, 6069.78), new VSC(86, 5.69, 15720.84), new VSC(86, 1.27, 161000.69), new VSC(65, 0.27, 17260.15), new VSC(63, 0.92, 529.69), new VSC(57, 2.01, 83996.85), new VSC(56, 5.24, 71430.7), new VSC(49, 3.25, 2544.31), new VSC(47, 2.58, 775.52), new VSC(45, 5.54, 9437.76), new VSC(43, 6.01, 6275.96), new VSC(39, 5.36, 4694), new VSC(38, 2.39, 8827.39), new VSC(37, 0.83, 19651.05), new VSC(37, 4.9, 12139.55), new VSC(36, 1.67, 12036.46), new VSC(35, 1.84, 2942.46), new VSC(33, 0.24, 7084.9), new VSC(32, 0.18, 5088.63), new VSC(32, 1.78, 398.15), new VSC(28, 1.21, 6286.6), new VSC(28, 1.9, 6279.55), new VSC(26, 4.59, 10447.39) ];
GFX.g_R1EarthCoefficients = [ new VSC(103019, 1.10749, 6283.07585), new VSC(1721, 1.0644, 12566.1517), new VSC(702, 3.142, 0), new VSC(32, 1.02, 18849.23), new VSC(31, 2.84, 5507.55), new VSC(25, 1.32, 5223.69), new VSC(18, 1.42, 1577.34), new VSC(10, 5.91, 10977.08), new VSC(9, 1.42, 6275.96), new VSC(9, 0.27, 5486.78) ];
GFX.g_R2EarthCoefficients = [ new VSC(4359, 5.7846, 6283.0758), new VSC(124, 5.579, 12566.152), new VSC(12, 3.14, 0), new VSC(9, 3.63, 77713.77), new VSC(6, 1.87, 5573.14), new VSC(3, 5.47, 18849.23) ];
GFX.g_R3EarthCoefficients = [ new VSC(145, 4.273, 6283.076), new VSC(7, 3.92, 12566.15) ];
GFX.g_R4EarthCoefficients = [ new VSC(4, 2.56, 6283.08) ];
GFX.g_L1EarthCoefficientsJ2000 = [ new VSC(628307584999, 0, 0), new VSC(206059, 2.678235, 6283.07585), new VSC(4303, 2.6351, 12566.1517), new VSC(425, 1.59, 3.523), new VSC(119, 5.796, 26.298), new VSC(109, 2.966, 1577.344), new VSC(93, 2.59, 18849.23), new VSC(72, 1.14, 529.69), new VSC(68, 1.87, 398.15), new VSC(67, 4.41, 5507.55), new VSC(59, 2.89, 5223.69), new VSC(56, 2.17, 155.42), new VSC(45, 0.4, 796.3), new VSC(36, 0.47, 775.52), new VSC(29, 2.65, 7.11), new VSC(21, 5.43, 0.98), new VSC(19, 1.85, 5486.78), new VSC(19, 4.97, 213.3), new VSC(17, 2.99, 6275.96), new VSC(16, 0.03, 2544.31), new VSC(16, 1.43, 2146.17), new VSC(15, 1.21, 10977.08), new VSC(12, 2.83, 1748.02), new VSC(12, 3.26, 5088.63), new VSC(12, 5.27, 1194.45), new VSC(12, 2.08, 4694), new VSC(11, 0.77, 553.57), new VSC(10, 1.3, 6286.6), new VSC(10, 4.24, 1349.87), new VSC(9, 2.7, 242.73), new VSC(9, 5.64, 951.72), new VSC(8, 5.3, 2352.87), new VSC(6, 2.65, 9437.76), new VSC(6, 4.67, 4690.48) ];
GFX.g_L2EarthCoefficientsJ2000 = [ new VSC(8722, 1.0725, 6283.0758), new VSC(991, 3.1416, 0), new VSC(295, 0.437, 12566.152), new VSC(27, 0.05, 3.52), new VSC(16, 5.19, 26.3), new VSC(16, 3.69, 155.42), new VSC(9, 0.3, 18849.23), new VSC(9, 2.06, 77713.77), new VSC(7, 0.83, 775.52), new VSC(5, 4.66, 1577.34), new VSC(4, 1.03, 7.11), new VSC(4, 3.44, 5573.14), new VSC(3, 5.14, 796.3), new VSC(3, 6.05, 5507.55), new VSC(3, 1.19, 242.73), new VSC(3, 6.12, 529.69), new VSC(3, 0.3, 398.15), new VSC(3, 2.28, 553.57), new VSC(2, 4.38, 5223.69), new VSC(2, 3.75, 0.98) ];
GFX.g_L3EarthCoefficientsJ2000 = [ new VSC(289, 5.842, 6283.076), new VSC(21, 6.05, 12566.15), new VSC(3, 5.2, 155.42), new VSC(3, 3.14, 0), new VSC(1, 4.72, 3.52), new VSC(1, 5.97, 242.73), new VSC(1, 5.54, 18849.23) ];
GFX.g_L4EarthCoefficientsJ2000 = [ new VSC(8, 4.14, 6283.08), new VSC(1, 3.28, 12566.15) ];
GFX.g_B1EarthCoefficientsJ2000 = [ new VSC(227778, 3.413766, 6283.07585), new VSC(3806, 3.3706, 12566.1517), new VSC(3620, 0, 0), new VSC(72, 3.33, 18849.23), new VSC(8, 3.89, 5507.55), new VSC(8, 1.79, 5223.69), new VSC(6, 5.2, 2352.87) ];
GFX.g_B2EarthCoefficientsJ2000 = [ new VSC(9721, 5.1519, 6283.07585), new VSC(233, 3.1416, 0), new VSC(134, 0.644, 12566.152), new VSC(7, 1.07, 18849.23) ];
GFX.g_B3EarthCoefficientsJ2000 = [ new VSC(276, 0.595, 6283.076), new VSC(17, 3.14, 0), new VSC(4, 0.12, 12566.15) ];
GFX.g_B4EarthCoefficientsJ2000 = [ new VSC(6, 2.27, 6283.08), new VSC(1, 0, 0) ];
GFX.g_L0JupiterCoefficients = [ new VSC(59954691, 0, 0), new VSC(9695899, 5.0619179, 529.6909651), new VSC(573610, 1.444062, 7.113547), new VSC(306389, 5.417347, 1059.38193), new VSC(97178, 4.14265, 632.78374), new VSC(72903, 3.64043, 522.57742), new VSC(64264, 3.41145, 103.09277), new VSC(39806, 2.29377, 419.48464), new VSC(38858, 1.27232, 316.39187), new VSC(27965, 1.78455, 536.80451), new VSC(13590, 5.77481, 1589.0729), new VSC(8769, 3.63, 949.1756), new VSC(8246, 3.5823, 206.1855), new VSC(7368, 5.081, 735.8765), new VSC(6263, 0.025, 213.2991), new VSC(6114, 4.5132, 1162.4747), new VSC(5305, 4.1863, 1052.2684), new VSC(5305, 1.3067, 14.2271), new VSC(4905, 1.3208, 110.2063), new VSC(4647, 4.6996, 3.9322), new VSC(3045, 4.3168, 426.5982), new VSC(2610, 1.5667, 846.0828), new VSC(2028, 1.0638, 3.1814), new VSC(1921, 0.9717, 639.8973), new VSC(1765, 2.1415, 1066.4955), new VSC(1723, 3.8804, 1265.5675), new VSC(1633, 3.582, 515.4639), new VSC(1432, 4.2968, 625.6702), new VSC(973, 4.098, 95.979), new VSC(884, 2.437, 412.371), new VSC(733, 6.085, 838.969), new VSC(731, 3.806, 1581.959), new VSC(709, 1.293, 742.99), new VSC(692, 6.134, 2118.764), new VSC(614, 4.109, 1478.867), new VSC(582, 4.54, 309.278), new VSC(495, 3.756, 323.505), new VSC(441, 2.958, 454.909), new VSC(417, 1.036, 2.488), new VSC(390, 4.897, 1692.166), new VSC(376, 4.703, 1368.66), new VSC(341, 5.715, 533.623), new VSC(330, 4.74, 0.048), new VSC(262, 1.877, 0.963), new VSC(261, 0.82, 380.128), new VSC(257, 3.724, 199.072), new VSC(244, 5.22, 728.763), new VSC(235, 1.227, 909.819), new VSC(220, 1.651, 543.918), new VSC(207, 1.855, 525.759), new VSC(202, 1.807, 1375.774), new VSC(197, 5.293, 1155.361), new VSC(175, 3.73, 942.062), new VSC(175, 3.226, 1898.351), new VSC(175, 5.91, 956.289), new VSC(158, 4.365, 1795.258), new VSC(151, 3.906, 74.782), new VSC(149, 4.377, 1685.052), new VSC(141, 3.136, 491.558), new VSC(138, 1.318, 1169.588), new VSC(131, 4.169, 1045.155), new VSC(117, 2.5, 1596.186), new VSC(117, 3.389, 0.521), new VSC(106, 4.554, 526.51) ];
GFX.g_L1JupiterCoefficients = [ new VSC(52993480757, 0, 0), new VSC(489741, 4.220667, 529.690965), new VSC(228919, 6.026475, 7.113547), new VSC(27655, 4.57266, 1059.38193), new VSC(20721, 5.45939, 522.57742), new VSC(12106, 0.16986, 536.80451), new VSC(6068, 4.4242, 103.0928), new VSC(5434, 3.9848, 419.4846), new VSC(4238, 5.8901, 14.2271), new VSC(2212, 5.2677, 206.1855), new VSC(1746, 4.9267, 1589.0729), new VSC(1296, 5.5513, 3.1814), new VSC(1173, 5.8565, 1052.2684), new VSC(1163, 0.5145, 3.9322), new VSC(1099, 5.307, 515.4639), new VSC(1007, 0.4648, 735.8765), new VSC(1004, 3.1504, 426.5982), new VSC(848, 5.758, 110.206), new VSC(827, 4.803, 213.299), new VSC(816, 0.586, 1066.495), new VSC(725, 5.518, 639.897), new VSC(568, 5.989, 625.67), new VSC(474, 4.132, 412.371), new VSC(413, 5.737, 95.979), new VSC(345, 4.242, 632.784), new VSC(336, 3.732, 1162.475), new VSC(234, 4.035, 949.176), new VSC(234, 6.243, 309.278), new VSC(199, 1.505, 838.969), new VSC(195, 2.219, 323.505), new VSC(187, 6.086, 742.99), new VSC(184, 6.28, 543.918), new VSC(171, 5.417, 199.072), new VSC(131, 0.626, 728.763), new VSC(115, 0.68, 846.083), new VSC(115, 5.286, 2118.764), new VSC(108, 4.493, 956.289), new VSC(80, 5.82, 1045.15), new VSC(72, 5.34, 942.06), new VSC(70, 5.97, 532.87), new VSC(67, 5.73, 21.34), new VSC(66, 0.13, 526.51), new VSC(65, 6.09, 1581.96), new VSC(59, 0.59, 1155.36), new VSC(58, 0.99, 1596.19), new VSC(57, 5.97, 1169.59), new VSC(57, 1.41, 533.62), new VSC(55, 5.43, 10.29), new VSC(52, 5.73, 117.32), new VSC(52, 0.23, 1368.66), new VSC(50, 6.08, 525.76), new VSC(47, 3.63, 1478.87), new VSC(47, 0.51, 1265.57), new VSC(40, 4.16, 1692.17), new VSC(34, 0.1, 302.16), new VSC(33, 5.04, 220.41), new VSC(32, 5.37, 508.35), new VSC(29, 5.42, 1272.68), new VSC(29, 3.36, 4.67), new VSC(29, 0.76, 88.87), new VSC(25, 1.61, 831.86) ];
GFX.g_L2JupiterCoefficients = [ new VSC(47234, 4.32148, 7.11355), new VSC(38966, 0, 0), new VSC(30629, 2.93021, 529.69097), new VSC(3189, 1.055, 522.5774), new VSC(2729, 4.8455, 536.8045), new VSC(2723, 3.4141, 1059.3819), new VSC(1721, 4.1873, 14.2271), new VSC(383, 5.768, 419.485), new VSC(378, 0.76, 515.464), new VSC(367, 6.055, 103.093), new VSC(337, 3.786, 3.181), new VSC(308, 0.694, 206.186), new VSC(218, 3.814, 1589.073), new VSC(199, 5.34, 1066.495), new VSC(197, 2.484, 3.932), new VSC(156, 1.406, 1052.268), new VSC(146, 3.814, 639.897), new VSC(142, 1.634, 426.598), new VSC(130, 5.837, 412.371), new VSC(117, 1.414, 625.67), new VSC(97, 4.03, 110.21), new VSC(91, 1.11, 95.98), new VSC(87, 2.52, 632.78), new VSC(79, 4.64, 543.92), new VSC(72, 2.22, 735.88), new VSC(58, 0.83, 199.07), new VSC(57, 3.12, 213.3), new VSC(49, 1.67, 309.28), new VSC(40, 4.02, 21.34), new VSC(40, 0.62, 323.51), new VSC(36, 2.33, 728.76), new VSC(29, 3.61, 10.29), new VSC(28, 3.24, 838.97), new VSC(26, 4.5, 742.99), new VSC(26, 2.51, 1162.47), new VSC(25, 1.22, 1045.15), new VSC(24, 3.01, 956.29), new VSC(19, 4.29, 532.87), new VSC(18, 0.81, 508.35), new VSC(17, 4.2, 2118.76), new VSC(17, 1.83, 526.51), new VSC(15, 5.81, 1596.19), new VSC(15, 0.68, 942.06), new VSC(15, 4, 117.32), new VSC(14, 5.95, 316.39), new VSC(14, 1.8, 302.16), new VSC(13, 2.52, 88.87), new VSC(13, 4.37, 1169.59), new VSC(11, 4.44, 525.76), new VSC(10, 1.72, 1581.96), new VSC(9, 2.18, 1155.36), new VSC(9, 3.29, 220.41), new VSC(9, 3.32, 831.86), new VSC(8, 5.76, 846.08), new VSC(8, 2.71, 533.62), new VSC(7, 2.18, 1265.57), new VSC(6, 0.5, 949.18) ];
GFX.g_L3JupiterCoefficients = [ new VSC(6502, 2.5986, 7.1135), new VSC(1357, 1.3464, 529.691), new VSC(471, 2.475, 14.227), new VSC(417, 3.245, 536.805), new VSC(353, 2.974, 522.577), new VSC(155, 2.076, 1059.382), new VSC(87, 2.51, 515.46), new VSC(44, 0, 0), new VSC(34, 3.83, 1066.5), new VSC(28, 2.45, 206.19), new VSC(24, 1.28, 412.37), new VSC(23, 2.98, 543.92), new VSC(20, 2.1, 639.9), new VSC(20, 1.4, 419.48), new VSC(19, 1.59, 103.09), new VSC(17, 2.3, 21.34), new VSC(17, 2.6, 1589.07), new VSC(16, 3.15, 625.67), new VSC(16, 3.36, 1052.27), new VSC(13, 2.76, 95.98), new VSC(13, 2.54, 199.07), new VSC(13, 6.27, 426.6), new VSC(9, 1.76, 10.29), new VSC(9, 2.27, 110.21), new VSC(7, 3.43, 309.28), new VSC(7, 4.04, 728.76), new VSC(6, 2.52, 508.35), new VSC(5, 2.91, 1045.15), new VSC(5, 5.25, 323.51), new VSC(4, 4.3, 88.87), new VSC(4, 3.52, 302.16), new VSC(4, 4.09, 735.88), new VSC(3, 1.43, 956.29), new VSC(3, 4.36, 1596.19), new VSC(3, 1.25, 213.3), new VSC(3, 5.02, 838.97), new VSC(3, 2.24, 117.32), new VSC(2, 2.9, 742.99), new VSC(2, 2.36, 942.06) ];
GFX.g_L4JupiterCoefficients = [ new VSC(669, 0.853, 7.114), new VSC(114, 3.142, 0), new VSC(100, 0.743, 14.227), new VSC(50, 1.65, 536.8), new VSC(44, 5.82, 529.69), new VSC(32, 4.86, 522.58), new VSC(15, 4.29, 515.46), new VSC(9, 0.71, 1059.38), new VSC(5, 1.3, 543.92), new VSC(4, 2.32, 1066.5), new VSC(4, 0.48, 21.34), new VSC(3, 3, 412.37), new VSC(2, 0.4, 639.9), new VSC(2, 4.26, 199.07), new VSC(2, 4.91, 625.67), new VSC(2, 4.26, 206.19), new VSC(1, 5.26, 1052.27), new VSC(1, 4.72, 95.98), new VSC(1, 1.29, 1589.07) ];
GFX.g_L5JupiterCoefficients = [ new VSC(50, 5.26, 7.11), new VSC(16, 5.25, 14.23), new VSC(4, 0.01, 536.8), new VSC(2, 1.1, 522.58), new VSC(1, 3.14, 0) ];
GFX.g_B0JupiterCoefficients = [ new VSC(2268616, 3.5585261, 529.6909651), new VSC(110090, 0, 0), new VSC(109972, 3.908093, 1059.38193), new VSC(8101, 3.6051, 522.5774), new VSC(6438, 0.3063, 536.8045), new VSC(6044, 4.2588, 1589.0729), new VSC(1107, 2.9853, 1162.4747), new VSC(944, 1.675, 426.598), new VSC(942, 2.936, 1052.268), new VSC(894, 1.754, 7.114), new VSC(836, 5.179, 103.093), new VSC(767, 2.155, 632.784), new VSC(684, 3.678, 213.299), new VSC(629, 0.643, 1066.495), new VSC(559, 0.014, 846.083), new VSC(532, 2.703, 110.206), new VSC(464, 1.173, 949.176), new VSC(431, 2.608, 419.485), new VSC(351, 4.611, 2118.764), new VSC(132, 4.778, 742.99), new VSC(123, 3.35, 1692.166), new VSC(116, 1.387, 323.505), new VSC(115, 5.049, 316.392), new VSC(104, 3.701, 515.464), new VSC(103, 2.319, 1478.867), new VSC(102, 3.153, 1581.959) ];
GFX.g_B1JupiterCoefficients = [ new VSC(177352, 5.701665, 529.690965), new VSC(3230, 5.7794, 1059.3819), new VSC(3081, 5.4746, 522.5774), new VSC(2212, 4.7348, 536.8045), new VSC(1694, 3.1416, 0), new VSC(346, 4.746, 1052.268), new VSC(234, 5.189, 1066.495), new VSC(196, 6.186, 7.114), new VSC(150, 3.927, 1589.073), new VSC(114, 3.439, 632.784), new VSC(97, 2.91, 949.18), new VSC(82, 5.08, 1162.47), new VSC(77, 2.51, 103.09), new VSC(77, 0.61, 419.48), new VSC(74, 5.5, 515.46), new VSC(61, 5.45, 213.3), new VSC(50, 3.95, 735.88), new VSC(46, 0.54, 110.21), new VSC(45, 1.9, 846.08), new VSC(37, 4.7, 543.92), new VSC(36, 6.11, 316.39), new VSC(32, 4.92, 1581.96) ];
GFX.g_B2JupiterCoefficients = [ new VSC(8094, 1.4632, 529.691), new VSC(813, 3.1416, 0), new VSC(742, 0.957, 522.577), new VSC(399, 2.899, 536.805), new VSC(342, 1.447, 1059.382), new VSC(74, 0.41, 1052.27), new VSC(46, 3.48, 1066.5), new VSC(30, 1.93, 1589.07), new VSC(29, 0.99, 515.46), new VSC(23, 4.27, 7.11), new VSC(14, 2.92, 543.92), new VSC(12, 5.22, 632.78), new VSC(11, 4.88, 949.18), new VSC(6, 6.21, 1045.15) ];
GFX.g_B3JupiterCoefficients = [ new VSC(252, 3.381, 529.691), new VSC(122, 2.733, 522.577), new VSC(49, 1.04, 536.8), new VSC(11, 2.31, 1052.27), new VSC(8, 2.77, 515.46), new VSC(7, 4.25, 1059.38), new VSC(6, 1.78, 1066.5), new VSC(4, 1.13, 543.92), new VSC(3, 3.14, 0) ];
GFX.g_B4JupiterCoefficients = [ new VSC(15, 4.53, 522.58), new VSC(5, 4.47, 529.69), new VSC(4, 5.44, 536.8), new VSC(3, 0, 0), new VSC(2, 4.52, 515.46), new VSC(1, 4.2, 1052.27) ];
GFX.g_B5JupiterCoefficients = [ new VSC(1, 0.09, 522.58) ];
GFX.g_R0JupiterCoefficients = [ new VSC(520887429, 0, 0), new VSC(25209327, 3.4910864, 529.69096509), new VSC(610600, 3.841154, 1059.38193), new VSC(282029, 2.574199, 632.783739), new VSC(187647, 2.075904, 522.577418), new VSC(86793, 0.71001, 419.48464), new VSC(72063, 0.21466, 536.80451), new VSC(65517, 5.97996, 316.39187), new VSC(30135, 2.16132, 949.17561), new VSC(29135, 1.67759, 103.09277), new VSC(23947, 0.27458, 7.11355), new VSC(23453, 3.54023, 735.87651), new VSC(22284, 4.19363, 1589.0729), new VSC(13033, 2.96043, 1162.4747), new VSC(12749, 2.7155, 1052.26838), new VSC(9703, 1.9067, 206.1855), new VSC(9161, 4.4135, 213.2991), new VSC(7895, 2.4791, 426.5982), new VSC(7058, 2.1818, 1265.5675), new VSC(6138, 6.2642, 846.0828), new VSC(5477, 5.6573, 639.8973), new VSC(4170, 2.0161, 515.4639), new VSC(4137, 2.7222, 625.6702), new VSC(3503, 0.5653, 1066.4955), new VSC(2617, 2.0099, 1581.9593), new VSC(2500, 4.5518, 838.9693), new VSC(2128, 6.1275, 742.9901), new VSC(1912, 0.8562, 412.3711), new VSC(1611, 3.0887, 1368.6603), new VSC(1479, 2.6803, 1478.8666), new VSC(1231, 1.8904, 323.5054), new VSC(1217, 1.8017, 110.2063), new VSC(1015, 1.3867, 454.9094), new VSC(999, 2.872, 309.278), new VSC(961, 4.549, 2118.764), new VSC(886, 4.148, 533.623), new VSC(821, 1.593, 1898.351), new VSC(812, 5.941, 909.819), new VSC(777, 3.677, 728.763), new VSC(727, 3.988, 1155.361), new VSC(655, 2.791, 1685.052), new VSC(654, 3.382, 1692.166), new VSC(621, 4.823, 956.289), new VSC(615, 2.276, 942.062), new VSC(562, 0.081, 543.918), new VSC(542, 0.284, 525.759) ];
GFX.g_R1JupiterCoefficients = [ new VSC(1271802, 2.6493751, 529.6909651), new VSC(61662, 3.00076, 1059.38193), new VSC(53444, 3.89718, 522.57742), new VSC(41390, 0, 0), new VSC(31185, 4.88277, 536.80451), new VSC(11847, 2.4133, 419.48464), new VSC(9166, 4.7598, 7.1135), new VSC(3404, 3.3469, 1589.0729), new VSC(3203, 5.2108, 735.8765), new VSC(3176, 2.793, 103.0928), new VSC(2806, 3.7422, 515.4639), new VSC(2677, 4.3305, 1052.2684), new VSC(2600, 3.6344, 206.1855), new VSC(2412, 1.4695, 426.5982), new VSC(2101, 3.9276, 639.8973), new VSC(1646, 4.4163, 1066.4955), new VSC(1641, 4.4163, 625.6702), new VSC(1050, 3.1611, 213.2991), new VSC(1025, 2.5543, 412.3711), new VSC(806, 2.678, 632.784), new VSC(741, 2.171, 1162.475), new VSC(677, 6.25, 838.969), new VSC(567, 4.577, 742.99), new VSC(485, 2.469, 949.176), new VSC(469, 4.71, 543.918), new VSC(445, 0.403, 323.505), new VSC(416, 5.368, 728.763), new VSC(402, 4.605, 309.278), new VSC(347, 4.681, 14.227), new VSC(338, 3.168, 956.289), new VSC(261, 5.343, 846.083), new VSC(247, 3.923, 942.062), new VSC(220, 4.842, 1368.66), new VSC(203, 5.6, 1155.361), new VSC(200, 4.439, 1045.155), new VSC(197, 3.706, 2118.764), new VSC(196, 3.759, 199.072), new VSC(184, 4.265, 95.979), new VSC(180, 4.402, 532.872), new VSC(170, 4.846, 526.51), new VSC(146, 6.13, 533.623), new VSC(133, 1.322, 110.206), new VSC(132, 4.512, 525.759) ];
GFX.g_R2JupiterCoefficients = [ new VSC(79645, 1.35866, 529.69097), new VSC(8252, 5.7777, 522.5774), new VSC(7030, 3.2748, 536.8045), new VSC(5314, 1.8384, 1059.3819), new VSC(1861, 2.9768, 7.1135), new VSC(964, 5.48, 515.464), new VSC(836, 4.199, 419.485), new VSC(498, 3.142, 0), new VSC(427, 2.228, 639.897), new VSC(406, 3.783, 1066.495), new VSC(377, 2.242, 1589.073), new VSC(363, 5.368, 206.186), new VSC(342, 6.099, 1052.268), new VSC(339, 6.127, 625.67), new VSC(333, 0.003, 426.598), new VSC(280, 4.262, 412.371), new VSC(257, 0.963, 632.784), new VSC(230, 0.705, 735.877), new VSC(201, 3.069, 543.918), new VSC(200, 4.429, 103.093), new VSC(139, 2.932, 14.227), new VSC(114, 0.787, 728.763), new VSC(95, 1.7, 838.97), new VSC(86, 5.14, 323.51), new VSC(83, 0.06, 309.28), new VSC(80, 2.98, 742.99), new VSC(75, 1.6, 956.29), new VSC(70, 1.51, 213.3), new VSC(67, 5.47, 199.07), new VSC(62, 6.1, 1045.15), new VSC(56, 0.96, 1162.47), new VSC(52, 5.58, 942.06), new VSC(50, 2.72, 532.87), new VSC(45, 5.52, 508.35), new VSC(44, 0.27, 526.51), new VSC(40, 5.95, 95.98) ];
GFX.g_R3JupiterCoefficients = [ new VSC(3519, 6.058, 529.691), new VSC(1073, 1.6732, 536.8045), new VSC(916, 1.413, 522.577), new VSC(342, 0.523, 1059.382), new VSC(255, 1.196, 7.114), new VSC(222, 0.952, 515.464), new VSC(90, 3.14, 0), new VSC(69, 2.27, 1066.5), new VSC(58, 1.41, 543.92), new VSC(58, 0.53, 639.9), new VSC(51, 5.98, 412.37), new VSC(47, 1.58, 625.67), new VSC(43, 6.12, 419.48), new VSC(37, 1.18, 14.23), new VSC(34, 1.67, 1052.27), new VSC(34, 0.85, 206.19), new VSC(31, 1.04, 1589.07), new VSC(30, 4.63, 426.6), new VSC(21, 2.5, 728.76), new VSC(15, 0.89, 199.07), new VSC(14, 0.96, 508.35), new VSC(13, 1.5, 1045.15), new VSC(12, 2.61, 735.88), new VSC(12, 3.56, 323.51), new VSC(11, 1.79, 309.28), new VSC(11, 6.28, 956.29), new VSC(10, 6.26, 103.09), new VSC(9, 3.45, 838.97) ];
GFX.g_R4JupiterCoefficients = [ new VSC(129, 0.084, 536.805), new VSC(113, 4.249, 529.691), new VSC(83, 3.3, 522.58), new VSC(38, 2.73, 515.46), new VSC(27, 5.69, 7.11), new VSC(18, 5.4, 1059.38), new VSC(13, 6.02, 543.92), new VSC(9, 0.77, 1066.5), new VSC(8, 5.68, 14.23), new VSC(7, 1.43, 412.37), new VSC(6, 5.12, 639.9), new VSC(5, 3.34, 625.67), new VSC(3, 3.4, 1052.27), new VSC(3, 4.16, 728.76), new VSC(3, 2.9, 426.6) ];
GFX.g_R5JupiterCoefficients = [ new VSC(11, 4.75, 536.8), new VSC(4, 5.92, 522.58), new VSC(2, 5.57, 515.46), new VSC(2, 4.3, 543.92), new VSC(2, 3.69, 7.11), new VSC(2, 4.13, 1059.38), new VSC(2, 5.49, 1066.5) ];
GFX.g_L0MarsCoefficients = [ new VSC(620347712, 0, 0), new VSC(18656368, 5.050371, 3340.6124267), new VSC(1108217, 5.4009984, 6681.2248534), new VSC(91798, 5.75479, 10021.83728), new VSC(27745, 5.9705, 3.52312), new VSC(12316, 0.84956, 2810.92146), new VSC(10610, 2.93959, 2281.2305), new VSC(8927, 4.157, 0.0173), new VSC(8716, 6.1101, 13362.4497), new VSC(7775, 3.3397, 5621.8429), new VSC(6798, 0.3646, 398.149), new VSC(4161, 0.2281, 2942.4634), new VSC(3575, 1.6619, 2544.3144), new VSC(3075, 0.857, 191.4483), new VSC(2938, 6.0789, 0.0673), new VSC(2628, 0.6481, 3337.0893), new VSC(2580, 0.03, 3344.1355), new VSC(2389, 5.039, 796.298), new VSC(1799, 0.6563, 529.691), new VSC(1546, 2.9158, 1751.5395), new VSC(1528, 1.1498, 6151.5339), new VSC(1286, 3.068, 2146.1654), new VSC(1264, 3.6228, 5092.152), new VSC(1025, 3.6933, 8962.4553), new VSC(892, 0.183, 16703.062), new VSC(859, 2.401, 2914.014), new VSC(833, 4.495, 3340.63), new VSC(833, 2.464, 3340.595), new VSC(749, 3.822, 155.42), new VSC(724, 0.675, 3738.761), new VSC(713, 3.663, 1059.382), new VSC(655, 0.489, 3127.313), new VSC(636, 2.922, 8432.764), new VSC(553, 4.475, 1748.016), new VSC(550, 3.81, 0.98), new VSC(472, 3.625, 1194.447), new VSC(426, 0.554, 6283.076), new VSC(415, 0.497, 213.299), new VSC(312, 0.999, 6677.702), new VSC(307, 0.381, 6684.748), new VSC(302, 4.486, 3532.061), new VSC(299, 2.783, 6254.627), new VSC(293, 4.221, 20.775), new VSC(284, 5.769, 3149.164), new VSC(281, 5.882, 1349.867), new VSC(274, 0.542, 3340.545), new VSC(274, 0.134, 3340.68), new VSC(239, 5.372, 4136.91), new VSC(236, 5.755, 3333.499), new VSC(231, 1.282, 3870.303), new VSC(221, 3.505, 382.897), new VSC(204, 2.821, 1221.849), new VSC(193, 3.357, 3.59), new VSC(189, 1.491, 9492.146), new VSC(179, 1.006, 951.718), new VSC(174, 2.414, 553.569), new VSC(172, 0.439, 5486.778), new VSC(160, 3.949, 4562.461), new VSC(144, 1.419, 135.065), new VSC(140, 3.326, 2700.715), new VSC(138, 4.301, 7.114), new VSC(131, 4.045, 12303.068), new VSC(128, 2.208, 1592.596), new VSC(128, 1.807, 5088.629), new VSC(117, 3.128, 7903.073), new VSC(113, 3.701, 1589.073), new VSC(110, 1.052, 242.729), new VSC(105, 0.785, 8827.39), new VSC(100, 3.243, 11773.377) ];
GFX.g_L1MarsCoefficients = [ new VSC(334085627474, 0, 0), new VSC(1458227, 3.6042605, 3340.6124267), new VSC(164901, 3.926313, 6681.224853), new VSC(19963, 4.26594, 10021.83728), new VSC(3452, 4.7321, 3.5231), new VSC(2485, 4.6128, 13362.4497), new VSC(842, 4.459, 2281.23), new VSC(538, 5.016, 398.149), new VSC(521, 4.994, 3344.136), new VSC(433, 2.561, 191.448), new VSC(430, 5.316, 155.42), new VSC(382, 3.539, 796.298), new VSC(314, 4.963, 16703.062), new VSC(283, 3.16, 2544.314), new VSC(206, 4.569, 2146.165), new VSC(169, 1.329, 3337.089), new VSC(158, 4.185, 1751.54), new VSC(134, 2.233, 0.98), new VSC(134, 5.974, 1748.016), new VSC(118, 6.024, 6151.534), new VSC(117, 2.213, 1059.382), new VSC(114, 2.129, 1194.447), new VSC(114, 5.428, 3738.761), new VSC(91, 1.1, 1349.87), new VSC(85, 3.91, 553.57), new VSC(83, 5.3, 6684.75), new VSC(81, 4.43, 529.69), new VSC(80, 2.25, 8962.46), new VSC(73, 2.5, 951.72), new VSC(73, 5.84, 242.73), new VSC(71, 3.86, 2914.01), new VSC(68, 5.02, 382.9), new VSC(65, 1.02, 3340.6), new VSC(65, 3.05, 3340.63), new VSC(62, 4.15, 3149.16), new VSC(57, 3.89, 4136.91), new VSC(48, 4.87, 213.3), new VSC(48, 1.18, 3333.5), new VSC(47, 1.31, 3185.19), new VSC(41, 0.71, 1592.6), new VSC(40, 2.73, 7.11), new VSC(40, 5.32, 20043.67), new VSC(33, 5.41, 6283.08), new VSC(28, 0.05, 9492.15), new VSC(27, 3.89, 1221.85), new VSC(27, 5.11, 2700.72) ];
GFX.g_L2MarsCoefficients = [ new VSC(58016, 2.04979, 3340.61243), new VSC(54188, 0, 0), new VSC(13908, 2.45742, 6681.22485), new VSC(2465, 2.8, 10021.8373), new VSC(398, 3.141, 13362.45), new VSC(222, 3.194, 3.523), new VSC(121, 0.543, 155.42), new VSC(62, 3.49, 16703.06), new VSC(54, 3.54, 3344.14), new VSC(34, 6, 2281.23), new VSC(32, 4.14, 191.45), new VSC(30, 2, 796.3), new VSC(23, 4.33, 242.73), new VSC(22, 3.45, 398.15), new VSC(20, 5.42, 553.57), new VSC(16, 0.66, 0.98), new VSC(16, 6.11, 2146.17), new VSC(16, 1.22, 1748.02), new VSC(15, 6.1, 3185.19), new VSC(14, 4.02, 951.72), new VSC(14, 2.62, 1349.87), new VSC(13, 0.6, 1194.45), new VSC(12, 3.86, 6684.75), new VSC(11, 4.72, 2544.31), new VSC(10, 0.25, 382.9), new VSC(9, 0.68, 1059.38), new VSC(9, 3.83, 20043.67), new VSC(9, 3.88, 3738.76), new VSC(8, 5.46, 1751.54), new VSC(7, 2.58, 3149.16), new VSC(7, 2.38, 4136.91), new VSC(6, 5.48, 1592.6), new VSC(6, 2.34, 3097.88) ];
GFX.g_L3MarsCoefficients = [ new VSC(1482, 0.4443, 3340.6124), new VSC(662, 0.885, 6681.225), new VSC(188, 1.288, 10021.837), new VSC(41, 1.65, 13362.45), new VSC(26, 0, 0), new VSC(23, 2.05, 155.42), new VSC(10, 1.58, 3.52), new VSC(8, 2, 16703.06), new VSC(5, 2.82, 242.73), new VSC(4, 2.02, 3344.14), new VSC(3, 4.59, 3185.19), new VSC(3, 0.65, 553.57) ];
GFX.g_L4MarsCoefficients = [ new VSC(114, 3.1416, 0), new VSC(29, 5.64, 6681.22), new VSC(24, 5.14, 3340.61), new VSC(11, 6.03, 10021.84), new VSC(3, 0.13, 13362.45), new VSC(3, 3.56, 155.42), new VSC(1, 0.49, 16703.06), new VSC(1, 1.32, 242.73) ];
GFX.g_L5MarsCoefficients = [ new VSC(1, 3.14, 0), new VSC(1, 4.04, 6681.22) ];
GFX.g_B0MarsCoefficients = [ new VSC(3197135, 3.7683204, 3340.6124267), new VSC(298033, 4.10617, 6681.224853), new VSC(289105, 0, 0), new VSC(31366, 4.44651, 10021.83728), new VSC(3484, 4.7881, 13362.4497), new VSC(443, 5.026, 3344.136), new VSC(443, 5.652, 3337.089), new VSC(399, 5.131, 16703.062), new VSC(293, 3.793, 2281.23), new VSC(182, 6.136, 6151.534), new VSC(163, 4.264, 529.691), new VSC(160, 2.232, 1059.382), new VSC(149, 2.165, 5621.843), new VSC(143, 1.182, 3340.595), new VSC(143, 3.213, 3340.63), new VSC(139, 2.418, 8962.455) ];
GFX.g_B1MarsCoefficients = [ new VSC(350069, 5.368478, 3340.612427), new VSC(14116, 3.14159, 0), new VSC(9671, 5.4788, 6681.2249), new VSC(1472, 3.2021, 10021.8373), new VSC(426, 3.408, 13362.45), new VSC(102, 0.776, 3337.089), new VSC(79, 3.72, 16703.06), new VSC(33, 3.46, 5621.84), new VSC(26, 2.48, 2281.23) ];
GFX.g_B2MarsCoefficients = [ new VSC(16727, 0.60221, 3340.61243), new VSC(4987, 4.1416, 0), new VSC(302, 3.559, 6681.225), new VSC(26, 1.9, 13362.45), new VSC(21, 0.92, 10021.84), new VSC(12, 2.24, 3337.09), new VSC(8, 2.25, 16703.06) ];
GFX.g_B3MarsCoefficients = [ new VSC(607, 1.981, 3340.612), new VSC(43, 0, 0), new VSC(14, 1.8, 6681.22), new VSC(3, 3.45, 10021.84) ];
GFX.g_B4MarsCoefficients = [ new VSC(13, 0, 0), new VSC(11, 3.46, 3340.61), new VSC(1, 0.5, 6681.22) ];
GFX.g_R0MarsCoefficients = [ new VSC(153033488, 0, 0), new VSC(14184953, 3.47971284, 3340.6124267), new VSC(660776, 3.817834, 6681.224853), new VSC(46179, 4.15595, 10021.83728), new VSC(8110, 5.5596, 2810.9215), new VSC(7485, 1.7724, 5621.8429), new VSC(5523, 1.3644, 2281.2305), new VSC(3825, 4.4941, 13362.4497), new VSC(2484, 4.9255, 2942.4634), new VSC(2307, 0.0908, 2544.3144), new VSC(1999, 5.3606, 3337.0893), new VSC(1960, 4.7425, 3344.1355), new VSC(1167, 2.1126, 5092.152), new VSC(1103, 5.0091, 398.149), new VSC(992, 5.839, 6151.534), new VSC(899, 4.408, 529.691), new VSC(807, 2.102, 1059.382), new VSC(798, 3.448, 796.298), new VSC(741, 1.499, 2146.165), new VSC(726, 1.245, 8432.764), new VSC(692, 2.134, 8962.455), new VSC(633, 0.894, 3340.595), new VSC(633, 2.924, 3340.63), new VSC(630, 1.287, 1751.54), new VSC(574, 0.829, 2914.014), new VSC(526, 5.383, 3738.761), new VSC(473, 5.199, 3127.313), new VSC(348, 4.832, 16703.062), new VSC(284, 2.907, 3532.061), new VSC(280, 5.257, 6283.076), new VSC(276, 1.218, 6254.627), new VSC(275, 2.908, 1748.016), new VSC(270, 3.764, 5884.927), new VSC(239, 2.037, 1194.447), new VSC(234, 5.105, 5486.778), new VSC(228, 3.255, 6872.673), new VSC(223, 4.199, 3149.164), new VSC(219, 5.583, 191.448), new VSC(208, 5.255, 3340.545), new VSC(208, 4.846, 3340.68), new VSC(186, 5.699, 6677.702), new VSC(183, 5.081, 6684.748), new VSC(179, 4.184, 3333.499), new VSC(176, 5.953, 3870.303), new VSC(164, 3.799, 4136.91) ];
GFX.g_R1MarsCoefficients = [ new VSC(1107433, 2.0325052, 3340.6124267), new VSC(103176, 2.370718, 6681.224853), new VSC(12877, 0, 0), new VSC(10816, 2.70888, 10021.83728), new VSC(1195, 3.047, 13362.4497), new VSC(439, 2.888, 2281.23), new VSC(396, 3.423, 3344.136), new VSC(183, 1.584, 2544.314), new VSC(136, 3.385, 16703.062), new VSC(128, 6.043, 3337.089), new VSC(128, 0.63, 1059.382), new VSC(127, 1.954, 796.298), new VSC(118, 2.998, 2146.165), new VSC(88, 3.42, 398.15), new VSC(83, 3.86, 3738.76), new VSC(76, 4.45, 6151.53), new VSC(72, 2.76, 529.69), new VSC(67, 2.55, 1751.54), new VSC(66, 4.41, 1748.02), new VSC(58, 0.54, 1194.45), new VSC(54, 0.68, 8962.46), new VSC(51, 3.73, 6684.75), new VSC(49, 5.73, 3340.6), new VSC(49, 1.48, 3340.63), new VSC(48, 2.58, 3149.16), new VSC(48, 2.29, 2914.01), new VSC(39, 2.32, 4136.91) ];
GFX.g_R2MarsCoefficients = [ new VSC(44242, 0.47931, 3340.61243), new VSC(8138, 0.87, 6681.2249), new VSC(1275, 1.2259, 10021.8373), new VSC(187, 1.573, 13362.45), new VSC(52, 3.14, 0), new VSC(41, 1.97, 3344.14), new VSC(27, 1.92, 16703.06), new VSC(18, 4.43, 2281.23), new VSC(12, 4.53, 3185.19), new VSC(10, 5.39, 1059.38), new VSC(10, 0.42, 796.3) ];
GFX.g_R3MarsCoefficients = [ new VSC(1113, 5.1499, 3340.6124), new VSC(424, 5.613, 6681.225), new VSC(100, 5.997, 10021.837), new VSC(20, 0.08, 13362.45), new VSC(5, 3.14, 0), new VSC(3, 0.43, 16703.06) ];
GFX.g_R4MarsCoefficients = [ new VSC(20, 3.58, 3340.61), new VSC(16, 4.05, 6681.22), new VSC(6, 4.46, 10021.84), new VSC(2, 4.84, 13362.45) ];
GFX.g_L0MercuryCoefficients = [ new VSC(440250710, 0, 0), new VSC(40989415, 1.48302034, 26087.90314157), new VSC(5046294, 4.47785449, 52175.8062831), new VSC(855347, 1.165203, 78263.709425), new VSC(165590, 4.119692, 104351.612566), new VSC(34562, 0.77931, 130439.51571), new VSC(7583, 3.7135, 156527.4188), new VSC(3560, 1.512, 1109.3786), new VSC(1803, 4.1033, 5661.332), new VSC(1726, 0.3583, 182615.322), new VSC(1590, 2.9951, 25028.5212), new VSC(1365, 4.5992, 27197.2817), new VSC(1017, 0.8803, 31749.2352), new VSC(714, 1.541, 24978.525), new VSC(644, 5.303, 21535.95), new VSC(451, 6.05, 51116.424), new VSC(404, 3.282, 208703.225), new VSC(352, 5.242, 20426.571), new VSC(345, 2.792, 15874.618), new VSC(343, 5.765, 955.6), new VSC(339, 5.863, 25558.212), new VSC(325, 1.337, 53285.185), new VSC(273, 2.495, 529.691), new VSC(264, 3.917, 57837.138), new VSC(260, 0.987, 4551.953), new VSC(239, 0.113, 1059.382), new VSC(235, 0.267, 11322.664), new VSC(217, 0.66, 13521.751), new VSC(209, 2.092, 47623.853), new VSC(183, 2.629, 27043.503), new VSC(182, 2.434, 25661.305), new VSC(176, 4.536, 51066.428), new VSC(173, 2.452, 24498.83), new VSC(142, 3.36, 37410.567), new VSC(138, 0.291, 10213.286), new VSC(125, 3.721, 39609.655), new VSC(118, 2.781, 77204.327), new VSC(106, 4.206, 19804.827) ];
GFX.g_L1MercuryCoefficients = [ new VSC(2608814706223, 0, 0), new VSC(1126008, 6.2170397, 26087.9031416), new VSC(303471, 3.055655, 52175.806283), new VSC(80538, 6.10455, 78263.70942), new VSC(21245, 2.83532, 104351.61257), new VSC(5592, 5.8268, 130439.5157), new VSC(1472, 2.5185, 156527.4188), new VSC(388, 5.48, 182615.322), new VSC(352, 3.052, 1109.379), new VSC(103, 2.149, 208703.225), new VSC(94, 6.12, 27197.28), new VSC(91, 0, 24978.52), new VSC(52, 5.62, 5661.33), new VSC(44, 4.57, 25028.52), new VSC(28, 3.04, 51066.43), new VSC(27, 5.09, 234791.13) ];
GFX.g_L2MercuryCoefficients = [ new VSC(53050, 0, 0), new VSC(16904, 4.69072, 26087.90314), new VSC(7397, 1.3474, 52175.8063), new VSC(3018, 4.4564, 78263.7094), new VSC(1107, 1.264, 104351.6126), new VSC(378, 4.32, 130439.516), new VSC(123, 1.069, 156527.419), new VSC(39, 4.08, 182615.32), new VSC(15, 4.63, 1109.38), new VSC(12, 0.79, 208703.23) ];
GFX.g_L3MercuryCoefficients = [ new VSC(188, 0.035, 52175.806), new VSC(142, 3.125, 26087.903), new VSC(97, 3, 78263.71), new VSC(44, 6.02, 104351.61), new VSC(35, 0, 0), new VSC(18, 2.78, 130439.52), new VSC(7, 5.82, 156527.42), new VSC(3, 2.57, 182615.32) ];
GFX.g_L4MercuryCoefficients = [ new VSC(114, 3.1416, 0), new VSC(2, 2.03, 26087.9), new VSC(2, 1.42, 78263.71), new VSC(2, 4.5, 52175.81), new VSC(1, 4.5, 104351.61), new VSC(1, 1.27, 130439.52) ];
GFX.g_L5MercuryCoefficients = [ new VSC(1, 3.14, 0) ];
GFX.g_B0MercuryCoefficients = [ new VSC(11737529, 1.98357499, 26087.90314157), new VSC(2388077, 5.0373896, 52175.8062831), new VSC(1222840, 3.1415927, 0), new VSC(543252, 1.796444, 78263.709425), new VSC(129779, 4.832325, 104351.612566), new VSC(31867, 1.58088, 130439.51571), new VSC(7963, 4.6097, 156527.4188), new VSC(2014, 1.3532, 182615.322), new VSC(514, 4.378, 208703.325), new VSC(209, 2.02, 24978.525), new VSC(208, 4.918, 27197.282), new VSC(132, 1.119, 234791.128), new VSC(121, 1.813, 53285.185), new VSC(100, 5.657, 20426.571) ];
GFX.g_B1MercuryCoefficients = [ new VSC(429151, 3.501698, 26087.903142), new VSC(146234, 3.141593, 0), new VSC(22675, 0.01515, 52175.80628), new VSC(10895, 0.4854, 78263.70942), new VSC(6353, 3.4294, 104351.6126), new VSC(2496, 0.1605, 130439.5157), new VSC(860, 3.185, 156527.419), new VSC(278, 6.21, 182615.322), new VSC(86, 2.95, 208703.23), new VSC(28, 0.29, 27197.28), new VSC(26, 5.98, 234791.13) ];
GFX.g_B2MercuryCoefficients = [ new VSC(11831, 4.79066, 26087.90314), new VSC(1914, 0, 0), new VSC(1045, 1.2122, 52175.8063), new VSC(266, 4.434, 78263.709), new VSC(170, 1.623, 104351.613), new VSC(96, 4.8, 130439.52), new VSC(45, 1.61, 156527.42), new VSC(18, 4.67, 182615.32), new VSC(7, 1.43, 208703.23) ];
GFX.g_B3MercuryCoefficients = [ new VSC(235, 0.354, 26087.903), new VSC(161, 0, 0), new VSC(19, 4.36, 52175.81), new VSC(6, 2.51, 78263.71), new VSC(5, 6.14, 104351.61), new VSC(3, 3.12, 130439.52), new VSC(2, 6.27, 156527.42) ];
GFX.g_B4MercuryCoefficients = [ new VSC(4, 1.75, 26087.9), new VSC(1, 3.14, 0) ];
GFX.g_R0MercuryCoefficients = [ new VSC(39528272, 0, 0), new VSC(7834132, 6.1923372, 26087.9031416), new VSC(795526, 2.959897, 52175.806283), new VSC(121282, 6.010642, 78263.709425), new VSC(21922, 2.7782, 104351.61257), new VSC(4354, 5.8289, 130439.5157), new VSC(918, 2.597, 156527.419), new VSC(290, 1.424, 25028.521), new VSC(260, 3.028, 27197.282), new VSC(202, 5.647, 182615.322), new VSC(201, 5.592, 31749.235), new VSC(142, 6.253, 24978.525), new VSC(100, 3.734, 21535.95) ];
GFX.g_R1MercuryCoefficients = [ new VSC(217348, 4.656172, 26087.903142), new VSC(44142, 1.42386, 52175.80628), new VSC(10094, 4.47466, 78263.70942), new VSC(2433, 1.2423, 104351.6126), new VSC(1624, 0, 0), new VSC(604, 4.293, 130439.516), new VSC(153, 1.061, 156527.419), new VSC(39, 4.11, 182615.32) ];
GFX.g_R2MercuryCoefficients = [ new VSC(3118, 3.0823, 26087.9031), new VSC(1245, 6.1518, 52175.8063), new VSC(425, 2.926, 78263.709), new VSC(136, 5.98, 104351.613), new VSC(42, 2.75, 130439.52), new VSC(22, 3.14, 0), new VSC(13, 5.8, 156527.42) ];
GFX.g_R3MercuryCoefficients = [ new VSC(33, 1.68, 26087.9), new VSC(24, 4.63, 52175.81), new VSC(12, 1.39, 78263.71), new VSC(5, 4.44, 104351.61), new VSC(2, 1.21, 130439.52) ];
GFX.g_MoonCoefficients1 = [ new MoonCoefficient1(0, 0, 1, 0), new MoonCoefficient1(2, 0, -1, 0), new MoonCoefficient1(2, 0, 0, 0), new MoonCoefficient1(0, 0, 2, 0), new MoonCoefficient1(0, 1, 0, 0), new MoonCoefficient1(0, 0, 0, 2), new MoonCoefficient1(2, 0, -2, 0), new MoonCoefficient1(2, -1, -1, 0), new MoonCoefficient1(2, 0, 1, 0), new MoonCoefficient1(2, -1, 0, 0), new MoonCoefficient1(0, 1, -1, 0), new MoonCoefficient1(1, 0, 0, 0), new MoonCoefficient1(0, 1, 1, 0), new MoonCoefficient1(2, 0, 0, -2), new MoonCoefficient1(0, 0, 1, 2), new MoonCoefficient1(0, 0, 1, -2), new MoonCoefficient1(4, 0, -1, 0), new MoonCoefficient1(0, 0, 3, 0), new MoonCoefficient1(4, 0, -2, 0), new MoonCoefficient1(2, 1, -1, 0), new MoonCoefficient1(2, 1, 0, 0), new MoonCoefficient1(1, 0, -1, 0), new MoonCoefficient1(1, 1, 0, 0), new MoonCoefficient1(2, -1, 1, 0), new MoonCoefficient1(2, 0, 2, 0), new MoonCoefficient1(4, 0, 0, 0), new MoonCoefficient1(2, 0, -3, 0), new MoonCoefficient1(0, 1, -2, 0), new MoonCoefficient1(2, 0, -1, 2), new MoonCoefficient1(2, -1, -2, 0), new MoonCoefficient1(1, 0, 1, 0), new MoonCoefficient1(2, -2, 0, 0), new MoonCoefficient1(0, 1, 2, 0), new MoonCoefficient1(0, 2, 0, 0), new MoonCoefficient1(2, -2, -1, 0), new MoonCoefficient1(2, 0, 1, -2), new MoonCoefficient1(2, 0, 0, 2), new MoonCoefficient1(4, -1, -1, 0), new MoonCoefficient1(0, 0, 2, 2), new MoonCoefficient1(3, 0, -1, 0), new MoonCoefficient1(2, 1, 1, 0), new MoonCoefficient1(4, -1, -2, 0), new MoonCoefficient1(0, 2, -1, 0), new MoonCoefficient1(2, 2, -1, 0), new MoonCoefficient1(2, 1, -2, 0), new MoonCoefficient1(2, -1, 0, -2), new MoonCoefficient1(4, 0, 1, 0), new MoonCoefficient1(0, 0, 4, 0), new MoonCoefficient1(4, -1, 0, 0), new MoonCoefficient1(1, 0, -2, 0), new MoonCoefficient1(2, 1, 0, -2), new MoonCoefficient1(0, 0, 2, -2), new MoonCoefficient1(1, 1, 1, 0), new MoonCoefficient1(3, 0, -2, 0), new MoonCoefficient1(4, 0, -3, 0), new MoonCoefficient1(2, -1, 2, 0), new MoonCoefficient1(0, 2, 1, 0), new MoonCoefficient1(1, 1, -1, 0), new MoonCoefficient1(2, 0, 3, 0), new MoonCoefficient1(2, 0, -1, -2) ];
GFX.g_MoonCoefficients2 = [ new MoonCoefficient2(6288774, -20905355), new MoonCoefficient2(1274027, -3699111), new MoonCoefficient2(658314, -2955968), new MoonCoefficient2(213618, -569925), new MoonCoefficient2(-185116, 48888), new MoonCoefficient2(-114332, -3149), new MoonCoefficient2(58793, 246158), new MoonCoefficient2(57066, -152138), new MoonCoefficient2(53322, -170733), new MoonCoefficient2(45758, -204586), new MoonCoefficient2(-40923, -129620), new MoonCoefficient2(-34720, 108743), new MoonCoefficient2(-30383, 104755), new MoonCoefficient2(15327, 10321), new MoonCoefficient2(-12528, 0), new MoonCoefficient2(10980, 79661), new MoonCoefficient2(10675, -34782), new MoonCoefficient2(10034, -23210), new MoonCoefficient2(8548, -21636), new MoonCoefficient2(-7888, 24208), new MoonCoefficient2(-6766, 30824), new MoonCoefficient2(-5163, -8379), new MoonCoefficient2(4987, -16675), new MoonCoefficient2(4036, -12831), new MoonCoefficient2(3994, -10445), new MoonCoefficient2(3861, -11650), new MoonCoefficient2(3665, 14403), new MoonCoefficient2(-2689, -7003), new MoonCoefficient2(-2602, 0), new MoonCoefficient2(2390, 10056), new MoonCoefficient2(-2348, 6322), new MoonCoefficient2(2236, -9884), new MoonCoefficient2(-2120, 5751), new MoonCoefficient2(-2069, 0), new MoonCoefficient2(2048, -4950), new MoonCoefficient2(-1773, 4130), new MoonCoefficient2(-1595, 0), new MoonCoefficient2(1215, -3958), new MoonCoefficient2(-1110, 0), new MoonCoefficient2(-892, 3258), new MoonCoefficient2(-810, 2616), new MoonCoefficient2(759, -1897), new MoonCoefficient2(-713, -2117), new MoonCoefficient2(-700, 2354), new MoonCoefficient2(691, 0), new MoonCoefficient2(596, 0), new MoonCoefficient2(549, -1423), new MoonCoefficient2(537, -1117), new MoonCoefficient2(520, -1571), new MoonCoefficient2(-487, -1739), new MoonCoefficient2(-399, 0), new MoonCoefficient2(-381, -4421), new MoonCoefficient2(351, 0), new MoonCoefficient2(-340, 0), new MoonCoefficient2(330, 0), new MoonCoefficient2(327, 0), new MoonCoefficient2(-323, 1165), new MoonCoefficient2(299, 0), new MoonCoefficient2(294, 0), new MoonCoefficient2(0, 8752) ];
GFX.g_MoonCoefficients3 = [ new MoonCoefficient1(0, 0, 0, 1), new MoonCoefficient1(0, 0, 1, 1), new MoonCoefficient1(0, 0, 1, -1), new MoonCoefficient1(2, 0, 0, -1), new MoonCoefficient1(2, 0, -1, 1), new MoonCoefficient1(2, 0, -1, -1), new MoonCoefficient1(2, 0, 0, 1), new MoonCoefficient1(0, 0, 2, 1), new MoonCoefficient1(2, 0, 1, -1), new MoonCoefficient1(0, 0, 2, -1), new MoonCoefficient1(2, -1, 0, -1), new MoonCoefficient1(2, 0, -2, -1), new MoonCoefficient1(2, 0, 1, 1), new MoonCoefficient1(2, 1, 0, -1), new MoonCoefficient1(2, -1, -1, 1), new MoonCoefficient1(2, -1, 0, 1), new MoonCoefficient1(2, -1, -1, -1), new MoonCoefficient1(0, 1, -1, -1), new MoonCoefficient1(4, 0, -1, -1), new MoonCoefficient1(0, 1, 0, 1), new MoonCoefficient1(0, 0, 0, 3), new MoonCoefficient1(0, 1, -1, 1), new MoonCoefficient1(1, 0, 0, 1), new MoonCoefficient1(0, 1, 1, 1), new MoonCoefficient1(0, 1, 1, -1), new MoonCoefficient1(0, 1, 0, -1), new MoonCoefficient1(1, 0, 0, -1), new MoonCoefficient1(0, 0, 3, 1), new MoonCoefficient1(4, 0, 0, -1), new MoonCoefficient1(4, 0, -1, 1), new MoonCoefficient1(0, 0, 1, -3), new MoonCoefficient1(4, 0, -2, 1), new MoonCoefficient1(2, 0, 0, -3), new MoonCoefficient1(2, 0, 2, -1), new MoonCoefficient1(2, -1, 1, -1), new MoonCoefficient1(2, 0, -2, 1), new MoonCoefficient1(0, 0, 3, -1), new MoonCoefficient1(2, 0, 2, 1), new MoonCoefficient1(2, 0, -3, -1), new MoonCoefficient1(2, 1, -1, 1), new MoonCoefficient1(2, 1, 0, 1), new MoonCoefficient1(4, 0, 0, 1), new MoonCoefficient1(2, -1, 1, 1), new MoonCoefficient1(2, -2, 0, -1), new MoonCoefficient1(0, 0, 1, 3), new MoonCoefficient1(2, 1, 1, -1), new MoonCoefficient1(1, 1, 0, -1), new MoonCoefficient1(1, 1, 0, 1), new MoonCoefficient1(0, 1, -2, -1), new MoonCoefficient1(2, 1, -1, -1), new MoonCoefficient1(1, 0, 1, 1), new MoonCoefficient1(2, -1, -2, -1), new MoonCoefficient1(0, 1, 2, 1), new MoonCoefficient1(4, 0, -2, -1), new MoonCoefficient1(4, -1, -1, -1), new MoonCoefficient1(1, 0, 1, -1), new MoonCoefficient1(4, 0, 1, -1), new MoonCoefficient1(1, 0, -1, -1), new MoonCoefficient1(4, -1, 0, -1), new MoonCoefficient1(2, -2, 0, 1) ];
GFX.g_MoonCoefficients4 = [ 5128122, 280602, 277693, 173237, 55413, 46271, 32573, 17198, 9266, 8822, 8216, 4324, 4200, -3359, 2463, 2211, 2065, -1870, 1828, -1794, -1749, -1565, -1491, -1475, -1410, -1344, -1335, 1107, 1021, 833, 777, 671, 607, 596, 491, -451, 439, 422, 421, -366, -351, 331, 315, 302, -283, -229, 223, 223, -220, -220, -185, 181, -177, 176, 166, -164, 132, -119, 115, 107 ];
GFX.g_MoonPerigeeApogeeCoefficients1 = [ new MPAC(2, 0, 0, -1.6769, 0), new MPAC(4, 0, 0, 0.4589, 0), new MPAC(6, 0, 0, -0.1856, 0), new MPAC(8, 0, 0, 0.0883, 0), new MPAC(2, -1, 0, -0.0773, 0.00019), new MPAC(0, 1, 0, 0.0502, -0.00013), new MPAC(10, 0, 0, -0.046, 0), new MPAC(4, -1, 0, 0.0422, -0.00011), new MPAC(6, -1, 0, -0.0256, 0), new MPAC(12, 0, 0, 0.0253, 0), new MPAC(1, 0, 0, 0.0237, 0), new MPAC(8, -1, 0, 0.0162, 0), new MPAC(14, 0, 0, -0.0145, 0), new MPAC(0, 0, 2, 0.0129, 0), new MPAC(3, 0, 0, -0.0112, 0), new MPAC(10, -1, 0, -0.0104, 0), new MPAC(16, 0, 0, 0.0086, 0), new MPAC(12, -1, 0, 0.0069, 0), new MPAC(5, 0, 0, 0.0066, 0), new MPAC(2, 0, 2, -0.0053, 0), new MPAC(18, 0, 0, -0.0052, 0), new MPAC(14, -1, 0, -0.0046, 0), new MPAC(7, 0, 0, -0.0041, 0), new MPAC(2, 1, 0, 0.004, 0), new MPAC(20, 0, 0, 0.0032, 0), new MPAC(1, 1, 0, -0.0032, 0), new MPAC(16, -1, 0, 0.0031, 0), new MPAC(4, 1, 0, -0.0029, 0), new MPAC(9, 0, 0, 0.0027, 0), new MPAC(4, 0, 2, 0.0027, 0), new MPAC(2, -2, 0, -0.0027, 0), new MPAC(4, -2, 0, 0.0024, 0), new MPAC(6, -2, 0, -0.0021, 0), new MPAC(22, 0, 0, -0.0021, 0), new MPAC(18, -1, 0, -0.0021, 0), new MPAC(6, 1, 0, 0.0019, 0), new MPAC(11, 0, 0, -0.0018, 0), new MPAC(8, 1, 0, -0.0014, 0), new MPAC(4, 0, -2, -0.0014, 0), new MPAC(6, 0, 2, -0.0014, 0), new MPAC(3, 1, 0, 0.0014, 0), new MPAC(5, 1, 0, -0.0014, 0), new MPAC(13, 0, 0, 0.0013, 0), new MPAC(20, -1, 0, 0.0013, 0), new MPAC(3, 2, 0, 0.0011, 0), new MPAC(4, -2, 2, -0.0011, 0), new MPAC(1, 2, 0, -0.0011, 0), new MPAC(22, -1, 0, -0.0009, 0), new MPAC(0, 0, 4, -0.0008, 0), new MPAC(6, 0, -2, 0.0008, 0), new MPAC(2, 1, -2, 0.0008, 0), new MPAC(0, 2, 0, 0.0007, 0), new MPAC(0, -1, 2, 0.0007, 0), new MPAC(2, 0, 4, 0.0007, 0), new MPAC(0, -2, 2, -0.0006, 0), new MPAC(2, 2, -2, -0.0006, 0), new MPAC(24, 0, 0, 0.0006, 0), new MPAC(4, 0, -4, 0.0005, 0), new MPAC(2, 2, 0, 0.0005, 0), new MPAC(1, -1, 0, -0.0004, 0) ];
GFX.g_MoonPerigeeApogeeCoefficients2 = [ new MPAC(2, 0, 0, 0.4392, 0), new MPAC(4, 0, 0, 0.0684, 0), new MPAC(0, 1, 0, 0.0456, -0.00011), new MPAC(2, -1, 0, 0.0426, -0.00011), new MPAC(0, 0, 2, 0.0212, 0), new MPAC(1, 0, 0, -0.0189, 0), new MPAC(6, 0, 0, 0.0144, 0), new MPAC(4, -1, 0, 0.0113, 0), new MPAC(2, 0, 2, 0.0047, 0), new MPAC(1, 1, 0, 0.0036, 0), new MPAC(8, 0, 0, 0.0035, 0), new MPAC(6, -1, 0, 0.0034, 0), new MPAC(2, 0, -2, -0.0034, 0), new MPAC(2, -2, 0, 0.0022, 0), new MPAC(3, 0, 0, -0.0017, 0), new MPAC(4, 0, 2, 0.0013, 0), new MPAC(8, -1, 0, 0.0011, 0), new MPAC(4, -2, 0, 0.001, 0), new MPAC(10, 0, 0, 0.0009, 0), new MPAC(3, 1, 0, 0.0007, 0), new MPAC(0, 2, 0, 0.0006, 0), new MPAC(2, 1, 0, 0.0005, 0), new MPAC(2, 2, 0, 0.0005, 0), new MPAC(6, 0, 2, 0.0004, 0), new MPAC(6, -2, 0, 0.0004, 0), new MPAC(10, -1, 0, 0.0004, 0), new MPAC(5, 0, 0, -0.0004, 0), new MPAC(4, 0, -2, -0.0004, 0), new MPAC(0, 1, 2, 0.0003, 0), new MPAC(12, 0, 0, 0.0003, 0), new MPAC(2, -1, 2, 0.0003, 0), new MPAC(1, -1, 0, -0.0003, 0) ];
GFX.g_MoonPerigeeApogeeCoefficients3 = [ new MPAC(2, 0, 0, 63.224, 0), new MPAC(4, 0, 0, -6.99, 0), new MPAC(2, -1, 0, 2.834, 0), new MPAC(2, -1, 0, 0, -0.0071), new MPAC(6, 0, 0, 1.927, 0), new MPAC(1, 0, 0, -1.263, 0), new MPAC(8, 0, 0, -0.702, 0), new MPAC(0, 1, 0, 0.696, 0), new MPAC(0, 1, 0, 0, -0.0017), new MPAC(0, 0, 2, -0.69, 0), new MPAC(4, -1, 0, -0.629, 0), new MPAC(4, -1, 0, 0, 0.0016), new MPAC(2, 0, -2, -0.392, 0), new MPAC(10, 0, 0, 0.297, 0), new MPAC(6, -1, 0, 0.26, 0), new MPAC(3, 0, 0, 0.201, 0), new MPAC(2, 1, 0, -0.161, 0), new MPAC(1, 1, 0, 0.157, 0), new MPAC(12, 0, 0, -0.138, 0), new MPAC(8, -1, 0, -0.127, 0), new MPAC(2, 0, 2, 0.104, 0), new MPAC(2, -2, 0, 0.104, 0), new MPAC(5, 0, 0, -0.079, 0), new MPAC(14, 0, 0, 0.068, 0), new MPAC(10, -1, 0, 0.067, 0), new MPAC(4, 1, 0, 0.054, 0), new MPAC(12, -1, 0, -0.038, 0), new MPAC(4, -2, 0, -0.038, 0), new MPAC(7, 0, 0, 0.037, 0), new MPAC(4, 0, 2, -0.037, 0), new MPAC(16, 0, 0, -0.035, 0), new MPAC(3, 1, 0, -0.03, 0), new MPAC(1, -1, 0, 0.029, 0), new MPAC(6, 1, 0, -0.025, 0), new MPAC(0, 2, 0, 0.023, 0), new MPAC(14, -1, 0, 0.023, 0), new MPAC(2, 2, 0, -0.023, 0), new MPAC(6, -2, 0, 0.022, 0), new MPAC(2, -1, -2, -0.021, 0), new MPAC(9, 0, 0, -0.02, 0), new MPAC(18, 0, 0, 0.019, 0), new MPAC(6, 0, 2, 0.017, 0), new MPAC(0, -1, 2, 0.014, 0), new MPAC(16, -1, 0, -0.014, 0), new MPAC(4, 0, -20, 0.013, 0), new MPAC(8, 1, 0, 0.012, 0), new MPAC(11, 0, 0, 0.011, 0), new MPAC(5, 1, 0, 0.01, 0), new MPAC(20, 0, 0, -0.01, 0) ];
GFX.g_MoonPerigeeApogeeCoefficients4 = [ new MPAC(2, 0, 0, -9.147, 0), new MPAC(1, 0, 0, -0.841, 0), new MPAC(0, 0, 2, 0.697, 0), new MPAC(0, 1, 0, -0.656, 0.0016), new MPAC(4, 0, 0, 0.355, 0), new MPAC(2, -1, 0, 0.159, 0), new MPAC(1, 1, 0, 0.127, 0), new MPAC(4, -1, 0, 0.065, 0), new MPAC(6, 0, 0, 0.052, 0), new MPAC(2, 1, 0, 0.043, 0), new MPAC(2, 0, 2, 0.031, 0), new MPAC(2, 0, -2, -0.023, 0), new MPAC(2, -2, 0, 0.022, 0), new MPAC(2, 2, 0, 0.019, 0), new MPAC(0, 2, 0, -0.016, 0), new MPAC(6, -1, 0, 0.014, 0), new MPAC(8, 0, 0, 0.01, 0) ];
GFX.g_L0NC = [ new VSC(531188633, 0, 0), new VSC(1798476, 2.9010127, 38.1330356), new VSC(1019728, 0.4858092, 1.4844727), new VSC(124532, 4.830081, 36.648563), new VSC(42064, 5.41055, 2.96895), new VSC(37715, 6.09222, 35.16409), new VSC(33785, 1.24489, 76.26607), new VSC(16483, 8E-05, 491.55793), new VSC(9199, 4.9375, 39.6175), new VSC(8994, 0.2746, 175.1661), new VSC(4216, 1.9871, 73.2971), new VSC(3365, 1.0359, 33.6796), new VSC(2285, 4.2061, 4.4534), new VSC(1434, 2.7834, 74.7816), new VSC(900, 2.076, 109.946), new VSC(745, 3.19, 71.813), new VSC(506, 5.748, 114.399), new VSC(400, 0.35, 1021.249), new VSC(345, 3.462, 41.102), new VSC(340, 3.304, 77.751), new VSC(323, 2.248, 32.195), new VSC(306, 0.497, 0.521), new VSC(287, 4.505, 0.048), new VSC(282, 2.246, 146.594), new VSC(267, 4.889, 0.963), new VSC(252, 5.782, 388.465), new VSC(245, 1.247, 9.561), new VSC(233, 2.505, 137.033), new VSC(227, 1.797, 453.425), new VSC(170, 3.324, 108.461), new VSC(151, 2.192, 33.94), new VSC(150, 2.997, 5.938), new VSC(148, 0.859, 111.43), new VSC(119, 3.677, 2.448), new VSC(109, 2.416, 183.243), new VSC(103, 0.041, 0.261), new VSC(103, 4.404, 70.328), new VSC(102, 5.705, 0.112) ];
GFX.g_L1NC = [ new VSC(3837687717, 0, 0), new VSC(16604, 4.86319, 1.48447), new VSC(15807, 2.27923, 38.13304), new VSC(3335, 3.682, 76.2661), new VSC(1306, 3.6732, 2.9689), new VSC(605, 1.505, 35.164), new VSC(179, 3.453, 39.618), new VSC(107, 2.451, 4.453), new VSC(106, 2.755, 33.68), new VSC(73, 5.49, 36.65), new VSC(57, 1.86, 114.4), new VSC(57, 5.22, 0.52), new VSC(35, 4.52, 74.78), new VSC(32, 5.9, 77.75), new VSC(30, 3.67, 388.47), new VSC(29, 5.17, 9.56), new VSC(29, 5.17, 2.45), new VSC(26, 5.25, 168.05) ];
GFX.g_L2NC = [ new VSC(53893, 0, 0), new VSC(296, 1.855, 1.484), new VSC(281, 1.191, 38.133), new VSC(270, 5.721, 76.266), new VSC(23, 1.21, 2.97), new VSC(9, 4.43, 35.16), new VSC(7, 0.54, 2.45) ];
GFX.g_L3NC = [ new VSC(31, 0, 0), new VSC(15, 1.35, 76.27), new VSC(12, 6.04, 1.48), new VSC(12, 6.11, 38.13) ];
GFX.g_L4NC = [ new VSC(114, 3.142, 0) ];
GFX.g_B0NC = [ new VSC(3088623, 1.4410437, 38.1330356), new VSC(27789, 5.91272, 76.26607), new VSC(27624, 0, 0), new VSC(15448, 3.50877, 39.61751), new VSC(15355, 2.52124, 36.64856), new VSC(2000, 1.51, 74.7816), new VSC(1968, 4.3778, 1.4845), new VSC(1015, 3.2156, 35.1641), new VSC(606, 2.802, 73.297), new VSC(595, 2.129, 41.102), new VSC(589, 3.187, 2.969), new VSC(402, 4.169, 114.399), new VSC(280, 1.682, 77.751), new VSC(262, 3.767, 213.299), new VSC(254, 3.271, 453.425), new VSC(206, 4.257, 529.691), new VSC(140, 3.53, 137.033) ];
GFX.g_B1NC = [ new VSC(227279, 3.807931, 38.133036), new VSC(1803, 1.9758, 76.2661), new VSC(1433, 3.1416, 0), new VSC(1386, 4.8256, 36.6486), new VSC(1073, 6.0805, 39.6175), new VSC(148, 3.858, 74.782), new VSC(136, 0.478, 1.484), new VSC(70, 6.19, 35.16), new VSC(52, 5.05, 73.3), new VSC(43, 0.31, 114.4), new VSC(37, 4.89, 41.1), new VSC(37, 5.76, 2.97), new VSC(26, 5.22, 213.3) ];
GFX.g_B2NC = [ new VSC(9691, 5.5712, 38.133), new VSC(79, 3.63, 76.27), new VSC(72, 0.45, 36.65), new VSC(59, 3.14, 0), new VSC(30, 1.61, 39.62), new VSC(6, 5.61, 74.78) ];
GFX.g_B3NC = [ new VSC(273, 1.017, 38.133), new VSC(2, 0, 0), new VSC(2, 2.37, 36.65), new VSC(2, 5.33, 76.27) ];
GFX.g_B4NC = [ new VSC(6, 2.67, 38.13) ];
GFX.g_R0NC = [ new VSC(3007013206, 0, 0), new VSC(27062259, 1.32999459, 38.13303564), new VSC(1691764, 3.2518614, 36.6485629), new VSC(807831, 5.185928, 1.484473), new VSC(537761, 4.521139, 35.16409), new VSC(495726, 1.571057, 491.557929), new VSC(274572, 1.845523, 175.16606), new VSC(135134, 3.372206, 39.617508), new VSC(121802, 5.797544, 76.266071), new VSC(100895, 0.377027, 73.297126), new VSC(69792, 3.79617, 2.96895), new VSC(46688, 5.74938, 33.67962), new VSC(24594, 0.50802, 109.94569), new VSC(16939, 1.59422, 71.81265), new VSC(14230, 1.07786, 74.7816), new VSC(12012, 1.92062, 1021.24889), new VSC(8395, 0.6782, 146.5943), new VSC(7572, 1.0715, 388.4652), new VSC(5721, 2.5906, 4.4534), new VSC(4840, 1.9069, 41.102), new VSC(4483, 2.9057, 529.691), new VSC(4421, 1.7499, 108.4612), new VSC(4354, 0.6799, 32.1951), new VSC(4270, 3.4134, 453.4249), new VSC(3381, 0.8481, 183.2428), new VSC(2881, 1.986, 137.033), new VSC(2879, 3.6742, 350.3321), new VSC(2636, 3.0976, 213.2991), new VSC(2530, 5.7984, 490.0735), new VSC(2523, 0.4863, 493.0424), new VSC(2306, 2.8096, 70.3282), new VSC(2087, 0.6186, 33.9402) ];
GFX.g_R1NC = [ new VSC(236339, 0.70498, 38.133036), new VSC(13220, 3.32015, 1.48447), new VSC(8622, 6.2163, 35.1641), new VSC(2702, 1.8814, 39.6175), new VSC(2155, 2.0943, 2.9689), new VSC(2153, 5.1687, 76.2661), new VSC(1603, 0, 0), new VSC(1464, 1.1842, 33.6796), new VSC(1136, 3.9189, 36.6486), new VSC(898, 5.241, 388.465), new VSC(790, 0.533, 168.053), new VSC(760, 0.021, 182.28), new VSC(607, 1.077, 1021.249), new VSC(572, 3.401, 484.444), new VSC(561, 2.887, 498.671) ];
GFX.g_R2NC = [ new VSC(4247, 5.8991, 38.133), new VSC(218, 0.346, 1.484), new VSC(163, 2.239, 168.053), new VSC(156, 4.594, 182.28), new VSC(127, 2.848, 35.164) ];
GFX.g_R3NC = [ new VSC(166, 4.552, 38.133) ];
GFX.g_NuC = [ new NUC(0, 0, 0, 0, 1, -171996, -174.2, 92025, 8.9), new NUC(-2, 0, 0, 2, 2, -13187, -1.6, 5736, -3.1), new NUC(0, 0, 0, 2, 2, -2274, -0.2, 977, -0.5), new NUC(0, 0, 0, 0, 2, 2062, 0.2, -895, 0.5), new NUC(0, 1, 0, 0, 0, 1426, -3.4, 54, -0.1), new NUC(0, 0, 1, 0, 0, 712, 0.1, -7, 0), new NUC(-2, 1, 0, 2, 2, -517, 1.2, 224, -0.6), new NUC(0, 0, 0, 2, 1, -386, -0.4, 200, 0), new NUC(0, 0, 1, 2, 2, -301, 0, 129, -0.1), new NUC(-2, -1, 0, 2, 2, 217, -0.5, -95, 0.3), new NUC(-2, 0, 1, 0, 0, -158, 0, 0, 0), new NUC(-2, 0, 0, 2, 1, 129, 0.1, -70, 0), new NUC(0, 0, -1, 2, 2, 123, 0, -53, 0), new NUC(2, 0, 0, 0, 0, 63, 0, 0, 0), new NUC(0, 0, 1, 0, 1, 63, 0.1, -33, 0), new NUC(2, 0, -1, 2, 2, -59, 0, 26, 0), new NUC(0, 0, -1, 0, 1, -58, -0.1, 32, 0), new NUC(0, 0, 1, 2, 1, -51, 0, 27, 0), new NUC(-2, 0, 2, 0, 0, 48, 0, 0, 0), new NUC(0, 0, -2, 2, 1, 46, 0, -24, 0), new NUC(2, 0, 0, 2, 2, -38, 0, 16, 0), new NUC(0, 0, 2, 2, 2, -31, 0, 13, 0), new NUC(0, 0, 2, 0, 0, 29, 0, 0, 0), new NUC(-2, 0, 1, 2, 2, 29, 0, -12, 0), new NUC(0, 0, 0, 2, 0, 26, 0, 0, 0), new NUC(-2, 0, 0, 2, 0, -22, 0, 0, 0), new NUC(0, 0, -1, 2, 1, 21, 0, -10, 0), new NUC(0, 2, 0, 0, 0, 17, -0.1, 0, 0), new NUC(2, 0, -1, 0, 1, 16, 0, -8, 0), new NUC(-2, 2, 0, 2, 2, -16, 0.1, 7, 0), new NUC(0, 1, 0, 0, 1, -15, 0, 9, 0), new NUC(-2, 0, 1, 0, 1, -13, 0, 7, 0), new NUC(0, -1, 0, 0, 1, -12, 0, 6, 0), new NUC(0, 0, 2, -2, 0, 11, 0, 0, 0), new NUC(2, 0, -1, 2, 1, -10, 0, 5, 0), new NUC(2, 0, 1, 2, 2, -8, 0, 3, 0), new NUC(0, 1, 0, 2, 2, 7, 0, -3, 0), new NUC(-2, 1, 1, 0, 0, -7, 0, 0, 0), new NUC(0, -1, 0, 2, 2, -7, 0, 3, 0), new NUC(2, 0, 0, 2, 1, -7, 0, 3, 0), new NUC(2, 0, 1, 0, 0, 6, 0, 0, 0), new NUC(-2, 0, 2, 2, 2, 6, 0, -3, 0), new NUC(-2, 0, 1, 2, 1, 6, 0, -3, 0), new NUC(2, 0, -2, 0, 1, -6, 0, 3, 0), new NUC(2, 0, 0, 0, 1, -6, 0, 3, 0), new NUC(0, -1, 1, 0, 0, 5, 0, 0, 0), new NUC(-2, -1, 0, 2, 1, -5, 0, 3, 0), new NUC(-2, 0, 0, 0, 1, -5, 0, 3, 0), new NUC(0, 0, 2, 2, 1, -5, 0, 3, 0), new NUC(-2, 0, 2, 0, 1, 4, 0, 0, 0), new NUC(-2, 1, 0, 2, 1, 4, 0, 0, 0), new NUC(0, 0, 1, -2, 0, 4, 0, 0, 0), new NUC(-1, 0, 1, 0, 0, -4, 0, 0, 0), new NUC(-2, 1, 0, 0, 0, -4, 0, 0, 0), new NUC(1, 0, 0, 0, 0, -4, 0, 0, 0), new NUC(0, 0, 1, 2, 0, 3, 0, 0, 0), new NUC(0, 0, -2, 2, 2, -3, 0, 0, 0), new NUC(-1, -1, 1, 0, 0, -3, 0, 0, 0), new NUC(0, 1, 1, 0, 0, -3, 0, 0, 0), new NUC(0, -1, 1, 2, 2, -3, 0, 0, 0), new NUC(2, -1, -1, 2, 2, -3, 0, 0, 0), new NUC(0, 0, 3, 2, 2, -3, 0, 0, 0), new NUC(2, -1, 0, 2, 2, -3, 0, 0, 0) ];
GFX.g_AAParallax_C1 = Math.sin(CT.d2R(CT.dmS2D(0, 0, 8.794)));
GFX.g_PlutoArgumentCoefficients = [ new PlutoCoefficient1(0, 0, 1), new PlutoCoefficient1(0, 0, 2), new PlutoCoefficient1(0, 0, 3), new PlutoCoefficient1(0, 0, 4), new PlutoCoefficient1(0, 0, 5), new PlutoCoefficient1(0, 0, 6), new PlutoCoefficient1(0, 1, -1), new PlutoCoefficient1(0, 1, 0), new PlutoCoefficient1(0, 1, 1), new PlutoCoefficient1(0, 1, 2), new PlutoCoefficient1(0, 1, 3), new PlutoCoefficient1(0, 2, -2), new PlutoCoefficient1(0, 2, -1), new PlutoCoefficient1(0, 2, 0), new PlutoCoefficient1(1, -1, 0), new PlutoCoefficient1(1, -1, 1), new PlutoCoefficient1(1, 0, -3), new PlutoCoefficient1(1, 0, -2), new PlutoCoefficient1(1, 0, -1), new PlutoCoefficient1(1, 0, 0), new PlutoCoefficient1(1, 0, 1), new PlutoCoefficient1(1, 0, 2), new PlutoCoefficient1(1, 0, 3), new PlutoCoefficient1(1, 0, 4), new PlutoCoefficient1(1, 1, -3), new PlutoCoefficient1(1, 1, -2), new PlutoCoefficient1(1, 1, -1), new PlutoCoefficient1(1, 1, 0), new PlutoCoefficient1(1, 1, 1), new PlutoCoefficient1(1, 1, 3), new PlutoCoefficient1(2, 0, -6), new PlutoCoefficient1(2, 0, -5), new PlutoCoefficient1(2, 0, -4), new PlutoCoefficient1(2, 0, -3), new PlutoCoefficient1(2, 0, -2), new PlutoCoefficient1(2, 0, -1), new PlutoCoefficient1(2, 0, 0), new PlutoCoefficient1(2, 0, 1), new PlutoCoefficient1(2, 0, 2), new PlutoCoefficient1(2, 0, 3), new PlutoCoefficient1(3, 0, -2), new PlutoCoefficient1(3, 0, -1), new PlutoCoefficient1(3, 0, 0) ];
GFX.g_PlutoLongitudeCoefficients = [ new PlutoCoefficient2(-19799805, 19850055), new PlutoCoefficient2(897144, -4954829), new PlutoCoefficient2(611149, 1211027), new PlutoCoefficient2(-341243, -189585), new PlutoCoefficient2(129287, -34992), new PlutoCoefficient2(-38164, 30893), new PlutoCoefficient2(20442, -9987), new PlutoCoefficient2(-4063, -5071), new PlutoCoefficient2(-6016, -3336), new PlutoCoefficient2(-3956, 3039), new PlutoCoefficient2(-667, 3572), new PlutoCoefficient2(1276, 501), new PlutoCoefficient2(1152, -917), new PlutoCoefficient2(630, -1277), new PlutoCoefficient2(2571, -459), new PlutoCoefficient2(899, -1449), new PlutoCoefficient2(-1016, 1043), new PlutoCoefficient2(-2343, -1012), new PlutoCoefficient2(7042, 788), new PlutoCoefficient2(1199, -338), new PlutoCoefficient2(418, -67), new PlutoCoefficient2(120, -274), new PlutoCoefficient2(-60, -159), new PlutoCoefficient2(-82, -29), new PlutoCoefficient2(-36, -29), new PlutoCoefficient2(-40, 7), new PlutoCoefficient2(-14, 22), new PlutoCoefficient2(4, 13), new PlutoCoefficient2(5, 2), new PlutoCoefficient2(-1, 0), new PlutoCoefficient2(2, 0), new PlutoCoefficient2(-4, 5), new PlutoCoefficient2(4, -7), new PlutoCoefficient2(14, 24), new PlutoCoefficient2(-49, -34), new PlutoCoefficient2(163, -48), new PlutoCoefficient2(9, -24), new PlutoCoefficient2(-4, 1), new PlutoCoefficient2(-3, 1), new PlutoCoefficient2(1, 3), new PlutoCoefficient2(-3, -1), new PlutoCoefficient2(5, -3), new PlutoCoefficient2(0, 0) ];
GFX.g_PlutoLatitudeCoefficients = [ new PlutoCoefficient2(-5452852, -14974862), new PlutoCoefficient2(3527812, 1672790), new PlutoCoefficient2(-1050748, 327647), new PlutoCoefficient2(178690, -292153), new PlutoCoefficient2(18650, 100340), new PlutoCoefficient2(-30697, -25823), new PlutoCoefficient2(4878, 11248), new PlutoCoefficient2(226, -64), new PlutoCoefficient2(2030, -836), new PlutoCoefficient2(69, -604), new PlutoCoefficient2(-247, -567), new PlutoCoefficient2(-57, 1), new PlutoCoefficient2(-122, 175), new PlutoCoefficient2(-49, -164), new PlutoCoefficient2(-197, 199), new PlutoCoefficient2(-25, 217), new PlutoCoefficient2(589, -248), new PlutoCoefficient2(-269, 711), new PlutoCoefficient2(185, 193), new PlutoCoefficient2(315, 807), new PlutoCoefficient2(-130, -43), new PlutoCoefficient2(5, 3), new PlutoCoefficient2(2, 17), new PlutoCoefficient2(2, 5), new PlutoCoefficient2(2, 3), new PlutoCoefficient2(3, 1), new PlutoCoefficient2(2, -1), new PlutoCoefficient2(1, -1), new PlutoCoefficient2(0, -1), new PlutoCoefficient2(0, 0), new PlutoCoefficient2(0, -2), new PlutoCoefficient2(2, 2), new PlutoCoefficient2(-7, 0), new PlutoCoefficient2(10, -8), new PlutoCoefficient2(-3, 20), new PlutoCoefficient2(6, 5), new PlutoCoefficient2(14, 17), new PlutoCoefficient2(-2, 0), new PlutoCoefficient2(0, 0), new PlutoCoefficient2(0, 0), new PlutoCoefficient2(0, 1), new PlutoCoefficient2(0, 0), new PlutoCoefficient2(1, 0) ];
GFX.g_PlutoRadiusCoefficients = [ new PlutoCoefficient2(66865439, 68951812), new PlutoCoefficient2(-11827535, -332538), new PlutoCoefficient2(1593179, -1438890), new PlutoCoefficient2(-18444, 483220), new PlutoCoefficient2(-65977, -85431), new PlutoCoefficient2(31174, -6032), new PlutoCoefficient2(-5794, 22161), new PlutoCoefficient2(4601, 4032), new PlutoCoefficient2(-1729, 234), new PlutoCoefficient2(-415, 702), new PlutoCoefficient2(239, 723), new PlutoCoefficient2(67, -67), new PlutoCoefficient2(1034, -451), new PlutoCoefficient2(-129, 504), new PlutoCoefficient2(480, -231), new PlutoCoefficient2(2, -441), new PlutoCoefficient2(-3359, 265), new PlutoCoefficient2(7856, -7832), new PlutoCoefficient2(36, 45763), new PlutoCoefficient2(8663, 8547), new PlutoCoefficient2(-809, -769), new PlutoCoefficient2(263, -144), new PlutoCoefficient2(-126, 32), new PlutoCoefficient2(-35, -16), new PlutoCoefficient2(-19, -4), new PlutoCoefficient2(-15, 8), new PlutoCoefficient2(-4, 12), new PlutoCoefficient2(5, 6), new PlutoCoefficient2(3, 1), new PlutoCoefficient2(6, -2), new PlutoCoefficient2(2, 2), new PlutoCoefficient2(-2, -2), new PlutoCoefficient2(14, 13), new PlutoCoefficient2(-63, 13), new PlutoCoefficient2(136, -236), new PlutoCoefficient2(273, 1065), new PlutoCoefficient2(251, 149), new PlutoCoefficient2(-25, -9), new PlutoCoefficient2(9, -2), new PlutoCoefficient2(-8, 7), new PlutoCoefficient2(2, -10), new PlutoCoefficient2(19, 35), new PlutoCoefficient2(10, 3) ];
GFX.g_L0SaturnCoefficients = [ new VSC(87401354, 0, 0), new VSC(11107660, 3.9620509, 213.29909544), new VSC(1414151, 4.5858152, 7.113547), new VSC(398379, 0.52112, 206.185548), new VSC(350769, 3.303299, 426.598191), new VSC(206816, 0.246584, 103.092774), new VSC(79271, 3.84007, 220.41264), new VSC(23990, 4.66977, 110.20632), new VSC(16574, 0.43719, 419.48464), new VSC(15820, 0.93809, 632.78374), new VSC(15054, 2.7167, 639.89729), new VSC(14907, 5.76903, 316.39187), new VSC(14610, 1.56519, 3.93215), new VSC(13160, 4.44891, 14.22709), new VSC(13005, 5.98119, 11.0457), new VSC(10725, 3.1294, 202.2534), new VSC(6126, 1.7633, 277.035), new VSC(5863, 0.2366, 529.691), new VSC(5228, 4.2078, 3.1814), new VSC(5020, 3.1779, 433.7117), new VSC(4593, 0.6198, 199.072), new VSC(4006, 2.2448, 63.7359), new VSC(3874, 3.2228, 138.5175), new VSC(3269, 0.7749, 949.1756), new VSC(2954, 0.9828, 95.9792), new VSC(2461, 2.0316, 735.8765), new VSC(1758, 3.2658, 522.5774), new VSC(1640, 5.505, 846.0828), new VSC(1581, 4.3727, 309.2783), new VSC(1391, 4.0233, 323.5054), new VSC(1124, 2.8373, 415.5525), new VSC(1087, 4.1834, 2.4477), new VSC(1017, 3.717, 227.5262), new VSC(957, 0.507, 1265.567), new VSC(853, 3.421, 175.166), new VSC(849, 3.191, 209.367), new VSC(789, 5.007, 0.963), new VSC(749, 2.144, 853.196), new VSC(744, 5.253, 224.345), new VSC(687, 1.747, 1052.268), new VSC(654, 1.599, 0.048), new VSC(634, 2.299, 412.371), new VSC(625, 0.97, 210.118), new VSC(580, 3.093, 74.782), new VSC(546, 2.127, 350.332), new VSC(543, 1.518, 9.561), new VSC(530, 4.449, 117.32), new VSC(478, 2.965, 137.033), new VSC(474, 5.475, 742.99), new VSC(452, 1.044, 490.334), new VSC(449, 1.29, 127.472), new VSC(372, 2.278, 217.231), new VSC(355, 3.013, 838.969), new VSC(347, 1.539, 340.771), new VSC(343, 0.246, 0.521), new VSC(330, 0.247, 1581.959), new VSC(322, 0.961, 203.738), new VSC(322, 2.572, 647.011), new VSC(309, 3.495, 216.48), new VSC(287, 2.37, 351.817), new VSC(278, 0.4, 211.815), new VSC(249, 1.47, 1368.66), new VSC(227, 4.91, 12.53), new VSC(220, 4.204, 200.769), new VSC(209, 1.345, 625.67), new VSC(208, 0.483, 1162.475), new VSC(208, 1.283, 39.357), new VSC(204, 6.011, 265.989), new VSC(185, 3.503, 149.563), new VSC(184, 0.973, 4.193), new VSC(182, 5.491, 2.921), new VSC(174, 1.863, 0.751), new VSC(165, 0.44, 5.417), new VSC(149, 5.736, 52.69), new VSC(148, 1.535, 5.629), new VSC(146, 6.231, 195.14), new VSC(140, 4.295, 21.341), new VSC(131, 4.068, 10.295), new VSC(125, 6.277, 1898.351), new VSC(122, 1.976, 4.666), new VSC(118, 5.341, 554.07), new VSC(117, 2.679, 1155.361), new VSC(114, 5.594, 1059.382), new VSC(112, 1.105, 191.208), new VSC(110, 0.166, 1.484), new VSC(109, 3.438, 536.805), new VSC(107, 4.012, 956.289), new VSC(104, 2.192, 88.866), new VSC(103, 1.197, 1685.052), new VSC(101, 4.965, 269.921) ];
GFX.g_L1SaturnCoefficients = [ new VSC(21354295596, 0, 0), new VSC(1296855, 1.8282054, 213.2990954), new VSC(564348, 2.885001, 7.113547), new VSC(107679, 2.277699, 206.185548), new VSC(98323, 1.0807, 426.59819), new VSC(40255, 2.04128, 220.41264), new VSC(19942, 1.27955, 103.09277), new VSC(10512, 2.7488, 14.22709), new VSC(6939, 0.4049, 639.8973), new VSC(4803, 2.4419, 419.4846), new VSC(4056, 2.9217, 110.2063), new VSC(3769, 3.6497, 3.9322), new VSC(3385, 2.4169, 3.1814), new VSC(3302, 1.2626, 433.7117), new VSC(3071, 2.3274, 199.072), new VSC(1953, 3.5639, 11.0457), new VSC(1249, 2.628, 95.9792), new VSC(922, 1.961, 227.526), new VSC(706, 4.417, 529.691), new VSC(650, 6.174, 202.253), new VSC(628, 6.111, 309.278), new VSC(487, 6.04, 853.196), new VSC(479, 4.988, 522.577), new VSC(468, 4.617, 63.736), new VSC(417, 2.117, 323.505), new VSC(408, 1.299, 209.367), new VSC(352, 2.317, 632.784), new VSC(344, 3.959, 412.371), new VSC(340, 3.634, 316.392), new VSC(336, 3.772, 735.877), new VSC(332, 2.861, 210.118), new VSC(289, 2.733, 117.32), new VSC(281, 5.744, 2.448), new VSC(266, 0.543, 647.011), new VSC(230, 1.644, 216.48), new VSC(192, 2.965, 224.345), new VSC(173, 4.077, 846.083), new VSC(167, 2.597, 21.341), new VSC(136, 2.286, 10.295), new VSC(131, 3.441, 742.99), new VSC(128, 4.095, 217.231), new VSC(109, 6.161, 415.552), new VSC(98, 4.73, 838.97), new VSC(94, 3.48, 1052.27), new VSC(92, 3.95, 88.87), new VSC(87, 1.22, 440.83), new VSC(83, 3.11, 625.67), new VSC(78, 6.24, 302.16), new VSC(67, 0.29, 4.67), new VSC(66, 5.65, 9.56), new VSC(62, 4.29, 127.47), new VSC(62, 1.83, 195.14), new VSC(58, 2.48, 191.96), new VSC(57, 5.02, 137.03), new VSC(55, 0.28, 74.78), new VSC(54, 5.13, 490.33), new VSC(51, 1.46, 536.8), new VSC(47, 1.18, 149.56), new VSC(47, 5.15, 515.46), new VSC(46, 2.23, 956.29), new VSC(44, 2.71, 5.42), new VSC(40, 0.41, 269.92), new VSC(40, 3.89, 728.76), new VSC(38, 0.65, 422.67), new VSC(38, 2.53, 12.53), new VSC(37, 3.78, 2.92), new VSC(35, 6.08, 5.63), new VSC(34, 3.21, 1368.66), new VSC(33, 4.64, 277.03), new VSC(33, 5.43, 1066.5), new VSC(33, 0.3, 351.82), new VSC(32, 4.39, 1155.36), new VSC(31, 2.43, 52.69), new VSC(30, 2.84, 203), new VSC(30, 6.19, 284.15), new VSC(30, 3.39, 1059.38), new VSC(29, 2.03, 330.62), new VSC(28, 2.74, 265.99), new VSC(26, 4.51, 340.77) ];
GFX.g_L2SaturnCoefficients = [ new VSC(116441, 1.179879, 7.113547), new VSC(91921, 0.07425, 213.2991), new VSC(90592, 0, 0), new VSC(15277, 4.06492, 206.18555), new VSC(10631, 0.25778, 220.41264), new VSC(10605, 5.40964, 426.59819), new VSC(4265, 1.046, 14.2271), new VSC(1216, 2.9186, 103.0928), new VSC(1165, 4.6094, 639.8973), new VSC(1082, 5.6913, 433.7117), new VSC(1045, 4.0421, 199.072), new VSC(1020, 0.6337, 3.1814), new VSC(634, 4.388, 419.485), new VSC(549, 5.573, 3.932), new VSC(457, 1.268, 110.206), new VSC(425, 0.209, 227.526), new VSC(274, 4.288, 95.979), new VSC(162, 1.381, 11.046), new VSC(129, 1.566, 309.278), new VSC(117, 3.881, 853.196), new VSC(105, 4.9, 647.011), new VSC(101, 0.893, 21.341), new VSC(96, 2.91, 316.39), new VSC(95, 5.63, 412.37), new VSC(85, 5.73, 209.37), new VSC(83, 6.05, 216.48), new VSC(82, 1.02, 117.32), new VSC(75, 4.76, 210.12), new VSC(67, 0.46, 522.58), new VSC(66, 0.48, 10.29), new VSC(64, 0.35, 323.51), new VSC(61, 4.88, 632.78), new VSC(53, 2.75, 529.69), new VSC(46, 5.69, 440.83), new VSC(45, 1.67, 202.25), new VSC(42, 5.71, 88.87), new VSC(32, 0.07, 63.74), new VSC(32, 1.67, 302.16), new VSC(31, 4.16, 191.96), new VSC(27, 0.83, 224.34), new VSC(25, 5.66, 735.88), new VSC(20, 5.94, 217.23), new VSC(18, 4.9, 625.67), new VSC(17, 1.63, 742.99), new VSC(16, 0.58, 515.46), new VSC(14, 0.21, 838.97), new VSC(14, 3.76, 195.14), new VSC(12, 4.72, 203), new VSC(12, 0.13, 234.64), new VSC(12, 3.12, 846.08), new VSC(11, 5.92, 536.8), new VSC(11, 5.6, 728.76), new VSC(11, 3.2, 1066.5), new VSC(10, 4.99, 422.67), new VSC(10, 0.26, 330.62), new VSC(10, 4.15, 860.31), new VSC(9, 0.46, 956.29), new VSC(8, 2.14, 269.92), new VSC(8, 5.25, 429.78), new VSC(8, 4.03, 9.56), new VSC(7, 5.4, 1052.27), new VSC(6, 4.46, 284.15), new VSC(6, 5.93, 405.26) ];
GFX.g_L3SaturnCoefficients = [ new VSC(16039, 5.73945, 7.11355), new VSC(4250, 4.5854, 213.2991), new VSC(1907, 4.7608, 220.4126), new VSC(1466, 5.9133, 206.1855), new VSC(1162, 5.6197, 14.2271), new VSC(1067, 3.6082, 426.5982), new VSC(239, 3.861, 433.712), new VSC(237, 5.768, 199.072), new VSC(166, 5.116, 3.181), new VSC(151, 2.736, 639.897), new VSC(131, 4.743, 227.526), new VSC(63, 0.23, 419.48), new VSC(62, 4.74, 103.09), new VSC(40, 5.47, 21.34), new VSC(40, 5.96, 95.98), new VSC(39, 5.83, 110.21), new VSC(28, 3.01, 647.01), new VSC(25, 0.99, 3.93), new VSC(19, 1.92, 853.2), new VSC(18, 4.97, 10.29), new VSC(18, 1.03, 412.37), new VSC(18, 4.2, 216.48), new VSC(18, 3.32, 309.28), new VSC(16, 3.9, 440.83), new VSC(16, 5.62, 117.32), new VSC(13, 1.18, 88.87), new VSC(11, 5.58, 11.05), new VSC(11, 5.93, 191.96), new VSC(10, 3.95, 209.37), new VSC(9, 3.39, 302.16), new VSC(8, 4.88, 323.51), new VSC(7, 0.38, 632.78), new VSC(6, 2.25, 522.58), new VSC(6, 1.06, 210.12), new VSC(5, 4.64, 234.64), new VSC(4, 3.14, 0), new VSC(4, 2.31, 515.46), new VSC(3, 2.2, 860.31), new VSC(3, 0.59, 529.69), new VSC(3, 4.93, 224.34), new VSC(3, 0.42, 625.67), new VSC(2, 4.77, 330.62), new VSC(2, 3.35, 429.78), new VSC(2, 3.2, 202.25), new VSC(2, 1.19, 1066.5), new VSC(2, 1.35, 405.26), new VSC(2, 4.16, 223.59), new VSC(2, 3.07, 654.12) ];
GFX.g_L4SaturnCoefficients = [ new VSC(1662, 3.9983, 7.1135), new VSC(257, 2.984, 220.413), new VSC(236, 3.902, 14.227), new VSC(149, 2.741, 213.299), new VSC(114, 3.142, 0), new VSC(110, 1.515, 206.186), new VSC(68, 1.72, 426.6), new VSC(40, 2.05, 433.71), new VSC(38, 1.24, 199.07), new VSC(31, 3.01, 227.53), new VSC(15, 0.83, 639.9), new VSC(9, 3.71, 21.34), new VSC(6, 2.42, 419.48), new VSC(6, 1.16, 647.01), new VSC(4, 1.45, 95.98), new VSC(4, 2.12, 440.83), new VSC(3, 4.09, 110.21), new VSC(3, 2.77, 412.37), new VSC(3, 3.01, 88.87), new VSC(3, 0, 853.2), new VSC(3, 0.39, 103.09), new VSC(2, 3.78, 117.32), new VSC(2, 2.83, 234.64), new VSC(2, 5.08, 309.28), new VSC(2, 2.24, 216.48), new VSC(2, 5.19, 302.16), new VSC(1, 1.55, 191.96) ];
GFX.g_L5SaturnCoefficients = [ new VSC(124, 2.259, 7.114), new VSC(34, 2.16, 14.23), new VSC(28, 1.2, 220.41), new VSC(6, 1.22, 227.53), new VSC(5, 0.24, 433.71), new VSC(4, 6.23, 426.6), new VSC(3, 2.97, 199.07), new VSC(3, 4.29, 206.19), new VSC(2, 6.25, 213.3), new VSC(1, 5.28, 639.9), new VSC(1, 0.24, 440.83), new VSC(1, 3.14, 0) ];
GFX.g_B0SaturnCoefficients = [ new VSC(4330678, 3.6028443, 213.2990954), new VSC(240348, 2.852385, 426.598191), new VSC(84746, 0, 0), new VSC(34116, 0.57297, 206.18555), new VSC(30863, 3.48442, 220.41264), new VSC(14734, 2.11847, 639.89729), new VSC(9917, 5.79, 419.4846), new VSC(6994, 4.736, 7.1135), new VSC(4808, 5.4331, 316.3919), new VSC(4788, 4.9651, 110.2063), new VSC(3432, 2.7326, 433.7117), new VSC(1506, 6.013, 103.0928), new VSC(1060, 5.631, 529.691), new VSC(969, 5.204, 632.784), new VSC(942, 1.396, 853.196), new VSC(708, 3.803, 323.505), new VSC(552, 5.131, 202.253), new VSC(400, 3.359, 227.526), new VSC(319, 3.626, 209.367), new VSC(316, 1.997, 647.011), new VSC(314, 0.465, 217.231), new VSC(284, 4.886, 224.345), new VSC(236, 2.139, 11.046), new VSC(215, 5.95, 846.083), new VSC(209, 2.12, 415.552), new VSC(207, 0.73, 199.072), new VSC(179, 2.954, 63.736), new VSC(141, 0.644, 490.334), new VSC(139, 4.595, 14.227), new VSC(139, 1.998, 735.877), new VSC(135, 5.245, 742.99), new VSC(122, 3.115, 522.577), new VSC(116, 3.109, 216.48), new VSC(114, 0.963, 210.118) ];
GFX.g_B1SaturnCoefficients = [ new VSC(397555, 5.3329, 213.299095), new VSC(49479, 3.14159, 0), new VSC(18572, 6.09919, 426.59819), new VSC(14801, 2.30586, 206.18555), new VSC(9644, 1.6967, 220.4126), new VSC(3757, 1.2543, 419.4846), new VSC(2717, 5.9117, 639.8973), new VSC(1455, 0.8516, 433.7117), new VSC(1291, 2.9177, 7.1135), new VSC(853, 0.436, 316.392), new VSC(298, 0.919, 632.784), new VSC(292, 5.316, 853.196), new VSC(284, 1.619, 227.526), new VSC(275, 3.889, 103.093), new VSC(172, 0.052, 647.011), new VSC(166, 2.444, 199.072), new VSC(158, 5.209, 110.206), new VSC(128, 1.207, 529.691), new VSC(110, 2.457, 217.231), new VSC(82, 2.76, 210.12), new VSC(81, 2.86, 14.23), new VSC(69, 1.66, 202.25), new VSC(65, 1.26, 216.48), new VSC(61, 1.25, 209.37), new VSC(59, 1.82, 323.51), new VSC(46, 0.82, 440.83), new VSC(36, 1.82, 224.34), new VSC(34, 2.84, 117.32), new VSC(33, 1.31, 412.37), new VSC(32, 1.19, 846.08), new VSC(27, 4.65, 1066.5), new VSC(27, 4.44, 11.05) ];
GFX.g_B2SaturnCoefficients = [ new VSC(20630, 0.50482, 213.2991), new VSC(3720, 3.9983, 206.1855), new VSC(1627, 6.1819, 220.4126), new VSC(1346, 0, 0), new VSC(706, 3.039, 419.485), new VSC(365, 5.099, 426.598), new VSC(330, 5.279, 433.712), new VSC(219, 3.828, 639.897), new VSC(139, 1.043, 7.114), new VSC(104, 6.157, 227.526), new VSC(93, 1.98, 316.39), new VSC(71, 4.15, 199.07), new VSC(52, 2.88, 632.78), new VSC(49, 4.43, 647.01), new VSC(41, 3.16, 853.2), new VSC(29, 4.53, 210.12), new VSC(24, 1.12, 14.23), new VSC(21, 4.35, 217.23), new VSC(20, 5.31, 440.83), new VSC(18, 0.85, 110.21), new VSC(17, 5.68, 216.48), new VSC(16, 4.26, 103.09), new VSC(14, 3, 412.37), new VSC(12, 2.53, 529.69), new VSC(8, 3.32, 202.25), new VSC(7, 5.56, 209.37), new VSC(7, 0.29, 323.51), new VSC(6, 1.16, 117.32), new VSC(6, 3.61, 869.31) ];
GFX.g_B3SaturnCoefficients = [ new VSC(666, 1.99, 213.299), new VSC(632, 5.698, 206.186), new VSC(398, 0, 0), new VSC(188, 4.338, 220.413), new VSC(92, 4.84, 419.48), new VSC(52, 3.42, 433.71), new VSC(42, 2.38, 426.6), new VSC(26, 4.4, 227.53), new VSC(21, 5.85, 199.07), new VSC(18, 1.99, 639.9), new VSC(11, 5.37, 7.11), new VSC(10, 2.55, 647.01), new VSC(7, 3.46, 316.39), new VSC(6, 4.8, 632.78), new VSC(6, 0.02, 210.12), new VSC(6, 3.52, 440.83), new VSC(5, 5.64, 14.23), new VSC(5, 1.22, 853.2), new VSC(4, 4.71, 412.37), new VSC(3, 0.63, 103.09), new VSC(2, 3.72, 216.48) ];
GFX.g_B4SaturnCoefficients = [ new VSC(80, 1.12, 206.19), new VSC(32, 3.12, 213.3), new VSC(17, 2.48, 220.41), new VSC(12, 3.14, 0), new VSC(9, 0.38, 419.48), new VSC(6, 1.56, 433.71), new VSC(5, 2.63, 227.53), new VSC(5, 1.28, 199.07), new VSC(1, 1.43, 426.6), new VSC(1, 0.67, 647.01), new VSC(1, 1.72, 440.83), new VSC(1, 6.18, 639.9) ];
GFX.g_B5SaturnCoefficients = [ new VSC(8, 2.82, 206.19), new VSC(1, 0.51, 220.41) ];
GFX.g_R0SaturnCoefficients = [ new VSC(955758136, 0, 0), new VSC(52921382, 2.3922622, 213.29909544), new VSC(1873680, 5.2354961, 206.1855484), new VSC(1464664, 1.6476305, 426.5981909), new VSC(821891, 5.9352, 316.39187), new VSC(547507, 5.015326, 103.092774), new VSC(371684, 2.271148, 220.412642), new VSC(361778, 3.139043, 7.113547), new VSC(140618, 5.704067, 632.783739), new VSC(108975, 3.293136, 110.206321), new VSC(69007, 5.941, 419.48464), new VSC(61053, 0.94038, 639.89729), new VSC(48913, 1.55733, 202.2534), new VSC(34144, 0.19519, 277.03499), new VSC(32402, 5.47085, 949.17561), new VSC(20937, 0.46349, 735.87651), new VSC(20839, 1.52103, 433.71174), new VSC(20747, 5.33256, 199.072), new VSC(15298, 3.05944, 529.69097), new VSC(14296, 2.60434, 323.50542), new VSC(12884, 1.64892, 138.5175), new VSC(11993, 5.98051, 846.08283), new VSC(11380, 1.73106, 522.57742), new VSC(9796, 5.2048, 1265.5675), new VSC(7753, 5.8519, 95.9792), new VSC(6771, 3.0043, 14.2271), new VSC(6466, 0.1773, 1052.2684), new VSC(5850, 1.4552, 415.5525), new VSC(5307, 0.5974, 63.7359), new VSC(4696, 2.1492, 227.5262), new VSC(4044, 1.6401, 209.3669), new VSC(3688, 0.7802, 412.3711), new VSC(3461, 1.8509, 175.1661), new VSC(3420, 4.9455, 1581.9593), new VSC(3401, 0.5539, 350.3321), new VSC(3376, 3.6953, 224.3448), new VSC(2976, 5.6847, 210.1177), new VSC(2885, 1.3876, 838.9693), new VSC(2881, 0.1796, 853.1964), new VSC(2508, 3.5385, 742.9901), new VSC(2448, 6.1841, 1368.6603), new VSC(2406, 2.9656, 117.3199), new VSC(2174, 0.0151, 340.7709), new VSC(2024, 5.0541, 11.0457) ];
GFX.g_R1SaturnCoefficients = [ new VSC(6182981, 0.2584352, 213.2990954), new VSC(506578, 0.711147, 206.185548), new VSC(341394, 5.796358, 426.598191), new VSC(188491, 0.472157, 220.412642), new VSC(186262, 3.141593, 0), new VSC(143891, 1.407449, 7.113547), new VSC(49621, 6.01744, 103.09277), new VSC(20928, 5.09246, 639.89729), new VSC(19953, 1.1756, 419.48464), new VSC(18840, 1.6082, 110.20632), new VSC(13877, 0.75886, 199.072), new VSC(12893, 5.9433, 433.71174), new VSC(5397, 1.2885, 14.2271), new VSC(4869, 0.8679, 323.5054), new VSC(4247, 0.393, 227.5262), new VSC(3252, 1.2585, 95.9792), new VSC(3081, 3.4366, 522.5774), new VSC(2909, 4.6068, 202.2534), new VSC(2856, 2.1673, 735.8765), new VSC(1988, 2.4505, 412.3711), new VSC(1941, 6.0239, 209.3669), new VSC(1581, 1.2919, 210.1177), new VSC(1340, 4.308, 853.1964), new VSC(1316, 1.253, 117.3199), new VSC(1203, 1.8665, 316.3919), new VSC(1091, 0.0753, 216.4805), new VSC(966, 0.48, 632.784), new VSC(954, 5.152, 647.011), new VSC(898, 0.983, 529.691), new VSC(882, 1.885, 1052.268), new VSC(874, 1.402, 224.345), new VSC(785, 3.064, 838.969), new VSC(740, 1.382, 625.67), new VSC(658, 4.144, 309.278), new VSC(650, 1.725, 742.99), new VSC(613, 3.033, 63.736), new VSC(599, 2.549, 217.231), new VSC(503, 2.13, 3.932) ];
GFX.g_R2SaturnCoefficients = [ new VSC(436902, 4.786717, 213.299095), new VSC(71923, 2.5007, 206.18555), new VSC(49767, 4.97168, 220.41264), new VSC(43221, 3.8694, 426.59819), new VSC(29646, 5.9631, 7.11355), new VSC(4721, 2.4753, 199.072), new VSC(4142, 4.1067, 433.7117), new VSC(3789, 3.0977, 639.8973), new VSC(2964, 1.3721, 103.0928), new VSC(2556, 2.8507, 419.4846), new VSC(2327, 0, 0), new VSC(2208, 6.2759, 110.2063), new VSC(2188, 5.8555, 14.2271), new VSC(1957, 4.9245, 227.5262), new VSC(924, 5.464, 323.505), new VSC(706, 2.971, 95.979), new VSC(546, 4.129, 412.371), new VSC(431, 5.178, 522.577), new VSC(405, 4.173, 209.367), new VSC(391, 4.481, 216.48), new VSC(374, 5.834, 117.32), new VSC(361, 3.277, 647.011), new VSC(356, 3.192, 210.118), new VSC(326, 2.269, 853.196), new VSC(207, 4.022, 735.877), new VSC(204, 0.088, 202.253), new VSC(180, 3.597, 632.784), new VSC(178, 4.097, 440.825), new VSC(154, 3.135, 625.67), new VSC(148, 0.136, 302.165), new VSC(133, 2.594, 191.958), new VSC(132, 5.933, 309.278) ];
GFX.g_R3SaturnCoefficients = [ new VSC(20315, 3.02187, 213.2991), new VSC(8924, 3.1914, 220.4126), new VSC(6909, 4.3517, 206.1855), new VSC(4087, 4.2241, 7.1135), new VSC(3879, 2.0106, 426.5982), new VSC(1071, 4.2036, 199.072), new VSC(907, 2.283, 433.712), new VSC(606, 3.175, 227.526), new VSC(597, 4.135, 14.227), new VSC(483, 1.173, 639.897), new VSC(393, 0, 0), new VSC(229, 4.698, 419.485), new VSC(188, 4.59, 110.206), new VSC(150, 3.202, 103.093), new VSC(121, 3.768, 323.505), new VSC(102, 4.71, 95.979), new VSC(101, 5.819, 412.371), new VSC(93, 1.44, 647.01), new VSC(84, 2.63, 216.48), new VSC(73, 4.15, 117.32), new VSC(62, 2.31, 440.83), new VSC(55, 0.31, 853.2), new VSC(50, 2.39, 209.37), new VSC(45, 4.37, 191.96), new VSC(41, 0.69, 522.58), new VSC(40, 1.84, 302.16), new VSC(38, 5.94, 88.87), new VSC(32, 4.01, 21.34) ];
GFX.g_R4SaturnCoefficients = [ new VSC(1202, 1.415, 220.4126), new VSC(708, 1.162, 213.299), new VSC(516, 6.24, 206.186), new VSC(427, 2.469, 7.114), new VSC(268, 0.187, 426.598), new VSC(170, 5.959, 199.072), new VSC(150, 0.48, 433.712), new VSC(145, 1.442, 227.526), new VSC(121, 2.405, 14.227), new VSC(47, 5.57, 639.9), new VSC(19, 5.86, 647.01), new VSC(17, 0.53, 440.83), new VSC(16, 2.9, 110.21), new VSC(15, 0.3, 419.48), new VSC(14, 1.3, 412.37), new VSC(13, 2.09, 323.51), new VSC(11, 0.22, 95.98), new VSC(11, 2.46, 117.32), new VSC(10, 3.14, 0), new VSC(9, 1.56, 88.87), new VSC(9, 2.28, 21.34), new VSC(9, 0.68, 216.48), new VSC(8, 1.27, 234.64) ];
GFX.g_R5SaturnCoefficients = [ new VSC(129, 5.913, 220.413), new VSC(32, 0.69, 7.11), new VSC(27, 5.91, 227.53), new VSC(20, 4.95, 433.71), new VSC(20, 0.67, 14.23), new VSC(14, 2.67, 206.19), new VSC(14, 1.46, 199.07), new VSC(13, 4.59, 426.6), new VSC(7, 4.63, 213.3), new VSC(5, 3.61, 639.9), new VSC(4, 4.9, 440.83), new VSC(3, 4.07, 647.01), new VSC(3, 4.66, 191.96), new VSC(3, 0.49, 323.51), new VSC(3, 3.18, 419.48), new VSC(2, 3.7, 88.87), new VSC(2, 3.32, 95.98), new VSC(2, 0.56, 117.32) ];
GFX.g_L0UranusCoefficients = [ new VSC(548129294, 0, 0), new VSC(9260408, 0.8910642, 74.7815986), new VSC(1504248, 3.6271926, 1.4844727), new VSC(365982, 1.899622, 73.297126), new VSC(272328, 3.358237, 149.563197), new VSC(70328, 5.39254, 63.7359), new VSC(68893, 6.09292, 76.26607), new VSC(61999, 2.26952, 2.96895), new VSC(61951, 2.85099, 11.0457), new VSC(26469, 3.14152, 71.81265), new VSC(25711, 6.1138, 454.90937), new VSC(21079, 4.36059, 148.07872), new VSC(17819, 1.74437, 36.64856), new VSC(14613, 4.73732, 3.93215), new VSC(11163, 5.82682, 224.3448), new VSC(10998, 0.48865, 138.5175), new VSC(9527, 2.9552, 35.1641), new VSC(7546, 5.2363, 109.9457), new VSC(4220, 3.2333, 70.8494), new VSC(4052, 2.2775, 151.0477), new VSC(3490, 5.4831, 146.5943), new VSC(3355, 1.0655, 4.4534), new VSC(3144, 4.752, 77.7505), new VSC(2927, 4.629, 9.5612), new VSC(2922, 5.3524, 85.8273), new VSC(2273, 4.366, 70.3282), new VSC(2149, 0.6075, 38.133), new VSC(2051, 1.5177, 0.1119), new VSC(1992, 4.9244, 277.035), new VSC(1667, 3.6274, 380.1278), new VSC(1533, 2.5859, 52.6902), new VSC(1376, 2.0428, 65.2204), new VSC(1372, 4.1964, 111.4302), new VSC(1284, 3.1135, 202.2534), new VSC(1282, 0.5427, 222.8603), new VSC(1244, 0.9161, 2.4477), new VSC(1221, 0.199, 108.4612), new VSC(1151, 4.179, 33.6796), new VSC(1150, 0.9334, 3.1814), new VSC(1090, 1.775, 12.5302), new VSC(1072, 0.2356, 62.2514), new VSC(946, 1.192, 127.472), new VSC(708, 5.183, 213.299), new VSC(653, 0.966, 78.714), new VSC(628, 0.182, 984.6), new VSC(607, 5.432, 529.691), new VSC(559, 3.358, 0.521), new VSC(524, 2.013, 299.126), new VSC(483, 2.106, 0.963), new VSC(471, 1.407, 184.727), new VSC(467, 0.415, 145.11), new VSC(434, 5.521, 183.243), new VSC(405, 5.987, 8.077), new VSC(399, 0.338, 415.552), new VSC(396, 5.87, 351.817), new VSC(379, 2.35, 56.622), new VSC(310, 5.833, 145.631), new VSC(300, 5.644, 22.091), new VSC(294, 5.839, 39.618), new VSC(252, 1.637, 221.376), new VSC(249, 4.746, 225.829), new VSC(239, 2.35, 137.033), new VSC(224, 0.516, 84.343), new VSC(223, 2.843, 0.261), new VSC(220, 1.922, 67.668), new VSC(217, 6.142, 5.938), new VSC(216, 4.778, 340.771), new VSC(208, 5.58, 68.844), new VSC(202, 1.297, 0.048), new VSC(199, 0.956, 152.532), new VSC(194, 1.888, 456.394), new VSC(193, 0.916, 453.425), new VSC(187, 1.319, 0.16), new VSC(182, 3.536, 79.235), new VSC(173, 1.539, 160.609), new VSC(172, 5.68, 219.891), new VSC(170, 3.677, 5.417), new VSC(169, 5.879, 18.159), new VSC(165, 1.424, 106.977), new VSC(163, 3.05, 112.915), new VSC(158, 0.738, 54.175), new VSC(147, 1.263, 59.804), new VSC(143, 1.3, 35.425), new VSC(139, 5.386, 32.195), new VSC(139, 4.26, 909.819), new VSC(124, 1.374, 7.114), new VSC(110, 2.027, 554.07), new VSC(109, 5.706, 77.963), new VSC(104, 5.028, 0.751), new VSC(104, 1.458, 24.379), new VSC(103, 0.681, 14.978) ];
GFX.g_L1UranusCoefficients = [ new VSC(7502543122, 0, 0), new VSC(154458, 5.242017, 74.781599), new VSC(24456, 1.71256, 1.48447), new VSC(9258, 0.4284, 11.0457), new VSC(8266, 1.5022, 63.7359), new VSC(7842, 1.3198, 149.5632), new VSC(3899, 0.4648, 3.9322), new VSC(2284, 4.1737, 76.2661), new VSC(1927, 0.5301, 2.9689), new VSC(1233, 1.5863, 70.8494), new VSC(791, 5.436, 3.181), new VSC(767, 1.996, 73.297), new VSC(482, 2.984, 85.827), new VSC(450, 4.138, 138.517), new VSC(446, 3.723, 224.345), new VSC(427, 4.731, 71.813), new VSC(354, 2.583, 148.079), new VSC(348, 2.454, 9.561), new VSC(317, 5.579, 52.69), new VSC(206, 2.363, 2.448), new VSC(189, 4.202, 56.622), new VSC(184, 0.284, 151.048), new VSC(180, 5.684, 12.53), new VSC(171, 3.001, 78.714), new VSC(158, 2.909, 0.963), new VSC(155, 5.591, 4.453), new VSC(154, 4.652, 35.164), new VSC(152, 2.942, 77.751), new VSC(143, 2.59, 62.251), new VSC(121, 4.148, 127.472), new VSC(116, 3.732, 65.22), new VSC(102, 4.188, 145.631), new VSC(102, 6.034, 0.112), new VSC(88, 3.99, 18.16), new VSC(88, 6.16, 202.25), new VSC(81, 2.64, 22.09), new VSC(72, 6.05, 70.33), new VSC(69, 4.05, 77.96), new VSC(59, 3.7, 67.67), new VSC(47, 3.54, 351.82), new VSC(44, 5.91, 7.11), new VSC(43, 5.72, 5.42), new VSC(39, 4.92, 222.86), new VSC(36, 5.9, 33.68), new VSC(36, 3.29, 8.08), new VSC(36, 3.33, 71.6), new VSC(35, 5.08, 38.13), new VSC(31, 5.62, 984.6), new VSC(31, 5.5, 59.8), new VSC(31, 5.46, 160.61), new VSC(30, 1.66, 447.8), new VSC(29, 1.15, 462.02), new VSC(29, 4.52, 84.34), new VSC(27, 5.54, 131.4), new VSC(27, 6.15, 299.13), new VSC(26, 4.99, 137.03), new VSC(25, 5.74, 380.13) ];
GFX.g_L2UranusCoefficients = [ new VSC(53033, 0, 0), new VSC(2358, 2.2601, 74.7816), new VSC(769, 4.526, 11.046), new VSC(552, 3.258, 63.736), new VSC(542, 2.276, 3.932), new VSC(529, 4.923, 1.484), new VSC(258, 3.691, 3.181), new VSC(239, 5.858, 149.563), new VSC(182, 6.218, 70.849), new VSC(54, 1.44, 76.27), new VSC(49, 6.03, 56.62), new VSC(45, 3.91, 2.45), new VSC(45, 0.81, 85.83), new VSC(38, 1.78, 52.69), new VSC(37, 4.46, 2.97), new VSC(33, 0.86, 9.56), new VSC(29, 5.1, 73.3), new VSC(24, 2.11, 18.16), new VSC(22, 5.99, 138.52), new VSC(22, 4.82, 78.71), new VSC(21, 2.4, 77.96), new VSC(21, 2.17, 224.34), new VSC(17, 2.54, 145.63), new VSC(17, 3.47, 12.53), new VSC(12, 0.02, 22.09), new VSC(11, 0.08, 127.47), new VSC(10, 5.16, 71.6), new VSC(10, 4.46, 62.25), new VSC(9, 4.26, 7.11), new VSC(8, 5.5, 67.67), new VSC(7, 1.25, 5.42), new VSC(6, 3.36, 447.8), new VSC(6, 5.45, 65.22), new VSC(6, 4.52, 151.05), new VSC(6, 5.73, 462.02) ];
GFX.g_L3UranusCoefficients = [ new VSC(121, 0.024, 74.782), new VSC(68, 4.12, 3.93), new VSC(53, 2.39, 11.05), new VSC(46, 0, 0), new VSC(45, 2.04, 3.18), new VSC(44, 2.96, 1.48), new VSC(25, 4.89, 63.74), new VSC(21, 4.55, 70.85), new VSC(20, 2.31, 149.56), new VSC(9, 1.58, 56.62), new VSC(4, 0.23, 18.16), new VSC(4, 5.39, 76.27), new VSC(4, 0.95, 77.96), new VSC(3, 4.98, 85.83), new VSC(3, 4.13, 52.69), new VSC(3, 0.37, 78.71), new VSC(2, 0.86, 145.63), new VSC(2, 5.66, 9.56) ];
GFX.g_L4UranusCoefficients = [ new VSC(114, 3.142, 0), new VSC(6, 4.58, 74.78), new VSC(3, 0.35, 11.05), new VSC(1, 3.42, 56.62) ];
GFX.g_B0UranusCoefficients = [ new VSC(1346278, 2.6187781, 74.7815986), new VSC(62341, 5.08111, 149.5632), new VSC(61601, 3.14159, 0), new VSC(9964, 1.616, 76.2661), new VSC(9926, 0.5763, 73.2971), new VSC(3259, 1.2612, 224.3448), new VSC(2972, 2.2437, 1.4845), new VSC(2010, 6.0555, 148.0787), new VSC(1522, 0.2796, 63.7359), new VSC(924, 4.038, 151.048), new VSC(761, 6.14, 71.813), new VSC(522, 3.321, 138.517), new VSC(463, 0.743, 85.827), new VSC(437, 3.381, 529.691), new VSC(435, 0.341, 77.751), new VSC(431, 3.554, 213.299), new VSC(420, 5.213, 11.046), new VSC(245, 0.788, 2.969), new VSC(233, 2.257, 222.86), new VSC(216, 1.591, 38.133), new VSC(180, 3.725, 299.126), new VSC(175, 1.236, 146.594), new VSC(174, 1.937, 380.128), new VSC(160, 5.336, 111.43), new VSC(144, 5.962, 35.164), new VSC(116, 5.739, 70.849), new VSC(106, 0.941, 70.328), new VSC(102, 2.619, 78.714) ];
GFX.g_B1UranusCoefficients = [ new VSC(206366, 4.123943, 74.781599), new VSC(8563, 0.3382, 149.5632), new VSC(1726, 2.1219, 73.2971), new VSC(1374, 0, 0), new VSC(1369, 3.0686, 76.2661), new VSC(451, 3.777, 1.484), new VSC(400, 2.848, 224.345), new VSC(307, 1.255, 148.079), new VSC(154, 3.786, 63.736), new VSC(112, 5.573, 151.048), new VSC(111, 5.329, 138.517), new VSC(83, 3.59, 71.81), new VSC(56, 3.4, 85.83), new VSC(54, 1.7, 77.75), new VSC(42, 1.21, 11.05), new VSC(41, 4.45, 78.71), new VSC(32, 3.77, 222.86), new VSC(30, 2.56, 2.97), new VSC(27, 5.34, 213.3), new VSC(26, 0.42, 380.13) ];
GFX.g_B2UranusCoefficients = [ new VSC(9212, 5.8004, 74.7816), new VSC(557, 0, 0), new VSC(286, 2.177, 149.563), new VSC(95, 3.84, 73.3), new VSC(45, 4.88, 76.27), new VSC(20, 5.46, 1.48), new VSC(15, 0.88, 138.52), new VSC(14, 2.85, 148.08), new VSC(14, 5.07, 63.74), new VSC(10, 5, 224.34), new VSC(8, 6.27, 78.71) ];
GFX.g_B3UranusCoefficients = [ new VSC(268, 1.251, 74.782), new VSC(11, 3.14, 0), new VSC(6, 4.01, 149.56), new VSC(3, 5.78, 73.3) ];
GFX.g_B4UranusCoefficients = [ new VSC(6, 2.85, 74.78) ];
GFX.g_R0UranusCoefficients = [ new VSC(1921264848, 0, 0), new VSC(88784984, 5.60377527, 74.78159857), new VSC(3440836, 0.328361, 73.2971259), new VSC(2055653, 1.7829517, 149.5631971), new VSC(649322, 4.522473, 76.266071), new VSC(602248, 3.860038, 63.735898), new VSC(496404, 1.401399, 454.909367), new VSC(338526, 1.580027, 138.517497), new VSC(243508, 1.570866, 71.812653), new VSC(190522, 1.998094, 1.484473), new VSC(161858, 2.791379, 148.078724), new VSC(143706, 1.383686, 11.0457), new VSC(93192, 0.17437, 36.64856), new VSC(89806, 3.66105, 109.94569), new VSC(71424, 4.24509, 224.3448), new VSC(46677, 1.39977, 35.16409), new VSC(39026, 3.36235, 277.03499), new VSC(39010, 1.66971, 70.84945), new VSC(36755, 3.88649, 146.59425), new VSC(30349, 0.701, 151.04767), new VSC(29156, 3.18056, 77.75054), new VSC(25786, 3.78538, 85.8273), new VSC(25620, 5.25656, 380.12777), new VSC(22637, 0.72519, 529.69097), new VSC(20473, 2.7964, 70.32818), new VSC(20472, 1.55589, 202.2534), new VSC(17901, 0.55455, 2.96895), new VSC(15503, 5.35405, 38.13304), new VSC(14702, 4.90434, 108.46122), new VSC(12897, 2.62154, 111.43016), new VSC(12328, 5.96039, 127.4718), new VSC(11959, 1.75044, 984.60033), new VSC(11853, 0.99343, 52.6902), new VSC(11696, 3.29826, 3.93215), new VSC(11495, 0.43774, 65.22037), new VSC(10793, 1.42105, 213.2991), new VSC(9111, 4.9964, 62.2514), new VSC(8421, 5.2535, 222.8603), new VSC(8402, 5.0388, 415.5525), new VSC(7449, 0.7949, 351.8166), new VSC(7329, 3.9728, 183.2428), new VSC(6046, 5.6796, 78.7138), new VSC(5524, 3.115, 9.5612), new VSC(5445, 5.1058, 145.1098), new VSC(5238, 2.6296, 33.6796), new VSC(4079, 3.2206, 340.7709), new VSC(3919, 4.2502, 39.6175), new VSC(3802, 6.1099, 184.7273), new VSC(3781, 3.4584, 456.3938), new VSC(3687, 2.4872, 453.4249), new VSC(3102, 4.1403, 219.8914), new VSC(2963, 0.8298, 56.6224), new VSC(2942, 0.4239, 299.1264), new VSC(2940, 2.1464, 137.033), new VSC(2938, 3.6766, 140.002), new VSC(2865, 0.31, 12.5302), new VSC(2538, 4.8546, 131.4039), new VSC(2364, 0.4425, 554.07), new VSC(2183, 2.9404, 305.3462) ];
GFX.g_R1UranusCoefficients = [ new VSC(1479896, 3.6720571, 74.7815986), new VSC(71212, 6.22601, 63.7359), new VSC(68627, 6.13411, 149.5632), new VSC(24060, 3.14159, 0), new VSC(21468, 2.60177, 76.26607), new VSC(20857, 5.24625, 11.0457), new VSC(11405, 0.01848, 70.84945), new VSC(7497, 0.4236, 73.2971), new VSC(4244, 1.4169, 85.8273), new VSC(3927, 3.1551, 71.8127), new VSC(3578, 2.3116, 224.3448), new VSC(3506, 2.5835, 138.5175), new VSC(3229, 5.255, 3.9322), new VSC(3060, 0.1532, 1.4845), new VSC(2564, 0.9808, 148.0787), new VSC(2429, 3.9944, 52.6902), new VSC(1645, 2.6535, 127.4718), new VSC(1584, 1.4305, 78.7138), new VSC(1508, 5.06, 151.0477), new VSC(1490, 2.6756, 56.6224), new VSC(1413, 4.5746, 202.2534), new VSC(1403, 1.3699, 77.7505), new VSC(1228, 1.047, 62.2514), new VSC(1033, 0.2646, 131.4039), new VSC(992, 2.172, 65.22), new VSC(862, 5.055, 351.817), new VSC(744, 3.076, 35.164), new VSC(687, 2.499, 77.963), new VSC(647, 4.473, 70.328), new VSC(624, 0.863, 9.561), new VSC(604, 0.907, 984.6), new VSC(575, 3.231, 447.796), new VSC(562, 2.718, 462.023), new VSC(530, 5.917, 213.299), new VSC(528, 5.151, 2.969) ];
GFX.g_R2UranusCoefficients = [ new VSC(22440, 0.69953, 74.7816), new VSC(4727, 1.699, 63.7359), new VSC(1682, 4.6483, 70.8494), new VSC(1650, 3.0966, 11.0457), new VSC(1434, 3.5212, 149.5632), new VSC(770, 0, 0), new VSC(500, 6.172, 76.266), new VSC(461, 0.767, 3.932), new VSC(390, 4.496, 56.622), new VSC(390, 5.527, 85.827), new VSC(292, 0.204, 52.69), new VSC(287, 3.534, 73.297), new VSC(273, 3.847, 138.517), new VSC(220, 1.964, 131.404), new VSC(216, 0.848, 77.963), new VSC(205, 3.248, 78.714), new VSC(149, 4.898, 127.472), new VSC(129, 2.081, 3.181) ];
GFX.g_R3UranusCoefficients = [ new VSC(1164, 4.7345, 74.7816), new VSC(212, 3.343, 63.736), new VSC(196, 2.98, 70.849), new VSC(105, 0.958, 11.046), new VSC(73, 1, 149.56), new VSC(72, 0.03, 56.62), new VSC(55, 2.59, 3.93), new VSC(36, 5.65, 77.96), new VSC(34, 3.82, 76.27), new VSC(32, 3.6, 131.4) ];
GFX.g_R4UranusCoefficients = [ new VSC(53, 3.01, 74.78), new VSC(10, 1.91, 56.62) ];
GFX.g_L0VenusCoefficients = [ new VSC(317614667, 0, 0), new VSC(1353968, 5.5931332, 10213.2855462), new VSC(89892, 5.3065, 20426.57109), new VSC(5477, 4.4163, 7860.4194), new VSC(3456, 2.6996, 11790.6291), new VSC(2372, 2.9938, 3930.2097), new VSC(1664, 4.2502, 1577.3435), new VSC(1438, 4.1575, 9683.5946), new VSC(1317, 5.1867, 26.2983), new VSC(1201, 6.1536, 30639.8566), new VSC(769, 0.816, 9437.763), new VSC(761, 1.95, 529.691), new VSC(708, 1.065, 775.523), new VSC(585, 3.998, 191.448), new VSC(500, 4.123, 15720.839), new VSC(429, 3.586, 19367.189), new VSC(327, 5.677, 5507.553), new VSC(326, 4.591, 10404.734), new VSC(232, 3.163, 9153.904), new VSC(180, 4.653, 1109.379), new VSC(155, 5.57, 19651.048), new VSC(128, 4.226, 20.775), new VSC(128, 0.962, 5661.332), new VSC(106, 1.537, 801.821) ];
GFX.g_L1VenusCoefficients = [ new VSC(1021352943053, 0, 0), new VSC(95708, 2.46424, 10213.28555), new VSC(14445, 0.51625, 20426.57109), new VSC(213, 1.795, 30639.857), new VSC(174, 2.655, 26.298), new VSC(152, 6.106, 1577.344), new VSC(82, 5.7, 191.45), new VSC(70, 2.68, 9437.76), new VSC(52, 3.6, 775.52), new VSC(38, 1.03, 529.69), new VSC(30, 1.25, 5507.55), new VSC(25, 6.11, 10404.73) ];
GFX.g_L2VenusCoefficients = [ new VSC(54127, 0, 0), new VSC(3891, 0.3451, 10213.2855), new VSC(1338, 2.0201, 20426.5711), new VSC(24, 2.05, 26.3), new VSC(19, 3.54, 30639.86), new VSC(10, 3.97, 775.52), new VSC(7, 1.52, 1577.34), new VSC(6, 1, 191.45) ];
GFX.g_L3VenusCoefficients = [ new VSC(136, 4.804, 10213.286), new VSC(78, 3.67, 20426.57), new VSC(26, 0, 0) ];
GFX.g_L4VenusCoefficients = [ new VSC(114, 3.1416, 0), new VSC(3, 5.21, 20426.57), new VSC(2, 2.51, 10213.29) ];
GFX.g_L5VenusCoefficients = [ new VSC(1, 3.14, 0) ];
GFX.g_B0VenusCoefficients = [ new VSC(5923638, 0.2670278, 10213.2855462), new VSC(40108, 1.14737, 20426.57109), new VSC(32815, 3.14737, 0), new VSC(1011, 1.0895, 30639.8566), new VSC(149, 6.254, 18073.705), new VSC(138, 0.86, 1577.344), new VSC(130, 3.672, 9437.763), new VSC(120, 3.705, 2352.866), new VSC(108, 4.539, 22003.915) ];
GFX.g_B1VenusCoefficients = [ new VSC(513348, 1.803643, 10213.285546), new VSC(4380, 3.3862, 20426.5711), new VSC(199, 0, 0), new VSC(197, 2.53, 30639.857) ];
GFX.g_B2VenusCoefficients = [ new VSC(22378, 3.38509, 10213.28555), new VSC(282, 0, 0), new VSC(173, 5.256, 20426.571), new VSC(27, 3.87, 30639.86) ];
GFX.g_B3VenusCoefficients = [ new VSC(647, 4.992, 10213.286), new VSC(20, 3.14, 0), new VSC(6, 0.77, 20426.57), new VSC(3, 5.44, 30639.86) ];
GFX.g_B4VenusCoefficients = [ new VSC(14, 0.32, 10213.29) ];
GFX.g_R0VenusCoefficients = [ new VSC(72334821, 0, 0), new VSC(489824, 4.021518, 10213.285546), new VSC(1658, 4.9021, 20426.5711), new VSC(1632, 2.8455, 7860.4194), new VSC(1378, 1.1285, 11790.6291), new VSC(498, 2.587, 9683.595), new VSC(374, 1.423, 3930.21), new VSC(264, 5.529, 9437.763), new VSC(237, 2.551, 15720.839), new VSC(222, 2.013, 19367.189), new VSC(126, 2.728, 1577.344), new VSC(119, 3.02, 10404.734) ];
GFX.g_R1VenusCoefficients = [ new VSC(34551, 0.89199, 10213.28555), new VSC(234, 1.772, 20426.571), new VSC(234, 3.142, 0) ];
GFX.g_R2VenusCoefficients = [ new VSC(1407, 5.0637, 10213.2855), new VSC(16, 5.47, 20426.57), new VSC(13, 0, 0) ];
GFX.g_R3VenusCoefficients = [ new VSC(50, 3.22, 10213.29) ];
GFX.g_R4VenusCoefficients = [ new VSC(1, 0.92, 10213.29) ];
wwtlib.AstroCalc._galDetails = new GMDS();
wwtlib.AstroCalc._jupDetails = new EPD();
wwtlib.AstroCalc._jupPhisical = new CAAPhysicalJupiterDetails();
wwtlib.AstroCalc._jDateLast = 0;
wwtlib.SimpleLineShader._frag = null;
wwtlib.SimpleLineShader._vert = null;
wwtlib.SimpleLineShader.vertLoc = 0;
wwtlib.SimpleLineShader.lineColorLoc = null;
wwtlib.SimpleLineShader.projMatLoc = null;
wwtlib.SimpleLineShader.mvMatLoc = null;
wwtlib.SimpleLineShader.initialized = false;
wwtlib.SimpleLineShader._prog = null;
wwtlib.LineShaderNormalDates._frag = null;
wwtlib.LineShaderNormalDates._vert = null;
wwtlib.LineShaderNormalDates.vertLoc = 0;
wwtlib.LineShaderNormalDates.colorLoc = 0;
wwtlib.LineShaderNormalDates.timeLoc = 0;
wwtlib.LineShaderNormalDates.lineColorLoc = null;
wwtlib.LineShaderNormalDates.projMatLoc = null;
wwtlib.LineShaderNormalDates.mvMatLoc = null;
wwtlib.LineShaderNormalDates.jNowLoc = null;
wwtlib.LineShaderNormalDates.decayLoc = null;
wwtlib.LineShaderNormalDates.initialized = false;
wwtlib.LineShaderNormalDates._prog = null;
wwtlib.TimeSeriesPointSpriteShader._frag = null;
wwtlib.TimeSeriesPointSpriteShader._vert = null;
wwtlib.TimeSeriesPointSpriteShader.vertLoc = 0;
wwtlib.TimeSeriesPointSpriteShader.colorLoc = 0;
wwtlib.TimeSeriesPointSpriteShader.pointSizeLoc = 0;
wwtlib.TimeSeriesPointSpriteShader.timeLoc = 0;
wwtlib.TimeSeriesPointSpriteShader.projMatLoc = null;
wwtlib.TimeSeriesPointSpriteShader.mvMatLoc = null;
wwtlib.TimeSeriesPointSpriteShader.sampLoc = null;
wwtlib.TimeSeriesPointSpriteShader.jNowLoc = null;
wwtlib.TimeSeriesPointSpriteShader.decayLoc = null;
wwtlib.TimeSeriesPointSpriteShader.lineColorLoc = null;
wwtlib.TimeSeriesPointSpriteShader.initialized = false;
wwtlib.TimeSeriesPointSpriteShader._prog = null;
wwtlib.TileShader._frag = null;
wwtlib.TileShader._vert = null;
wwtlib.TileShader.vertLoc = 0;
wwtlib.TileShader.textureLoc = 0;
wwtlib.TileShader.projMatLoc = null;
wwtlib.TileShader.mvMatLoc = null;
wwtlib.TileShader.sampLoc = null;
wwtlib.TileShader.initialized = false;
wwtlib.TileShader._prog = null;
wwtlib.TextShader._frag = null;
wwtlib.TextShader._vert = null;
wwtlib.TextShader.vertLoc = 0;
wwtlib.TextShader.textureLoc = 0;
wwtlib.TextShader.projMatLoc = null;
wwtlib.TextShader.mvMatLoc = null;
wwtlib.TextShader.sampLoc = null;
wwtlib.TextShader.initialized = false;
wwtlib.TextShader._prog = null;
wwtlib.Grids._equLineList = null;
wwtlib.Grids._equTextBatch = null;
wwtlib.Grids._eclipticCount = 0;
wwtlib.Grids._eclipticYear = 0;
wwtlib.Grids._monthDays = [ 31, 28.2421, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
wwtlib.Grids._monthNames = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ];
wwtlib.Grids._eclipticOverviewLineList = null;
wwtlib.Grids._eclipticTextYear = 0;
wwtlib.Grids._eclipOvTextBatch = null;
wwtlib.Grids._precLineList = null;
wwtlib.Grids._precTextBatch = null;
wwtlib.Grids._altAzLineList = null;
wwtlib.Grids._altAzTextBatch = null;
wwtlib.Grids._eclipticLineList = null;
wwtlib.Grids._eclipticTextBatch = null;
wwtlib.Grids._galLineList = null;
wwtlib.Grids._galTextBatch = null;
wwtlib.LayerManager._version = 0;
wwtlib.LayerManager._tourLayers = false;
wwtlib.LayerManager._layerMaps = {};
wwtlib.LayerManager._layerMapsTours = {};
wwtlib.LayerManager._allMaps = {};
wwtlib.LayerManager._allMapsTours = {};
wwtlib.LayerManager._currentMap = 'Earth';
wwtlib.LayerManager._layerList = {};
wwtlib.LayerManager._layerListTours = {};
(function () {
    wwtlib.LayerManager.initLayers();
})();
wwtlib.LayerUI._type = null;
wwtlib.Orbit._initBegun = false;
wwtlib.TimeSeriesLayer._circleTexture$1 = null;
wwtlib.Planets._planetTextures = null;
wwtlib.Planets._planetScales = null;
wwtlib.Planets._planetDiameters = null;
wwtlib.Planets._planetTilts = null;
wwtlib.Planets._orbits = null;
wwtlib.Planets._planetDrawOrder = null;
wwtlib.Planets.highPercision = true;
wwtlib.Planets.showActualSize = wwtlib.Settings.get_active().get_actualPlanetScale();
wwtlib.Planets.RC = (Math.PI / 180);
wwtlib.Planets.planetOrbitalYears = null;
wwtlib.Planets._planet3dLocations = null;
wwtlib.Planets.planetRotations = null;
wwtlib.Planets.planetColors = null;
wwtlib.Planets.planetRotationPeriod = null;
wwtlib.Planets._jNow = 0;
wwtlib.Planets._eclipticTilt = null;
wwtlib.Planets._lastPlanetCenterID = -2;
wwtlib.Planets._orbitalSampleRate = 256;
wwtlib.Planets._obliquity = 23.5 * wwtlib.Planets.RC;
wwtlib.Planets._drawOrder = {};
wwtlib.Planets._lastUpdate = new Date();
wwtlib.Planets._ringsTriangleLists = new Array(2);
wwtlib.Planets._ringImage = null;
wwtlib.Planets._planetLocations = null;
wwtlib.RenderContext.back = 0;
wwtlib.RenderTriangle.width = 1024;
wwtlib.RenderTriangle.height = 768;
wwtlib.RenderTriangle._contractionInPixels = -0.5;
wwtlib.RenderTriangle.trianglesRendered = 0;
wwtlib.RenderTriangle.trianglesCulled = 0;
wwtlib.RenderTriangle.renderingOn = true;
wwtlib.RenderTriangle._factor = 1;
wwtlib.RenderTriangle.cullInside = true;
wwtlib.RenderTriangle._hw = 0;
wwtlib.RenderTriangle._qw = 0;
wwtlib.RenderTriangle._hh = 0;
wwtlib.RenderTriangle._qh = 0;
wwtlib.Settings._active = null;
wwtlib.Settings.tourSettings = null;
wwtlib.GlyphCache._caches = {};
wwtlib.GlyphCache._allGlyphs = '';
wwtlib.SpaceTimeController.last = Date.get_now();
wwtlib.SpaceTimeController._offset = 0;
wwtlib.SpaceTimeController._now = Date.get_now();
wwtlib.SpaceTimeController._syncToClock = true;
wwtlib.SpaceTimeController._timeRate = 1;
wwtlib.SpaceTimeController._location = null;
wwtlib.SpaceTimeController._altitude = 0;
wwtlib.Tile.currentRenderGeneration = 0;
wwtlib.Tile.tileTargetX = -1;
wwtlib.Tile.tileTargetY = -1;
wwtlib.Tile.tileTargetLevel = -1;
wwtlib.Tile.tilesInView = 0;
wwtlib.Tile.trianglesRendered = 0;
wwtlib.Tile.tilesTouched = 0;
wwtlib.Tile.frustumList = null;
wwtlib.Tile.prepDevice = null;
wwtlib.Tile.uvMultiple = 256;
wwtlib.Tile.callCount = 0;
wwtlib.Tile.useAccomidation = true;
wwtlib.Tile.demEnabled = false;
wwtlib.Tile.maxLevel = 20;
wwtlib.Tile.meshComplexity = 50;
wwtlib.Tile.imageQuality = 50;
wwtlib.Tile.lastDeepestLevel = 0;
wwtlib.Tile.deepestLevel = 0;
wwtlib.Tile.RC = (3.1415927 / 180);
wwtlib._tileCache._queue = {};
wwtlib._tileCache._tiles = {};
wwtlib._tileCache.openThreads = 8;
wwtlib._tileCache.readyToRenderCount = 0;
wwtlib._tileCache.maxTileCacheSize = 800;
wwtlib._tileCache.maxReadyToRenderSize = 200;
wwtlib._tileCache.accessID = 0;
wwtlib._tileCache._maxTotalToPurge = 0;
wwtlib.ToastTile.slashIndexBuffer = new Array(64);
wwtlib.ToastTile.backSlashIndexBuffer = new Array(64);
wwtlib.ToastTile.rootIndexBuffer = new Array(4);
wwtlib.ToastTile._slashXIndex$1 = null;
wwtlib.ToastTile._slashYIndex$1 = null;
wwtlib.ToastTile._backslashXIndex$1 = null;
wwtlib.ToastTile._backslashYIndex$1 = null;
wwtlib.Overlay.clipboardFormat = 'WorldWideTelescope.Overlay';
wwtlib.Overlay.nextId = 11231;
wwtlib.Overlay.RC = 3.1415927 / 180;
wwtlib.TourPlayer._playing = false;
wwtlib.TourPlayer.__tourEnded = null;
wwtlib.TourPlayer._switchedToFullScreen = false;
wwtlib.TourPlayer.noRestoreUIOnStop = false;
wwtlib.TourStop.clipboardFormat = 'WorldWideTelescope.Slide';
wwtlib.UiTools.kilometersPerAu = 149598000;
wwtlib.UiTools.auPerParsec = 206264.806;
wwtlib.UiTools.auPerLightYear = 63239.6717;
wwtlib.UiTools.ssmUnitConversion = 370;
wwtlib.Guid._nextId = 11232;
wwtlib.VizLayer.earthRadius = 6371000;
wwtlib.WWTControl.singleton = null;
wwtlib.WWTControl.imageSets = [];
wwtlib.WWTControl.exploreRoot = new wwtlib.Folder();
wwtlib.WWTControl.startLat = 0;
wwtlib.WWTControl.startLng = 0;
wwtlib.WWTControl.startZoom = 360;
wwtlib.WWTControl.startMode = 'Sky';
wwtlib.WWTControl.imageSetName = '';
wwtlib.WWTControl.showDataLayers = false;
wwtlib.WWTControl._renderNeeded = false;
wwtlib.WWTControl.constellationsFigures = null;
wwtlib.WWTControl.constellationsBoundries = null;
wwtlib.WWTControl.scriptInterface = null;
(function () {
    wwtlib.WWTControl.singleton = new wwtlib.WWTControl();
    wwtlib.WWTControl.singleton.renderContext = new wwtlib.RenderContext();
    wwtlib.SpaceTimeController.last = Date.get_now();
    wwtlib.SpaceTimeController.updateClock();
})();
wwtlib.Constellations._webFileConstNames = null;
wwtlib.Constellations.RC = 0.017453292519943;
wwtlib.Constellations._maxSeperation = 0.745;
wwtlib.Constellations.containment = wwtlib.Constellations.create('Constellations', 'http://www.worldwidetelescope.org/data/constellations.txt', true, true, true);
wwtlib.Constellations._constToDraw = '';
wwtlib.Constellations.selectedSegment = null;
wwtlib.Constellations._namesBatch = null;
wwtlib.Constellations._artFile = null;
wwtlib.Constellations.artwork = null;
wwtlib.Constellations.boundries = null;
wwtlib.Constellations.fullNames = null;
wwtlib.Constellations.abbreviations = null;
wwtlib.Constellations.constellationCentroids = null;
wwtlib.Constellations.bitIDs = null;
(function () {
    var url = 'http://www.worldwidetelescope.org/wwtweb/catalog.aspx?q=ConstellationNamePositions_EN';
    wwtlib.Constellations._webFileConstNames = new wwtlib.WebFile(url);
    wwtlib.Constellations._webFileConstNames.onStateChange = wwtlib.Constellations._loadNames;
    wwtlib.Constellations._webFileConstNames.send();
})();
wwtlib.ConstellationFilter.families = {};
wwtlib.Coordinates.RC = (3.1415927 / 180);
wwtlib.Coordinates.RCRA = (3.1415927 / 12);
wwtlib.Coordinates.radius = 1;
wwtlib.Coordinates._rotationMatrix = null;
wwtlib.Matrix3d._s_identity = null;
(function () {
    wwtlib.Matrix3d._s_identity = wwtlib.Matrix3d._createIdentity();
})();
wwtlib.FolderBrowser._downloading = false;
wwtlib.FolderBrowser._imagesLoaded = false;
wwtlib.FolderBrowser._imageLoadCount = 0;
wwtlib.FolderBrowser._bmpBackground = null;
wwtlib.FolderBrowser._bmpBackgroundHover = null;
wwtlib.FolderBrowser._bmpBackgroundWide = null;
wwtlib.FolderBrowser._bmpBackgroundWideHover = null;
wwtlib.FolderBrowser._bmpDropInsertMarker = null;
(function () {
    var canvas = document.getElementById('canvas');
})();
})();

//! This script was generated using Script# v0.7.4.0
